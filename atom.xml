<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">latte Studio</title>
    <subtitle type="html">latteStudio</subtitle>
    <updated>2021-03-09T16:38:17&#43;08:00</updated>
    <id>https://latteStudio.github.io/</id>
    <link rel="alternate" type="text/html" href="https://latteStudio.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://latteStudio.github.io/atom.xml" />
    <author>
            <name>latteStudio</name>
            <uri>https://latteStudio.github.io/</uri>
            
                <email>boogies@163.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.79.1">Hugo</generator>
        <entry>
            <title type="text">go基础语法之map</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8Bmap/" />
            <id>https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8Bmap/</id>
            <updated>2021-03-09T13:32:49&#43;08:00</updated>
            <published>2020-12-29T10:20:26&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">map定义 go中，提供映射关系的容器为map，内部用hash表实现； 何为map map……</summary>
            
                <content type="html">&lt;h1 id=&#34;map定义&#34;&gt;map定义&lt;/h1&gt;
&lt;p&gt;go中，提供映射关系的容器为map，内部用hash表实现；&lt;/p&gt;
&lt;h2 id=&#34;何为map&#34;&gt;何为map&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;map是一种无序的基于k-v的数据结构，go中的map是引用类型，必须先初始化才能使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map类型的变量，声明后：初始值为nil，使用make函数来分配内存，才可使用，（否则会报错&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;声明语法&#34;&gt;声明语法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keyType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valueType&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// keyType键的类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// valueType值的类型
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 只声明一个map变量m1，但并没初始化，其没有分配任何内存，&amp;#34;值&amp;#34;等于nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
	
	&lt;span class=&#34;c1&#34;&gt;// 此时使用会报错：panic: assignment to entry in nil map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;assignment&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;goroutine&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;running&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xb9&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;初始化语法&#34;&gt;初始化语法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keytype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valuetype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// cap指定了map的容量，非必须，但应该初始化时，就预估好容量
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;初始化分配内存：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 只声明一个map变量m1，但并没初始化，其没有分配任何内存，&amp;#34;值&amp;#34;等于nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
	&lt;span class=&#34;c1&#34;&gt;// m1[&amp;#34;wang&amp;#34;] = 24
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// make函数，为m1初始化，给其分配内存，不再等于nil，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;map基础使用&#34;&gt;map基础使用&lt;/h1&gt;
&lt;h2 id=&#34;值填充&#34;&gt;值填充&lt;/h2&gt;
&lt;p&gt;1，定义后填充值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// map使用
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;scoreMap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;scoreMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;scoreMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 		&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scoreMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scoreMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;type of scoreMap:%T\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoreMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoreMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2，声明时，就填充值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 声明时，即赋值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;userInfo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;s&#34;&gt;&amp;#34;Passwd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Passwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;判断某key是否存在&#34;&gt;判断某key是否存在&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 判断map中某键是否存在
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// value, ok := map[key]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// value和ok可自定义，但一般为它们，见明知意，key为要判断的key
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;99&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang is exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang is no exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;haha is exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;haha is not exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exist&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;haha&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;map的遍历&#34;&gt;map的遍历&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;遍历和添加键值对时的顺序不无关，map是无序的&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;// 遍历map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;zhou&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 遍历键和值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 只遍历key
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 只遍历value
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;zhou&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; 
&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;   
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;     
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;    
&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt;    
&lt;span class=&#34;nx&#34;&gt;zhou&lt;/span&gt;  
&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;delete删除键值&#34;&gt;delete删除键值&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;li&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;

	&lt;span class=&#34;nb&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;	

&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;nx&#34;&gt;lin&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;按照指定顺序遍历map&#34;&gt;按照指定顺序遍历map&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;sort&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 使得无序存放的map，按照顺序输出，思路：将map的所有key取出放在一个切片中，利用排序函数对切片进行排序，然后遍历切片，根据切片中排序好的key，打印的也是排序好后的map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UnixNano&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 初始化随机数种子
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 声明并初始化一个容量为20的map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 先根据生成的随机字符串，组成一组无序的，map键值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stu%02d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 生成stu开头的字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Intn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

		&lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 向map中填入10个键值对
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;这是无序的&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;这是排序后&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 取出map中的key，放入一个切片中
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 对切片利用sort函数，进行排序
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 根据排序后的切片，依次打印，进而打印出有序的map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scoreTable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;nx&#34;&gt;这是无序的&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu01&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu02&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu04&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu08&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu05&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu06&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu00&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu07&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu03&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu09&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;这是排序后&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu00&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu01&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu02&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu03&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu04&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu05&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu06&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu07&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu08&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stu09&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;元素为map类型的切片&#34;&gt;元素为map类型的切片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 元素类型为map的切片：
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key: %v, value: %v \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 定义并初始化，一个切片，其每个元素都是一个map类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 初始化切片的第一个元素，即一个map，用make分配内存
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 向其中填充值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;18&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;passwd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;shuai&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapSlice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;key: %v, value: %v \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; 
&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; 
&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;passwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wang&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shuai&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;haha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;值为切片类型的map&#34;&gt;值为切片类型的map&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 键值对中，其值为切片类型，的map
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sliceMap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliceMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;after init&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 定义一个键，先判断该键是否在map中，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 如果不在，就将该键对应的值，初始化为一个，string类型的切片，长度为0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 之后，对该切片追加2个元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 最后，将键、和值，添加到map中，打印map即可
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;k1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;中国&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sliceMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;上海&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;杭州&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;sliceMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;k1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sliceMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;中国&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;上海&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;杭州&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;练习&#34;&gt;练习&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;写一个程序，统计一个字符串中每个单词出现的次数。比如：”how do you do”中how=1 do=2 you=1。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
   
   
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;how&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;you&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;观察下面代码，写出最终的打印结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 没整明白？
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%+v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;q1mi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%+v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%+v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;q1mi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LAPTOP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TPRJ6VQ&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MINGW64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;07&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go%E8%AF%AD%E6%B3%95/" term="go语法" label="go语法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go基础语法之切片</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%87%E7%89%87/" />
            <id>https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%88%87%E7%89%87/</id>
            <updated>2020-12-31T18:05:45&#43;08:00</updated>
            <published>2020-12-29T10:20:20&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go基础语法之切片</summary>
            
                <content type="html">&lt;h1 id=&#34;切片是什么&#34;&gt;切片是什么&lt;/h1&gt;
&lt;p&gt;go的数组，因定义后，长度固定，不可增删其中元素，不方便，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;go的切片slice，是一个具有相同类型元素的可变长序列的组合，是基于数组类型做的一层封装，灵活，支持自动扩容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;go切片是引用类型，内部结构：包括：地址、长度、容量，切片一般用于快速的操作一块数据集合&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;切片的定义&#34;&gt;切片的定义&lt;/h1&gt;
&lt;h2 id=&#34;语法与示例&#34;&gt;语法与示例&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;语法：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;T&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;name为变量名&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;T为元素类型&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;和数组不同之处&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;内没有指定长度&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;也没有&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;利用编译器推测长度&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 声明一个字符串切片，默认是空
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 声明一个整型切片并初始化，没赋值也是空
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 只有a等于nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 切片是引用类型，不支持直接比较，只能和nil比较
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;切片的长度和容量&#34;&gt;切片的长度和容量&lt;/h2&gt;
&lt;p&gt;切片有自己的长度、len（）函数可以求得；cap（）函数可以求切片的容量；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;


	&lt;span class=&#34;c1&#34;&gt;// 1，简单的切片表达式，s := a[low:high]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// s := a[low:high]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;s:%v len(s):%v cap(s):%v \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   
&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;切片表达式&#34;&gt;切片表达式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;切片表达式从字符串、数组、指向数组或切片的指针构造子字符串或切片、有2种变体；&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指定low和high2的索引界限值&lt;/li&gt;
&lt;li&gt;除了指定low和high还指定容量的完整形式，加上max&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1、简单切片表达式：&lt;/p&gt;
&lt;p&gt;切片底层就是数组、可以基于数组通过切片表达式，得到切片；&lt;strong&gt;切片表达式中的low和high表示一个索引范围，左包含、右不包含；&lt;strong&gt;例如：下面代码从数组a，选出1&amp;lt;=索引值&amp;lt;3的元素组成切片s，得到切片&lt;/strong&gt;长度=high-low&lt;/strong&gt;，容量等于得到的切片的底层数组的容量（但要从切的位置开始数，如下，从a的第一个下标开始数，容量是4）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;


	&lt;span class=&#34;c1&#34;&gt;// 1，简单的切片表达式，s := a[low:high]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// s := a[low:high]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;s:%v len(s):%v cap(s):%v \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   
&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;切片表达式的省略&#34;&gt;切片表达式的省略&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;
&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 2, 切片表达式的省略
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:]&lt;/span&gt;


	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    
	&lt;span class=&#34;c1&#34;&gt;// 3,对切片再切片时，high的上限边界是切片的容量，而不是长度！
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 在切片s 的基础上，再切出一个s4，s是[2 3]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// s4的high上限是s的容量，即4，而low是从0开始计算，即s的0是2，从这里开始计算，那么s的3，就对应a的5，所以s4就是一个5，长度为1，容量为1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// a  1 2 3 4 5
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// s    2 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// s4
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;s4:%v len(s4):%v cap(s4):%v \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 4，完整的切片表示式： a[low:high:max]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 	a := [5]int{1, 2, 3, 4, 5}
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// max-low就是该切片的cap容量，max的作用是限制切片的容量，没有max，默认会到数组的最后一个元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;t值%v t长度%v t容量%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;t值&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t长度2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t容量4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;make函数构造切片&#34;&gt;make函数构造切片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    	&lt;span class=&#34;c1&#34;&gt;// 5，使用make()函数构造切片，而不是基于数组去切
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 语法: make([]T ,size, cap) T 是元素类型，size是元素数量，cap是切片的容量，即元素数量的上限
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;slice1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 长度为2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 容量为10
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;切片本质&#34;&gt;切片本质&lt;/h2&gt;
&lt;p&gt;切片的本质：&lt;strong&gt;对数组进行的封装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;切片：包含3个信息：底层数组的指针、切片的长度len、切片的容量cap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201229182003684.png&#34; alt=&#34;image-20201229182003684&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;判断切片是否为空&#34;&gt;判断切片是否为空&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 6,判断切片是否为空，用len(s) == 0判断，而不是s == nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;slice2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;slice2 is null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   


&lt;span class=&#34;nx&#34;&gt;slice2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;切片不能直接比较&#34;&gt;切片不能直接比较&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 7, 切片不能直接比较，切片唯一能比较的是nil,容量和长度都是0的切片，不一定义等于nil，反过来，则成立
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// var slice3 []int // len=0 cap =0 slice3=nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// slice4 := []int{} // len=0 cap =0 ,slice4!=nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// slice5 := make([]int,0) // // len=0 cap =0 ,slice5!=nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;切片的赋值拷贝&#34;&gt;切片的赋值拷贝&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    	&lt;span class=&#34;c1&#34;&gt;// 8,切片的赋值拷贝，切片是引用类型，基于同一个数组的切片，一个改了，会影响其他切片
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;slice6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;slice7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice6&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 此时6个7公用一个底层数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;slice7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;233&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;233&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;233&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;切片遍历&#34;&gt;切片遍历&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 9,切片的遍历,和数组的遍历一致，支持for和for range遍历
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// for i := 0, i &amp;lt; len(slice6); i++ {
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 	fmt.Println(i, slice6[i] )
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// }
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;   
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;233&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;append方法给切片添加元素&#34;&gt;append方法给切片添加元素&lt;/h1&gt;
&lt;p&gt;根据打印结果，看出，从一个空值的切片开始算，默认扩容策略是1,2,4,8,16，前一次的2倍，其指针指向的内存地址，也会随之扩容，而变化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 切片的追加
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 通过var定义的空值切片，可以在append值直接追加，无需初始化
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 切片的自动扩容
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 从一个空值的切开开始算，默认扩容策略是1,2,4,8,16，前一次的2倍
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 每个切片都会指向一个底层数组，当底层数组不能够容纳新元素时，切片会根据”策略“进行扩容，此时切片指向的数组指针，就会发生改变
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v %d %d %p\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    
    
	&lt;span class=&#34;c1&#34;&gt;// 切片，一次追加多个元素
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;233&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc000012120&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc000012140&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc00000a460&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc00000a460&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc0000102c0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc0000102c0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc0000102c0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc0000102c0&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc000018100&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xc000018100&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;666&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;233&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;切片的扩容策略&#34;&gt;切片的扩容策略&lt;/h1&gt;
&lt;p&gt;对应源码：$GOROOT/src/runtime/slice.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;doublecap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doublecap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;old&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doublecap&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;// Check 0 &amp;lt; newcap to detect overflow
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// and prevent an infinite loop.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;// Set newcap to the requested cap when
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;// the newcap calculation overflowed.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;newcap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;copy函数复制切片&#34;&gt;copy函数复制切片&lt;/h1&gt;
&lt;p&gt;1、切片是引用型&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;



	&lt;span class=&#34;c1&#34;&gt;// copy复制切片demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 切片是引用型，a和b切片，指向的都是同一个内存地址，改一个，另一个也会变，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、对切片进行复制，使得对副本的修改，不影响原切片&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;



	&lt;span class=&#34;c1&#34;&gt;// copy复制切片demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nb&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 可以看到，修改b，对a无影响，因为b是a的另一份数据拷贝，指向不同内存地址
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;从切片中删除元素&#34;&gt;从切片中删除元素&lt;/h1&gt;
&lt;p&gt;go本身不支持切片，&lt;strong&gt;但利用append函数，可以实现切片中元素的删除&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 切片的元素删除demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 现删除5，其索引为2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 通过的格式：要删除a切片中，某个index的元素：a = append(a[:index],a[index+1:]...)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;练习&#34;&gt;练习&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请写出下面代码的输出结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
&lt;span class=&#34;c1&#34;&gt;// 测试如下：
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 原本长度5，容量10，前五个是默认的空字符串&amp;#34;&amp;#34;，后五个无
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 经过for循环，追加了10个字符串，长度变为15，容量因扩容策略，而翻倍，变成了20
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   
 &lt;span class=&#34;c1&#34;&gt;// 练习1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   
     &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;len of a:%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cap of a:%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;     &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cap&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.请使用内置的&lt;code&gt;sort&lt;/code&gt;包对数组&lt;code&gt;var a = [...]int{3, 7, 8, 9, 1}&lt;/code&gt;进行排序（附加题，自行查资料解答）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;s&#34;&gt;&amp;#34;sort&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   
 &lt;span class=&#34;c1&#34;&gt;// 练习2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;//升序
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   
 &lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Ints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:])&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;// 降序
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IntSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:])))&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;06&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go%E8%AF%AD%E6%B3%95/" term="go语法" label="go语法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go基础语法之数组</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/" />
            <id>https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/</id>
            <updated>2020-12-31T18:07:45&#43;08:00</updated>
            <published>2020-12-29T10:19:54&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go基础语法之数组</summary>
            
                <content type="html">&lt;h1 id=&#34;数组定义&#34;&gt;数组定义&lt;/h1&gt;
&lt;p&gt;数组：同一种数据类型的集合，&lt;strong&gt;go中，数组在声明时就必须确定、使用时可以修改数组中元素、但数组大小，即数组长度不可变；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 定义一个长度为3，元素数据类型为int的数组
var a [3]int

// 语法
var 数组变量名 [数组的长度]数组中元素类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;数组中，数组长度必须是常量，并长度属于数组类型的一部分，长度不同的数组，属于不同的数据类型，如[5]int 和[10]int属于不同类型；&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a [4]int
var b [6]int
a = b // 不可以将b赋值给不属于同类型的a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;数组，可以通过下标访问，下标从0开始，最后一个下标，len-1，访问越界时，会触发访问越界，panic；&lt;/p&gt;
&lt;h1 id=&#34;数组初始化&#34;&gt;数组初始化&lt;/h1&gt;
&lt;h2 id=&#34;方法1&#34;&gt;方法1&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 数组定义法1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 数组定义时，没指定元素值时，默认值为该类型的默认值，int是0，bool是false
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 第三个元素补0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cityArray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;北京&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;上海&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;杭州&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cityArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;北京&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;上海&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;杭州&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;方法2&#34;&gt;方法2&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 数组定义法1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cityArray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;北京&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;上海&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;杭州&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cityArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 数组定义法2，根据数组元素个数，推断数组长度，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;你好&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;杭州&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;type of array4:%T&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;type of array5:%T&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;北京&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;上海&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;杭州&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;你好&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;杭州&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;方法3&#34;&gt;方法3&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 数组定义法1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cityArray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;北京&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;上海&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;杭州&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cityArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 数组定义法2，根据数组元素个数，推断数组长度，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;你好&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;杭州&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;type of array4:%T&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;type of array5:%T&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 数组定义3，指定索引初始化数组中特定索引的值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;type of a: %T\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;                            &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;北京&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;上海&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;杭州&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;array5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;你好&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;杭州&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;数组的遍历&#34;&gt;数组的遍历&lt;/h1&gt;
&lt;p&gt;数组遍历有2种方式，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;for结合len，根据数组长度遍历&lt;/li&gt;
&lt;li&gt;for range，直接遍历数组&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 数组遍历
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// for结合len遍历
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v: %v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// for range 遍历
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;多维数组&#34;&gt;多维数组&lt;/h1&gt;
&lt;p&gt;go支持多维数组，即数组中的元素类型是数组，&lt;strong&gt;数组嵌套数组&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;二维数据定义&#34;&gt;二维数据定义&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;


	&lt;span class=&#34;c1&#34;&gt;// 多维数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;xixi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gogo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;haha&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;xixi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gogo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;java&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;二维数据遍历&#34;&gt;二维数据遍历&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 多维数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;xixi&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;gogo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;java&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	

	&lt;span class=&#34;c1&#34;&gt;// 多维数组遍历
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s\t&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;haha&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;xixi&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;gogo&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;java&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;python&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注：&lt;strong&gt;多维数组，只有最外层支持编译器推导数组长度&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	// 多维数组
	a := [...][2]string{
		{&amp;quot;haha&amp;quot;, &amp;quot;xixi&amp;quot;},
		{&amp;quot;gogo&amp;quot;, &amp;quot;java&amp;quot;},
		{&amp;quot;python&amp;quot;, &amp;quot;C&amp;quot;},
	}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;数组是值类型&#34;&gt;数组是值类型&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;数组是值类型、赋值和传参会复制整个数组，因此改变副本的值，不会改变本身的值！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与之相对的，是引用类型&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;modifyArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;666&lt;/span&gt;
    
    
    
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 

	&lt;span class=&#34;c1&#34;&gt;// 数组是值类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;

		&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nf&#34;&gt;modifyArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;666&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 可以看到，修改时，只是修改了数组的副本，
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组，支持== != 操作符，因为内存总是被初始化过的；&lt;/li&gt;
&lt;li&gt;[n]*T 表示指针数组，*[n]T表示数组指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;练习&#34;&gt;练习&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;求数组&lt;code&gt;[1, 3, 5, 7, 8]&lt;/code&gt;所有元素的和&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
   
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找出数组中和为指定值的两个元素的下标，比如从数组&lt;code&gt;[1, 3, 5, 7, 8]&lt;/code&gt;中找出和为8的两个元素的下标分别为&lt;code&gt;(0,3)&lt;/code&gt;和&lt;code&gt;(1,2)&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
             &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;(%v,%v)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;05&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go%E8%AF%AD%E6%B3%95/" term="go语法" label="go语法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go基础语法之流程控制</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/" />
            <id>https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
            <updated>2020-12-31T18:05:07&#43;08:00</updated>
            <published>2020-12-28T17:58:36&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go基础语法之流程控制</summary>
            
                <content type="html">&lt;h1 id=&#34;if-else&#34;&gt;if-else&lt;/h1&gt;
&lt;h2 id=&#34;if语法&#34;&gt;if语法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expr1&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;｛&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 表达式的左括号，一定要在上一行的最后，否则会触发编译错误
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;分支1&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;｝&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expr2&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;｛&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;分支2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;｝&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expr3&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;｛&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;分支3&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;｝&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// else if和 else都是可选
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;demo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ifDemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;88&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;not bad&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bu za di&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;ifDemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bad&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;编译错误demo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ifDemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;88&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt; 
	&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 要求放在上一行if表达式的后面
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;not bad&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bu za di&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;ifDemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;build&lt;/span&gt;    
&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;newline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clause&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;if特殊语法&#34;&gt;if特殊语法&lt;/h2&gt;
&lt;p&gt;在if的表达式之前，加一个执行语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ifDemo2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	
&lt;span class=&#34;c1&#34;&gt;// 把score的表达式放入了if，判断式的前面
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;not bad&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bu za di&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//ifDemo1()
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nf&#34;&gt;ifDemo2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bu&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;za&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;di&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;for&#34;&gt;for&lt;/h1&gt;
&lt;p&gt;go中，所有循环，都可以用for实现&lt;/p&gt;
&lt;h2 id=&#34;for语法&#34;&gt;for语法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;初始语句&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;条件表达式&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;结束条件&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;｛&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;循环体语句&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;｝&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;fordemo1：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fordemo1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;fordemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;fordemo2:省略初始语句放在其他位置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fordemo1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;fordemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;fordemo3:省略初始语句，和结束条件，放在其他位置；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fordemo1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;fordemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;fordemo4:无限循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;循环体&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;for，通过break，goto，return，panic，强制退出循环&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;for-range键值循环&#34;&gt;for-range键值循环&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;go中，通过for range，遍历数组、切片、字符串、map、通道channel，for range遍历后返回值特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组、切片、字符串返回索引和值；&lt;/li&gt;
&lt;li&gt;map返回键和值；&lt;/li&gt;
&lt;li&gt;通道channel返回通道内的值；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for-range：demo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;



&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%c \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 接收索引和字符
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;switch-case&#34;&gt;switch-case&lt;/h1&gt;
&lt;p&gt;demo1：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;finger&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;finger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;大拇指&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;食指&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;中指&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;无名指&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;小拇指&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;输入无效&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;中指&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;demo2: case比对的值，可以跟有多个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;奇数&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;偶数&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;自己看&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;奇数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;demo3: case后跟表达式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 此时switch后，不需要跟变量了，每个case后会跟包含变量的表达式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;not bad&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bad&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;good&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;demo4: fallthrough语法，可以执行满足条件的case的下一个case，为了兼容c语言中的case设计；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;fallthrough&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// 输出good后，会输出下一个not bad
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;not bad&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bad&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;good&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bad&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;goto&#34;&gt;goto&lt;/h1&gt;
&lt;p&gt;goto语句，通过标签，进行代码之间的无条件跳转；也可方便简化代码&lt;/p&gt;
&lt;p&gt;1，跳出双层for循环：（没用goto&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// goto demo1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakFlag&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;breakFlag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 先跳出内层循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v-%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakFlag&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 再根据内层循环设置的标记位，跳出外层循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2，简化代码：（用了goto&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// goto demo2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakTag&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 直接跳转到2个for循环之外的设置的标记位：breakTag，一次跳出2个循环
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v-%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;breakTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;结束for循环&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;	

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;结束for循环&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;break跳出本层循环&#34;&gt;break跳出本层循环&lt;/h1&gt;
&lt;p&gt;break可以结束for、switch、select的代码块：&lt;/p&gt;
&lt;p&gt;break还可以在语句后加标签，表示退出某个标签对应的代码块：&lt;/p&gt;
&lt;p&gt;标签必须定义在对应的for，switch，select的代码块上：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;借助标签，跳出2层循环&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// break demo1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;breakdemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;breakdemo1&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v-%v&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;没有标签，只能跳出一层循环&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// break demo1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v-%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;continue跳出本次循环继续本层的下次循环&#34;&gt;continue跳出本次循环继续本层的下次循环&lt;/h1&gt;
&lt;p&gt;continue语句，结束本次循环，进入本层循环的下一次循环；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;仅仅在for循环内部使用&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;continue语句后加标签，表示开始标签对应的循环&lt;/p&gt;
&lt;p&gt;借助标签，可以跨越2层循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// continue demo1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;forloop1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;forloop1&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v-%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;避开了2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;没有借助标签，只能跳出一层循环，只跳出了本层循环的本次循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// continue demo1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt; 
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v-%v\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


    

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;只避开了2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;练习题&#34;&gt;练习题&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编写代码打印9*9乘法表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
   
&lt;span class=&#34;c1&#34;&gt;// 9x9 乘法表打印 
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v * %v = %v\t&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
     &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_controll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;28&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;49&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;56&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;18&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;27&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;45&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;54&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;72&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;81&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go%E8%AF%AD%E6%B3%95/" term="go语法" label="go语法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go基础语法之运算符</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/" />
            <id>https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
            <updated>2020-12-28T17:56:56&#43;08:00</updated>
            <published>2020-12-25T15:13:22&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go基础语法之运算符</summary>
            
                <content type="html">&lt;h1 id=&#34;go运算符&#34;&gt;go运算符&lt;/h1&gt;
&lt;h2 id=&#34;算术运算&#34;&gt;算术运算&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;相加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;相减&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;乘法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;取余数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;关系运算&#34;&gt;关系运算&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;判断是否相等，相等返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;判断是否不等，不等返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;是否大于右边，是返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;是否大于等于右边，是返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;是否小于右边，是返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;是否小于等于右边，是返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;逻辑运算&#34;&gt;逻辑运算&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;逻辑与，两边都真，才为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;td&gt;逻辑或，两边有一个真，就为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;逻辑非，对表达式取反，表达式是真，就为假，反之亦然&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;位运算&#34;&gt;位运算&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;对整数型，在内存中的二进制形式，进行操作&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;参与运算的两数，每个二进制位相与，（1与1才是1）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;参与运算的两数，每个二进制位相或，（有一个1，就是1）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;每个二进制位异或，2位不同结果是1,2位相同结果是0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;左移n位，就是乘以2的N次方（a&amp;lt;&amp;lt;b，a的每个二进制位左移b位，高位丢弃，低位补0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;右移n位，除以2的n次方(a&amp;gt;&amp;gt;b a的每个二进制位右移b位)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;赋值运算&#34;&gt;赋值运算&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;将右边的值，赋给左边&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;相加后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-+&lt;/td&gt;
&lt;td&gt;相减后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;相乘后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;相除后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;求余后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;左移后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;右移后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;=&lt;/td&gt;
&lt;td&gt;按位与后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|=&lt;/td&gt;
&lt;td&gt;按位或后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^=&lt;/td&gt;
&lt;td&gt;按位异或后赋值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;练习&#34;&gt;练习&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;有一堆数字，如果除了一个数字以外，其他数字都出现了两次，那么如何找到出现一次的数字？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原理：异或运算的三条特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何数与0异或，结果都是其本身；&lt;/li&gt;
&lt;li&gt;任何数与本身异或，结果都是0；&lt;/li&gt;
&lt;li&gt;异或运算，满足，交换律、结合律&lt;/li&gt;
&lt;li&gt;0与0异或，结果也是0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;demo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 异或运算的应用
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 应该找出的是9
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;^=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 第一次循环：n= a[0]^a[1]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 第二次循环：n= a[0]^a[1]^a[2]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 最后一次循环：n= a[0]^a[1]^a[2]...^a[10]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 根据异或运算的，交换律，结合律，所有出现2次的数据，先结合，结果是0，然后0与0异或还是0，最后剩一个只出现一次的数据，和0异或，是它本身，所以n最后的值，就是哪个出现了一次的数据，打印即可；
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go%E8%AF%AD%E6%B3%95/" term="go语法" label="go语法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go基础语法之基本数据类型</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" />
            <id>https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
            <updated>2020-12-28T16:31:07&#43;08:00</updated>
            <published>2020-12-25T15:13:14&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go基础语法之基本数据类型</summary>
            
                <content type="html">&lt;h1 id=&#34;基础数据类型&#34;&gt;基础数据类型&lt;/h1&gt;
&lt;p&gt;go语言中数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型&lt;/li&gt;
&lt;li&gt;浮点型&lt;/li&gt;
&lt;li&gt;布尔型&lt;/li&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;切片&lt;/li&gt;
&lt;li&gt;结构体&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;通道channel&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;整型&#34;&gt;整型&lt;/h2&gt;
&lt;p&gt;整型分2大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有符号整型:&lt;/p&gt;
&lt;p&gt;其中数字代表内存中一个该类型数据占几位，位越多，能表示的范围就越大；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int8&lt;/li&gt;
&lt;li&gt;int16：对应c语言的short&lt;/li&gt;
&lt;li&gt;int32&lt;/li&gt;
&lt;li&gt;int64：对应c语言中的long型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无符号位整型:&lt;/p&gt;
&lt;p&gt;无符号位的整型，因第一位不用充当符号位，即正数或负数，表示的访问为无符号数最大值砍半，然后均分在0的2侧；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uint8：即byte型，&lt;/li&gt;
&lt;li&gt;uint16&lt;/li&gt;
&lt;li&gt;uint32&lt;/li&gt;
&lt;li&gt;uint64&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201228134631420.png&#34; alt=&#34;image-20201228134631420&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;特殊整型&#34;&gt;特殊整型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unit：没有指明位数，在32位系统就是uint32，在64位系统就是uint64&lt;/li&gt;
&lt;li&gt;int，在32位系统就是int32，在64系统就是int64&lt;/li&gt;
&lt;li&gt;uintptr，无符号整型，存放一个指针；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，考虑到不同平台的差异，最后明确指定位数的整型数据；&lt;/p&gt;
&lt;h3 id=&#34;数字字面量语法&#34;&gt;数字字面量语法&lt;/h3&gt;
&lt;p&gt;go1.13版本引入，方便以二进制、八进制、十六进制定义数字；&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v := 0b00101101 表示二进制101101，相当于十进制45&lt;/li&gt;
&lt;li&gt;v := 0o377表示二进制377，十进制的255&lt;/li&gt;
&lt;li&gt;v :=0x1p-2表示十六进制的1除以2的平方，相当于十进制0.25&lt;/li&gt;
&lt;li&gt;使用_分隔数据
&lt;ul&gt;
&lt;li&gt;v := 123_456，v值就是123456&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;demo函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 十进制
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// 定义一个十进制数10
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 以十进制格式输出，还是10
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%b \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 将10以二进制格式输出，就是1010
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 二进制 以0开头
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;077&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%o \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 十六进制 以0x开头
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xff&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%x \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%X \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// %d 表示十进制格式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// %b 表示二进制格式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// %o 八进制而是
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// %x 十六进制小写格式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// %X 十六进制大写格式
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1010&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;77&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;ff&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;FF&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;浮点型&#34;&gt;浮点型&lt;/h2&gt;
&lt;p&gt;go支持2种浮点型，float32和float64；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;float32范围：3.4e38，使用常量定义：math.MaxFloat32&lt;/li&gt;
&lt;li&gt;float64范围：1.8e308，使用常量定义：math.MaxFloat64&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;demo:&lt;/p&gt;
&lt;p&gt;打印浮点数，%f是浮点数的格式占位符；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%f\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 默认是取小数点后6位
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%.2f\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// .2表示取小数点后2位
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.141593&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;3.14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;复数&#34;&gt;复数&lt;/h2&gt;
&lt;p&gt;complex64和complex128,复数分为实部和虚部，complex64的实部和虚部都是64位，complex32则都是32位；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 复数demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;complex64&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2i&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;complex128&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3i&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;布尔值&#34;&gt;布尔值&lt;/h2&gt;
&lt;p&gt;布尔型bool，只有ture和fasle2个值，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认是false&lt;/li&gt;
&lt;li&gt;go不允许将整型，强制类型转换为，布尔型&lt;/li&gt;
&lt;li&gt;布尔型无法参于数据运算，无法和其他类型进行转换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// bool demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isOk&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isOk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;字符串&#34;&gt;字符串&lt;/h2&gt;
&lt;p&gt;字符串是go语言中原生数据类型，go中字符串实现采用utf-8编码，&lt;strong&gt;所以go的字符串变量中可以填入“万国字符”&lt;/strong&gt;——中文、英文、日文都中，其格式为外部有双引号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;你好&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;字符串转义符&#34;&gt;字符串转义符&lt;/h3&gt;
&lt;p&gt;go中常用转义符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\r 回车符，跳到下一行的行首&lt;/li&gt;
&lt;li&gt;\n 换行符，跳到下一行的同列位置&lt;/li&gt;
&lt;li&gt;\t 制表符&lt;/li&gt;
&lt;li&gt;&#39;单引号&lt;/li&gt;
&lt;li&gt;&amp;quot;&amp;quot; 双引号&lt;/li&gt;
&lt;li&gt;\ 反斜杠&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;demo：打印windows下的文件路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 字符串demo，并转义
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;str := \&amp;#34;c:\\Code\\lesson01\\go.exe\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 打印时，像&amp;#34; 和 \ 这种特殊字符，需要前面加一个\进行转义
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c:\Code\lesson01\go.exe&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;多行字符串&#34;&gt;多行字符串&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 多行字符串
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;		line1
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;		line2 
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;		line3
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;	`&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;

                &lt;span class=&#34;nx&#34;&gt;line1&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;line2&lt;/span&gt;
                &lt;span class=&#34;nx&#34;&gt;line3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;字符串的常用操作&#34;&gt;字符串的常用操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;len(str)求长度&lt;/li&gt;
&lt;li&gt;+或fmt.Sprintf 拼接字符串&lt;/li&gt;
&lt;li&gt;strings.Split 分割&lt;/li&gt;
&lt;li&gt;strings.contains 判断是否包含&lt;/li&gt;
&lt;li&gt;strings.HasPrefix或strins.HasSuffix前缀或后缀判断&lt;/li&gt;
&lt;li&gt;strings.Index(),strings.LastIndex() 子串出现的位置，从前数，或从后数&lt;/li&gt;
&lt;li&gt;strings.Join(a[]string, sep string) join操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;byte和rune类型&#34;&gt;byte和rune类型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;组成字符串的每个元素：都叫做字符，如一个汉字、一个英文字母，一个日文、都是一个字符，注:不同字符所占据的字节是不同的;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过遍历字符串，可获得其中的字符元素、字符用单引号包裹；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a := &amp;quot;中&amp;quot;
var b := &amp;quot;Y&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;go的字符有以下2种：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uint8类型，或叫byte型，代表ascill码表的一个字符，&lt;/li&gt;
&lt;li&gt;rune类型，代表一个utf-8字符，**中文、日文、韩文、这种需要用到rune类型，rune本质是一个int32类型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;go使用rune类型处理unicode编码，更方便处理基于unicode的文件，&lt;strong&gt;若一个文件都是ascill字符，则可以使用byte类型做文本处理，更节省空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;demo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 遍历字符串demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello沙河&amp;#34;&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 当作byte处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v(%c)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 当作rune处理
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%v(%c)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// s这个字符串，由字母和中文组成，中文在utf-i编码中有3到4个字节组成，而第一个遍历方式，全部以一个byte看做一个字符遍历，显然会把一个汉字的从字节切开，然后导致乱码
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 第二种遍历方式，以rune类型遍历，自然就是每次遍历一个字符，即便多种字符混合也可正常遍历，支持万国码
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;108&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;108&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;230&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;æ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;178&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;²&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;153&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;230&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;æ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;178&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;²&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;179&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;³&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;108&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;108&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;111&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;27801&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;沙&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;27827&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;河&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;修改字符串&#34;&gt;修改字符串&lt;/h3&gt;
&lt;p&gt;字符串本质是一个byte数组，一个字符占据一个数组的下标，修改字符串步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先将其转换为[]rune适合utf-8编码的字符串，或[]byte，适合纯ascill字符组成的字符串！&lt;/li&gt;
&lt;li&gt;对字符串数据，中的字符元素，进行修改，&lt;strong&gt;利用数组下标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;完成后再转为string&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转换中，会重新分配内存，并复制字节数组&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;demo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 字符串修改demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;big&amp;#34;&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;bytes1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 先转为字符串数组bytes1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;bytes1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 对bytes1的0号元素，替换为p
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    				&lt;span class=&#34;c1&#34;&gt;// 注意赋值用等号= , 单个字符用&amp;#39;&amp;#39;单引号
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 再转回string类型
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;白萝卜&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;runes2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 包含汉字，用[]rune做类型转换
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;runes2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;红&amp;#39;&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;runes2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;pig&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;红萝卜&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;类型转换&#34;&gt;类型转换&lt;/h2&gt;
&lt;p&gt;go中，只有强制类型转换，没有隐式类型转换，只有2个类型数据，支持相互转换时，才可做类型转换；&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;​	T(表达式)：T是要转换的类型，表达式可是：变量、复杂算子、函数返回值等&lt;/p&gt;
&lt;p&gt;demo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 类型转换demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// math.Sqrt 函数接收的参数类型是float64类型，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 所以，需要对内部计算表达式的结果做float64类型的转换
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;练习&#34;&gt;练习&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编写代码分别定义一个整型、浮点型、布尔型、字符串型变量，使用&lt;code&gt;fmt.Printf()&lt;/code&gt;搭配&lt;code&gt;%T&lt;/code&gt;分别打印出上述变量的值和类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
&lt;span class=&#34;c1&#34;&gt;// test1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
 &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float32&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.66&lt;/span&gt;
 &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isOk&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
 &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;good good study&amp;#34;&lt;/span&gt;
   
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d, %T \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%.1f, %T \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isOk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%T \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isOk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%T \n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;6.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float32&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;good&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;good&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;study&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写代码统计出字符串&lt;code&gt;&amp;quot;hello沙河小王子&amp;quot;&lt;/code&gt;中汉字的数量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
&lt;span class=&#34;c1&#34;&gt;// test2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 先转换为rune数组，然后遍历数组的字符元素，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 遍历时，字符元素再转换为string类型，并利用len函数求其长度，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 若长度大于或等于3，则是汉字，计数值加1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello沙河小王子溜溜溜&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;numOfHanzi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;runes1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;rune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;runes1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;runes1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
         &lt;span class=&#34;nx&#34;&gt;numOfHanzi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;the num of hanzi is : %d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numOfHanzi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_data_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hanzi&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go%E8%AF%AD%E6%B3%95/" term="go语法" label="go语法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go基础语法之变量与常量</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/" />
            <id>https://latteStudio.github.io/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</id>
            <updated>2020-12-28T16:30:57&#43;08:00</updated>
            <published>2020-12-25T15:13:05&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go基础语法之变量与常量</summary>
            
                <content type="html">&lt;h1 id=&#34;标识符与关键字&#34;&gt;标识符与关键字&lt;/h1&gt;
&lt;h2 id=&#34;标识符&#34;&gt;标识符&lt;/h2&gt;
&lt;p&gt;​	&lt;em&gt;&lt;strong&gt;标识符&lt;/strong&gt;&lt;/em&gt;开发程序时定义的具有特定含义的词，如：变量名、常量名、函数名等...&lt;/p&gt;
&lt;p&gt;​	组成由：字母、数字、下划线&lt;code&gt;_&lt;/code&gt;组成，只能以字母和下划线&lt;code&gt;_&lt;/code&gt;开头&lt;/p&gt;
&lt;p&gt;​	例如：abc _123 a123&lt;/p&gt;
&lt;h2 id=&#34;关键字&#34;&gt;关键字&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;关键字&lt;/strong&gt;时编程语言中保留定义好的具有特定含义的字符，关键字和保留字都不可用作变量名；&lt;/p&gt;
&lt;h3 id=&#34;go的25个关键字&#34;&gt;go的25个关键字&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;	break        default      func         interface    select
    case         defer        go           map          struct
    chan         else         goto         package      switch
    const        fallthrough  if           range        type
    continue     for          import       return 		var
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;go的37个保留字&#34;&gt;go的37个保留字&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 		Constants:    true  false  iota  nil

        Types:    int  int8  int16  int32  int64  
                  uint  uint8  uint16  uint32  uint64  uintptr
                  float32  float64  complex128  complex64
                  bool  byte  rune  string  error

    	Functions:   make  len  cap  new  append  copy  close  delete
                	 complex  real  imag
               		 panic  recover	
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;变量&#34;&gt;变量&lt;/h1&gt;
&lt;h2 id=&#34;变量是什么&#34;&gt;变量是什么&lt;/h2&gt;
&lt;p&gt;​	程序中的数据，都以二进制方式，存储在内存的某个地址中，操作数据时，需要指明数据所在的内存地址，而内存地址的标识较为繁琐，因此给内存地址起个名字，就是变量名，变量名对应的就是内存地址；&lt;/p&gt;
&lt;h2 id=&#34;变量类型&#34;&gt;变量类型&lt;/h2&gt;
&lt;p&gt;​	变量的作用，存储数据，数据又分多种不同的类型，常见又：整型、浮点型、布尔型、字符型、字符串型；&lt;/p&gt;
&lt;p&gt;​	go中，每个变量都必须有一个类型，且变量必须先声明，再使用；&lt;/p&gt;
&lt;h2 id=&#34;变量声明&#34;&gt;变量声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;go变量声明后，才可使用；&lt;/li&gt;
&lt;li&gt;且，声明后必须使用；&lt;/li&gt;
&lt;li&gt;同一个作用域内，不可重复使用；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;标准声明&#34;&gt;标准声明&lt;/h3&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var 变量名 变量类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var name string
var age int
var isOk bool
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;批量声明&#34;&gt;批量声明&lt;/h3&gt;
&lt;p&gt;go支持一个关键字var，声明多个变量，简化代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var (
	a string
	b int
	c boo
	d float32
)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;变量的初始化&#34;&gt;变量的初始化&lt;/h3&gt;
&lt;p&gt;go在声明一个变量时，会自动对变量所在内存区进行初始化，&lt;strong&gt;每个变量的值会被初始化该类型的默认值&lt;/strong&gt;：如：整型和浮点型默认值是：0；字符串变量默认值是：空字符串；布尔型变量值默认值是：false；切片、函数、指针默认为nil；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;声明变量同时赋值；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;格式：
var 变量名 类型 = 值表达式
   
示例：
var name string = &amp;quot;wang&amp;quot;
var age int = 18
   
批量初始化：
var name,age = &amp;quot;wang&amp;quot;, 18
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类型推导；&lt;/p&gt;
&lt;p&gt;省略变量的类型时，编译器会根据=右边表达式推导变量的类型，完成初始化；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var name = &amp;quot;wang&amp;quot; 推导为string类型
var age  = 18 	  推导为int类型
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;短变量声明；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在函数内部，:=可以更简洁的初始化变量&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main
   
import (
 &amp;quot;fmt&amp;quot;
)
// 全局变量m，且使用了类型推导
var m = 100
   
func main () {
 n := 10
 m := 20 // 此处为局部变量m
 fmt.Println(m,n)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匿名变量；&lt;/p&gt;
&lt;p&gt;多重赋值时，想忽略某值，可以用&lt;strong&gt;匿名变量&lt;/strong&gt;anonymous variable，匿名变量用下划线&lt;code&gt;_&lt;/code&gt;表示&lt;/p&gt;
&lt;p&gt;匿名变量，不占用命令空间、不分配内存、&lt;strong&gt;匿名变量不存在重复声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wang&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;x=&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;y=&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;函数外，每个语句，需以关键字开头；var、const、func等；&lt;/li&gt;
&lt;li&gt;:= 不能在函数外使用；&lt;/li&gt;
&lt;li&gt;_ 多用于占位，表示想忽略的值；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常量&#34;&gt;常量&lt;/h1&gt;
&lt;p&gt;常量，即程序运行期间不会改变值的量，参数声明和变量一致，只需把var换为const，&lt;strong&gt;常量定义时必须赋值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;demo1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const pi = 3.14
const e = 2.7182
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;demo2:批量声明&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const (
	pi = 3.14
	e = 2.7
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;demo3:批量声明时，忽略值的常量，则和上面一行相同&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n2&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;demo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// j和i 同值
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// go build 后输出
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;iota&#34;&gt;iota&lt;/h2&gt;
&lt;p&gt;iota是go中常量的计数器，只能在常量的表达式中用；&lt;/p&gt;
&lt;p&gt;iota在const关键字出现时将被重置为0，const中每新增一行常量声明将使得iota计数加一，**iota可理解为const语句块中的行索引，**定义枚举时可用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt; 	&lt;span class=&#34;c1&#34;&gt;//0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;n2&lt;/span&gt; 			&lt;span class=&#34;c1&#34;&gt;//1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt;			&lt;span class=&#34;c1&#34;&gt;//2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;n4&lt;/span&gt; 			&lt;span class=&#34;c1&#34;&gt;//3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 根据规则，n2到n4没定义时默认和上一行保持相同，即都是iota，而iota每多一行常量定义，就+1，所以 n1 n2 n3 内
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;分别是&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;到&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// iota demo
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n2&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;iota示例&#34;&gt;iota示例&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;iota之间插入值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 100
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 2
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n4&lt;/span&gt; 			&lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
   
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;​	使用_ 跳过某些不需要的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt;	&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;	&lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;	
 &lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt;	
 &lt;span class=&#34;nx&#34;&gt;n4&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;//	fmt.Println(n2)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
   
   
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义数量级&lt;/p&gt;
&lt;p&gt;&amp;lt;&amp;lt; 表示对二进制数的左移操作，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;kb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;mb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;gb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// 0 赋值给_
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// kb 值表达式意思是：1的二进制表示，向左移动10位，即1变成了1后加10个0，即2的十次方，即1024，kb的大小
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// mb 表达式意思：1 的二进制表示，向左移动 20位，即1变成了1后加20个0，即2的二十次放，即mb的大小
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// gb 表达式意思：1 的二进制表示，向左移动 30位，即1变成了1后加30个0，即2的三十次方，即gb的大小
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;c1&#34;&gt;// fmt.Println(n1)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// //	fmt.Println(n2)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// fmt.Println(n3)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// fmt.Println(n4)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1048576&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1073741824&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一行中，使用多个iota&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;iota&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 同属于一行，2个表达式里的iota值一样，都是0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gocode&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;learngo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;basic_grammar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go%E8%AF%AD%E6%B3%95/" term="go语法" label="go语法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go依赖管理与go_module使用</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E4%B8%8Ego-module%E4%BD%BF%E7%94%A8/" />
            <id>https://latteStudio.github.io/posts/go%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E4%B8%8Ego-module%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-12-28T16:31:53&#43;08:00</updated>
            <published>2020-12-25T09:49:37&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go依赖管理与go_module使用</summary>
            
                <content type="html">&lt;h1 id=&#34;go依赖管理&#34;&gt;go依赖管理&lt;/h1&gt;
&lt;h2 id=&#34;为什么需要依赖管理&#34;&gt;为什么需要依赖管理&lt;/h2&gt;
&lt;p&gt;​	最初：go依赖的第三库都在GOPATH的目录下，会导致同一个库只能保存一个版本的代码，如果不同项目依赖同一个第三库的不同版本，如何解决？&lt;/p&gt;
&lt;h2 id=&#34;godep&#34;&gt;godep&lt;/h2&gt;
&lt;p&gt;​	go从1.5版本开始引入vener模式，如项目目录下有vender目录，那么go会优先使用vender内的包进行编译测试；&lt;/p&gt;
&lt;p&gt;​	godep是通过vender模式实现的go语言的第三方依赖管理工具，类似的有社区维护的包管理工具dep；&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;​	在命令行中安装godep工具；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225100618380.png&#34; alt=&#34;image-20201225100618380&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;基础命令&#34;&gt;基础命令&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;C:\Users\ten&amp;gt;godep
Godep is a tool for managing Go package dependencies.

Usage:

        godep command [arguments]

The commands are:

    save     list and copy dependencies into Godeps
    go       run the go tool with saved dependencies
    get      download and install packages with specified dependencies
    path     print GOPATH for dependency code
    restore  check out listed dependency versions in GOPATH
    update   update selected packages or the go version
    diff     shows the diff between current and previously saved set of dependencies
    version  show version info

Use &amp;quot;godep help [command]&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;godep使用&#34;&gt;godep使用&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# cmd切换其他盘符的命令：加个/d
C:\ISOs&amp;gt;cd /d D:\workstation\mycode\gocode\src\hello2 


&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在项目源码目录执行dodep save；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\hello2&amp;gt;godep save     
   
D:\workstation\mycode\gocode\src\hello2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后，会在项目目录下生成Godeps和vender目录；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225103840408.png&#34; alt=&#34;image-20201225103840408&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Godeps目录下有Godeps.json文件，记录了项目依赖的包信息；vender下是项目依赖包的源码文件；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225103908837.png&#34; alt=&#34;image-20201225103908837&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vender机制&#34;&gt;vender机制&lt;/h3&gt;
&lt;p&gt;​	go1.5后开始支持，控制了go编译时依赖包搜索路径的优先级；&lt;/p&gt;
&lt;p&gt;​	例如：查看某项目依赖包时，会先在项目根目录下的vender查看，没有就去就$GOPATH/src目录下找；&lt;/p&gt;
&lt;h3 id=&#34;godep开发流程&#34;&gt;godep开发流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;保证程序正常编译；&lt;/li&gt;
&lt;li&gt;执行godep save保存当前项目的所有第三方依赖的版本信息和源码；&lt;/li&gt;
&lt;li&gt;提交Godeps目录和vender目录到代码库；&lt;/li&gt;
&lt;li&gt;更新依赖包版本时，修改Godeps.json中对应项即可；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;go_module&#34;&gt;go_module&lt;/h2&gt;
&lt;p&gt;​	go1.11后推出的版本管理工具，1.13版本会成为默认管理工具；&lt;/p&gt;
&lt;h3 id=&#34;go111module&#34;&gt;go111module&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;启用go module先设置环境变量GO111MODULE，其有三个值：
&lt;ol&gt;
&lt;li&gt;off：禁用go module，编译时从GOPATH和vender下找包；&lt;/li&gt;
&lt;li&gt;on；启用go module，编译时忽略GOPATH和vender，只根据go.mod下载依赖；&lt;/li&gt;
&lt;li&gt;auto-默认值：当项目在$GOPATH/src外且项目根目录有go.mod文件时，开始go module模块支持；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;设置GO111MODULE=on后，即可使用go module管理依赖，不必非要在GOPATH中创建项目，使用go module管理依赖后，会再项目根目录生成go.mod和go.sum文件；&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;goproxy&#34;&gt;goproxy&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;unix:
export GOPROXY=https://goproxy.cn

windows:
go env -w GOPROXY=https://goproxy.cn,direct
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;go-mod命令&#34;&gt;go mod命令&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\hello2&amp;gt;go mod
Go mod provides access to operations on modules.

Note that support for modules is built into all the go 
commands,
not just &#39;go mod&#39;. For example, day-to-day adding, removing, upgrading,
and downgrading of dependencies should be done using &#39;go get&#39;.
See &#39;go help modules&#39; for an overview of module functionality.

Usage:

        go mod &amp;lt;command&amp;gt; [arguments]

The commands are:

        download    download modules to local cache    
        edit        edit go.mod from tools or scripts  
        graph       print module requirement graph     
        init        initialize new module in current directory
        tidy        add missing and remove unused modules
        vendor      make vendored copy of dependencies 
        verify      verify dependencies have expected content
        why         explain why packages or modules are needed

Use &amp;quot;go help mod &amp;lt;command&amp;gt;&amp;quot; for more information about 
a command.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gomod&#34;&gt;go.mod&lt;/h3&gt;
&lt;p&gt;go.mod文件记录了项目依赖的所有依赖信息，结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module github.com/Q1mi/studygo/blogger

go 1.12

require (
	github.com/DeanThompson/ginpprof v0.0.0-20190408063150-3be636683586
	github.com/gin-gonic/gin v1.4.0
	github.com/go-sql-driver/mysql v1.4.1
	github.com/jmoiron/sqlx v1.2.0
	github.com/satori/go.uuid v1.2.0
	google.golang.org/appengine v1.6.1 // indirect
)

#
module定义包名；
require定义依赖包和其版本；
indirect表示间接引用；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;依赖包的版本表示法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持版本号：go get &lt;a href=&#34;mailto:foo@v1.2.3&#34;&gt;foo@v1.2.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;支持git分支或tag：go get foo@master&lt;/li&gt;
&lt;li&gt;支持git提交哈希：go get foo@e3702bed2&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7
gopkg.in/vmihailenco/msgpack.v2 v2.9.1
gopkg.in/yaml.v2 &amp;lt;=v2.2.1
github.com/tatsushid/go-fastping v0.0.0-20160109021039-d7bb493dee3e
latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;replace:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;golang.org/x下的包无法访问，因此可以用go.mod中的replace替换为github上对应的库；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;replace (
	golang.org/x/crypto v0.0.0-20180820150726-614d502a4dac =&amp;gt; github.com/golang/crypto v0.0.0-20180820150726-614d502a4dac
	golang.org/x/net v0.0.0-20180821023952-922f4815f713 =&amp;gt; github.com/golang/net v0.0.0-20180826012351-8a410e7b638d
	golang.org/x/text v0.3.0 =&amp;gt; github.com/golang/text v0.3.0
)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;go-get&#34;&gt;go get&lt;/h3&gt;
&lt;p&gt;go get命令用来下载依赖包，可指定版本；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;go get -u会升级最新的次要版本或修定版本（x.y.z，z是修订版本号，y是次要版本号）&lt;/li&gt;
&lt;li&gt;go get -u=patch会升级到最新修订版&lt;/li&gt;
&lt;li&gt;go get package@version会升级到指定版本&lt;/li&gt;
&lt;li&gt;go mod download下载所有依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;整理依赖&#34;&gt;整理依赖&lt;/h3&gt;
&lt;p&gt;代码中删除依赖代码后，相关依赖库不会在go.mod中自动移除，使用go mod tidy命令可更新go.mod中依赖关系；&lt;/p&gt;
&lt;h3 id=&#34;go-mod-edit&#34;&gt;go mod edit&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;格式化go.mod文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go mod edit -fmt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;添加依赖项：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go mod edit -require=golang.org/x/text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;移除依赖项：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go mod edit -droprequire=golang.org/x/text
移除一个依赖
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;在项目中使用go-module&#34;&gt;在项目中使用go module&lt;/h2&gt;
&lt;h3 id=&#34;既有项目&#34;&gt;既有项目&lt;/h3&gt;
&lt;p&gt;对一个已经存在的项目启用go module&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目目录下执行go mod init，生成go.mod文件&lt;/li&gt;
&lt;li&gt;执行go get，查找当前项目依赖，并生成一个go.sum记录每个依赖库的版本和哈希值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;新项目&#34;&gt;新项目&lt;/h3&gt;
&lt;p&gt;创建一个新创建项目并启用go module&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;go mod init “项目名”，在当前项目目录下生成go.mod文件&lt;/li&gt;
&lt;li&gt;手动编辑go.mod中的require依赖，或执行go get自动发现，解决依赖；&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;go-module导入本地包&#34;&gt;go module导入本地包&lt;/h1&gt;
&lt;p&gt;go module是go1.11后官方推出的版本管理工具，go1.13后成为默认的依赖管理工具；&lt;/p&gt;
&lt;h2 id=&#34;同一个项目下&#34;&gt;同一个项目下&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;目录结构如下：在GOPATH目录的src目录下新建一个moduledemo目录；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;moduledemo
├── go.mod
├── main.go
└── mypackage
    └── mypackage.go
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vscode新建一个项目文件夹；在src目录下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225120639515.png&#34; alt=&#34;image-20201225120639515&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备mypackage/mypackage.go&lt;/p&gt;
&lt;p&gt;定义了一个new方法，其功能就是输出一行mypackage.New；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package mypackage
   
import &amp;quot;fmt&amp;quot;
   
func New(){
 fmt.Println(&amp;quot;mypackage.New&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225120816543.png&#34; alt=&#34;image-20201225120816543&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化go.mod文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\moduledemo&amp;gt;go mod init
go: creating new go.mod: module moduledemo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225121006786.png&#34; alt=&#34;image-20201225121006786&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑main.go&lt;/p&gt;
&lt;p&gt;import了fmt和module/mypackage包，并在main中调用了2个方法；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main
   
import (
 &amp;quot;fmt&amp;quot;
 &amp;quot;moduledemo/mypackage&amp;quot;
)
   
func main(){
 mypackage.New()
 fmt.Println(&amp;quot;main&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译当前项目&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\moduledemo&amp;gt;go build
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行测试：成功编译，并执行；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\moduledemo&amp;gt;moduledemo.exe
mypackage.New
main
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;不同项目下&#34;&gt;不同项目下&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;目录结构如下：2个项目下，都有go mod init初始化一个go.mod文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├── moduledemo2
│   ├── go.mod
│   └── main.go
└── mypackage
    ├── go.mod
    └── mypackage.go
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在GOPATH的src目录分别创建2个项目目录&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225143359784.png&#34; alt=&#34;image-20201225143359784&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;moduledemo2的文件内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# main.go文件；引入了fmt和mypackage包，然后在main函数中输出；
--------
package main
   
   
import (
 &amp;quot;fmt&amp;quot;
 &amp;quot;mypackage&amp;quot;
)
   
func main()  {
 mypackage.New()
 fmt.Println(&amp;quot;main&amp;quot;)
}
   
# go.mod文件；由于mypackage在本地，没有发布到远程的代码仓库，且不在moduledemo2的子目录，因此采用require指令引用，replace指令指明路径；
-------
module moduledemo2
   
go 1.14
   
require &amp;quot;mypackage&amp;quot; v0.0.0
replace &amp;quot;mypackage&amp;quot; =&amp;gt; &amp;quot;../mypackage&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mypackage的文件内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# package.go内容；定义了一个方法New()，可以输出一句话
package mypackage
   
import &amp;quot;fmt&amp;quot;
   
func New(){
 fmt.Println(&amp;quot;mypackage.New&amp;quot;)
}
   
# go.mod文件
module mypackage
   
go 1.14
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在moduledemo2下编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\moduledemo2&amp;gt;go build
   
D:\workstation\mycode\gocode\src\moduledemo2&amp;gt;moduledemo2.exe
mypackage.New
main
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;不同项目的示例2：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;2个项目的目录结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├── p1
│   ├── go.mod
│   └── main.go
└── p2
    ├── go.mod
    └── p2.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201225150609672.png&#34; alt=&#34;image-20201225150609672&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义p2项目&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义p2的go.mod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module github.com/ice-latte/p2 // 定义这个模块的名字，以github.com做顶级域名，可上传到github；引用名字就是该“github.com/ice-latte/p2”
      
go 1.14
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义p2的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package p2 // p2定义了一个方法输出一行文本，可被其他项目引用
      
import &amp;quot;fmt&amp;quot;
      
func New(){
  fmt.Println(&amp;quot;this is p2 new func&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义p1项目&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义p1的go.mod，引用了p2这个module&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module p1 // 定义这个模块的名字叫p1，也可以github.com/用户名做前缀，然后上传到github
      
go 1.14
      
require &amp;quot;github.com/ice-latte/p2&amp;quot; v0.0.0 // 定义依赖模块，模块名是github.com/ice-latte/p2，版本v0.0.0
      
replace &amp;quot;github.com/ice-latte/p2&amp;quot; =&amp;gt; &amp;quot;../p2&amp;quot; // 因p2模块并未上传到github上，还在本地，需要用replace执向其在本地的路径；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义p1的主函数，main方法中输出2个语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main
      
import ( // 引用了2个模块
  &amp;quot;fmt&amp;quot;
  &amp;quot;github.com/ice-latte/p2&amp;quot; // 该模块指向了本地的p2项目；
)
      
func main(){
  p2.New() // 调用了p2的new方法，
  fmt.Println(&amp;quot;this is p1 main&amp;quot;) // 调用了fmt的Println方法
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">go开发环境搭建</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/go%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" />
            <id>https://latteStudio.github.io/posts/go%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
            <updated>2020-12-28T16:31:15&#43;08:00</updated>
            <published>2020-12-24T14:51:47&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">go开发环境搭建</summary>
            
                <content type="html">&lt;h1 id=&#34;windows平台go开发环境搭建&#34;&gt;windows平台go开发环境搭建&lt;/h1&gt;
&lt;h2 id=&#34;安装go11413版本&#34;&gt;安装go1.14.13版本&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载go安装包：windows平台；https://golang.google.cn/dl/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下一步安装即可；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择一个安装路径；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224150134689.png&#34; alt=&#34;image-20201224150134689&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装过程中会自动添加GOPATH环境变量（但后面要删除并自定义）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224150421692.png&#34; alt=&#34;image-20201224150421692&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看go版本&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224150433711.png&#34; alt=&#34;image-20201224150433711&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;goroot与gopath&#34;&gt;GOROOT与GOPATH&lt;/h2&gt;
&lt;p&gt;GOROOT：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;go的安装路径，如上面安装到的d:\workstation\mysoftware\go\就是GOROOT&lt;/li&gt;
&lt;li&gt;类似于JAVA_HOME&lt;/li&gt;
&lt;li&gt;GOROOT下的bin目录要加到环境变量，方便在任何路径执行其下命令；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GOPATH：（go1.11版本后，不强制要求gopath了，利用go module，可以将go源代码放在任何位置）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;是将来存放写的go源代码的位置，需要自定义，&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;并在其下面创建3个子目录&lt;/strong&gt;：pkg bin src，其中src是存放源代码的目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建GOPATH目录，以及3个子目录&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bin是自己代码编译后的二进制文件；&lt;/li&gt;
&lt;li&gt;pkg是编译后的归档文件；&lt;/li&gt;
&lt;li&gt;src是源码文件；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224163548061.png&#34; alt=&#34;image-20201224163548061&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置GOPATH到全局系统变量中；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224163811859.png&#34; alt=&#34;image-20201224163811859&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将2个bin目录，配置到全局的系统变量PATH中；一个是go开发包的bin目录，包括一些编译工具等；一个是自己将来编译后的二进制程序，都需要配置到PATH中，方便执行命令时找到相应程序；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224163920583.png&#34; alt=&#34;image-20201224163920583&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;设置goproxy&#34;&gt;设置GOPROXY&lt;/h2&gt;
&lt;p&gt;默认的GOPROXY地址：GOPROXY=https://proxy.golang.org,direct ，国内的地址可以更换为goproxy.cn，goproxy.io&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
C:\Users\ten&amp;gt;go env -w GOPROXY=https://goproxy.cn,direct
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看go-环境变量&#34;&gt;查看go 环境变量&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;输入go&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;env即可&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GO111MODULE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOARCH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amd64&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOBIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOCACHE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go-build&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOENV&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Roaming&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOEXE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exe&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOHOSTARCH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amd64&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOHOSTOS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windows&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOINSECURE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GONOPROXY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GONOSUMDB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOOS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windows&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOPATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mycode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gocode&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOPRIVATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOPROXY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;goproxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;direct&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOROOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysoftware&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOSUMDB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;golang&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOTMPDIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOTOOLDIR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workstation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysoftware&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pkg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windows_amd64&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GCCGO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gccgo&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ar&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gcc&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CXX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;++&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOMOD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGO_CFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-O2&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGO_CPPFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGO_CXXFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-O2&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGO_FFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-O2&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CGO_LDFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-O2&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PKG_CONFIG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pkg-config&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;set &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GOGCCFLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-m64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-mthreads&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-fno-caret-diagnostics&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Qunused-arguments&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-fmessage-length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-fdebug-prefix-map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ten&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go-build519974818&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;go-build&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-gno-record-gcc-switches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;go开发ide&#34;&gt;go开发IDE&lt;/h1&gt;
&lt;p&gt;​	vscode加go插件，或jetbrains的Goland，这里采用vscode加相应插件；&lt;/p&gt;
&lt;h2 id=&#34;安装vscode&#34;&gt;安装vscode&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/Download&#34;&gt;https://code.visualstudio.com/Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到对应操作系统的安装包，这里是windows平台的，下一步安装法直接安装即可；&lt;/p&gt;
&lt;h2 id=&#34;安装中文扩展&#34;&gt;安装中文扩展&lt;/h2&gt;
&lt;h2 id=&#34;安装go扩展&#34;&gt;安装go扩展&lt;/h2&gt;
&lt;p&gt;​	在扩展中，所在Chinese和go，安装扩展，然后重启vscode即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224174436479.png&#34; alt=&#34;image-20201224174436479&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第一个go程序&#34;&gt;第一个go程序&lt;/h1&gt;
&lt;h2 id=&#34;go的项目结构&#34;&gt;go的项目结构&lt;/h2&gt;
&lt;p&gt;​	go语言开发时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源代码保存在$GOPATH/src目录下；&lt;/li&gt;
&lt;li&gt;go build编译、go install编译加移动、go get命令后；&lt;/li&gt;
&lt;li&gt;go get下载的第三方源码包放在$GOPATH/src目录下；&lt;/li&gt;
&lt;li&gt;产生的二进制可执行文件在$GOPATH/bin目录下；&lt;/li&gt;
&lt;li&gt;生成的中间文件在$GOPATH/pkg目录下；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用vcs如git管理项目时，只需要将$GOPATH/src目录下的源代码添加到git中管理即可；bin和pkg目录下不需要；&lt;/p&gt;
&lt;h3 id=&#34;个人项目结构&#34;&gt;个人项目结构&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;大体的项目结构：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在src目录下，分项目，项目下分模块存放源代码；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224175455313.png&#34; alt=&#34;image-20201224175455313&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;较为流行的项目结构：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	go通过引用包，组织代码文件，通常使用公司或个人的顶级域名做代码包的前缀，防止冲突；没有个人域名可以用github.com用户名充当包前缀&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224175541874.png&#34; alt=&#34;image-20201224175541874&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	wang和li在github上有studygo的项目，那么其包路径分别是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/wang/studygo&amp;quot;

import &amp;quot;github.com/li/studygo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;下载github上的包&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get github.com/jmoiron/sqlx

下载的包会到GOPATH路径下的src的路径，
具体为：src/github.com/jmoiron/sqlx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224180316768.png&#34; alt=&#34;image-20201224180316768&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;公司组织项目结构&#34;&gt;公司/组织项目结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224175045705.png&#34; alt=&#34;image-20201224175045705&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;文本编辑器写helloworld&#34;&gt;文本编辑器写helloworld&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入到GOPATH路径的src目录下；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建一个hello目录；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224165825667.png&#34; alt=&#34;image-20201224165825667&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在hello目录新建一个main.go;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224165911735.png&#34; alt=&#34;image-20201224165911735&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;
   
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
 &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在路径框中，输入cmd，然后回车，即在该路径下打开cmd窗口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;go build编译刚刚的main.go程序，默认生成与文件夹同名的exe文件；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224165949135.png&#34; alt=&#34;image-20201224165949135&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-o选项指定编译后的exe文件名；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224170111674.png&#34; alt=&#34;image-20201224170111674&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在非当前目录编译：（其他路径执行go build + 源码目录名，go会自动在GOPATH的src目录下，找到对应的源码目录名执行编译，编译后的exe文件在当前执行命令的路径）&lt;/p&gt;
&lt;p&gt;如下例子：会去src目录下找到hello目录，然后编译，生成的exe文件在当前d盘路径下；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224170320708.png&#34; alt=&#34;image-20201224170320708&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;vscode中写helloworld&#34;&gt;vscode中写helloworld&lt;/h2&gt;
&lt;h3 id=&#34;切换vscode的默认终端&#34;&gt;切换vscode的默认终端&lt;/h3&gt;
&lt;p&gt;如图：打开一个终端，并在长方框选择cmd，然后重启vscode即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224170728414.png&#34; alt=&#34;image-20201224170728414&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;go-install作用&#34;&gt;go install作用&lt;/h2&gt;
&lt;p&gt;​	go install分为2步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先编译为可执行文件；&lt;/li&gt;
&lt;li&gt;然后将可执行文件移动到GOPATH的bin目录下；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因GOPATH下的bin在环境变量中，此后，可在任意路径下执行编译后的可执行文件；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224171314216.png&#34; alt=&#34;image-20201224171314216&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;跨平台编译&#34;&gt;跨平台编译&lt;/h2&gt;
&lt;p&gt;​	默认情况下：go build编译后的可执行文件都是当前开发机的操作系统可执行的文件，一般需要在windows平台开发，编译出在linux服务器上执行的可执行文件；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;指定目标操作系统和处理器架构；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\hello&amp;gt;set CGO_ENABLED=0
# 禁用cgo，使用了cgo的代码，不支持跨平台编译；
D:\workstation\mycode\gocode\src\hello&amp;gt;SET GOOS=linux
   
D:\workstation\mycode\gocode\src\hello&amp;gt;SET GOARCH=amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\workstation\mycode\gocode\src\hello&amp;gt;go build
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行测试，成功；将编译后的二进制文件上传到linux系统中，加入执行权限；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224173338760.png&#34; alt=&#34;image-20201224173338760&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;跨平台编译示例：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mac下编译linux或windows的64位可执行程序；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CGO_ENABLED=0 GOOS=linux GOARCH=amd64 
go build
  
CGO_ENABLED=0 GOOS=windows GOARCH=amd64
go build
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;linux下编译mac或windows的64位可执行程序；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CGO_ENABLED=0 GOOS=darwin GOARCH=amd64
go build
  
CGO_ENALBED=0 GOOS=windows GOARCH=amd64 
go build
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;windows下编译mac的64位可执行程序；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET CGO_ENABLED=0
SET GOOS=darwin
SET GOARCH=amd64
go build
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;vscode再配置&#34;&gt;vscode再配置&lt;/h1&gt;
&lt;h2 id=&#34;配置goproxy&#34;&gt;配置GOPROXY&lt;/h2&gt;
&lt;p&gt;​	在vscode的cmd的终端中，输入一下命令，设置GOPROXY&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go env -w GOPROXY=https://goproxy.cn,direct
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装go开发工具包&#34;&gt;安装go开发工具包&lt;/h2&gt;
&lt;p&gt;1、windows系统按ctrl shift p，弹出窗口，并在其中搜索：go:install/update tools一项；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224182417055.png&#34; alt=&#34;image-20201224182417055&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、点击之后，在弹出的如下列表中，选中全部，点击确定，开始安装工具包；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224181947280.png&#34; alt=&#34;image-20201224181947280&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、安装成功的提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224182317014.png&#34; alt=&#34;image-20201224182317014&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置vscode自动保存&#34;&gt;配置vscode自动保存&lt;/h2&gt;
&lt;p&gt;文件-》首选项-》设置，选中afterdelay&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224182849217.png&#34; alt=&#34;image-20201224182849217&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置vscode代码片段快捷键&#34;&gt;配置vscode代码片段快捷键&lt;/h2&gt;
&lt;p&gt;windows系统按ctrl shift p，弹出创建输入snippets&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224183356203.png&#34; alt=&#34;image-20201224183356203&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后在弹出的列表中，选择go点击，弹出的go.json配置文件，按需将需要的快捷键定义其中，保存即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224184314207.png&#34; alt=&#34;image-20201224184314207&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224183422782.png&#34; alt=&#34;image-20201224183422782&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2个快捷键配置示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// &amp;quot;Print to console&amp;quot;: {
	// 	&amp;quot;prefix&amp;quot;: &amp;quot;log&amp;quot;,
	// 	&amp;quot;body&amp;quot;: [
	// 		&amp;quot;console.log(&#39;$1&#39;);&amp;quot;,
	// 		&amp;quot;$2&amp;quot;
	// 	],
	// 	&amp;quot;description&amp;quot;: &amp;quot;Log output to console&amp;quot;
	// }
	

	
		&amp;quot;println&amp;quot;:{
			&amp;quot;prefix&amp;quot;: &amp;quot;pln&amp;quot;,
			&amp;quot;body&amp;quot;:&amp;quot;fmt.Println($0)&amp;quot;,
			&amp;quot;description&amp;quot;: &amp;quot;println&amp;quot;
		},
		&amp;quot;printf&amp;quot;:{
			&amp;quot;prefix&amp;quot;: &amp;quot;plf&amp;quot;,
			&amp;quot;body&amp;quot;: &amp;quot;fmt.Printf(\&amp;quot;$0\&amp;quot;)&amp;quot;,
			&amp;quot;description&amp;quot;: &amp;quot;printf&amp;quot;
		}
	
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;测试补全快捷键：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建一个main.go文件，pln和plf会自动补全为完全的语句；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224183949033.png&#34; alt=&#34;image-20201224183949033&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201224183959605.png&#34; alt=&#34;image-20201224183959605&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%BC%80%E5%8F%91/" term="开发" label="开发" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/go/" term="go" label="go" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/go/" term="go" label="go" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">jenkins集成sonarqube代码审查</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/jenkins%E9%9B%86%E6%88%90sonarqube%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/" />
            <id>https://latteStudio.github.io/posts/jenkins%E9%9B%86%E6%88%90sonarqube%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/</id>
            <updated>2020-12-24T14:37:32&#43;08:00</updated>
            <published>2020-12-22T17:13:38&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">jenkins集成sonarqube代码审查</summary>
            
                <content type="html">&lt;h1 id=&#34;sonarqube简介&#34;&gt;sonarqube简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;what is sonarqube&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt;® is an automatic code review tool to detect bugs, vulnerabilities, and code smells in your code. It can integrate with your existing workflow to enable continuous code inspection across your project branches and pull requests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	sonarqube在devops的ci/cd流程中的位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gitlab负责代码的存储，分支管理等；&lt;/li&gt;
&lt;li&gt;jenkins负责代码的构建、打包等；&lt;/li&gt;
&lt;li&gt;sonarqube被jenkins调用，负责代码质量的检测；并生成代码质量报告给开发者，形成闭环，使得代码不断迭代；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222180220475.png&#34; alt=&#34;image-20201222180220475&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	sonarqube可以检查的代码质量有如下方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码的复杂度：复杂度过高难以理解；&lt;/li&gt;
&lt;li&gt;重复代码：&lt;/li&gt;
&lt;li&gt;单元测试统计：&lt;/li&gt;
&lt;li&gt;代码规则检查：&lt;/li&gt;
&lt;li&gt;注释率：&lt;/li&gt;
&lt;li&gt;潜在的bug：&lt;/li&gt;
&lt;li&gt;结构与设计：&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sonarqube部署&#34;&gt;sonarqube部署&lt;/h1&gt;
&lt;h2 id=&#34;sonarqube依赖环境部署&#34;&gt;sonarqube依赖环境部署&lt;/h2&gt;
&lt;p&gt;​	sonarqube依赖mysql数据库存储代码分析结果，需要java环境来运行；（但需要注意：sonarqube 7.x版本后不再支持mysql数据库，本实验采用sonarqube 6.7版本）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sonarqube6.7版本的3个主要依赖：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.sonarqube.org/6.7/Requirements.html&#34;&gt;https://docs.sonarqube.org/6.7/Requirements.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql需要5.6或5.7&lt;/li&gt;
&lt;li&gt;jdk需要jdk8版本&lt;/li&gt;
&lt;li&gt;内核参数设置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mysql安装&#34;&gt;mysql安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;配置mysql5.7的yum源&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装mysql5.7&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 src]# yum -y install mysql-community-server
[root@jenkins-1 src]# systemctl start mysqld
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到生成的临时密码，启动mysql5.7并连接测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 src]# grep &amp;quot;temp&amp;quot; /var/log/mysqld.log 
2020-12-22T10:45:40.852071Z 1 [Note] A temporary password is generated for root@localhost: bbwp9ytKy*q(
2020-12-22T10:45:43.300975Z 0 [Note] InnoDB: Creating shared tablespace for temporary tables
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行安全加固脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 src]# mysql_secure_installation
   
[root@jenkins-1 src]# mysql -uroot -p新密码
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改my.cnf中默认的数据库编码为utf-8，重启mysql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 src]# vim /etc/my.cnf
[mysqld]
collation-server = utf8_unicode_ci
init-connect=&#39;SET NAMES utf8&#39;
character-set-server = utf8
   
[root@jenkins-1 src]# systemctl restart mysqld
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建sonar数据库，供给sonarqube使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create database sonar default character set utf8 collate utf8_general_ci;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建sonar账户，授予对sonar库的所有权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; grant all on sonar.* to &#39;sonar&#39;@&#39;%&#39; identified by &#39;123456&#39;;
   
# 实验中：123456无法通过密码复杂度验证，需换个复杂的；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用sonar账户连接测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# mysql -usonar -p123456
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 4
Server version: 5.7.32 MySQL Community Server (GPL)
   
   
mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| sonar              |
+--------------------+
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;jdk安装&#34;&gt;jdk安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装openjdk1.8&lt;/li&gt;
&lt;li&gt;配置java_home环境变量&lt;/li&gt;
&lt;li&gt;此处采用jenkins同台机器，所以jdk环境已经存在&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;内核参数调整&#34;&gt;内核参数调整&lt;/h3&gt;
&lt;p&gt;参考：https://docs.sonarqube.org/6.7/Requirements.html#src-11634463_Requirements-Kernelparameters&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[root@jenkins-1 ~]# vim /etc/sysctl.conf 
vm.max_map_count=262144
fs.file-max=65536

[root@jenkins-1 ~]# vim /etc/security/limits.conf 
sonarqube	-	nofile	65536
sonarqube	-	nproc	2048

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装sonarqube&#34;&gt;安装sonarqube&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;sonarqube需要elasticsearch做代码的检索，且默认以普通用户启动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载sonarqube6.7版本的程序包；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-6.7.7.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解压并做软链接；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 src]# unzip sonarqube-6.7.7.zip 
   
[root@jenkins-1 src]# ln -sv /usr/local/src/sonarqube-6.7.7 /usr/local/sonar
‘/usr/local/sonar’ -&amp;gt; ‘/usr/local/src/sonarqube-6.7.7’
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建sonarqube用户，更改目录属主为sonarqube&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# useradd -s /bin/bash -m sonarqube
[root@jenkins-1 ~]# id sonarqube
uid=1000(sonarqube) gid=1000(sonarqube) groups=1000(sonarqube) 
   
[root@jenkins-1 src]# chown -R sonarqube.sonarqube /usr/local/src/sonarqube-6.7.7
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换为sonarqube用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 src]# su - sonarqube
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;并修改配置文件，配置mysql连接信息；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[sonarqube@jenkins-1 ~]$ vim /usr/local/sonar/conf/sonar.properties 
      
sonar.jdbc.username=sonar
sonar.jdbc.password=123456
      
sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;rewriteBatchedStatements=true&amp;amp;useConfigs=maxPerformance&amp;amp;useSSL=false
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改监听端口（可选）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sonar.web.host=0.0.0.0
      
      
sonar.web.port=9000
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以sonarqube用户身份，启动sonarqube&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[sonarqube@jenkins-1 ~]$ /usr/local/sonar/bin/linux-x86-64/sonar.sh start
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看日志，验证是否成功启动&lt;/p&gt;
&lt;p&gt;实验中：因内存不足，启动失败一次；调整内存后，重启启动成功；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# tailf /usr/local/sonar/logs/sonar.log 
Launching a JVM...
      
2020.12.22 19:07:03 INFO  app[][o.s.a.SchedulerImpl] Process[ce] is up
2020.12.22 19:07:03 INFO  app[][o.s.a.SchedulerImpl] SonarQube is up
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登陆web界面；默认用户名密码：admin/admin&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222190734210.png&#34; alt=&#34;image-20201222190734210&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装中文插件&lt;/p&gt;
&lt;p&gt;方法1：界面安装，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222191031455.png&#34; alt=&#34;image-20201222191031455&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法2：后台安装，直接将jar包下载到sonarqube的插件目录，然后重启即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[sonarqube@jenkins-1 plugins]$ cd /usr/local/sonar/extensions/plugins/
   
[sonarqube@jenkins-1 plugins]$ wget https://github.com/xuhuisheng/sonar-l10n-zh/releases/download/sonar-l10n-zh-plugin-1.11/sonar-l10n-zh-plugin-1.11.jar
   
[sonarqube@jenkins-1 plugins]$ /usr/local/sonar/bin/linux-x86-64/sonar.sh restart
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启sonarqube，确认已经更换到中文&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222191730490.png&#34; alt=&#34;image-20201222191730490&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加入到开机启动中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# tailf /etc/rc.local 
   
su - sonarqube -c &amp;quot;/usr/local/sonar/bin/linux-x86-64/sonar.sh start&amp;quot;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装其他插件：（sonarqube依靠插件实现对代码的扫描功能）如java、php、python、&lt;/p&gt;
&lt;p&gt;根据需要搜索，安装即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223142508638.png&#34; alt=&#34;image-20201223142508638&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装sonar-scanner&#34;&gt;安装sonar-scanner&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;sonarqube调用sonar-scanner对代码进行质量分析，&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装sonar-scanner-1&#34;&gt;安装sonar-scanner&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/&#34;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载sonar-scanner的包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1，下载，解压，做软链接
[root@jenkins-1 src]# wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip
unzip sonar-scanner-cli-4.0.0.1744-linux.zip 
ln -sv /usr/local/src/sonar-scanner-4.0.0.1744-linux/ /usr/local/sonar-scanner
   
2，进入解压后目录，修改配置文件，指明sonar服务器的地址和编码2项
cd /usr/local/sonar-scanner/
vim conf/sonar-scanner.properties 
#----- Default SonarQube server
sonar.host.url=http://localhost:9000
   
#----- Default source code encoding
sonar.sourceEncoding=UTF-8
   
   
3，配置sonar的命令到PATH变量中；
vim /etc/profile.d/sonar-scanner.sh
[root@jenkins-1 sonarqube-scanner]# cat /etc/profile.d/sonar-scanner.sh 
export PATH=/usr/local/sonar-scanner/bin:$PATH
source /etc/profile.d/sonar-scanner.sh
   
4，验证sonar-scanner命令，
sonar-scanner命令要在具有sonar-project.properties，和src目录的目录下直接执行即可开始扫描目录下代码，（一般情况）
[root@jenkins-1 sonarqube-scanner]# sonar-scanner -h
INFO: 
INFO: usage: sonar-scanner [options]
INFO: 
INFO: Options:
INFO:  -D,--define &amp;lt;arg&amp;gt;     Define property
INFO:  -h,--help             Display help information
INFO:  -v,--version          Display version information
INFO:  -X,--debug            Produce execution debug output
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;准备测试代码&#34;&gt;准备测试代码&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/SonarSource/sonar-scanning-examples/archive/master.zip
unzip master.zip
   
[root@jenkins-1 src]# pwd
/usr/local/src
[root@jenkins-1 src]# ll -rt
drwxr-xr-x 12 root      root           4096 Dec 22 16:06 sonar-scanning-examples-master
-rw-r--r--  1 root      root         254870 Dec 23 14:49 master.zip
   
# 进入解压后目录，找到sonar-project.properties文件所在目录，即是用来执行sonar-scanner进行扫描的目录
[root@jenkins-1 src]# cd sonar-scanning-examples-master/sonarqube-scanner
[root@jenkins-1 sonarqube-scanner]# ls
copybooks  coverage-report  sonar-project.properties  src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;执行扫描&#34;&gt;执行扫描&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进入sonar-project.properties配置文件所在目录，按照需要修改该配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 sonarqube-scanner]# pwd
/usr/local/src/sonar-scanning-examples-master/sonarqube-scanner
[root@jenkins-1 sonarqube-scanner]# ls
copybooks  coverage-report  sonar-project.properties  src
   
# sonar-project.properties为配置文件，定义如何扫描，扫描的代码路径，该次扫描的名称等
# src为要扫描的源代码目录
   
# 默认的配置即可使用，也可按需修改
[root@jenkins-1 sonarqube-scanner]# cat sonar-project.properties 
sonar.projectKey=org.sonarqube:sonarqube-scanner
sonar.projectName=Example of SonarQube Scanner Usage
sonar.projectVersion=1.0
   
sonar.sources=src,copybooks
   
sonar.sourceEncoding=UTF-8
   
## Cobol Specific Properties
   
# comma-separated paths to directories with copybooks
sonar.cobol.copy.directories=copybooks
# comma-separated list of suffixes
sonar.cobol.file.suffixes=cbl,cpy
sonar.cobol.copy.suffixes=cpy
   
   
   
## Flex Specific Properties
   
# retrieve code coverage data from the Cobertura report
sonar.flex.cobertura.reportPath=coverage-report/coverage-cobertua-flex.xml
   
   
   
# PL/I Specific Properties
sonar.pli.marginLeft=2
sonar.pli.marginRight=0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行sonar-scanner命令即可开始扫描&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 sonarqube-scanner]# sonar-scanner
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令输出结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 sonarqube-scanner]# sonar-scanner
INFO: Scanner configuration file: /usr/local/src/sonar-scanner-4.0.0.1744-linux/conf/sonar-scanner.properties
INFO: Project root configuration file: /usr/local/src/sonar-scanning-examples-master/sonarqube-scanner/sonar-project.properties
INFO: SonarQube Scanner 4.0.0.1744
INFO: Java 11.0.3 AdoptOpenJDK (64-bit)
INFO: Linux 3.10.0-1160.6.1.el7.x86_64 amd64
INFO: User cache: /root/.sonar/cache
INFO: SonarQube server 6.7.7
INFO: Default locale: &amp;quot;en_US&amp;quot;, source code encoding: &amp;quot;UTF-8&amp;quot;
.........
-------------  Scan Example of SonarQube Scanner Usage
   
INFO: Analysis report generated in 218ms, dir size=91 KB
INFO: Analysis reports compressed in 63ms, zip size=42 KB
INFO: Analysis report uploaded in 500ms
INFO: ANALYSIS SUCCESSFUL, you can browse http://localhost:9000/dashboard/index/org.sonarqube:sonarqube-scanner
INFO: Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
INFO: More about the report processing at http://localhost:9000/api/ce/task?id=AXaOscnp3z5hMH_aiW9O
INFO: Task total time: 9.189 s
INFO: ------------------------------------------------------------------------
INFO: EXECUTION SUCCESS
INFO: ------------------------------------------------------------------------
INFO: Total time: 13.937s
INFO: Final Memory: 7M/27M
INFO: ------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;web界面查看扫描结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223162403719.png&#34; alt=&#34;image-20201223162403719&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;jenkins关联到sonarqube&#34;&gt;Jenkins关联到sonarqube&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装sonarqube-scanner插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223165753498.png&#34; alt=&#34;image-20201223165753498&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统管理-》系统设置-》sonarqube servers：添加配置sonarqube servers的url地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223171213755.png&#34; alt=&#34;image-20201223171213755&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统管理-》全局工具配置：手动添加sonarqube scanner的扫描器（指明sonar scanner的命令路径）&lt;/p&gt;
&lt;p&gt;也可以勾选自动安装，Jenkins会自动下载需要版本的scanner&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223171352712.png&#34; alt=&#34;image-20201223171352712&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;构建jenkins项目测试sonar-scanner&#34;&gt;构建Jenkins项目测试sonar-scanner&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建一个Jenkins 自由风格的job，指明一个代码的gitlab仓库地址；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223171515299.png&#34; alt=&#34;image-20201223171515299&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正常写构建脚本：构建-》excute shell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/lib/jenkins/workspace/test-sonar-1
tar -czvf web1.tar.gz index.jsp
scp web1.tar.gz root@192.168.80.104:/usr/local/tomcat/webapps/ROOT/
scp web1.tar.gz root@192.168.80.105:/usr/local/tomcat/webapps/ROOT/
   
ssh root@192.168.80.104 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; tar -xf /usr/local/tomcat/webapps/ROOT/web1.tar.gz -C /tmp/ &amp;amp;&amp;amp; cp -a /tmp/index.jsp /usr/local/tomcat/webapps/ROOT/index.jsp&amp;quot;
ssh root@192.168.80.105 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; tar -xf /usr/local/tomcat/webapps/ROOT/web1.tar.gz -C /tmp/ &amp;amp;&amp;amp; cp -a /tmp/index.jsp /usr/local/tomcat/webapps/ROOT/index.jsp&amp;quot;
   
ssh root@192.168.80.104 &amp;quot;catalina.sh start&amp;quot;
ssh root@192.168.80.105 &amp;quot;catalina.sh start&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在配置job时，选择构建-》excute sonarqube scanner，并添加配置文件sonar-project.properties格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223180757468.png&#34; alt=&#34;image-20201223180757468&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存后点击立即构建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看控制台输出&lt;/p&gt;
&lt;p&gt;首次失败，原因如下：报错找不到sonar-scanner，排查控制台输出时可以看到，是之前实验中配置的slave1节点执行的该job，但是slave1节点并没有sonar-scanner环境，所以报错；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223172338708.png&#34; alt=&#34;image-20201223172338708&#34;&gt;&lt;/p&gt;
&lt;p&gt;删除slave1节点后，使得其只能在具有scanner环境的master节点执行，再次执行就成功，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223175834072.png&#34; alt=&#34;image-20201223175834072&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看生成的sonarqube图标，（链接到该该扫描项目在sonarqube上的url地址）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223175904259.png&#34; alt=&#34;image-20201223175904259&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223175913738.png&#34; alt=&#34;image-20201223175913738&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看tomcat是否更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201223180613796.png&#34; alt=&#34;image-20201223180613796&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/devops/" term="devops" label="devops" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/jenkins/" term="jenkins" label="jenkins" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ci/cd/" term="ci/cd" label="ci/cd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">jenkins之pipline基础</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/jenkins%E4%B9%8Bpipline%E5%9F%BA%E7%A1%80/" />
            <id>https://latteStudio.github.io/posts/jenkins%E4%B9%8Bpipline%E5%9F%BA%E7%A1%80/</id>
            <updated>2020-12-24T14:41:44&#43;08:00</updated>
            <published>2020-12-17T17:13:24&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">jenkins之pipline基础</summary>
            
                <content type="html">&lt;h1 id=&#34;搭建基于tomcat的webapp&#34;&gt;搭建基于tomcat的webapp&lt;/h1&gt;
&lt;h2 id=&#34;节点信息&#34;&gt;节点信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;tomcat1：192.168.80.104&lt;/li&gt;
&lt;li&gt;tomcat2：192.168.80.105&lt;/li&gt;
&lt;li&gt;haproxy1+keepalived1：192.168.80.104&lt;/li&gt;
&lt;li&gt;haproxy2+keepalived2：192.168.80.105&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201218154304160.png&#34; alt=&#34;image-20201218154304160&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装jdk&#34;&gt;安装jdk&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装openjdk&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ~]# yum install -y java-1.8.0-openjdk-devel
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置java环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ~]# vim /etc/profile.d/java.sh 
[root@web1-ha1 ~]# cat /etc/profile.d/java.sh 
export JAVA_HOME=/usr/lib/jvm/java-1.8.0
export PATH=$JAVA_HOME/bin:$PATH
   
[root@web1-ha1 ~]# source !$
source /etc/profile.d/java.sh
[root@web1-ha1 ~]# echo $JAVA_HOME
/usr/lib/jvm/java-1.8.0
[root@web1-ha1 ~]# java -version
openjdk version &amp;quot;1.8.0_262&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_262-b10)
OpenJDK 64-Bit Server VM (build 25.262-b10, mixed mode)
   
另一台相同操作即可
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安装tomcat&#34;&gt;安装tomcat&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装tomcat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ~]# tar -xf apache-tomcat-8.5.57.tar.gz -C /usr/local/
[root@web1-ha1 ~]# ll /usr/local/
   
[root@web1-ha1 ~]# ln -sv /usr/local/apache-tomcat-8.5.57/ /usr/local/tomcat
‘/usr/local/tomcat’ -&amp;gt; ‘/usr/local/apache-tomcat-8.5.57/’
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置tomcat环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ~]# vim /etc/profile.d/tomcat.sh
[root@web1-ha1 ~]# source !$
source /etc/profile.d/tomcat.sh
   
[root@web1-ha1 ~]# cat /etc/profile.d/tomcat.sh 
export CATALINA_BASE=/usr/local/tomcat
export CATALINA_HOME=/usr/local/tomcat
export PATH=$CATALINA_BASE/bin:$PATH
   
   
[root@web1-ha1 ~]# catalina.sh start
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/lib/jvm/java-1.8.0
Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
Tomcat started.
[root@web1-ha1 ~]# ss -nlt
State      Recv-Q Send-Q                          Local Address:Port                                         Peer Address:Port              
LISTEN     0      128                                         *:22                                                      *:*                  
LISTEN     0      100                                 127.0.0.1:25                                                      *:*                  
LISTEN     0      1                            ::ffff:127.0.0.1:8005                                                   :::*                  
LISTEN     0      100                                        :::8080                                                   :::*                  
LISTEN     0      128                                        :::22                                                     :::*                  
LISTEN     0      100                                       ::1:25                                                     :::*   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201218160356589.png&#34; alt=&#34;image-20201218160356589&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自定义webapp应用&#34;&gt;自定义webapp应用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改webapp的入口文件index.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web2-ha2 ROOT]# cd /usr/local/tomcat/webapps/ROOT/
[root@web2-ha2 ROOT]# mv index.jsp index.jsp.bak
[root@web2-ha2 ROOT]# echo web2-ha2 &amp;gt; index.jsp
   
[root@web1-ha1 ROOT]# cd /usr/local/tomcat/webapps/ROOT/
[root@web1-ha1 ROOT]# mv index.jsp index.jsp.bak
[root@web1-ha1 ROOT]# echo web1-ha1 &amp;gt; index.jsp
   
# 2台tomcat webapp分别定义不同的首页，用于区分
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201220110941441.png&#34; alt=&#34;image-20201220110941441&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201220110919071.png&#34; alt=&#34;image-20201220110919071&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;部署keepalived&#34;&gt;部署keepalived&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装keepalived1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 conf]# yum install -y keepalived
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 conf]# cat /etc/keepalived/keepalived.conf 
! Configuration File for keepalived
...
vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 80
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.200 dev eth0 label eth0:0
    }
}
   
[root@web1-ha1 conf]# systemctl start keepalived
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署keepalived2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web2-ha2 ROOT]# yum install -y keepalived
[root@web2-ha2 ROOT]# cat /etc/keepalived/keepalived.conf 
! Configuration File for keepalived
...
vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.200 dev eth0 label eth0:0
    }
}
   
[root@web2-ha2 ROOT]# systemctl start keepalived
[root@web2-ha2 ROOT]# ifconfig -a
   
eth0:0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.200  netmask 255.255.255.255  broadcast 0.0.0.0
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)
# ha2的优先级比较高，所以ha2先获得vip        
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;部署haproxy&#34;&gt;部署haproxy&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;部署haproxy1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y haproxy
   
 vim /etc/haproxy/haproxy.cfg 
 # 将2个tomcat的webapp定义一个后端主机组，进行转发
 listen tomcat_web
        bind 0.0.0.0:80
        mode http
        log global
        option httplog
        server 192.168.80.104 192.168.80.104:8080 check
        server 192.168.80.105 192.168.80.105:8080 check
   
# 配置rsyslog接收haproxy的日志
# Provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514
   
# Provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 514
local2.*                       /var/log/haproxy.log
   
   
# 重启haproxy和rsyslog服务
   
systemctl restart rsyslog
systemctl restart haproxy
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署haproxy2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;和部署haproxy1完全一致，只是监听的是vip，只有vip所在的haproxy会收到流量，并进行转发
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@dev-machine ~]# curl 192.168.80.200
web1-ha1
[root@dev-machine ~]# curl 192.168.80.200
web2-ha2
[root@dev-machine ~]# curl 192.168.80.200
web1-ha1
[root@dev-machine ~]# curl 192.168.80.200
web2-ha2
[root@dev-machine ~]# curl 192.168.80.200
web1-ha1
[root@dev-machine ~]# curl 192.168.80.200
web2-ha2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;jenkins基础使用&#34;&gt;Jenkins基础使用&lt;/h1&gt;
&lt;h2 id=&#34;安装gitlab相关插件&#34;&gt;安装gitlab相关插件&lt;/h2&gt;
&lt;p&gt;系统管理-》插件管理-》可选插件部分，搜索安装以下4个插件，（插件安装会自动安装依赖的插件）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201220125434792.png&#34; alt=&#34;image-20201220125434792&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201220125628805.png&#34; alt=&#34;image-20201220125628805&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;用户权限管理&#34;&gt;用户权限管理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装权限管理插件role-based authorization strategy&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221153205497.png&#34; alt=&#34;image-20201221153205497&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改认证方式：系统管理-》全局安全配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221153349179.png&#34; alt=&#34;image-20201221153349179&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Jenkins角色，给角色配置权限，（全局或项目范围内的读、写、更新等）&lt;/p&gt;
&lt;p&gt;此时安全管理界面应该有管理用户和角色的选项，此处加了个custom-role，并赋予了全局范围内的读权限&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221153554826.png&#34; alt=&#34;image-20201221153554826&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221153837976.png&#34; alt=&#34;image-20201221153837976&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建Jenkins用户；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cten%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201221153954730.png&#34; alt=&#34;image-20201221153954730&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将用户关联到角色&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221154310911.png&#34; alt=&#34;image-20201221154310911&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新用户登陆测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cten%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201221154339690.png&#34; alt=&#34;image-20201221154339690&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;jenkins邮箱配置&#34;&gt;Jenkins邮箱配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;开启网易或qq邮箱的smtp服务，并获得授权密码&lt;/li&gt;
&lt;li&gt;配置Jenkins：（在系统配置中）
&lt;ol&gt;
&lt;li&gt;Jenkins location&lt;/li&gt;
&lt;li&gt;Jenkins的邮件通知&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;发送测试邮件，并查看&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Jenkins location和邮件通知配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221161730631.png&#34; alt=&#34;image-20201221161730631&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221161544491.png&#34; alt=&#34;image-20201221161544491&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看收到的测试邮件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221161213252.png&#34; alt=&#34;image-20201221161213252&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;jenkins配置ssh-key拉取gitlab代码&#34;&gt;Jenkins配置ssh-key拉取gitlab代码&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Jenkins主机生成ssh-key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# ssh-keygen -t rsa
[root@jenkins-1 ~]# cat .ssh/id_rsa.pub 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将Jenkins主机的key添加到gitlab中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221163852994.png&#34; alt=&#34;image-20201221163852994&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jenkins主机拉取gitlab项目测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# git clone git@192.168.80.102:mygroup1/myproject1.git
Cloning into &#39;myproject1&#39;...
   
drwxr-xr-x  3 root root   53 Dec 21 16:35 myproject1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;jenkins配置ssh-key类型凭证&#34;&gt;jenkins配置ssh-key类型凭证&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装credentials binding 插件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221181943179.png&#34; alt=&#34;image-20201221181943179&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全-》凭据配置里，管理员账户添加可以创建的：凭证的提供者，和其类型，（全选）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221181910832.png&#34; alt=&#34;image-20201221181910832&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全-》manage credential里，添加某类型的具体的凭证（截图有误，应该填入gitlab的ssh-key对应的私钥！）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221181846530.png&#34; alt=&#34;image-20201221181846530&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建测试项目test-demo1，没有报错，基本证实该key没有问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221182723347.png&#34; alt=&#34;image-20201221182723347&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击立即构建，查看构建结果，Jenkins主机上的工作目录下，生成对应目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# ll /var/lib/jenkins/workspace/
total 0
drwxr-xr-x 3 jenkins jenkins 53 Dec 21 18:27 test-demo1
drwxr-xr-x 2 jenkins jenkins  6 Dec 21 18:27 test-demo1@tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看，控制台输出，证明该凭证，可以正常使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221182920612.png&#34; alt=&#34;image-20201221182920612&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;构建后shell脚本&#34;&gt;构建后shell脚本&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;shell脚本，将构建后的web包，（这里只有一个index.jsp模拟）拷贝到2台tomcat服务器上，重启tomcat，实现webapp的更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脚本如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221190051776.png&#34; alt=&#34;image-20201221190051776&#34;&gt;&lt;/p&gt;
&lt;p&gt;保存后，点击立即构建，依次检查Jenkins控制台输出、Jenkins的工作目录、webapp的页面，发现shell执行结果均符合预期，下方为更新后tomcat app的访问截图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221185947319.png&#34; alt=&#34;image-20201221185947319&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201221185939578.png&#34; alt=&#34;image-20201221185939578&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;jenkins触发器&#34;&gt;Jenkins触发器&lt;/h1&gt;
&lt;h2 id=&#34;触发器简介&#34;&gt;触发器简介&lt;/h2&gt;
&lt;p&gt;​	Jenkins的触发器可以实现，当满足特定的条件时，触发相应操作，eg：只有dev分支的代码设置触发器，当有新代码提交时，会触发Jenkins拉取代码，构建，然后自动部署到测试环境，而正式环境的代码需要手动确认后再部署到正式环境；&lt;/p&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222103643458.png&#34; alt=&#34;image-20201222103643458&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;触发器种类&#34;&gt;触发器种类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;触发远程构建：gitlab在检测到某库提交代码后，通过jenkins给出的url和token发起调用，之后jenkins就可以来gitlab拉取代码，进行后续构建操作；&lt;/li&gt;
&lt;li&gt;其他工程构建后触发：build after other projects are build，&lt;/li&gt;
&lt;li&gt;定时构建：build periodlcally&lt;/li&gt;
&lt;li&gt;轮询scm，（对代码库轮询，检查是否有代码提交，对jenkins资源消耗较大）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;触发器webhook设置&#34;&gt;触发器webhook设置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;gitlab上给项目，新建dev分支；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jenkins安装插件：gitlab hook，gitlab authentication；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222112951995.png&#34; alt=&#34;image-20201222112951995&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改jenkins配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;登陆策略改为：登陆用户可以做任何事&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222113214450.png&#34; alt=&#34;image-20201222113214450&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取消勾选：防止跨站点请求伪造（263版本没找到，后续通过命令行关闭）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jenkins新建job，拉取代码选择分支为：dev&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222122842520.png&#34; alt=&#34;image-20201222122842520&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;构建shell，使用echo一个环境变量用于测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222135751403.png&#34; alt=&#34;image-20201222135751403&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;openssl生成一个字符串做token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# openssl rand -hex 12
5ea30da8af91cf0adc527336
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置jenkins job时选择：触发远程构建，将上步的token填入&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222135657676.png&#34; alt=&#34;image-20201222135657676&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;curl命令访问jenkins的url，curl访问会触发构建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# curl http://192.168.80.101:8080/job/dev-webhook/build?token=5ea30da8af91cf0adc527336
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看项目下是否有新的构建序号#N&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222135418655.png&#34; alt=&#34;image-20201222135418655&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gitlab配置webhook，在admin area-》system hook中配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222142827860.png&#34; alt=&#34;image-20201222142827860&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gitlab测试webhook可用性&lt;/p&gt;
&lt;p&gt;首次测试异常：报错403，“Hook executed successfully but returned HTTP 403... No valid crumb was included in the request”&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222143110199.png&#34; alt=&#34;image-20201222143110199&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据google查得，是csrf没关闭的导致，本应在全局安全配置中可以关闭，但是Jenkins2.263.1版本没有找到该选项，另一种方法，命令方式关闭（在jenkins的命令行窗口输入以下命令，并执行）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222141902445.png&#34; alt=&#34;image-20201222141902445&#34;&gt;&lt;/p&gt;
&lt;p&gt;再次测试正常：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222141719048.png&#34; alt=&#34;image-20201222141719048&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新jenkins job的构建shell，为正式的构建、打包、部署命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/lib/jenkins/workspace/dev-webhook
tar -czvf web1.tar.gz index.jsp
scp web1.tar.gz root@192.168.80.104:/usr/local/tomcat/webapps/ROOT/
scp web1.tar.gz root@192.168.80.105:/usr/local/tomcat/webapps/ROOT/
   
ssh root@192.168.80.104 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; tar -xf /usr/local/tomcat/webapps/ROOT/web1.tar.gz -C /tmp/ &amp;amp;&amp;amp; cp -a /tmp/index.jsp /usr/local/tomcat/webapps/ROOT/index.jsp&amp;quot;
ssh root@192.168.80.105 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; tar -xf /usr/local/tomcat/webapps/ROOT/web1.tar.gz -C /tmp/ &amp;amp;&amp;amp; cp -a /tmp/index.jsp /usr/local/tomcat/webapps/ROOT/index.jsp&amp;quot;
   
ssh root@192.168.80.104 &amp;quot;catalina.sh start&amp;quot;
ssh root@192.168.80.105 &amp;quot;catalina.sh start&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gitlab提交代码到dev分支&lt;/p&gt;
&lt;p&gt;1、开发者本地生成密钥，并将密钥的公钥上传到自己gitlab账户的ssh-key中；&lt;/p&gt;
&lt;p&gt;2、项目经理赋予开发者某个项目的一定的权限，如开发权限；&lt;/p&gt;
&lt;p&gt;3、开发者本地配置user.name 和user.email，和gitlab账户保持一致；&lt;/p&gt;
&lt;p&gt;4、之后，开发者即可将某具有开发权限的项目拉取到本地、开发、提交、推送；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[pm@dev-machine ~]$ cat .gitconfig 
[user]
    name = pm
    email = pm@bo.com
[pm@dev-machine ~]$ git clone git@192.168.80.102:mygroup1/myproject1.git
Cloning into &#39;myproject1&#39;...
    
    
[pm@dev-machine ~]$ cd myproject1/
[pm@dev-machine myproject1]$ vim index.jsp # 添加一行；and this is dev branch app
[pm@dev-machine myproject1]$ git add index.jsp 
[pm@dev-machine myproject1]$ git commit -m &amp;quot;add one line in dev branch&amp;quot;
    
[pm@dev-machine myproject1]$ git push
    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看jenkins是否被gitlab调用webhook从而触发自动构建&lt;/p&gt;
&lt;p&gt;gitlab已经更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222145705844.png&#34; alt=&#34;image-20201222145705844&#34;&gt;&lt;/p&gt;
&lt;p&gt;jenkins随即进行了新的构建，说明webhook成功调用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222145806495.png&#34; alt=&#34;image-20201222145806495&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问tomcat，查看webapp是否更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222153408963.png&#34; alt=&#34;image-20201222153408963&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实验中问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2个tomcat未设置开机自启动，所以第一次构建总失败，因为catalina.sh stop会失败，后续脚本失败&lt;/li&gt;
&lt;li&gt;开发提交的的是master分支，而之前设置的自动触发拉取的是dev分支，所以webapp总是不更新，&lt;/li&gt;
&lt;li&gt;第四次提交，最终实现自动触发jenkins构建，并成功部署到tomcat 服务器；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;构建后项目关联&#34;&gt;构建后项目关联&lt;/h2&gt;
&lt;p&gt;​	用于多个Jenkins的job关联执行，如job1执行后且成功执行后触发执行job2；&lt;/p&gt;
&lt;p&gt;在构建后操作中配置，需要构建的其他相关job，且可以选择当前项目的构建状态处于什么情况下，触发构建其相关job&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222154208757.png&#34; alt=&#34;image-20201222154208757&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;点击立即构建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看控制台输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222154516647.png&#34; alt=&#34;image-20201222154516647&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看pm-project2是否被关联构建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222154502371.png&#34; alt=&#34;image-20201222154502371&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;jenkins分布式集群构建&#34;&gt;Jenkins分布式集群构建&lt;/h1&gt;
&lt;p&gt;​	job增多时，单jenkins实例会影响项目的构建和部署效率，因此jenkins提供了Jenkins主从集群架构，将多个job分发给多个slave节点执行，挺高了并发能力，和执行效率；&lt;/p&gt;
&lt;h2 id=&#34;配置slave节点&#34;&gt;配置slave节点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装jdk环境，配置java环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ROOT]# java -version
openjdk version &amp;quot;1.8.0_262&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_262-b10)
OpenJDK 64-Bit Server VM (build 25.262-b10, mixed mode)
[root@web1-ha1 ROOT]# echo $JAVA_HOME
/usr/lib/jvm/java-1.8.0
   
# 这里采用和tomcat服务器同一个机器
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装git，根据需要还可能安装maven等编译打包工具&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ROOT]# yum install -y git
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建jenkins的工作目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   
# 要和jenkins主节点的数据目录保持一致/var/lib/jenkins，注意权限
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主节点上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加slave凭证，ssh类型，即slave节点的root用户和其登陆密码即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222160234405.png&#34; alt=&#34;image-20201222160234405&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加slave节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222160458710.png&#34; alt=&#34;image-20201222160458710&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看slave状态是否正常&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222160532068.png&#34; alt=&#34;image-20201222160532068&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slave节点查看进程是否正常&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ROOT]# ps -ef|grep jenkins
root       2105   2059  0 16:04 ?        00:00:00 bash -c cd &amp;quot;/var/lib/jenkins&amp;quot; &amp;amp;&amp;amp; java  -jar remoting.jar -workDir /var/lib/jenkins -jar-cache /var/lib/jenkins/remoting/jarCache
root       2112   2105 10 16:04 ?        00:00:08 java -jar remoting.jar -workDir /var/lib/jenkins -jar-cache /var/lib/jenkins/remoting/jarCache
   
# slave节点不需要安装Jenkins，而是执行master节点的remoter.jar包即可
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置job在slave节点上执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222161212519.png&#34; alt=&#34;image-20201222161212519&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击立即构建，并查看日志&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222161152581.png&#34; alt=&#34;image-20201222161152581&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建后，slave节点也生成了相应的工作目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ROOT]# ll /var/lib/jenkins/remoting
total 0
drwxr-xr-x 17 root root 156 Dec 22 16:04 jarCache
drwxr-xr-x  2 root root  54 Dec 22 16:04 logs
[root@web1-ha1 ROOT]# ll /var/lib/jenkins/
total 1488
drwxr-xr-x 4 root root      34 Dec 22 16:04 remoting
-rw-r--r-- 1 root root 1521553 Dec 22 16:04 remoting.jar
drwxr-xr-x 4 root root      48 Dec 22 16:10 workspace
[root@web1-ha1 ROOT]# ll /var/lib/jenkins/workspace/
total 0
drwxr-xr-x 3 root root 35 Dec 22 16:10 pm-project2
drwxr-xr-x 2 root root  6 Dec 22 16:10 pm-project2@tmp
[root@web1-ha1 ROOT]# ll /var/lib/jenkins/workspace/pm-project2
total 4
-rw-r--r-- 1 root root 21 Dec 22 16:10 README.m
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;pipline&#34;&gt;pipline&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline/&#34;&gt;https://www.jenkins.io/doc/book/pipeline/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;continuous delivery (CD) pipeline&lt;/em&gt; is an automated expression of your process for getting software from version control right through to your users and customers. Every change to your software (committed in source control) goes through a complex process on its way to being released. This process involves building the software in a reliable and repeatable manner, as well as progressing the built software (called a &amp;quot;build&amp;quot;) through multiple stages of testing and deployment.&lt;/p&gt;
&lt;p&gt;Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines &amp;quot;as code&amp;quot; via the &lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline/syntax&#34;&gt;Pipeline domain-specific language (DSL) syntax&lt;/a&gt;. [&lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline/#_footnotedef_1&#34;&gt;1&lt;/a&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pipline支持2种方式，一是写在jenkins的job的piplin输入框内，适合测试；二是和代码一样写在ide中，并和代码一起提交到git等仓库中，方便管理，版本追踪等；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开发要写的几个文件：&lt;/p&gt;
&lt;p&gt;程序配置文件：定义程序的运行时特性；&lt;/p&gt;
&lt;p&gt;jenkinsfile：定义如何构建程序包；&lt;/p&gt;
&lt;p&gt;sonar-project.properties：定义如何用sonar扫描代码；&lt;/p&gt;
&lt;p&gt;dockerfile：定义程序包如何和基础镜像、依赖包打包成镜像；&lt;/p&gt;
&lt;p&gt;k8s的yaml文件：定义打包后的镜像如何在k8s集群中运行成容器的行为特性；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;pipline语法&#34;&gt;pipline语法&lt;/h2&gt;
&lt;p&gt;常用的关键字：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node：定义在哪些节点运行任务&lt;/li&gt;
&lt;li&gt;stage：定义都有哪些阶段，如构建阶段、打包阶段、测试阶段、部署阶段等&lt;/li&gt;
&lt;li&gt;step：处于stage内部，stage就是由一个一个的step组成，如编译一个step，scp拷包一个step&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pipline简单测试&#34;&gt;pipline简单测试&lt;/h2&gt;
&lt;p&gt;1，新建demo项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222162702295.png&#34; alt=&#34;image-20201222162702295&#34;&gt;&lt;/p&gt;
&lt;p&gt;2，写入pipline语句&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222162922286.png&#34; alt=&#34;image-20201222162922286&#34;&gt;&lt;/p&gt;
&lt;p&gt;3，构建测试，成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222163037525.png&#34; alt=&#34;image-20201222163037525&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222163028400.png&#34; alt=&#34;image-20201222163028400&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;生成拉取代码的pipline语句&#34;&gt;生成拉取代码的pipline语句&lt;/h2&gt;
&lt;p&gt;​	jenkins支持代码生成器，可以生成代码片段，只需稍作修改即可使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成拉取git仓库的代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222163915687.png&#34; alt=&#34;image-20201222163915687&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复制代码片段到脚本框中使用，点击构建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222164342638.png&#34; alt=&#34;image-20201222164342638&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行是在slave1上，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222164421018.png&#34; alt=&#34;image-20201222164421018&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ROOT]# ll /var/lib/jenkins/workspace/pipline-demo1
total 8
-rw-r--r-- 1 root root 93 Dec 22 16:41 index.jsp
-rw-r--r-- 1 root root  1 Dec 22 16:41 README.md
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;pipline做完整的代码部署流程&#34;&gt;pipline做完整的代码部署流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;更新gitlab代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222170259808.png&#34; alt=&#34;image-20201222170259808&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备pipline脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node {
    stage(&amp;quot;code clone&amp;quot;){
        echo &amp;quot;code clone&amp;quot;
        sh &#39;rm -rf /var/lib/jenkins/workspace/pipline-demo1/*&#39;
        git credentialsId: &#39;b20fdd14-dec6-4afa-b5d0-e14cb8e063a2&#39;, url: &#39;git@192.168.80.102:mygroup1/myproject1.git&#39;
    }
       
    stage(&amp;quot;code deploy&amp;quot;){
        echo &amp;quot;code build&amp;quot;
        sh &#39;cd /var/lib/jenkins/workspace/pipline-demo1/ &amp;amp;&amp;amp; scp index.jsp root@192.168.80.104:/usr/local/tomcat/webapps/ROOT/index.jsp&#39;
        sh &#39;cd /var/lib/jenkins/workspace/pipline-demo1/ &amp;amp;&amp;amp; scp index.jsp root@192.168.80.105:/usr/local/tomcat/webapps/ROOT/index.jsp&#39;
           
    }
    stage(&amp;quot;tomcat restart&amp;quot;){
        sh &#39;ssh 192.168.80.104 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; catalina.sh start&amp;quot;&#39;
        sh &#39;ssh 192.168.80.105 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; catalina.sh start&amp;quot;&#39;
    }
     
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slave1节点需要做到2个tomcat服务器的免密登陆，方便scp程序包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@web1-ha1 ROOT]# ssh-copy-id 192.168.80.105
[root@web1-ha1 ROOT]# ssh-copy-id 192.168.80.104
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看tomcat的webapp是否更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222170030916.png&#34; alt=&#34;image-20201222170030916&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定运行节点：node中指定了master节点运行该job&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node(&amp;quot;master&amp;quot;) {
    stage(&amp;quot;code clone&amp;quot;){
        echo &amp;quot;code clone&amp;quot;
        sh &#39;rm -rf /var/lib/jenkins/workspace/pipline-demo1/*&#39;
        git credentialsId: &#39;b20fdd14-dec6-4afa-b5d0-e14cb8e063a2&#39;, url: &#39;git@192.168.80.102:mygroup1/myproject1.git&#39;
    }
       
    stage(&amp;quot;code deploy&amp;quot;){
        echo &amp;quot;code build&amp;quot;
        sh &#39;cd /var/lib/jenkins/workspace/pipline-demo1/ &amp;amp;&amp;amp; scp index.jsp root@192.168.80.104:/usr/local/tomcat/webapps/ROOT/index.jsp&#39;
        sh &#39;cd /var/lib/jenkins/workspace/pipline-demo1/ &amp;amp;&amp;amp; scp index.jsp root@192.168.80.105:/usr/local/tomcat/webapps/ROOT/index.jsp&#39;
           
    }
    stage(&amp;quot;tomcat restart&amp;quot;){
        sh &#39;ssh 192.168.80.104 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; catalina.sh start&amp;quot;&#39;
        sh &#39;ssh 192.168.80.105 &amp;quot;catalina.sh stop &amp;amp;&amp;amp; catalina.sh start&amp;quot;&#39;
    }
     
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222170440452.png&#34; alt=&#34;image-20201222170440452&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;jenkins视图&#34;&gt;Jenkins视图&lt;/h1&gt;
&lt;p&gt;​	jenkins可以将job进行分类归档，方便查看，如一个业务的所有job做一个视图，当前用户能查看的所有job放在一个视图（默认具有）；主要有三类视图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pipline视图&lt;/li&gt;
&lt;li&gt;列表视图&lt;/li&gt;
&lt;li&gt;我的视图&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pipline视图&#34;&gt;pipline视图&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装build pipline插件；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222171115778.png&#34; alt=&#34;image-20201222171115778&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建pipline类型的视图；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222171838919.png&#34; alt=&#34;image-20201222171838919&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看视图；视图当中列出了所有构建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222172033337.png&#34; alt=&#34;image-20201222172033337&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;列表视图&#34;&gt;列表视图&lt;/h2&gt;
&lt;p&gt;创建时选择类型为：列表视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222175734878.png&#34; alt=&#34;image-20201222175734878&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;我的视图&#34;&gt;我的视图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201222175644276.png&#34; alt=&#34;image-20201222175644276&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;jenkins基于脚本实现参数化代码部署与回滚&#34;&gt;Jenkins基于脚本实现参数化代码部署与回滚&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/struggle-1216/p/12447304.html&#34;&gt;参考博客&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/devops/" term="devops" label="devops" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/jenkins/" term="jenkins" label="jenkins" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ci/cd/" term="ci/cd" label="ci/cd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx代理kibana</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%BB%A3%E7%90%86kibana/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%BB%A3%E7%90%86kibana/</id>
            <updated>2020-12-17T17:14:55&#43;08:00</updated>
            <published>2020-12-15T10:36:28&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">nginx代理kibana</summary>
            
                <content type="html">&lt;h1 id=&#34;nginx代理kibana&#34;&gt;nginx代理kibana&lt;/h1&gt;
&lt;h2 id=&#34;节点规划&#34;&gt;节点规划&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;192.168.80.106:es1+kibana1&lt;/li&gt;
&lt;li&gt;192.168.80.107:es2+kibana2&lt;/li&gt;
&lt;li&gt;192.168.80.108:nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装nginx&#34;&gt;安装nginx&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash-108 ~]# yum install -y nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置nginx代理kibana&#34;&gt;配置nginx代理kibana&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash-108 ~]# cd /etc/nginx/conf.d/
[root@logstash-108 conf.d]# cat kibana.conf 
upstream kibana_server {
	server 192.168.80.106:5601 weight=1 max_fails=2 fail_timeout=60;

}

server {

	listen 80;
	server_name kibana.com;
	auth_basic &amp;quot;require password&amp;quot;;
	auth_basic_user_file /etc/nginx/conf.d/htpasswd.users;
	
	location / {
		proxy_pass http://kibana_server;
	}
}

# 定义了kibana做后端组，并将主机头是kibana.com请求转发到该主机组，即后端的kibana组
[root@logstash-108 conf.d]# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置nginx用户&#34;&gt;配置nginx用户&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash-108 conf.d]# yum install -y httpd-tools

[root@logstash-108 conf.d]# htpasswd -bc /etc/nginx/conf.d/htpasswd.users li li
Adding password for user li
[root@logstash-108 conf.d]# cat /etc/nginx/conf.d/htpasswd.users 
li:$apr1$Xl/HCtIL$AZRBzJ15Ff3p8LNx.3CVD/
[root@logstash-108 conf.d]# htpasswd -b /etc/nginx/conf.d/htpasswd.users wang wang
Adding password for user wang

[root@logstash-108 conf.d]# systemctl start nginx

创建可以通过认证的用户和密码
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;访问测试&#34;&gt;访问测试&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;写入客户端的hosts文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.80.108 kibana.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器访问时，提示输入密码即可，nginx成功反代kibana，多个kibana实例的情况下，可以做负载均衡&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201215112240744.png&#34; alt=&#34;image-20201215112240744&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201215112254118.png&#34; alt=&#34;image-20201215112254118&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk结合beats收集日志</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88beats%E6%94%B6%E9%9B%86%E6%97%A5%E5%BF%97/" />
            <id>https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88beats%E6%94%B6%E9%9B%86%E6%97%A5%E5%BF%97/</id>
            <updated>2020-12-17T17:14:12&#43;08:00</updated>
            <published>2020-12-14T17:02:47&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk结合beats收集日志</summary>
            
                <content type="html">&lt;h1 id=&#34;beats简介&#34;&gt;beats简介&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/beats/libbeat/current/beats-reference.html#beats-reference&#34;&gt;https://www.elastic.co/guide/en/beats/libbeat/current/beats-reference.html#beats-reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	beats为一系列轻量级的数据采集工具，可以直接汇总数据到es，或经由logstash进一步处理，常用的有filebeat，auditbeat，packetbeat&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201214170712331.png&#34; alt=&#34;image-20201214170712331&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;elk结合filebeat&#34;&gt;elk结合filebeat&lt;/h1&gt;
&lt;h2 id=&#34;节点架构&#34;&gt;节点架构&lt;/h2&gt;
&lt;p&gt;与elk架构相比，efk架构只是将最初的采集端从logstash换成了专用的beats系列，如filebeat，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201214174124980.png&#34; alt=&#34;image-20201214174124980&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装filebeat&#34;&gt;安装filebeat&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.8.1-x86_64.rpm
rpm -ivh filebeat-6.8.1-x86_64.rpm 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;filebeat-收集日志写入到kafka&#34;&gt;filebeat 收集日志写入到kafka&lt;/h2&gt;
&lt;p&gt;修改filebeat配置，为yaml格式，读取本地的系统日志，然后写入到kafka节点；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

读取本地的系统日志
- type: log

  # Change to true to enable this input configuration.
  enabled: true

  # Paths that should be crawled and fetched. Glob based paths.
  paths:
    - /var/log/messages
  fields:
    host: &amp;quot;192.168.80.105&amp;quot;
    type: &amp;quot;filebeat-syslog-80-105&amp;quot;
    app: &amp;quot;syslog&amp;quot;

输出到kafka
output.kafka:
 hosts: [&amp;quot;192.168.80.106:9092&amp;quot;,&amp;quot;192.168.80.107:9092&amp;quot;]
 topic: &amp;quot;filebeat-syslog-80-105&amp;quot;
 partition.round_robin:
  reachable_only: true
 required_acks: 1  # 本地写入完成
 compression: gzip  # 开启压缩
 max_message_bytes: 1000000  # 消息最大值

[root@logstash-105 ~]# systemctl start filebeat
[root@logstash-105 ~]# systemctl status filebeat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kafka查看是否写入了响应的topic&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es2 ~]# /usr/local/kafka/bin/kafka-topics.sh --zookeeper 192.168.80.107:2181 --list
filebeat-syslog-80-105
hello
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;logstash从kafka读取数据写入es&#34;&gt;logstash从kafka读取数据写入es&lt;/h2&gt;
&lt;p&gt;编辑logstash108的配置文件，从kafka读取数据，写入到es中；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash-108 conf.d]# cat from-kafka.conf 
input {

	kafka {
		topics =&amp;gt; &amp;quot;filebeat-syslog-80-105&amp;quot;
		bootstrap_servers =&amp;gt; &amp;quot;192.168.80.107:9092&amp;quot;
		codec =&amp;gt; &amp;quot;json&amp;quot;
	}
}


output {
	if [fields][app] == &amp;quot;syslog&amp;quot; {
		elasticsearch {
			hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
			index =&amp;gt; &amp;quot;filebeat-syslog-80-105-%{+YYYY.MM.dd}&amp;quot;
		}
	}		

}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;语法测试，启动，启动无报错，但kibana界面查不到该索引&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash-108 conf.d]# logstash -f from-kafka.conf


[INFO ] 2020-12-14 19:02:37.180 [Ruby-0-Thread-11: :1] ConsumerCoordinator - [Consumer clientId=logstash-0, groupId=logstash] Revoking previously assigned partitions []
[INFO ] 2020-12-14 19:02:37.181 [Ruby-0-Thread-11: :1] AbstractCoordinator - [Consumer clientId=logstash-0, groupId=logstash] (Re-)joining group
[INFO ] 2020-12-14 19:02:37.284 [Ruby-0-Thread-11: :1] AbstractCoordinator - [Consumer clientId=logstash-0, groupId=logstash] Successfully joined group with generation 1
[INFO ] 2020-12-14 19:02:37.287 [Ruby-0-Thread-11: :1] ConsumerCoordinator - [Consumer clientId=logstash-0, groupId=logstash] Setting newly assigned partitions [filebeat-syslog-80-105-0]
[INFO ] 2020-12-14 19:02:37.316 [Ruby-0-Thread-11: :1] Fetcher - [Consumer clientId=logstash-0, groupId=logstash] Resetting offset for partition filebeat-syslog-80-105-0 to offset 3777.

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;es中查不到此索引&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es2 ~]# curl &#39;localhost:9200/_cat/indices?v&#39;
health status index                       uuid                   pri rep docs.count docs.deleted store.size pri.store.size
green  open   messagelog-2020.12.11       71PHxMv1T56xqEAsEJ95Vg   5   1          2            0     28.2kb         14.1kb
green  open   tcp-log-2020.12.12          YZ4nkU3WSRyxr_XRmhP7QA   5   1          2            0     25.6kb         12.8kb
green  open   messagelog-7-100-2020.12.11 Al2uqt1wRe2gHWEQuOkB5w   5   1        419            0    593.8kb        296.8kb
green  open   .kibana_1                   rj1dL_VMTYSTIeg2Pvx3oA   1   1         28            2    242.3kb        124.1kb
green  open   nginx2020.12.11             g2AHe4WoSEaCNcwY4-p1bg   5   1          5            0     67.8kb         33.9kb
green  open   nginx-access-log-2020.12.12 BBNARQCuQl62Ad-HlAJC6A   5   1         11            0    116.5kb         58.2kb
green  open   rsyslog-80-106-2020.12.12   8HLfzyvIQDaBDHflK1fUBw   5   1          6            0      105kb         52.5kb
green  open   .kibana_task_manager        9ckx4q-3ROWMxev8mQHcwA   1   1          2            0       15kb          7.4kb
green  open   linux-test-2020.12.11       uzzSUWISQZ6ucwn8TGkDXQ   5   1          1            0     11.9kb          5.9kb
green  open   tomcat-log-2020.12.12       GAk7ia6iSA-b5cHcRLYa4A   5   1          8            0    100.3kb         50.1kb
green  open   mes-105-2020.12.13          m0PRk3BdTHit228H-I0tEg   5   1      13050            0      6.2mb          3.1mb
green  open   logstash-log-2020.12.12     wj_XsXvGR4qP9PZrE7e7cw   5   1         21            0     71.9kb         35.9kb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自然，kibana界面也无法创建索引&lt;/p&gt;
&lt;h2 id=&#34;kibana创建索引&#34;&gt;kibana创建索引&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk结合kafka收集日志</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88kafka%E6%94%B6%E9%9B%86%E6%97%A5%E5%BF%97/" />
            <id>https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88kafka%E6%94%B6%E9%9B%86%E6%97%A5%E5%BF%97/</id>
            <updated>2020-12-17T17:14:23&#43;08:00</updated>
            <published>2020-12-14T16:00:11&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk结合kafka收集日志</summary>
            
                <content type="html">&lt;h1 id=&#34;环境介绍&#34;&gt;环境介绍&lt;/h1&gt;
&lt;h2 id=&#34;架构图示&#34;&gt;架构图示&lt;/h2&gt;
&lt;p&gt;共4台虚拟机&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201214170116596.png&#34; alt=&#34;image-20201214170116596&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;配置过程&#34;&gt;配置过程&lt;/h1&gt;
&lt;h2 id=&#34;logstash105配置读取本地的系统日志和nginx日志写入kafka&#34;&gt;logstash105配置读取本地的系统日志和nginx日志写入kafka&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备系统日志和nginx日志&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash-105 conf.d]# systemctl start nginx
                   
[root@logstash-105 conf.d]# ll /var/log/messages
-rwxr-xr-x 1 root root 305922 Dec 14 16:09 /var/log/messages
[root@logstash-105 conf.d]# ll /var/log/nginx/access.log 
-rw-r--r-- 1 root root 1680 Dec 13 19:22 /var/log/nginx/access.log
   
给2个文件加上所有用户读权限
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置logstash读取nginx和系统日志，输入到kafka&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash-105 conf.d]# cat log-kafka.conf 
input {
 file {
     path =&amp;gt; &amp;quot;/var/log/messages&amp;quot;
     type =&amp;gt; &amp;quot;kakfa-syslog-105&amp;quot;
     start_position =&amp;gt; &amp;quot;beginning&amp;quot;
     stat_interval =&amp;gt; &amp;quot;2&amp;quot;
 }
 file {
     path =&amp;gt; &amp;quot;/var/log/nginx/access.log&amp;quot;
     type =&amp;gt; &amp;quot;kakfa-ngxlog-105&amp;quot;
     start_position =&amp;gt; &amp;quot;beginning&amp;quot;
     stat_interval =&amp;gt; &amp;quot;2&amp;quot;
     codec =&amp;gt; &amp;quot;json&amp;quot;
   		
 }
}
   
   
output {
   
 if [type] == &amp;quot;kafka-syslog-105&amp;quot; {
     kafka {
         topic_id =&amp;gt; &amp;quot;kafka-syslog-105&amp;quot;
         bootstrap_servers =&amp;gt; &amp;quot;192.168.80.107:9092&amp;quot;
         batch_size =&amp;gt;5
         codec =&amp;gt; &amp;quot;json&amp;quot;
     }
     file {
         path =&amp;gt; &amp;quot;/tmp/syslog.log&amp;quot;
     }
 }
 if [type] == &amp;quot;kafka-ngxlog-105&amp;quot; {
     kafka {
         topic_id =&amp;gt; &amp;quot;kafka-ngxlog-105&amp;quot;
         bootstrap_servers =&amp;gt; &amp;quot;192.168.80.107:9092&amp;quot;
         batch_size =&amp;gt;5
         codec =&amp;gt; &amp;quot;json&amp;quot;
     }
     file {
         path =&amp;gt; &amp;quot;/tmp/ngxlog.log&amp;quot;
     }
 }
   
   	
}
其中输出到/tmp目录是为了测试
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kafka查看新增的topic&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es2 bin]# ./kafka-topics.sh --zookeeper 192.168.80.107:2181 --list
hello
   
没有新增topic，
/tmp目录也没有测试输出
排错时，logstash没有报错，配置文件语法也对，测试输出到控制台也没有，难道是版本bug？
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;logstash108从kafka读取数据&#34;&gt;logstash108从kafka读取数据&lt;/h2&gt;
&lt;h2 id=&#34;kibana界面创建索引并查看数据&#34;&gt;kibana界面创建索引并查看数据&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/kafka/" term="kafka" label="kafka" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk之安装zookeeper和kafka</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E4%B9%8B%E5%AE%89%E8%A3%85zookeeper%E5%92%8Ckafka/" />
            <id>https://latteStudio.github.io/posts/elk%E4%B9%8B%E5%AE%89%E8%A3%85zookeeper%E5%92%8Ckafka/</id>
            <updated>2020-12-14T15:58:22&#43;08:00</updated>
            <published>2020-12-14T10:26:21&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk之安装zookeeper和kafka</summary>
            
                <content type="html">&lt;h1 id=&#34;zookeeper&#34;&gt;zookeeper&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;what is zookeeper&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. All of these kinds of services are used in some form or another by distributed applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;zk之一个分布式应用协调服务，用于在分布式应用中提供统一的命名管理、消息同步、服务注册与发现等，其本身需要部署为高可用模式，集群节点一般为3、5、7个节点，只有集群中有超过一半的节点可用，则该集群整体可用，类比etcd；&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;h3 id=&#34;节点信息&#34;&gt;节点信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;80.106：zk1&lt;/li&gt;
&lt;li&gt;80.107：zk2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和之前的es集群公用一套机器，注意内存要够；&lt;/p&gt;
&lt;h3 id=&#34;安装jdk环境&#34;&gt;安装jdk环境&lt;/h3&gt;
&lt;p&gt;es所在的2个节点106和107已经安装了jdk，若是新节点，直接yum安装openjdk，再配置环境变量JAVA_HOME和PATH即可；&lt;/p&gt;
&lt;h3 id=&#34;安装zookeeper&#34;&gt;安装zookeeper&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下载zk包，解压，做软链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 ~]# cd /usr/local/src/
[root@es1 src]# wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz
   
[root@es1 src]# tar -xf zookeeper-3.4.14.tar.gz -C /usr/local/
[root@es1 src]# ln -sv /usr/local/zookeeper-3.4.14/ /usr/local/zookeeper
‘/usr/local/zookeeper’ -&amp;gt; ‘/usr/local/zookeeper-3.4.14/’
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改zk配置，配置为2个节点的集群（注意，2节点集群只要损坏一个，该集群就不可用，仅实验而已）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 conf]# cp zoo_sample.cfg zoo.cfg
   
[root@es1 conf]# vim zoo.cfg 
   
   
[root@es1 conf]# cat zoo.cfg |grep -v &#39;^#&#39;
tickTime=2000
initLimit=10
syncLimit=5
dataDir=/usr/local/zookeeper/data
clientPort=2181
maxClientCnxns=60
server.1=192.168.80.106:2888:3888
server.2=192.168.80.107:2888:3888
   
复制一份示例配置文件，然后修改数据目录
添加集群内节点信息即可
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建数据目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 conf]# mkdir /usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写入集群中每个节点独有的id号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 conf]# echo 1 &amp;gt; /usr/local/zookeeper/data/myid
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动zk服务，查看zk集群状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 conf]# /usr/local/zookeeper/bin/zkServer.sh start
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper/bin/../conf/zoo.cfg
Starting zookeeper ... already running as process 1585.
   
[root@es1 conf]# /usr/local/zookeeper/bin/zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper/bin/../conf/zoo.cfg
Error contacting service. It is probably not running.
   
需要另一个节点也启动后，才正常
[root@es1 conf]# /usr/local/zookeeper/bin/zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper/bin/../conf/zoo.cfg
Mode: follower
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zk启动脚本写入rc.local&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 conf]# tail -1 /etc/rc.d/rc.local 
/usr/local/zookeeper/bin/zkServer.sh start
[root@es1 conf]# chmod +x /etc/rc.d/rc.local
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外一台zk节点操作&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es2 conf]# echo 2 &amp;gt; /usr/local/zookeeper/data/myid
   
[root@es2 conf]# /usr/local/zookeeper/bin/zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /usr/local/zookeeper/bin/../conf/zoo.cfg
Mode: leader
   
不同部分就是写入不同的集群id，
2个节点都启动后，查看状态，可以看到一主，一从，部署正常；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;   
   

# kafka

## 简介

kafka是apache旗下的开源分布式消息队列软件，需要结合zk才可使用，介绍：https://kafka.apache.org/intro

## 术语解释

- broker：每个kafka集群的机器都是一个broker
- topic：数据的分类，一条数据流，一个种类的数据可建立一个topic，为逻辑概念，一个topic的数据可分布于多个broker上
- partition：分区，分区为物理概念，为broker上的目录，目录下存放该分区的数据和其索引文件，一个topic由若干partition组成，这些partition可能分布在不同的broker上
- producer：消息的产生方，产生方生产的数据放入kafka的topic中
- consumer：消息的消费方，消费方从订阅了的topic中消费数据，消费者属于某个消费组，未指定就是默认消费组，，每组的多个成员对同一个topic的同一条数据只能消费一次，这样避免了并发消费数据时，同一条数据重复消费的问题，不同组的成员可同时消费同一个topic的同一个数据

## 安装

### 节点信息

- 80.106
- 80.107

和es集群、zk集群，公用这2台节点；

### 准备jdk

​	略

### 安装kafka

1. 下载kafka包，解压，做软链接

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;wget &lt;a href=&#34;https://archive.apache.org/dist/kafka/2.1.0/kafka_2.11-2.1.0.tgz&#34;&gt;https://archive.apache.org/dist/kafka/2.1.0/kafka_2.11-2.1.0.tgz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[root@es1 ~]# tar -xf kafka_2.11-2.1.0.tgz -C /usr/local/&lt;/p&gt;
&lt;p&gt;[root@es1 ~]# ln -sv /usr/local/kafka_2.11-2.1.0/ /usr/local/kafka&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


2. 修改配置文件

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[root@es2 kafka]# grep -v &amp;quot;^#&amp;quot; /usr/local/kafka/config/server.properties
broker.id=1
listeners=PLAINTEXT://192.168.80.106:9092
zookeeper.connect=192.168.80.106:2181,192.168.80.107:2181
要改的有，brokerid，本地监听地址，zk集群每个id的地址&lt;/p&gt;
&lt;p&gt;另一台kafka节点的配置&lt;/p&gt;
&lt;p&gt;broker.id=2
listeners=PLAINTEXT://192.168.80.107:9092
zookeeper.connect=192.168.80.106:2181,192.168.80.107:2181&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


3. 启动测试，（虚拟机内存不足，失败）

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[root@es1 kafka]# cat /usr/local/kafka/logs/kafkaServer.out
OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error=&#39;Cannot allocate memory&#39; (errno=12)&lt;/p&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;h1 id=&#34;there-is-insufficient-memory-for-the-java-runtime-environment-to-continue&#34;&gt;There is insufficient memory for the Java Runtime Environment to continue.&lt;/h1&gt;
&lt;h1 id=&#34;native-memory-allocation-mmap-failed-to-map-1073741824-bytes-for-committing-reserved-memory&#34;&gt;Native memory allocation (mmap) failed to map 1073741824 bytes for committing reserved memory.&lt;/h1&gt;
&lt;h1 id=&#34;an-error-report-file-with-more-information-is-saved-as&#34;&gt;An error report file with more information is saved as:&lt;/h1&gt;
&lt;h1 id=&#34;usrlocalkafka_211-210hs_err_pid1863log&#34;&gt;/usr/local/kafka_2.11-2.1.0/hs_err_pid1863.log&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;


4. 修改启动内存大小，重新启动

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[root@es2 kafka]#  export KAFKA_HEAP_OPTS=&amp;quot;-Xmx1G -Xms128M&amp;quot;&lt;/p&gt;
&lt;p&gt;也可以该虚拟机加内存&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


5. 前台启动测试正常

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[root@es1 ~]# /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties
...
[2020-12-14 15:27:18,204] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-12-14 15:27:18,215] INFO [KafkaServer id=1] started (kafka.server.KafkaServer)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


6. 后台启动

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[root@es1 ~]# /usr/local/kafka/bin/kafka-server-start.sh -daemon /usr/local/kafka/config/server.properties&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


### logstash测试kafka和zk



1. logstash配置kafka为输出目标

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[root@logstash2 conf.d]# vim kafka-zk-test.conf&lt;/p&gt;
&lt;p&gt;input {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       stdin {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
定义输入为标准输入&lt;/p&gt;
&lt;p&gt;output {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;       kafka {

               topic_id =&amp;gt; &amp;quot;hello&amp;quot;
               bootstrap_servers =&amp;gt; &amp;quot;192.168.80.107:9092&amp;quot;
               batch_size =&amp;gt;5
       }
       stdout {
               codec =&amp;gt; rubydebug
       }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;[root@logstash2 conf.d]# logstash -f kafka-zk-test.conf -t&lt;/p&gt;
&lt;p&gt;[root@logstash2 conf.d]# logstash -f kafka-zk-test.conf
启动
并在控制台输入nihao，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


2. kafka查看topic

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;[root@es1 bin]# ./kafka-topics.sh --zookeeper 192.168.80.106:2181 --list&lt;/p&gt;
&lt;p&gt;在logstash启动后，就可以看到新增了一个topic
[root@es1 bin]# ./kafka-topics.sh --zookeeper 192.168.80.106:2181 --list
hello
[root@es1 bin]# ./kafka-topics.sh --zookeeper 192.168.80.106:2181 --topic hello --describe
Topic:hello	PartitionCount:1	ReplicationFactor:1	Configs:
Topic: hello	Partition: 0	Leader: 1	Replicas: 1	Isr: 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;


&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/zookeeper/" term="zookeeper" label="zookeeper" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/kafka/" term="kafka" label="kafka" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk结合redis收集nginx日志</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88redis%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/" />
            <id>https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88redis%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/</id>
            <updated>2020-12-14T15:57:43&#43;08:00</updated>
            <published>2020-12-12T22:00:38&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk结合redis收集nginx日志</summary>
            
                <content type="html">&lt;h1 id=&#34;环境准备&#34;&gt;环境准备&lt;/h1&gt;
&lt;h2 id=&#34;架构图&#34;&gt;架构图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201213141439755.png&#34; alt=&#34;image-20201213141439755&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;节点信息&#34;&gt;节点信息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;es：80.107&lt;/li&gt;
&lt;li&gt;logstash1:80.108&lt;/li&gt;
&lt;li&gt;redis：80.106&lt;/li&gt;
&lt;li&gt;nginx+lostash2:80.105&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;80.105上，由logstash收集nginx的日志信息，并输送到redis，再由logstash2节点从redis读取数据，再存储到es节点，最终由kibana界面查看；&lt;/p&gt;
&lt;h1 id=&#34;经由redis收集系统日志&#34;&gt;经由redis收集系统日志&lt;/h1&gt;
&lt;h2 id=&#34;安装redis&#34;&gt;安装redis&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@redis ~]# yum install -y redis
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;redis配置修改&#34;&gt;redis配置修改&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@redis ~]# vim /etc/redis.conf 
bind 0.0.0.0
requirepass 123456
[root@redis ~]# systemctl start redis

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;logstash2传输系统日志到redis&#34;&gt;logstash2传输系统日志到redis&lt;/h2&gt;
&lt;p&gt;安装jdk和logstash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash2 ~]# yum install -y java-1.8.0-openjdk-devel

[root@logstash2 ~]# source /etc/profile.d/java.sh 
[root@logstash2 ~]# echo $JAVA_HOME
/usr/lib/jvm/java-1.8.0-openjdk

[root@logstash2 ~]# rpm -ivh logstash-6.8.1.rpm 
warning: logstash-6.8.1.rpm: Header V4 RSA/SHA512 Signature, key ID d88e42b4: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:logstash-1:6.8.1-1               ################################# [100%]
Using provided startup.options file: /etc/logstash/startup.options
/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/pleaserun-0.0.30/lib/pleaserun/platform/base.rb:112: warning: constant ::Fixnum is deprecated
Successfully created system startup script for Logstash
[root@logstash2 ~]# vim /etc/profile.d/logstash.sh
[root@logstash2 ~]# source !$
source /etc/profile.d/logstash.sh

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试logstash到redis的连通性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;先测试将本地的系统日志传输到redis

[root@logstash2 ~]# cd /etc/logstash/conf.d/
[root@logstash2 conf.d]# vim redis-es.conf
[root@logstash2 conf.d]# cat !$
cat redis-es.conf
input {

	file {
		path =&amp;gt; &amp;quot;/var/log/messages&amp;quot;
		type =&amp;gt; &amp;quot;mes-105&amp;quot;
		start_position =&amp;gt; &amp;quot;beginning&amp;quot;
		stat_interval =&amp;gt; &amp;quot;2&amp;quot;

	}
}

output {
	if [type] == &amp;quot;mes-105&amp;quot; {

		redis {
			host =&amp;gt; &amp;quot;192.168.80.106&amp;quot;
			port =&amp;gt; &amp;quot;6379&amp;quot;
			password =&amp;gt; &amp;quot;123456&amp;quot;
			db =&amp;gt; &amp;quot;1&amp;quot;
			key =&amp;gt; &amp;quot;mes-105-key&amp;quot;
			data_type =&amp;gt; &amp;quot;list&amp;quot;
		}
	}
# 指明了redis的主机，端口，密码，选择序号为1的库，指定了存储key，类型为列表

}
[root@logstash2 conf.d]# chmod a+r /var/log/messages 
[root@logstash2 conf.d]# logstash -f redis-es.conf -t

[root@logstash2 conf.d]# systemctl start logstash


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;redis查看，redis上正常接收到了logstash的数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@redis ~]# redis-cli 
127.0.0.1:6379&amp;gt; select 1
(error) NOAUTH Authentication required.
127.0.0.1:6379&amp;gt; auth 123456
OK
127.0.0.1:6379&amp;gt; select 1
OK
127.0.0.1:6379[1]&amp;gt; KEYS *
1) &amp;quot;mes-105-key&amp;quot;
127.0.0.1:6379[1]&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;logstash1抽取redis数据&#34;&gt;logstash1抽取redis数据&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash1 conf.d]# vim read-redis.conf

input {

        redis {
                host =&amp;gt; &amp;quot;192.168.80.106&amp;quot;
                port =&amp;gt; &amp;quot;6379&amp;quot;
                password =&amp;gt; &amp;quot;123456&amp;quot;
                db =&amp;gt; &amp;quot;1&amp;quot;
                key =&amp;gt; &amp;quot;mes-105-key&amp;quot;
                data_type =&amp;gt; &amp;quot;list&amp;quot;
        }
}

output {

        if [type] == &amp;quot;mes-105&amp;quot; {

                elasticsearch {
                        hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
                        index =&amp;gt; &amp;quot;mes-105-%{+YYYY.MM.dd}&amp;quot;
                }
        }
}


[root@logstash1 conf.d]# logstash -f read-redis.conf  -t

[root@logstash1 conf.d]# logstash -f read-redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;logstash1成功启动后，在redis查看，数据已经被logstash1消费&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1:6379[1]&amp;gt; KEYS *
1) &amp;quot;mes-105-key&amp;quot;
127.0.0.1:6379[1]&amp;gt; KEYS *
1) &amp;quot;mes-105-key&amp;quot;
127.0.0.1:6379[1]&amp;gt; KEYS *
(empty list or set)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kibana界面查看对应的索引并创建&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201213151628730.png&#34; alt=&#34;image-20201213151628730&#34;&gt;&lt;/p&gt;
&lt;p&gt;discover界面查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201213151900401.png&#34; alt=&#34;image-20201213151900401&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;经由redis收集nginx日志&#34;&gt;经由redis收集nginx日志&lt;/h1&gt;
&lt;p&gt;​	在上步实验中，证实了整个数据传输线路连通的情况下，只需在logstash2主机上，安装nginx，并根据相同的思路，传输到redis，再经由logstash1读取，存储到es中即可&lt;/p&gt;
&lt;h2 id=&#34;安装nginx&#34;&gt;安装nginx&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash2 ~]# yum install -y nginx

[root@logstash2 ~]# vim /etc/nginx/nginx.conf
log_format access_json &#39;{&amp;quot;@timestamp&amp;quot;:&amp;quot;$time_iso8601&amp;quot;,&#39;
        &#39;&amp;quot;host&amp;quot;:&amp;quot;$server_addr&amp;quot;,&#39;
        &#39;&amp;quot;clientip&amp;quot;:&amp;quot;$remote_addr&amp;quot;,&#39;
        &#39;&amp;quot;size&amp;quot;:$body_bytes_sent,&#39;
        &#39;&amp;quot;responsetime&amp;quot;:$request_time,&#39;
        &#39;&amp;quot;upstreamtime&amp;quot;:&amp;quot;$upstream_response_time&amp;quot;,&#39;
        &#39;&amp;quot;upstreamhost&amp;quot;:&amp;quot;$upstream_addr&amp;quot;,&#39;
        &#39;&amp;quot;http_host&amp;quot;:&amp;quot;$host&amp;quot;,&#39;
        &#39;&amp;quot;url&amp;quot;:&amp;quot;$uri&amp;quot;,&#39;
        &#39;&amp;quot;domain&amp;quot;:&amp;quot;$host&amp;quot;,&#39;
        &#39;&amp;quot;http_user_agent&amp;quot;:&amp;quot;$http_user_agent&amp;quot;,&#39;
        &#39;&amp;quot;xff&amp;quot;:&amp;quot;$http_x_forwarded_for&amp;quot;,&#39;
        &#39;&amp;quot;referer&amp;quot;:&amp;quot;$http_referer&amp;quot;,&#39;
        &#39;&amp;quot;status&amp;quot;:&amp;quot;$status&amp;quot;}&#39;;
    access_log  /var/log/nginx/access.log  access_json;

[root@logstash2 ~]# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
[root@logstash2 ~]# nginx

将nginx日志改成json格式
[root@logstash2 ~]# chmod a+r /var/log/nginx/access.log 
添加读权限
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置logstash2&#34;&gt;配置logstash2&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash2 conf.d]# cat nginx-redis-es.conf 
input {

	file {
		path =&amp;gt; &amp;quot;/var/log/nginx/access.log&amp;quot;
		type =&amp;gt; &amp;quot;nginx-105&amp;quot;
		start_position =&amp;gt; &amp;quot;beginning&amp;quot;
		stat_interval =&amp;gt; &amp;quot;2&amp;quot;
		codec =&amp;gt; &amp;quot;json&amp;quot;
	}
}

output {

	if [type] == &amp;quot;nginx-105&amp;quot; {
		redis {
			host =&amp;gt; &amp;quot;192.168.80.105&amp;quot;
			port =&amp;gt; &amp;quot;6379&amp;quot;
			password =&amp;gt; &amp;quot;123456&amp;quot;
			db =&amp;gt; &amp;quot;1&amp;quot;
			key =&amp;gt; &amp;quot;nginx-105-key&amp;quot;
			data_type =&amp;gt; &amp;quot;list&amp;quot;
		}
	}
}

[root@logstash2 conf.d]# logstash -f nginx-redis-es.conf  -t
[root@logstash2 conf.d]# systemctl restart logstash
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;检查redis数据&#34;&gt;检查redis数据&lt;/h2&gt;
&lt;p&gt;​	redis中有系统日志的key数据，但没有对应nginx的key数据，暂未排查到原因&lt;/p&gt;
&lt;h2 id=&#34;配置logstash1&#34;&gt;配置logstash1&lt;/h2&gt;
&lt;h2 id=&#34;kibana界面查看&#34;&gt;kibana界面查看&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk结合rsyslog收集haproxy日志</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88rsyslog%E6%94%B6%E9%9B%86haproxy%E6%97%A5%E5%BF%97/" />
            <id>https://latteStudio.github.io/posts/elk%E7%BB%93%E5%90%88rsyslog%E6%94%B6%E9%9B%86haproxy%E6%97%A5%E5%BF%97/</id>
            <updated>2020-12-14T15:58:03&#43;08:00</updated>
            <published>2020-12-12T18:10:37&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk结合rsyslog收集haproxy日志</summary>
            
                <content type="html">&lt;h1 id=&#34;安装haproxy配置rsyslog&#34;&gt;安装haproxy配置rsyslog&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;节点规划：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;haproxy+rsyslog：80.106&lt;/li&gt;
&lt;li&gt;logstash：80.108&lt;/li&gt;
&lt;li&gt;es：80.106+80.107组成的es集群&lt;/li&gt;
&lt;li&gt;kibana：80.106+80.107各有一个kibana实例&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装haproxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y haproxy
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改haproxy配置文件，定义日志用本地rsyslog接收&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log         127.0.0.1 local2
   
listen kibana
        bind 0.0.0.0:80
        mode http
        log global
        server 192.168.80.107 192.168.80.107:5601 check
   
定义haproxy日志用local2接收，并定义了一个代理段，代理了107上的kibana端口，用于测试
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置rsyslog&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ModLoad imudp
$UDPServerRun 514
   
# Provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 514
   
local2.* /var/log/haproxy.log
local2.* @@192.168.80.108:1514
   
开启udp和tcp的传输
local2日志一份存储到本地的haproxy.log日志，一份存发送到logstash主机的1514上，1514正是logstash用于接收数据的tcp类型的input
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启haproxy和rsyslog&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 ~]# systemctl restart haproxy rsyslog
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;配置logstash&#34;&gt;配置logstash&lt;/h1&gt;
&lt;h2 id=&#34;配置logstash接收tcp类型input&#34;&gt;配置logstash接收tcp类型input&lt;/h2&gt;
&lt;p&gt;​	其来源为rsyslog接收的haproxy日志并通过tcp连接发送到logstash监听的tcp端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat haproxy-via-rsyslog.conf
input {
	syslog {

		port =&amp;gt; 1514
		type =&amp;gt; &amp;quot;rsyslog-80-106&amp;quot;
	}
}

output {

	if [type] == &amp;quot;rsyslog-80-106&amp;quot; {
		elasticsearch {
			hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
			index =&amp;gt; &amp;quot;rsyslog-80-106-%{+YYYY.MM.dd}&amp;quot;
		}
	}
}

input类型为1514，监听该端口接收到的rsyslog数据
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;语法测试并启动logstash&#34;&gt;语法测试并启动logstash&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash conf.d]# logstash -f haproxy-via-rsyslog.conf  -t
WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults
Could not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config which logs errors to the console
[WARN ] 2020-12-12 18:30:26.889 [LogStash::Runner] multilocal - Ignoring the &#39;pipelines.yml&#39; file because modules or command line options are specified
Configuration OK

[root@logstash conf.d]# logstash -f haproxy-via-rsyslog.conf 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;访问haproxy&#34;&gt;访问haproxy&lt;/h2&gt;
&lt;p&gt;​	浏览器访问haproxy生成一些日志，&lt;/p&gt;
&lt;h1 id=&#34;kibana管理索引&#34;&gt;kibana管理索引&lt;/h1&gt;
&lt;h2 id=&#34;创建索引&#34;&gt;创建索引&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212183347667.png&#34; alt=&#34;image-20201212183347667&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;discover界面查看数据&#34;&gt;discover界面查看数据&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212183417749.png&#34; alt=&#34;image-20201212183417749&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk收集nginx日志</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/" />
            <id>https://latteStudio.github.io/posts/elk%E6%94%B6%E9%9B%86nginx%E6%97%A5%E5%BF%97/</id>
            <updated>2020-12-14T15:57:14&#43;08:00</updated>
            <published>2020-12-12T15:36:10&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk收集nginx日志</summary>
            
                <content type="html">&lt;h1 id=&#34;安装nginx&#34;&gt;安装nginx&lt;/h1&gt;
&lt;h2 id=&#34;yum安装&#34;&gt;yum安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# yum install -y nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;将nginx日志配置为json格式&#34;&gt;将nginx日志配置为json格式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# vim /etc/nginx/nginx.conf

http {
    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &#39;
                      &#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39;
                      &#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;;


    log_format access_json &#39;{&amp;quot;@timestamp&amp;quot;:&amp;quot;$time_iso8601&amp;quot;,&#39;
        &#39;&amp;quot;host&amp;quot;:&amp;quot;$server_addr&amp;quot;,&#39;
        &#39;&amp;quot;clientip&amp;quot;:&amp;quot;$remote_addr&amp;quot;,&#39;
        &#39;&amp;quot;size&amp;quot;:$body_bytes_sent,&#39;
        &#39;&amp;quot;responsetime&amp;quot;:$request_time,&#39;
        &#39;&amp;quot;upstreamtime&amp;quot;:&amp;quot;$upstream_response_time&amp;quot;,&#39;
        &#39;&amp;quot;upstreamhost&amp;quot;:&amp;quot;$upstream_addr&amp;quot;,&#39;
        &#39;&amp;quot;http_host&amp;quot;:&amp;quot;$host&amp;quot;,&#39;
        &#39;&amp;quot;url&amp;quot;:&amp;quot;$uri&amp;quot;,&#39;
        &#39;&amp;quot;domain&amp;quot;:&amp;quot;$host&amp;quot;,&#39;
        &#39;&amp;quot;xff&amp;quot;:&amp;quot;$http_x_forwarded_for&amp;quot;,&#39;
        &#39;&amp;quot;referer&amp;quot;:&amp;quot;$http_referer&amp;quot;,&#39;
        &#39;&amp;quot;status&amp;quot;:&amp;quot;$status&amp;quot;}&#39;;
    access_log  /var/log/nginx/access.log  access_json;

[root@logstash ~]# systemctl restart nginx


[root@logstash ~]# chmod a+r /var/log/nginx/access.log 

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;配置logstash&#34;&gt;配置logstash&lt;/h1&gt;
&lt;h2 id=&#34;配置收集nginx日志&#34;&gt;配置收集nginx日志&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# cat /etc/logstash/conf.d/nginx.conf
input {

	file {
		path  =&amp;gt; &amp;quot;/var/log/nginx/access.log&amp;quot;
		start_position	=&amp;gt; &amp;quot;beginning&amp;quot;
		stat_interval	=&amp;gt; 3
		type	=&amp;gt; &amp;quot;nginx-access-log&amp;quot;
		codec	=&amp;gt; &amp;quot;json&amp;quot;

	}
	
}

output {
	if [type] == &amp;quot;nginx-access-log&amp;quot; {

		elasticsearch {
			hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
			index =&amp;gt; &amp;quot;nginx-access-log-%{+YYYY.MM.dd}&amp;quot;
		}
	}
}



&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查语法后启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# logstash -f /etc/logstash/conf.d/nginx.conf -t
[root@logstash ~]# logstash -f /etc/logstash/conf.d/nginx.conf 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kibana界面上创建对应索引&#34;&gt;kibana界面上创建对应索引&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212175317379.png&#34; alt=&#34;image-20201212175317379&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;logstash收集tcp日志&#34;&gt;logstash收集tcp日志&lt;/h1&gt;
&lt;h2 id=&#34;配置logstash接收tcp类型的input&#34;&gt;配置logstash接收tcp类型的input&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# cat /etc/logstash/conf.d/tcptest.conf
input {
	tcp {
		port =&amp;gt; &amp;quot;5044&amp;quot;
		codec =&amp;gt; &amp;quot;json&amp;quot;
	}
}

output {
	elasticsearch {
		hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
		index =&amp;gt; &amp;quot;tcp-log-%{+YYYY.MM.dd}&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;语法检查后启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# logstash -f /etc/logstash/conf.d/nginx.conf -t
[root@logstash ~]# logstash -f /etc/logstash/conf.d/nginx.conf 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看5044端口监听，由logstash代为监听&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# ss -nltp |grep 5044
LISTEN     0      128         :::5044                    :::*                   users:((&amp;quot;java&amp;quot;,pid=3624,fd=98))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模拟访问5044端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# telnet 192.168.80.108 5044

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kibana索引管理里创建索引&#34;&gt;kibana索引管理里创建索引&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212180150498.png&#34; alt=&#34;image-20201212180150498&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;dicover界面查看&#34;&gt;dicover界面查看&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212180329112.png&#34; alt=&#34;image-20201212180329112&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk收集tomcat日志</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E6%94%B6%E9%9B%86tomcat%E6%97%A5%E5%BF%97/" />
            <id>https://latteStudio.github.io/posts/elk%E6%94%B6%E9%9B%86tomcat%E6%97%A5%E5%BF%97/</id>
            <updated>2020-12-14T15:57:24&#43;08:00</updated>
            <published>2020-12-12T13:37:35&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk收集tomcat日志</summary>
            
                <content type="html">&lt;h1 id=&#34;elk收集tomcat日志&#34;&gt;elk收集tomcat日志&lt;/h1&gt;
&lt;h2 id=&#34;部署tomcat&#34;&gt;部署tomcat&lt;/h2&gt;
&lt;h3 id=&#34;安装jdk环境&#34;&gt;安装jdk环境&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装yum自带的openjdk1.8版本&lt;/li&gt;
&lt;li&gt;配置JAVA_HOME和PATH&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;安装tomcat&#34;&gt;安装tomcat&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;上传tomcat二进制包并解压；做软链接
[root@es1 ~]# mkdir /apps
[root@es1 apps]# ll
total 10140
-rw-r--r-- 1 root root 10379806 Sep  2 14:36 apache-tomcat-8.5.57.tar.gz

[root@es1 apps]# tar -xf apache-tomcat-8.5.57.tar.gz 
[root@es1 apps]# ln -sv apache-tomcat-8.5.57 tomcat
‘tomcat’ -&amp;gt; ‘apache-tomcat-8.5.57’


修改server.xml,修改webapp所在的数据目录
      &amp;lt;Host name=&amp;quot;localhost&amp;quot;  appBase=&amp;quot;/data/tomcat/&amp;quot;
            unpackWARs=&amp;quot;true&amp;quot; autoDeploy=&amp;quot;true&amp;quot;&amp;gt;

创建单独的数据目录，存放webapp，并定义一个myapp的webapp
[root@es1 apps]# mkdir /data/tomcat/myapp
[root@es1 apps]# echo myapp-v1 &amp;gt; /data/tomcat/myapp/index.html

启动，并访问
[root@es1 apps]# /apps/tomcat/bin/startup.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212134947998.png&#34; alt=&#34;image-20201212134947998&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;修改tomcat日志格式为json&#34;&gt;修改tomcat日志格式为json&lt;/h2&gt;
&lt;p&gt;1、修改日志格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.AccessLogValve&amp;quot; directory=&amp;quot;logs&amp;quot;
               prefix=&amp;quot;tomcat_access_log&amp;quot; suffix=&amp;quot;.log&amp;quot;
pattern=&amp;quot;{&amp;amp;quot;client&amp;amp;quot;:&amp;amp;quot;%h&amp;amp;quot;,  &amp;amp;quot;client user&amp;amp;quot;:&amp;amp;quot;%l&amp;amp;quot;,   &amp;amp;quot;authenticated&amp;amp;quot;:&amp;amp;quot;%u&amp;amp;quot;,   &amp;amp;quot;access time&amp;amp;quot;:&amp;amp;quot;%t&amp;amp;quot;,     &amp;amp;quot;method&amp;amp;quot;:&amp;amp;quot;%r&amp;amp;quot;,   &amp;amp;quot;status&amp;amp;quot;:&amp;amp;quot;%s&amp;amp;quot;,  &amp;amp;quot;send bytes&amp;amp;quot;:&amp;amp;quot;%b&amp;amp;quot;,  &amp;amp;quot;Query?string&amp;amp;quot;:&amp;amp;quot;%q&amp;amp;quot;,  &amp;amp;quot;partner&amp;amp;quot;:&amp;amp;quot;%{Referer}i&amp;amp;quot;,  &amp;amp;quot;Agent version&amp;amp;quot;:&amp;amp;quot;%{User-Agent}i&amp;amp;quot;}&amp;quot;/&amp;gt;

在pattern部分，定义了json格式的日志
改了日志文件的前缀和后缀
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、重启tomcat，查看日志&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 apps]# ./tomcat/bin/startup.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[root@es1 apps]# tailf /apps/tomcat/logs/tomcat_access_log.2020-12-12.log 

{&amp;quot;client&amp;quot;:&amp;quot;192.168.80.1&amp;quot;,  &amp;quot;client user&amp;quot;:&amp;quot;-&amp;quot;,   &amp;quot;authenticated&amp;quot;:&amp;quot;-&amp;quot;,   &amp;quot;access time&amp;quot;:&amp;quot;[12/Dec/2020:14:24:07 +0800]&amp;quot;,     &amp;quot;method&amp;quot;:&amp;quot;GET /myapp/ HTTP/1.1&amp;quot;,   &amp;quot;status&amp;quot;:&amp;quot;304&amp;quot;,  &amp;quot;send bytes&amp;quot;:&amp;quot;-&amp;quot;,  &amp;quot;Query?string&amp;quot;:&amp;quot;&amp;quot;,  &amp;quot;partner&amp;quot;:&amp;quot;-&amp;quot;,  &amp;quot;Agent version&amp;quot;:&amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&amp;quot;}
{&amp;quot;client&amp;quot;:&amp;quot;192.168.80.1&amp;quot;,  &amp;quot;client user&amp;quot;:&amp;quot;-&amp;quot;,   &amp;quot;authenticated&amp;quot;:&amp;quot;-&amp;quot;,   &amp;quot;access time&amp;quot;:&amp;quot;[12/Dec/2020:14:24:07 +0800]&amp;quot;,     &amp;quot;method&amp;quot;:&amp;quot;GET /favicon.ico HTTP/1.1&amp;quot;,   &amp;quot;status&amp;quot;:&amp;quot;404&amp;quot;,  &amp;quot;send bytes&amp;quot;:&amp;quot;648&amp;quot;,  &amp;quot;Query?string&amp;quot;:&amp;quot;&amp;quot;,  &amp;quot;partner&amp;quot;:&amp;quot;http://192.168.80.106:8080/myapp/&amp;quot;,  &amp;quot;Agent version&amp;quot;:&amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置logstash收集tomcat日志&#34;&gt;配置logstash收集tomcat日志&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先给tomcat日志加上logstash用户可以读的权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# chmod a+r /apps/tomcat/logs/tomcat_access_log.2020-12-12.log 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置logstash的配置文件，输入为tomcat日志，输出为es的地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# cat /etc/logstash/conf.d/tomcat.conf 
input {
 file {
 path =&amp;gt; &amp;quot;/apps/tomcat/logs/tomcat_access_log.*.log&amp;quot;
 start_position =&amp;gt; &amp;quot;beginning&amp;quot;
 stat_interval =&amp;gt; 3
 type	=&amp;gt; &amp;quot;tomcat-log&amp;quot;
 codec	=&amp;gt; &amp;quot;json&amp;quot;
}
   
 file {
   
 path	=&amp;gt;	&amp;quot;/var/log/logstash/logstash-plain.log&amp;quot;
 start_position	=&amp;gt;	&amp;quot;beginning&amp;quot;
 stat_interval	=&amp;gt;	3
 type		=&amp;gt;	&amp;quot;logstash-log&amp;quot;
}
}
   
   
output {
 if [type]	== &amp;quot;tomcat-log&amp;quot; {
     elasticsearch {
     hosts	=&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
     index	=&amp;gt; &amp;quot;tomcat-log-%{+YYYY.MM.dd}&amp;quot;
 }
}
   
 if [type] 	== &amp;quot;logstash-log&amp;quot; {
     elasticsearch {
     hosts	=&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
     index	=&amp;gt; &amp;quot;logstash-log-%{+YYYY.MM.dd}&amp;quot;
 }
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法检查，启动logstash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash apps]# logstash -f /etc/logstash/conf.d/tomcat.conf -t
WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults
Could not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config which logs errors to the console
[WARN ] 2020-12-12 15:23:41.717 [LogStash::Runner] multilocal - Ignoring the &#39;pipelines.yml&#39; file because modules or command line options are specified
Configuration OK
[INFO ] 2020-12-12 15:23:48.507 [LogStash::Runner] runner - Using config.test_and_exit mode. Config Validation Result: OK. Exiting Logstash
   
[root@logstash apps]# logstash -f /etc/logstash/conf.d/tomcat.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kibana界面创建tomcat的索引&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212152930777.png&#34; alt=&#34;image-20201212152930777&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kibana界面discover查看上步创建的索引日志&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201212152955813.png&#34; alt=&#34;image-20201212152955813&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外一个数据流logstash日志的同理操作即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">elk部署</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/elk%E9%83%A8%E7%BD%B2/" />
            <id>https://latteStudio.github.io/posts/elk%E9%83%A8%E7%BD%B2/</id>
            <updated>2020-12-14T15:57:01&#43;08:00</updated>
            <published>2020-12-10T15:33:56&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">elk部署</summary>
            
                <content type="html">&lt;h1 id=&#34;elk介绍&#34;&gt;elk介绍&lt;/h1&gt;
&lt;p&gt;​	elk为elasticsearch、logstash、kibana的合称，三者共同组成了日志收集处理系统，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;logstash：负责日志的收集，如tomcat、nginx等应用产生的日志；&lt;/li&gt;
&lt;li&gt;elasticsearch：负责日志数据的存储、检索查询；&lt;/li&gt;
&lt;li&gt;kibana：是ui框架，从elasticsearch中抽取数据并图形化展示；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为logstash较为重量，因此日志收集部分还有beats系列，如filebeat、metricbeat等，部署在需要收集日志的每个节点上更为轻量，logstash可选的，做一个中间的中转收集和过滤；因此除elk为，还有efk，emk等，但本质是一样的；统称elastic stack，共同作为一个日志的处理系统；&lt;/p&gt;
&lt;p&gt;官方网址：https://www.elastic.co/guide/index.html&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例结构图示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于较大数据规模，需要引入redis，kafka这类做缓存中间层，较小规模则不需要；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211152030167.png&#34; alt=&#34;image-20201211152030167&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;elasticsearch部署&#34;&gt;elasticsearch部署&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Elasticsearch is the distributed search and analytics engine at the heart of the Elastic Stack. Logstash and Beats facilitate collecting, aggregating, and enriching your data and storing it in Elasticsearch. Kibana enables you to interactively explore, visualize, and share insights into your data and manage and monitor the stack. Elasticsearch is where the indexing, search, and analysis magic happens.&lt;/p&gt;
&lt;p&gt;Elasticsearch provides near real-time search and analytics for all types of data. Whether you have structured or unstructured text, numerical data, or geospatial data, Elasticsearch can efficiently store and index it in a way that supports fast searches. You can go far beyond simple data retrieval and aggregate information to discover trends and patterns in your data. And as your data and query volume grows, the distributed nature of Elasticsearch enables your deployment to grow seamlessly right along with it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;节点规划&#34;&gt;节点规划&lt;/h2&gt;
&lt;p&gt;共2台机器，组成es集群，ip：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.80.106；node1&lt;/li&gt;
&lt;li&gt;192.168.80.107；node2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jdk8安装&#34;&gt;jdk8安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# yum install -y java-1.8.0-openjdk-devel
会自动安装openjdk包和其他依赖

[root@node1 ~]# cat /etc/profile.d/java.sh 
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export PATH=$JAVA_HOME/bin:$PATH

[root@node1 ~]# source /etc/profile.d/java.sh
配置环境变量
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;elasticsearch安装&#34;&gt;elasticsearch安装&lt;/h2&gt;
&lt;p&gt;其支持多种安装方式，此处采用rpm包安装方式&lt;/p&gt;
&lt;p&gt;1、先添加一块数据磁盘&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# lsblk 
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0   40G  0 disk 
├─sda1   8:1    0    1G  0 part /boot
└─sda2   8:2    0   39G  0 part /
sr0     11:0    1  4.2G  0 rom  
[root@node1 ~]# for i in /sys/class/scsi_host/host*/scan;do echo &amp;quot;- - -&amp;quot; &amp;gt;$i;done
[root@node1 ~]# lsblk 
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0   40G  0 disk 
├─sda1   8:1    0    1G  0 part /boot
└─sda2   8:2    0   39G  0 part /
sdb      8:16   0   50G  0 disk 
sr0     11:0    1  4.2G  0 rom  

格式化挂载；
[root@node1 ~]# mkfs.xfs /dev/sdb
meta-data=/dev/sdb               isize=512    agcount=4, agsize=3276800 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=0, sparse=0
data     =                       bsize=4096   blocks=13107200, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=1
log      =internal log           bsize=4096   blocks=6400, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
[root@node1 ~]# mkdir /data
[root@node1 ~]# mount /dev/sdb /data/
[root@node1 ~]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/sdb         50G   33M   50G   1% /data

记得写入/etc/fstab实现开机挂载
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、下载rpm包&lt;/p&gt;
&lt;p&gt;采用清华的镜像源，注意elastic stack的所有组件的版本号要完全一致；&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/elasticstack/6.x/yum/6.8.1/&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/elasticstack/6.x/yum/6.8.1/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# ll
total 669164
-rw-------. 1 root root      1391 Aug  8 12:02 anaconda-ks.cfg
-rw-r--r--  1 root root 148535665 Dec 10 17:09 elasticsearch-6.8.1.rpm
-rw-r--r--  1 root root   2916002 Dec 10 17:01 elasticsearch-6.8.1.rpm.1
-rw-r--r--  1 root root 533765727 Oct 20  2017 harbor-offline-installer-v1.2.2.tgz
[root@node1 ~]# rpm -ivh elasticsearch-6.8.1.rpm
warning: elasticsearch-6.8.1.rpm: Header V4 RSA/SHA512 Signature, key ID d88e42b4: NOKEY
Preparing...                          ################################# [100%]
Creating elasticsearch group... OK
Creating elasticsearch user... OK
Updating / installing...
   1:elasticsearch-0:6.8.1-1          ################################# [100%]
### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd
 sudo systemctl daemon-reload
 sudo systemctl enable elasticsearch.service
### You can start elasticsearch service by executing
 sudo systemctl start elasticsearch.service
Created elasticsearch keystore in /etc/elasticsearch

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装后配置&#34;&gt;安装后配置&lt;/h2&gt;
&lt;p&gt;1、修改配置文件，yaml格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# vim /etc/elasticsearch/elasticsearch.yml 
[root@node1 ~]# grep -v &amp;quot;^#&amp;quot; /etc/elasticsearch/elasticsearch.yml 
cluster.name: myelk 集群名
node.name: node-1 集群中节点名
path.data: /data/esdata 数据和日志目录
path.logs: /data/eslog
bootstrap.memory_lock: true true为默认占用1g内存
network.host: 0.0.0.0 监听地址
http.port: 9200 监听端口
discovery.zen.ping.unicast.hosts: [&amp;quot;192.168.80.106&amp;quot;, &amp;quot;192.168.80.107&amp;quot;] 集群成员的ip

复制到集群中其他节点做对应修改，其他节点，同样安装jdk，配置环境变量；规划到存储es数据的分区；下载es的rpm包并安装；

[root@node2 ~]# grep -v &amp;quot;^#&amp;quot; /etc/elasticsearch/elasticsearch.yml 
cluster.name: myelk
node.name: node-2
path.data: /data/esdata
path.logs: /data/eslog
bootstrap.memory_lock: true
network.host: 0.0.0.0
http.port: 9200
discovery.zen.ping.unicast.hosts: [&amp;quot;192.168.80.106&amp;quot;, &amp;quot;192.168.80.107&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、改数据目录属主&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chown -R elasticsearch.elasticsearch /data/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、加大内存设置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# vim /usr/lib/systemd//system/elasticsearch.service
LimitMEMLOCK=infinity


[root@node1 ~]# vim /etc/elasticsearch/jvm.options 
-Xms2g
-Xmx2g

先在unit file中设置使用内存无限制，
再在jvm配置文件中，限制最大最小内存就是2g，（节点内存要足够）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、启动失败的错误&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;内存不足&lt;/p&gt;
&lt;p&gt;内存不足，启动总失败&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dec 10 17:45:35 node2 systemd: Started Elasticsearch.
Dec 10 17:45:47 node2 systemd: elasticsearch.service: main process exited, code=exited, status=78/n/a
Dec 10 17:45:47 node2 systemd: Unit elasticsearch.service entered failed state.
Dec 10 17:45:47 node2 systemd: elasticsearch.service failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动用户不能是root&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2020-12-10T17:37:53,368][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [node-1] uncaught exception in thread [main]
org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jvm参数设置有误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Invalid initial heap size: -Xms1.5g
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
   
需要是整数；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;验证&#34;&gt;验证&lt;/h2&gt;
&lt;p&gt;成功部署。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:22                                                                             *:*                  
LISTEN     0      100                                                        127.0.0.1:25                                                                             *:*                  
LISTEN     0      128                                                               :::9200                                                                          :::*                  
LISTEN     0      128                                                               :::9300                                                                          :::*                  
LISTEN     0      128                                                               :::22                                                                            :::*                  
LISTEN     0      100                                                              ::1:25                                                                            :::* 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201210173931878.png&#34; alt=&#34;image-20201210173931878&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201210174904561.png&#34; alt=&#34;image-20201210174904561&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;检查集群监控性&#34;&gt;检查集群监控性&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# curl http://192.168.80.106:9200/_cluster/health?pretty=true
{
  &amp;quot;cluster_name&amp;quot; : &amp;quot;myelk&amp;quot;,
  &amp;quot;status&amp;quot; : &amp;quot;green&amp;quot;,
  &amp;quot;timed_out&amp;quot; : false,
  &amp;quot;number_of_nodes&amp;quot; : 2,
  &amp;quot;number_of_data_nodes&amp;quot; : 2,
  &amp;quot;active_primary_shards&amp;quot; : 0,
  &amp;quot;active_shards&amp;quot; : 0,
  &amp;quot;relocating_shards&amp;quot; : 0,
  &amp;quot;initializing_shards&amp;quot; : 0,
  &amp;quot;unassigned_shards&amp;quot; : 0,
  &amp;quot;delayed_unassigned_shards&amp;quot; : 0,
  &amp;quot;number_of_pending_tasks&amp;quot; : 0,
  &amp;quot;number_of_in_flight_fetch&amp;quot; : 0,
  &amp;quot;task_max_waiting_in_queue_millis&amp;quot; : 0,
  &amp;quot;active_shards_percent_as_number&amp;quot; : 100.0
}

其中green代表集群健康；
yellow代表分片丢失；
red代表主分片丢失；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;探测es集群监控的py脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/struggle-1216/p/12455419.html&#34;&gt;来源&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# ./test-es-healty.py 
50
[root@node1 ~]# cat test-es-healty.py 
#!/usr/bin/env python
#coding:utf-8
import smtplib
from email.mime.text import MIMEText
from email.utils import formataddr
import subprocess
body = &amp;quot;&amp;quot;
false=&amp;quot;false&amp;quot;
obj = subprocess.Popen((&amp;quot;curl -sXGET http://192.168.80.107:9200/_cluster/health?pretty=true&amp;quot;),shell=True,stdout=subprocess.PIPE)
data=obj.stdout.read()
data1=eval(data)
status=data1.get(&amp;quot;status&amp;quot;)
if status == &amp;quot;green&amp;quot;:
        print(&amp;quot;50&amp;quot;)
else:
        print(&amp;quot;100&amp;quot;)
[root@node1 ~]# ./test-es-healty.py 
50
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装es插件head&#34;&gt;安装es插件head&lt;/h2&gt;
&lt;h1 id=&#34;kibana部署&#34;&gt;kibana部署&lt;/h1&gt;
&lt;h2 id=&#34;kibana简介&#34;&gt;kibana简介&lt;/h2&gt;
&lt;p&gt;​	为es的可视化界面，利用es的接口抽取数据，并以各种图形化的方式展示，具备地理图示、时间序列等特点，方便检索；&lt;/p&gt;
&lt;h2 id=&#34;节点规划-1&#34;&gt;节点规划&lt;/h2&gt;
&lt;p&gt;共2台机器，每台es部署一个kibana，ip：每个kibana配置时，连接自己本地的es地址和端口即可，es集群内部会自动同步数据，多个kibana前还可以加个nginx做负载均衡；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.80.106；node1&lt;/li&gt;
&lt;li&gt;192.168.80.107；node2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;1、下载和es同版本的rpm包，直接install&lt;/p&gt;
&lt;p&gt;清华镜像站es下载地址：https://mirrors.tuna.tsinghua.edu.cn/elasticstack/6.x/yum/6.8.1/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 ~]# rpm -ivh kibana-6.8.1-x86_64.rpm 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、修改kibana配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 ~]# grep -v &#39;^#&#39; /etc/kibana/kibana.yml |grep -v &#39;^$&#39;
server.port: 5601
server.host: &amp;quot;0.0.0.0&amp;quot;
elasticsearch.hosts: [&amp;quot;http://localhost:9200&amp;quot;]
i18n.locale: &amp;quot;zh-CN&amp;quot;
分别为监听端口、监听地址、要连接的es地址，这里是本地，语系设置；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、另一台节点做同样的操作，注意修改相应的配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es2 ~]# grep -v &#39;^#&#39; /etc/kibana/kibana.yml |grep -v &#39;^$&#39;
server.port: 5601
server.host: &amp;quot;0.0.0.0&amp;quot;
elasticsearch.hosts: [&amp;quot;http://localhost:9200&amp;quot;]
i18n.locale: &amp;quot;zh-CN&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、启动，开机启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 ~]# systemctl enable kibana;systemctl start kibana
Created symlink from /etc/systemd/system/multi-user.target.wants/kibana.service to /etc/systemd/system/kibana.service.
[root@es1 ~]# ss -nlt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:5601                           *:*     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、界面访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211154105377.png&#34; alt=&#34;image-20201211154105377&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;kibana基础管理&#34;&gt;kibana基础管理&lt;/h2&gt;
&lt;h3 id=&#34;添加数据&#34;&gt;添加数据&lt;/h3&gt;
&lt;p&gt;1、在80.106节点的kibana界面添加样例数据&lt;/p&gt;
&lt;p&gt;​	此处添加了一个web日志样例数据；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211155035236.png&#34; alt=&#34;image-20201211155035236&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、在另外一台kibana查看是否同步&lt;/p&gt;
&lt;p&gt;​	107上可以看到刚添加的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211155149815.png&#34; alt=&#34;image-20201211155149815&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、后台查看es数据目录是否生成数据，&lt;/p&gt;
&lt;p&gt;​	同一个集群中2个es是同步数据，起到备份作用；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;106：
[root@es1 ~]# ll /data/esdata/nodes/0/indices/
total 0
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 9ckx4q-3ROWMxev8mQHcwA
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:49 G0WRjQk6S6eOSB7I5AlDlQ
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 rj1dL_VMTYSTIeg2Pvx3oA

107：
[root@es2 ~]# ll /data/esdata/nodes/0/indices/
total 0
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 9ckx4q-3ROWMxev8mQHcwA
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:49 G0WRjQk6S6eOSB7I5AlDlQ
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 rj1dL_VMTYSTIeg2Pvx3oA
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;管理索引&#34;&gt;管理索引&lt;/h3&gt;
&lt;p&gt;1、kibana界面删除索引&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211155621570.png&#34; alt=&#34;image-20201211155621570&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、es后台数据目录确认&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@es1 ~]# ll /data/esdata/nodes/0/indices/
total 0
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 9ckx4q-3ROWMxev8mQHcwA
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 rj1dL_VMTYSTIeg2Pvx3oA

[root@es2 ~]# ll /data/esdata/nodes/0/indices/
total 0
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 9ckx4q-3ROWMxev8mQHcwA
drwxr-xr-x 4 elasticsearch elasticsearch 29 Dec 11 15:40 rj1dL_VMTYSTIeg2Pvx3oA

# 2台es同步删除了，该样例数据的数据目录；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;logstash部署&#34;&gt;logstash部署&lt;/h1&gt;
&lt;h2 id=&#34;简介-1&#34;&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Logstash is an open source data collection engine with real-time pipelining capabilities. Logstash can dynamically unify data from disparate sources and normalize the data into destinations of your choice. Cleanse and democratize all your data for diverse advanced downstream analytics and visualization use cases.&lt;/p&gt;
&lt;p&gt;While Logstash originally drove innovation in log collection, its capabilities extend well beyond that use case. Any type of event can be enriched and transformed with a broad array of input, filter, and output plugins, with many native codecs further simplifying the ingestion process. Logstash accelerates your insights by harnessing a greater volume and variety of data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;logstash在elk结构中，负责收集、过滤、传输数据，logstash对数据的操作有三大步，logstash对每一条数据处理流水线称为events，各步骤靠插件实现；&lt;strong&gt;logstash可以从多类数据源收集数据，但较为重量，因此有了beats系列，按需在需要收集数据的节点上部署需要的beats，由beats收集，交由logstash汇总，数据处理；&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input
&lt;ul&gt;
&lt;li&gt;数据收集，从各种数据源采集或接收数据，如file、syslog、redis，beats系列等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;filter：（可选）
&lt;ul&gt;
&lt;li&gt;负责数据处理，转换，有grok、drop、clone、geoip等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;output
&lt;ul&gt;
&lt;li&gt;数据输出，常输出到的目标有es，file，statsd等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;节点规划-2&#34;&gt;节点规划&lt;/h2&gt;
&lt;p&gt;一台logstash，ip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.80.108&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装-1&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;1、安装jdk环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node3 ~]# yum install -y java-1.8.0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、配置jdk环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# cat /etc/profile.d/java.sh 
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export PATH=$JAVA_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、安装logstash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# rpm -ivh logstash-6.8.1.rpm 
[root@logstash ~]# chown -R logstash.logstash /usr/share/logstash/data/

#该数据目录属主
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、配置logstash环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# vim /etc/profile.d/logstash.sh
[root@logstash ~]# source !$
source /etc/profile.d/logstash.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;测试logstash&#34;&gt;测试logstash&lt;/h2&gt;
&lt;h3 id=&#34;测试标准输入标准输出&#34;&gt;测试：标准输入、标准输出&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# /usr/share/logstash/bin/logstash -e &#39;input {  stdin{} } output{ stdout { codec =&amp;gt; rubydebug }}&#39; 
hello  
# 输入一个hello

/usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated
{
      &amp;quot;@version&amp;quot; =&amp;gt; &amp;quot;1&amp;quot;,
          &amp;quot;host&amp;quot; =&amp;gt; &amp;quot;logstash&amp;quot;,
    &amp;quot;@timestamp&amp;quot; =&amp;gt; 2020-12-11T08:28:45.073Z,
       &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;hello&amp;quot;
}
[INFO ] 2020-12-11 16:28:45.693 [Api Webserver] agent - Successfully started Logstash API endpoint {:port=&amp;gt;9600}
# 输出结果
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;测试标准输入文件输出&#34;&gt;测试：标准输入、文件输出&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# /usr/share/logstash/bin/logstash -e &#39;input { stdin{} } output { file { path =&amp;gt; &amp;quot;/tmp/linux.txt&amp;quot;}}&#39;
shuaiqi

查看输出的文件内容

[root@logstash ~]# cat /tmp/linux.txt 
{&amp;quot;@version&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;shuaiqi&amp;quot;,&amp;quot;host&amp;quot;:&amp;quot;logstash&amp;quot;,&amp;quot;@timestamp&amp;quot;:&amp;quot;2020-12-11T09:12:36.395Z&amp;quot;}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;测试标准输入输出到elasticsearch&#34;&gt;测试：标准输入、输出到elasticsearch&lt;/h3&gt;
&lt;p&gt;1、命令行定义输入、输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# logstash -e &#39;input { stdin {}} output { elasticsearch {hosts =&amp;gt; [&amp;quot;http://192.168.80.107:9200&amp;quot;] index =&amp;gt; &amp;quot;linux-test-%{+YYYY.MM.dd}&amp;quot; } }&#39;
hello

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、kibana创建索引，根据linux-test的前缀索引搜索匹配&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211171002387.png&#34; alt=&#34;image-20201211171002387&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、在discover查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211171142531.png&#34; alt=&#34;image-20201211171142531&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;收集系统日志输出到文件&#34;&gt;收集系统日志输出到文件&lt;/h3&gt;
&lt;p&gt;1、编辑配置文件，启动定义了系统日志/var/log/messages作为输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# cat /etc/logstash/conf.d/linux_mes.conf 
input {
  file {
   path =&amp;gt; &amp;quot;/var/log/messages&amp;quot;
   start_position =&amp;gt; &amp;quot;beginning&amp;quot;
   stat_interval =&amp;gt; 3  # 间隔时间3s.
   type =&amp;gt; &amp;quot;messagelog&amp;quot;
  }
 
}
 
output {
  elasticsearch {
    hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
    index =&amp;gt; &amp;quot;messagelog-7-100-%{+YYYY.MM.dd}&amp;quot;
  }
 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、语法检查，检查通过后启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logstash -f /etc/logstash/conf.d/linux_mes.conf -t
WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults
Could not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config which logs errors to the console
[WARN ] 2020-12-11 16:47:55.214 [LogStash::Runner] multilocal - Ignoring the &#39;pipelines.yml&#39; file because modules or command line options are specified
Configuration OK


[root@logstash ~]# systemctl start logstash

[root@logstash ~]# logstash -f /etc/logstash/conf.d/linux_mes.conf 
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、管理-》kibana-》索引模式-》创建索引模式，以message开头搜索匹配索引，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211165321179.png&#34; alt=&#34;image-20201211165321179&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、以时间戳做筛选字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211165453617.png&#34; alt=&#34;image-20201211165453617&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、成功创建后，discovery页面在：添加筛选备份，过滤message开头的刚定义的index，右侧即为数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211165722677.png&#34; alt=&#34;image-20201211165722677&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;收集多输入源多输出目标&#34;&gt;收集多输入源、多输出目标&lt;/h3&gt;
&lt;p&gt;0、下载nginx，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y nginx
systemctl start nginx
curl localhost # 生成访问日志

# nginx日志文件注意加所有的读权限，让logstash的进程用户，有权限读取该文件
[root@logstash ~]# chmod a+r /var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、创建配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# cat /etc/logstash/conf.d/nginx-and-syslog.conf 
input {
file {
   path =&amp;gt; &amp;quot;/var/log/messages&amp;quot;
   start_position =&amp;gt; &amp;quot;beginning&amp;quot;
   stat_interval =&amp;gt; 3
   type =&amp;gt; &amp;quot;messagelog&amp;quot;
  }
 
  file {
   path =&amp;gt; &amp;quot;/var/log/nginx/access.log&amp;quot;
   start_position =&amp;gt; &amp;quot;beginning&amp;quot;
   stat_interval =&amp;gt; 3
   type =&amp;gt; &amp;quot;nginx-log&amp;quot;
  }
 
}

# 输入定义了2个，类型为本地的文件；
【读取本地文件时，logstash的启动用户一般是logstash，一定要对输入的文件具有读取权限】


output {
  if [type] == &amp;quot;messagelog&amp;quot; {
    elasticsearch {
    hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
    index =&amp;gt; &amp;quot;messagelog-%{+YYYY.MM.dd}&amp;quot;
  }}
 
  if [type] == &amp;quot;nginx-log&amp;quot; {
    elasticsearch {
    hosts =&amp;gt; [&amp;quot;192.168.80.107:9200&amp;quot;]
    index =&amp;gt; &amp;quot;nginx%{+YYYY.MM.dd}&amp;quot;
  }}
}
# 输出定义了2个，目标为es，index为kibana创建索引时的匹配前缀
# input定义了2个输入，output定义了2个输出，且根据type类型做了if判断

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、检查语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# logstash -f /etc/logstash/conf.d/nginx-and-syslog.conf -t
WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults
Could not find log4j2 configuration at path /usr/share/logstash/config/log4j2.properties. Using default config which logs errors to the console
[WARN ] 2020-12-11 17:21:17.243 [LogStash::Runner] multilocal - Ignoring the &#39;pipelines.yml&#39; file because modules or command line options are specified
Configuration OK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@logstash ~]# logstash -f /etc/logstash/conf.d/nginx-and-syslog.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、kibana创建索引&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211173515826.png&#34; alt=&#34;image-20201211173515826&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、kibana在discover查看数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201211173555016.png&#34; alt=&#34;image-20201211173555016&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/" term="日志处理" label="日志处理" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elk/" term="elk" label="elk" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/elasticsearch/" term="elasticsearch" label="elasticsearch" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/kibana/" term="kibana" label="kibana" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/logstash/" term="logstash" label="logstash" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">jenkins角色权限与凭证管理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/jenkins%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E4%B8%8E%E5%87%AD%E8%AF%81%E7%AE%A1%E7%90%86/" />
            <id>https://latteStudio.github.io/posts/jenkins%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E4%B8%8E%E5%87%AD%E8%AF%81%E7%AE%A1%E7%90%86/</id>
            <updated>2020-12-17T17:14:44&#43;08:00</updated>
            <published>2020-12-08T14:15:07&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">jenkins角色权限与凭证管理</summary>
            
                <content type="html">&lt;h1 id=&#34;权限管理&#34;&gt;权限管理&lt;/h1&gt;
&lt;h2 id=&#34;安装权限管理插件&#34;&gt;安装权限管理插件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在插件管理界面，安装role-based authorization  strategy插件实现rbac的权限管理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装后，选择授权策略为rbs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择后，会出现manage 和 assign role界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208154157262.png&#34; alt=&#34;image-20201208154157262&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建role&#34;&gt;创建role&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管理role界面，默认3类role
&lt;ul&gt;
&lt;li&gt;global 全局生效，默认admin的role是绑定到管理员的role&lt;/li&gt;
&lt;li&gt;item 项目访问的role，支持pattern匹配正则，匹配的是该role能访问到的项目名&lt;/li&gt;
&lt;li&gt;node Jenkins配置集群时需要的role&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208152847000.png&#34; alt=&#34;image-20201208152847000&#34;&gt;&lt;/p&gt;
&lt;p&gt;创建role：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个全局的role，对所有项目的读权限&lt;/li&gt;
&lt;li&gt;2个项目级别的role，分别对java开头和go开头的项目有一定权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208154658749.png&#34; alt=&#34;image-20201208154658749&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建用户&#34;&gt;创建用户&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建allread、gouser、javauser3个用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208155011349.png&#34; alt=&#34;image-20201208155011349&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分配role给用户&#34;&gt;分配role给用户&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;allread用户分配了all-read角色；&lt;/li&gt;
&lt;li&gt;gouser分配了user2角色；&lt;/li&gt;
&lt;li&gt;javauser分配了user1角色；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208155338519.png&#34; alt=&#34;image-20201208155338519&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;测试用户的权限&#34;&gt;测试用户的权限&lt;/h2&gt;
&lt;p&gt;一开始登陆，看不到，因为gouser和javauser还需授予全局角色all-read才可以；&lt;/p&gt;
&lt;p&gt;gouser和javauser登陆，分别只可以看到go开头和java开头的项目；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208160426769.png&#34; alt=&#34;image-20201208160426769&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;凭证管理&#34;&gt;凭证管理&lt;/h1&gt;
&lt;h2 id=&#34;jenkins凭证类型&#34;&gt;Jenkins凭证类型&lt;/h2&gt;
&lt;p&gt;Jenkins的凭证，存储了用户名和密码、api token、密钥对等信息，和gitlab，docker仓库等组件交互时，提供的认证信息，用于证实身份，有5类，常用的前2种，靠插件实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户密码型&lt;/li&gt;
&lt;li&gt;ssh密钥对型&lt;/li&gt;
&lt;li&gt;证书类型&lt;/li&gt;
&lt;li&gt;secret file&lt;/li&gt;
&lt;li&gt;secret text：加密的文本串，如github的api token&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装插件&#34;&gt;安装插件&lt;/h2&gt;
&lt;p&gt;安装如下插件，安装后出现凭证管理选项，2.236.1版本安装后是在创建项目时选中git仓库，才出现创建凭证选项；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208172910979.png&#34; alt=&#34;image-20201208172910979&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208165355073.png&#34; alt=&#34;image-20201208165355073&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;用户密码型凭证&#34;&gt;用户密码型凭证&lt;/h2&gt;
&lt;p&gt;1、Jenkins上安装git插件、主机上安装git命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# yum install -y git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、创建一个job，选择git类型仓库，并填入gitlab的repo地址，填入后会报错无法连接，此时创建凭证、创建后使用该凭证即可连接；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208175903032.png&#34; alt=&#34;image-20201208175903032&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、创建后，点击立刻构建：查看控制台输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201208174657553.png&#34; alt=&#34;image-20201208174657553&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、查看Jenkins主机上，工作目录下的构建目录，已经将目标仓库拉取了下来；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[user1@jenkins-1 ~]$ ll /var/lib/jenkins/workspace/test-auth
total 4
-rw-r--r-- 1 jenkins jenkins 31 Dec  8 17:43 README.md
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ssh密钥对型凭证&#34;&gt;ssh密钥对型凭证&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意：用户密码型的凭证，git仓库地址要是http协议的！ssh密钥对的需要git开头的仓库地址，否则协议不匹配是不会通的；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和用户密码凭证流程一致，只是创建凭证时填入的是Jenkins主机上某linux用户的密钥对；&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/jenkins/" term="jenkins" label="jenkins" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/cicd/" term="cicd" label="cicd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">jenkins部署升级</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/jenkins%E9%83%A8%E7%BD%B2%E5%8D%87%E7%BA%A7/" />
            <id>https://latteStudio.github.io/posts/jenkins%E9%83%A8%E7%BD%B2%E5%8D%87%E7%BA%A7/</id>
            <updated>2020-12-08T14:13:35&#43;08:00</updated>
            <published>2020-12-04T16:55:18&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">jenkins部署升级</summary>
            
                <content type="html">&lt;h1 id=&#34;持续集成持续部署&#34;&gt;持续集成|持续部署&lt;/h1&gt;
&lt;h2 id=&#34;代码部署上线流程&#34;&gt;代码部署上线流程&lt;/h2&gt;
&lt;p&gt;以java代码，tomcat上服务为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jenkins从gitlab拉取代码&lt;/li&gt;
&lt;li&gt;编译源代码&lt;/li&gt;
&lt;li&gt;放置配置文件&lt;/li&gt;
&lt;li&gt;打包&lt;/li&gt;
&lt;li&gt;scp到目标服务器&lt;/li&gt;
&lt;li&gt;将目标服务器从前端调度器中移除（要逐批更新）&lt;/li&gt;
&lt;li&gt;解压程序包放到webroot中&lt;/li&gt;
&lt;li&gt;重启tomcat服务&lt;/li&gt;
&lt;li&gt;对升级了的部分节点进行测试&lt;/li&gt;
&lt;li&gt;将升级后服务器加入前端的调度列表中&lt;/li&gt;
&lt;li&gt;重复上述步骤，直到将所有节点完成升级，或发现bug回滚并重新开发debug&lt;/li&gt;
&lt;li&gt;（若是在docker和k8s的容器云环境，Jenkins还可以将打包后的war包，和基础os镜像构建为镜像，进而以容器化方式运行服务）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;jenkins部署&#34;&gt;Jenkins部署&lt;/h1&gt;
&lt;p&gt;​	Jenkins部署和运行方式有多种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行其war包，运行为java程序；&lt;/li&gt;
&lt;li&gt;离线rpm包安装&lt;/li&gt;
&lt;li&gt;yum仓库安装&lt;/li&gt;
&lt;li&gt;单独以docker容器方式运行，需要docker环境；&lt;/li&gt;
&lt;li&gt;运行于k8s之上，需要k8s集群；（运行于k8s之上有三种方式）https://www.jenkins.io/doc/book/installing/kubernetes/
&lt;ul&gt;
&lt;li&gt;helm包管理&lt;/li&gt;
&lt;li&gt;手写yaml文件&lt;/li&gt;
&lt;li&gt;通过部署Jenkins的operator运行Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;此处采用安装离线rpm包和war包的方式，需要java环境，jdk或jre均可；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;jdk安装&#34;&gt;jdk安装&lt;/h2&gt;
&lt;p&gt;​	直接yum安装仓库中的openjdk版本即可，版本为1.8&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# yum install -y java-1.8.0-openjdk-devel.x86_64 java-1.8.0-openjdk.x86_64

[root@jenkins-1 ~]# java -version
openjdk version &amp;quot;1.8.0_272&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_272-b10)
OpenJDK 64-Bit Server VM (build 25.272-b10, mixed mode)

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rpm包安装启动&#34;&gt;rpm包安装启动&lt;/h2&gt;
&lt;p&gt;​	下载离线的rpm包，上传到服务器，直接rpm安装即可，安装后启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@jenkins-1 ~]# ll
total 68052
-rw-------. 1 root root     1391 Aug  8 12:02 anaconda-ks.cfg
-rw-r--r--  1 root root       45 Dec  7 11:26 google_proxy.sh
-rw-r--r--  1 root root 69675984 Dec  7 11:31 jenkins-2.32.3-1.1.noarch.rpm
[root@jenkins-1 ~]# rpm -ivh jenkins-2.32.3-1.1.noarch.rpm 
warning: jenkins-2.32.3-1.1.noarch.rpm: Header V4 DSA/SHA1 Signature, key ID d50582e6: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:jenkins-2.32.3-1.1               ################################# [100%]
[root@jenkins-1 ~]# rpm -ql jenkins-2.32.3-1.1.noarch.rpm 
package jenkins-2.32.3-1.1.noarch.rpm is not installed
[root@jenkins-1 ~]# rpm -qpl jenkins-2.32.3-1.1.noarch.rpm 
warning: jenkins-2.32.3-1.1.noarch.rpm: Header V4 DSA/SHA1 Signature, key ID d50582e6: NOKEY
/etc/init.d/jenkins
/etc/logrotate.d/jenkins
/etc/sysconfig/jenkins
/usr/lib/jenkins
/usr/lib/jenkins/jenkins.war
/usr/sbin/rcjenkins
/var/cache/jenkins
/var/lib/jenkins
/var/log/jenkins
[root@jenkins-1 ~]# service jenkins status
● jenkins.service - LSB: Jenkins Continuous Integration Server
   Loaded: loaded (/etc/rc.d/init.d/jenkins; bad; vendor preset: disabled)
   Active: inactive (dead)
     Docs: man:systemd-sysv-generator(8)
[root@jenkins-1 ~]# service jenkins start
Starting jenkins (via systemctl):                          [  OK  ]
[root@jenkins-1 ~]# service jenkins status
● jenkins.service - LSB: Jenkins Continuous Integration Server
   Loaded: loaded (/etc/rc.d/init.d/jenkins; bad; vendor preset: disabled)
   Active: active (running) since Mon 2020-12-07 14:54:25 CST; 2s ago

[root@jenkins-1 ~]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:22                                                                             *:*                  
LISTEN     0      100                                                        127.0.0.1:25                                                                             *:*                  
LISTEN     0      50                                                                :::42441                                                                         :::*                  
LISTEN     0      50                                                                :::8080                                                                          :::*        

[root@jenkins-1 ~]# cat /var/lib/jenkins/secrets/initialAdminPassword 
805e31ce4f9b41e497ba3b4e5122c2dc
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;界面访问&#34;&gt;界面访问&lt;/h2&gt;
&lt;p&gt;​	访问Jenkins，默认为8080端口，需填入生成的字串&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201207145946166.png&#34; alt=&#34;image-20201207145946166&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装插件时失败&#34;&gt;安装插件时失败&lt;/h2&gt;
&lt;p&gt;安装插件失败的原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被qiang了，需要配置主机的代理http_proxy，或在Jenkins界面配置插件源如清华的；&lt;/li&gt;
&lt;li&gt;Jenkins版本过低，和现有插件库的较新插件不匹配导致，需要升级Jenkins的版本；
&lt;ul&gt;
&lt;li&gt;若就需要安装低版本的Jenkins，则可以在Jenkins插件库网址上搜索与低版本Jenkins对应的低版本插件&lt;/li&gt;
&lt;li&gt;但版本依赖较为复杂，还是升级的好；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此处原因为Jenkins版本过低，与现有插件匹配不上，需要安装新版本的Jenkins，此处安装的为当前最新稳定版，2.263.1，下载改版本war包，替换原有的2.32.1的war包重新启动即可；&lt;/p&gt;
&lt;p&gt;升级后即可重新安装插件，但手动逐一找出推荐插件安装较为繁琐，因此用新的虚拟机重新采用war包方式安装；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201207153423257.png&#34; alt=&#34;image-20201207153423257&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;war包安装启动&#34;&gt;war包安装启动&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载最新war包；https://www.jenkins.io/download/&lt;/li&gt;
&lt;li&gt;安装jdk环境；&lt;/li&gt;
&lt;li&gt;启动war包，java -jar Jenkins.war；https://www.jenkins.io/doc/book/installing/war-file/#war-files&lt;/li&gt;
&lt;li&gt;界面访问，并添加终端启动时，生成了的密码串&lt;/li&gt;
&lt;li&gt;选择推荐插件安装，插件安装时，虚拟机配置了http_proxy代理上网&lt;/li&gt;
&lt;li&gt;创建管理员用户&lt;/li&gt;
&lt;li&gt;进入Jenkins系统&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装后界面：并成功安装了所有推荐插件；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201207162320835.png&#34; alt=&#34;image-20201207162320835&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;jenkins用yum源安装&#34;&gt;Jenkins用yum源安装&lt;/h2&gt;
&lt;p&gt;官方介绍：https://www.jenkins.io/doc/book/installing/linux/#long-term-support-release-3&lt;/p&gt;
&lt;h2 id=&#34;插件管理&#34;&gt;插件管理&lt;/h2&gt;
&lt;p&gt;Jenkins所有功能，都是依赖插件实现，系统管理-》插件管理可以管理插件，安装、更新等，高级界面可以手动上传离线的插件包.hpi格式，可以设置插件代理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201207163643967.png&#34; alt=&#34;image-20201207163643967&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;jenkins升级&#34;&gt;Jenkins升级&lt;/h1&gt;
&lt;p&gt;升级Jenkins，对于rpm包的安装方式，下载需要升级的war包，然后放置到/usr/lib/jenkins目录下即可，然后重启Jenkins即可完成升级；&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/devops/" term="devops" label="devops" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/jenkins/" term="jenkins" label="jenkins" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ci/cd/" term="ci/cd" label="ci/cd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">gitlab备份恢复</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/gitlab%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/" />
            <id>https://latteStudio.github.io/posts/gitlab%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</id>
            <updated>2020-12-07T16:41:06&#43;08:00</updated>
            <published>2020-12-04T14:27:05&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">gitlab备份恢复</summary>
            
                <content type="html">&lt;h1 id=&#34;备份恢复&#34;&gt;备份恢复&lt;/h1&gt;
&lt;h2 id=&#34;官方文档&#34;&gt;官方文档&lt;/h2&gt;
&lt;p&gt;gitlab备份恢复：&lt;/p&gt;
&lt;p&gt;​	https://docs.gitlab.com/ee/raketasks/backup_restore.html#requirements&lt;/p&gt;
&lt;h2 id=&#34;备份backup&#34;&gt;备份backup&lt;/h2&gt;
&lt;p&gt;​	不同的gitlab部署方式具有不同的备份恢复方式，此处为yum安装的gitlab即omnibus gitlab，参考：https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore-for-omnibus-gitlab-installations&lt;/p&gt;
&lt;p&gt;​	对于yum安装的gitlab，不同的版本备份恢复命令有所不同，此处为13.6版本的gitlab，官方提示，12.1前和后的版本，命令不同，注意查看官方文档；&lt;/p&gt;
&lt;p&gt;备份：备份后查看生成的备份文件即可，默认路径在/var/opt/gitlab/backups/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gitlab-backup create
ll /var/opt/gitlab/backups/

备份后，在界面上删除一些project用于测试；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;恢复restore&#34;&gt;恢复restore&lt;/h2&gt;
&lt;p&gt;恢复：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # 恢复前，重载一下配置文件
  315  gitlab-ctl reconfigure
  
  # 停止和数据库相关的服务，使得恢复期间，不再有新的数据写入
  317  gitlab-ctl stop unicorn
  318  gitlab-ctl stop puma
  319  gitlab-ctl stop sidekiq
  320  gitlab-ctl status
  
  # 查看备份文件所在目录，找到需要恢复的时间戳的备份文件，恢复即可
  321  ll /var/opt/gitlab/backups/
  322  gitlab-backup restore BACKUP=1607309087_2020_12_07_13.6.1
  
  # 恢复后，要reconfigure restart，最后执行gitlab:check
  323  gitlab-ctl reconfigure
  324  gitlab-ctl restart
  326   gitlab-rake gitlab:check SANITIZE=true
  
  # 此时登陆界面发现，备份后删除的仓库已经恢复；
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/devops/" term="devops" label="devops" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/gitlab/" term="gitlab" label="gitlab" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ci/cd/" term="ci/cd" label="ci/cd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">gitlab权限管理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/gitlab%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/" />
            <id>https://latteStudio.github.io/posts/gitlab%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</id>
            <updated>2020-12-07T16:41:19&#43;08:00</updated>
            <published>2020-12-04T14:26:56&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">gitlab权限管理</summary>
            
                <content type="html">&lt;h1 id=&#34;组子组用户项目&#34;&gt;组、子组、用户、项目&lt;/h1&gt;
&lt;p&gt;group、subgroup、user、为gitlab中3个namespace的概念，&lt;/p&gt;
&lt;p&gt;如用户wang注册了gitlab账户，创建了cncf组，又在cncf组创建了子组k8s，那么wang、cncf、k8s就是三个不同的名称空间，在名称空间下，可以创建project项目；&lt;/p&gt;
&lt;p&gt;url分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gitlab.com/wang&#34;&gt;www.gitlab.com/wang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gitlab.com/cncf&#34;&gt;www.gitlab.com/cncf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gitlab.com/cncf/k8s&#34;&gt;www.gitlab.com/cncf/k8s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目project，可以在组或子组中创建，如在cncf组里创建了app1这一project，其url就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gitllab.com/cncf/app1&#34;&gt;www.gitllab.com/cncf/app1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;开发流程示例&#34;&gt;开发流程示例&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;gitlab管理员创建pm账户，2个开发账户，此处为user1和user2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pm登陆并创建组，并在组下创建一个project&lt;/p&gt;
&lt;p&gt;创建组；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206135153613.png&#34; alt=&#34;image-20201206135153613&#34;&gt;&lt;/p&gt;
&lt;p&gt;创建project项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206135756552.png&#34; alt=&#34;image-20201206135756552&#34;&gt;&lt;/p&gt;
&lt;p&gt;邀请2个开发用户到pm的组中，对mygroup有开发权限&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206153302372.png&#34; alt=&#34;image-20201206153302372&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2个开发账户生成密钥对，并上传到自己的gitlab账户中，然后测试拉取pm创建的project1的仓库（因上步已经user1和user2加入了project1的成员为devloper权限）&lt;/p&gt;
&lt;p&gt;生成密钥对，上传到开发账户略，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[user1@git-client ~]$ git clone git@192.168.80.102:mygroup1/myproject1.git
Cloning into &#39;myproject1&#39;...
The authenticity of host &#39;192.168.80.102 (192.168.80.102)&#39; can&#39;t be established.
ECDSA key fingerprint is SHA256:qLoTkwl898icJA1iYfTdIG7SM15+vkmEibFyCGbB1yc.
ECDSA key fingerprint is MD5:2a:08:eb:ae:a7:dc:82:19:0b:23:1a:27:2a:c2:2f:41.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;192.168.80.102&#39; (ECDSA) to the list of known hosts.
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (3/3), done.
[user1@git-client ~]$ ll
total 0
drwxrwxr-x 3 user1 user1 35 Dec  6 15:38 myproject1
[user1@git-client ~]$ ls myproject1/
README.md
   
   
# 查看拉取的代码库状态；可以看到，只有pm创建的init的commit提交，之后各个开发就可以在自己本地开发，然后提交，请求合并
[user2@git-client myproject1]$ git status
# On branch master
nothing to commit, working directory clean
[user2@git-client myproject1]$ git log
commit 500f962b7cef84c42b10f573ec051303a6b83e13
Author: pm &amp;lt;boogies@163.com&amp;gt;
Date:   Sun Dec 6 13:57:35 2020 +0800
   
    Initial commit
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建milestone里程碑，即项目的开项&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206154653174.png&#34; alt=&#34;image-20201206154653174&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分配project任务给开发，提issue&lt;/p&gt;
&lt;p&gt;给开发提issue，就是一个个开发、或bug修复任务，被分配到的开发会收到通知；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206154945611.png&#34; alt=&#34;image-20201206154945611&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发登陆，查看issue，拉取项目库到本地&lt;/p&gt;
&lt;p&gt;查看自己被分配的issue&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206155526756.png&#34; alt=&#34;image-20201206155526756&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地拉取开发分支，开发，开发后commit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[user1@git-client myproject1]$ whoami 
user1
[user1@git-client myproject1]$ git branch
* master
[user1@git-client myproject1]$ git checkout -b frontend
Switched to a new branch &#39;frontend&#39;
[user1@git-client myproject1]$ touch frontend
[user1@git-client myproject1]$ git add frontend 
[user1@git-client myproject1]$ git commit -m &#39;frontend done!&#39;
   
*** Please tell me who you are.
   
Run
   
  git config --global user.email &amp;quot;you@example.com&amp;quot;
  git config --global user.name &amp;quot;Your Name&amp;quot;
   
to set your account&#39;s default identity.
Omit --global to set the identity only in this repository.
   
fatal: empty ident name (for &amp;lt;user1@git-client.(none)&amp;gt;) not allowed
[user1@git-client myproject1]$ git config --global user.email &#39;1210839056@qq.com&#39;
[user1@git-client myproject1]$ git config --global user.name &#39;user1&#39;
[user1@git-client myproject1]$ git commit -m &#39;frontend done!&#39;
[frontend a6cad36] frontend done!
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 frontend
   
[user1@git-client myproject1]$ git remote -v
origin	git@192.168.80.102:mygroup1/myproject1.git (fetch)
origin	git@192.168.80.102:mygroup1/myproject1.git (push)
   
   
   
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地commit后push到远程gitlab仓库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 把frontend分支，推送到远端库
[user1@git-client myproject1]$ git push origin frontend
Counting objects: 4, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 268 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
remote: 
remote: To create a merge request for frontend, visit:
remote:   http://192.168.80.102/mygroup1/myproject1/-/merge_requests/new?merge_request%5Bsource_branch%5D=frontend
remote: 
To git@192.168.80.102:mygroup1/myproject1.git
 * [new branch]      frontend -&amp;gt; frontend
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发登陆，对pm提起merge request&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206161126661.png&#34; alt=&#34;image-20201206161126661&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pm登陆，收到merege request请求后检查，检查通过合并&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开发关闭issue，确认开发完成&lt;/p&gt;
&lt;p&gt;回到issue页面，关闭相应的issue即可；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;开发流程总结&#34;&gt;开发流程总结&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;项目经理创建项目project，如app1，然后分配不同任务给各个研发人员，如user1开发前端、user2开发后端；&lt;/li&gt;
&lt;li&gt;开发人员收到任务通知，拉取空的初始project到本地&lt;/li&gt;
&lt;li&gt;开发人员git checkout -b 开发分支，在自己的开发分支进行开发&lt;/li&gt;
&lt;li&gt;开发后，本地提交，然后push到远程gitlab仓库&lt;/li&gt;
&lt;li&gt;开发人员登陆自己的gitlab账户，向项目经理提出merge request请求合并代码&lt;/li&gt;
&lt;li&gt;项目经理登陆自己的gitlab账户，收到开发的合并代码请求，然后检查，检查无误后，合并到主分支&lt;/li&gt;
&lt;li&gt;开发在gitlab界面标记被分配的任务已经完成，并关闭项目经理分配的issue，&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/devops/" term="devops" label="devops" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/gitlab/" term="gitlab" label="gitlab" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ci/cd/" term="ci/cd" label="ci/cd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">gitlab部署</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/gitlab%E9%83%A8%E7%BD%B2/" />
            <id>https://latteStudio.github.io/posts/gitlab%E9%83%A8%E7%BD%B2/</id>
            <updated>2020-12-07T16:41:12&#43;08:00</updated>
            <published>2020-12-04T14:26:43&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">gitlab部署</summary>
            
                <content type="html">&lt;h1 id=&#34;gitlab部署&#34;&gt;gitlab部署&lt;/h1&gt;
&lt;p&gt;安装方式介绍：https://docs.gitlab.com/ee/install/README.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置gitlab仓库，用包管理器直接安装，（会自动安装所有依赖组件，官方推荐）&lt;/li&gt;
&lt;li&gt;helm chart安装，for k8s平台&lt;/li&gt;
&lt;li&gt;docker方式&lt;/li&gt;
&lt;li&gt;从头逐步安装各个组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此处采用官方推荐的方式，仓库安装&lt;/p&gt;
&lt;h2 id=&#34;安装依赖&#34;&gt;安装依赖&lt;/h2&gt;
&lt;p&gt;参考文档；https://about.gitlab.com/install/#centos-7&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# yum install -y curl policycoreutils openssh-server openssh-client postfix

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置gitlab的仓库&#34;&gt;配置gitlab的仓库&lt;/h2&gt;
&lt;p&gt;这里采用清华大学的仓库源，配置仓库地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim /etc/yum.repos.d/gitlab-ce.repo

[gitlab-ce]
name=Gitlab CE Repository
baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/
gpgcheck=0
enabled=1

sudo yum makecache
sudo yum install gitlab-ce
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直接安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

[root@gitlab ~]# yum list all |grep gitlab
gitlab-ce.x86_64                         13.6.1-ce.0.el7               gitlab-ce
python2-gitlab.noarch                    1.3.0-3.el7.1                 epel     
[root@gitlab ~]# yum install -y gitlab-ce
Installed:
  gitlab-ce.x86_64 0:13.6.1-ce.0.el7                                                                                                                                                        

Dependency Installed:
  audit-libs-python.x86_64 0:2.8.5-4.el7 checkpolicy.x86_64 0:2.5-8.el7    libcgroup.x86_64 0:0.41-21.el7 libsemanage-python.x86_64 0:2.5-14.el7 policycoreutils-python.x86_64 0:2.5-34.el7
  python-IPy.noarch 0:0.75-6.el7         setools-libs.x86_64 0:3.3.8-4.el7

Dependency Updated:
  audit.x86_64 0:2.8.5-4.el7                                                                 audit-libs.x86_64 0:2.8.5-4.el7                                                                

Complete!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;修改配置文件&#34;&gt;修改配置文件&lt;/h2&gt;
&lt;p&gt;修改配置文件中，external_url地址，为自己部署主机的ip；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# vim /etc/gitlab/gitlab.rb 
...
#external_url &#39;http://gitlab.example.com&#39;
external_url &#39;http://192.168.80.102&#39;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reconfigure使得配置重新生效；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# gitlab-ctl reconfigure
...
Running handlers:
Running handlers complete
Chef Infra Client finished, 207/1184 resources updated in 01 minutes 53 seconds

Deprecations:
* sidekiq_cluster[&#39;experimental_queue_selector&#39;] has been deprecated since 13.6 and will be removed in 14.0. The experimental_queue_selector option is now called queue_selector.


Notes:
It seems you haven&#39;t specified an initial root password while configuring the GitLab instance.
On your first visit to  your GitLab instance, you will be presented with a screen to set a
password for the default admin account with username `root`.


遇到的问题，google查得，可能为vm内存不足导致，加大到3g后可以，最低要求2g
Errno::ENOMEM: Cannot allocate memory - fork(2) gitlab
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启gitlab&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# gitlab-ctl restart
ok: run: alertmanager: (pid 7457) 1s
ok: run: gitaly: (pid 7467) 0s
ok: run: gitlab-exporter: (pid 7479) 1s
ok: run: gitlab-workhorse: (pid 7483) 0s
ok: run: grafana: (pid 7504) 0s
ok: run: logrotate: (pid 7519) 1s
ok: run: nginx: (pid 7527) 0s
ok: run: node-exporter: (pid 7537) 1s
ok: run: postgres-exporter: (pid 7542) 0s
ok: run: postgresql: (pid 7551) 1s
ok: run: prometheus: (pid 7560) 0s
ok: run: puma: (pid 7646) 0s
ok: run: redis: (pid 7652) 0s
ok: run: redis-exporter: (pid 7660) 1s
ok: run: sidekiq: (pid 7667) 0s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看gitlab组件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# gitlab-ctl status
run: alertmanager: (pid 7457) 18s; run: log: (pid 6674) 341s
run: gitaly: (pid 7467) 17s; run: log: (pid 5012) 1266s
run: gitlab-exporter: (pid 7479) 17s; run: log: (pid 6593) 359s
run: gitlab-workhorse: (pid 7483) 16s; run: log: (pid 5353) 1182s
run: grafana: (pid 7504) 16s; run: log: (pid 6838) 287s
run: logrotate: (pid 7519) 16s; run: log: (pid 6526) 369s
run: nginx: (pid 7527) 15s; run: log: (pid 5377) 1177s
run: node-exporter: (pid 7537) 15s; run: log: (pid 6564) 365s
run: postgres-exporter: (pid 7542) 14s; run: log: (pid 6710) 335s
run: postgresql: (pid 7551) 14s; run: log: (pid 5142) 1258s
run: prometheus: (pid 7560) 13s; run: log: (pid 6645) 347s
run: puma: (pid 7646) 12s; run: log: (pid 5313) 1194s
run: redis: (pid 7652) 13s; run: log: (pid 4973) 1273s
run: redis-exporter: (pid 7660) 13s; run: log: (pid 6617) 354s
run: sidekiq: (pid 7667) 9s; run: log: (pid 5339) 1187s
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;浏览器登陆&#34;&gt;浏览器登陆&lt;/h2&gt;
&lt;p&gt;访问的地址，external_url为浏览器里访问的地址；第一次访问，会提示修改管理员密码，**管理员账户，默认为root；**非linux系统的root！&lt;/p&gt;
&lt;p&gt;修改后，用root登陆即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201204175258551.png&#34; alt=&#34;image-20201204175258551&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;查看版本&#34;&gt;查看版本&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# gitlab-rake gitlab:env:info

System information
System:		
Current User:	git
Using RVM:	no
Ruby Version:	2.7.2p137
Gem Version:	3.1.4
Bundler Version:2.1.4
Rake Version:	13.0.1
Redis Version:	5.0.9
Git Version:	2.29.0
Sidekiq Version:5.2.9
Go Version:	unknown

GitLab information
Version:	13.6.1
Revision:	1b6a590b197
Directory:	/opt/gitlab/embedded/service/gitlab-rails
为13.6版本
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;关闭自动注册&#34;&gt;关闭自动注册&lt;/h2&gt;
&lt;p&gt;​	首次登陆会提示open registration问题，如下图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201204175805325.png&#34; alt=&#34;image-20201204175805325&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	下图示：默认的设置，用户通过访问注册url，可以自行注册用户，不安全，应该关闭；将默认选中的2项，取消，点击保存即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201204180019185.png&#34; alt=&#34;image-20201204180019185&#34;&gt;&lt;/p&gt;
&lt;p&gt;关闭前：有注册选项，register now；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206125721722.png&#34; alt=&#34;image-20201206125721722&#34;&gt;&lt;/p&gt;
&lt;p&gt;关闭后：无注册选项；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206125943167.png&#34; alt=&#34;image-20201206125943167&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置smtp服务&#34;&gt;配置smtp服务&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;登陆自己的qq或163邮箱，开启smtp服务，会生成一个授权码，假设为aaa；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置本地gitlab的配置文件；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# vim /etc/gitlab/gitlab.rb
   
external_url &#39;http://本地私有gitlab的url&#39; 
gitlab_rails[&#39;smtp_enable&#39;] = true  
gitlab_rails[&#39;smtp_address&#39;] = &amp;quot;smtp.163.com&amp;quot;  
gitlab_rails[&#39;smtp_port&#39;] = 25  
gitlab_rails[&#39;smtp_user_name&#39;] = &amp;quot;你注册的公网邮箱&amp;quot;  
gitlab_rails[&#39;smtp_password&#39;] = &amp;quot;开启smtp服务时给的授权码&amp;quot;  
gitlab_rails[&#39;smtp_domain&#39;] = &amp;quot;163.com&amp;quot;  
gitlab_rails[&#39;smtp_authentication&#39;] = :login  
gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] = true  
gitlab_rails[&#39;gitlab_email_from&#39;] = &amp;quot;你注册的公网邮箱&amp;quot;  
user[&amp;quot;git_user_email&amp;quot;] = &amp;quot;你注册的公网邮箱&amp;quot;  
   
# smpt-port不同的邮箱服务商不同，网易163是25
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新生成配置、重启gitlab&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@gitlab ~]# gitlab-ctl reconfigure
[root@gitlab ~]# gitlab-ctl restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之后，本地的gitlab就可以借助公网的邮箱服务，发送互联网邮件；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建普通用户测试邮箱&#34;&gt;创建普通用户测试邮箱&lt;/h2&gt;
&lt;p&gt;1、管理员创建普通用户，邮箱填写为公网可达，或公司内部私网可达邮箱地址；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206132758755.png&#34; alt=&#34;image-20201206132758755&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、此时普通用户，假设为申请了账户的开发人员，通过公网或私网邮箱地址收到了账户创建通知，之后需要点击连接改自己的密码，然后就可以进行登陆；&lt;/p&gt;
&lt;p&gt;更改密码会也会收到邮件通知；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206132350717.png&#34; alt=&#34;image-20201206132350717&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201206132330909.png&#34; alt=&#34;image-20201206132330909&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/devops/" term="devops" label="devops" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/gitlab/" term="gitlab" label="gitlab" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ci/cd/" term="ci/cd" label="ci/cd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">gitlab之git基础</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/gitlab%E4%B9%8Bgit%E5%9F%BA%E7%A1%80/" />
            <id>https://latteStudio.github.io/posts/gitlab%E4%B9%8Bgit%E5%9F%BA%E7%A1%80/</id>
            <updated>2020-12-07T16:40:58&#43;08:00</updated>
            <published>2020-12-02T10:56:55&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">gitlab之git基础</summary>
            
                <content type="html">&lt;h1 id=&#34;git基础安装&#34;&gt;git基础安装&lt;/h1&gt;
&lt;h2 id=&#34;安装配置&#34;&gt;安装配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;yum安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client ~]# yum install -y git
   
[root@git-client ~]# git --version
git version 1.8.3.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置全局git账户&lt;/p&gt;
&lt;p&gt;配置username和email，和将要同步的远端git型server账户一致，（如公网gitlab、github的注册账户，私有gitlab仓库的注册账户等）&lt;/p&gt;
&lt;p&gt;这里采用了公网gitlab上注册的账户和邮箱信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client ~]# git config --global --list
fatal: unable to read config file &#39;/root/.gitconfig&#39;: No such file or directory
[root@git-client ~]# git config --global user.name &amp;quot;ice_latte&amp;quot;
[root@git-client ~]# git config --global user.email &amp;quot;xx@163.com&amp;quot;
[root@git-client ~]# git config --global --list
user.name=ice_latte
user.email=xx@163.com
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置认证方法&lt;/p&gt;
&lt;p&gt;一般采用ssh-key免密认证方式，认证到远程的git服务器，如gitlab&lt;/p&gt;
&lt;p&gt;另一种方式为git基于https的认证，不推荐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client ~]# ssh-keygen -t rsa
Generating public/private rsa key pair.
   
采用如上密码，本地开发机，生成密钥对，然后在~/.ssh/，当前用户的.ssh目录下，找到pub结尾的公钥文件，
登陆gitlab网页，找到ssh设置选择，将公钥字符串贴入其中即可
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证&lt;/p&gt;
&lt;p&gt;验证是否在个人客户端、和gitlab之间建立连接，采用如下命令，若是私有仓库，gitlab.com要替换为适当的私有域名或ip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client ~]# ssh -T git@gitlab.com
The authenticity of host &#39;gitlab.com (172.65.251.78)&#39; can&#39;t be established.
ECDSA key fingerprint is SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw.
ECDSA key fingerprint is MD5:f1:d0:fb:46:73:7a:70:92:5a:ab:5d:ef:43:e2:1c:35.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;gitlab.com,172.65.251.78&#39; (ECDSA) to the list of known hosts.
Welcome to GitLab, @ice_latte!
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;git术语&#34;&gt;git术语&lt;/h2&gt;
&lt;p&gt;对于gitlab来说，namespace：有2类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/&#34;&gt;https://gitlab.com/&lt;/a&gt;你注册的用户名&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.com/&#34;&gt;https://gitlab.com/&lt;/a&gt;你创建的群组名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;repo仓库：&lt;/p&gt;
&lt;p&gt;​	相当于一个目录，里面存放的文本文件，都接受git的追踪、管理；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地仓库：新建一个目录，然后git init就是；&lt;/li&gt;
&lt;li&gt;远程仓库：注册的github、gitee这种账户，点击新建repo就是；&lt;/li&gt;
&lt;li&gt;本地仓库和远程仓库可以相关联，本地仓库可以推送一到多个远程仓库做备份，或分享开源之用；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;git基础使用&#34;&gt;git基础使用&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;git只能追踪文件文件的内容变化，如code，网页代码，word这种属于二进制文件，无法追踪其内容变化；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建本地版本库repo&#34;&gt;创建本地版本库repo&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始化git目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# pwd
/git-demo
   
[root@git-client git-demo]# git init
Initialized empty Git repository in /git-demo/.git/
   
[root@git-client git-demo]# ll -a
total 0
drwxr-xr-x   3 root root  18 Dec  2 14:09 .
dr-xr-xr-x. 18 root root 240 Dec  2 14:09 ..
drwxr-xr-x   7 root root 119 Dec  2 14:09 .git
   
创建一个新的空的目录，做本地repo目录，git init即可初始化，之后生成.git目录为仓库追踪元信息；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑2个新文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# vim file1.txt&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat file1.txt &lt;/span&gt;
hello git
I am the one!
   
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# vim file2.txt&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat file2.txt &lt;/span&gt;
linux user
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git添加&lt;/p&gt;
&lt;p&gt;git add会将指定的文件，添加到git缓存区，需要指定文件名，file2未添加，所以commit时只会有file1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;   
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git add file1.txt &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git提交&lt;/p&gt;
&lt;p&gt;git commit会把上次commit之后add的文件，即在git缓存区的文件提交到本地仓库，&lt;/p&gt;
&lt;p&gt;提示信息：&lt;/p&gt;
&lt;p&gt;为主分支，root用户提交&lt;/p&gt;
&lt;p&gt;添加了一个文件，里面有2行插入&lt;/p&gt;
&lt;p&gt;-m 为注释信息，要意义明确&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git commit -m &amp;#34;my first commit,include one file2&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;master &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;root-commit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; af61fed&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; my first commit,include two file2
 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; file changed, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; insertions&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 create mode &lt;span class=&#34;m&#34;&gt;100644&lt;/span&gt; file1.txt
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ll&lt;/span&gt;
total &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Dec  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 14:15 file1.txt
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; Dec  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 14:16 file2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;修改文件并查看&#34;&gt;修改文件并查看&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改文件内容&lt;/p&gt;
&lt;p&gt;第一行末尾，添加了cool！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat file1.txt &lt;/span&gt;
hello git cool!
I am the one!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git status查看当前工作区状态&lt;/p&gt;
&lt;p&gt;可以看出是否有变化，提示信息为：主分支、file1.txt发生了修改，还没提交&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git status&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# On branch master&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Changes not staged for commit:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   (use &amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#	modified:   file1.txt&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
no changes added to commit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span class=&#34;s2&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git diff查看两次变化信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git diff&lt;/span&gt;
diff --git a/file1.txt b/file1.txt
index bf68a56..88f7199 &lt;span class=&#34;m&#34;&gt;100644&lt;/span&gt;
--- a/file1.txt
+++ b/file1.txt
@@ -1,2 +1,2 @@
-hello git
+hello git cool!
 I am the one!
   
可以看出，变化为加了一个cool！
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确认无误后、提交变化后文件&lt;/p&gt;
&lt;p&gt;确认是自己想要的文件修改后，（不是误修改），git add 、git commit再次提交；&lt;/p&gt;
&lt;p&gt;此时查看git status状态为“干净的”&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git add file1.txt &lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git commit -m &amp;#39;i confirm&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;master 409066c&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; i confirm
 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; file changed, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; insertion&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; deletion&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git status&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# On branch master&lt;/span&gt;
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改文件后，&lt;/li&gt;
&lt;li&gt;git status可以查看当前工作区状态，查看距离上次commit后，有无变化，有哪些变化；&lt;/li&gt;
&lt;li&gt;git diff可以看到文件变化的内容，输出格式为diff格式&lt;/li&gt;
&lt;li&gt;确认修改后，可以再次add，然后commit&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;版本回退&#34;&gt;版本回退&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;再次修改file1.txt，目前共有3个版本；&lt;/p&gt;
&lt;p&gt;除去添加file2的提交，仅仅针对file1而言，共有3次提交；3个文件版本；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git log&lt;/span&gt;
commit 2ba3654be407a797f9267a9bf4f334189338f558
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 14:49:53 &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; +0800
   
    third modified
   
commit 409066ced43ef1a71c5c29d8285ff1eec6e2d2b7
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 14:35:36 &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; +0800
   
    i confirm
   
commit c5adcc0311e259847ddf4198b0b16626eb5b54c8
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 14:32:25 &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; +0800
   
    add file2.txt
   
commit af61fed1ff436427946d59776de248e9eecc4936
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 14:16:45 &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt; +0800
   
    my first commit,include two file2
       
&lt;span class=&#34;c1&#34;&gt;##简洁输出参数，第一列为提交的hash码，也是标识id，前7个字符是短格式&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git log --pretty=oneline&lt;/span&gt;
2ba3654be407a797f9267a9bf4f334189338f558 third modified
409066ced43ef1a71c5c29d8285ff1eec6e2d2b7 i confirm
c5adcc0311e259847ddf4198b0b16626eb5b54c8 add file2.txt
af61fed1ff436427946d59776de248e9eecc4936 my first commit,include two file2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回退到第二个版本；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# cat file1.txt 
hello git cool!
I am the one!
third modified,add one line.
   
# HEAD^为上个版本，HEAD^^为上2个版本，HEAD~100为上一百个版本
# 也可以根据commit的id回退到指定版本，id用git log或git reflog获得
   
[root@git-client git-demo]# git reset --hard HEAD^
HEAD is now at 409066c i confirm
   
[root@git-client git-demo]# cat file1.txt 
hello git cool!
I am the one!
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再次回到最新的第三个版本；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git log
commit 409066ced43ef1a71c5c29d8285ff1eec6e2d2b7
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec 2 14:35:36 2020 +0800
   
    i confirm
   
commit c5adcc0311e259847ddf4198b0b16626eb5b54c8
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec 2 14:32:25 2020 +0800
   
    add file2.txt
   
commit af61fed1ff436427946d59776de248e9eecc4936
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec 2 14:16:45 2020 +0800
   
    my first commit,include two file2
   
# git log看到的是提交日志，回退后，新版本的id就丢失
# git reflog看到的是操作日志，可以看到所有的id
   
[root@git-client git-demo]# git reflog
409066c HEAD@{0}: reset: moving to HEAD^
2ba3654 HEAD@{1}: commit: third modified
409066c HEAD@{2}: commit: i confirm
c5adcc0 HEAD@{3}: commit: add file2.txt
af61fed HEAD@{4}: commit (initial): my first commit,include two file2
   
   
# 再根据id，回到第三个版本即可
[root@git-client git-demo]# git reset --hard 2ba3654
HEAD is now at 2ba3654 third modified
[root@git-client git-demo]# cat file1.txt 
hello git cool!
I am the one!
third modified,add one line.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;文件修改提交的过程&#34;&gt;文件修改提交的过程&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;git追踪的不是文件、而是文件的修改！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三个区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作区&lt;/li&gt;
&lt;li&gt;暂存区&lt;/li&gt;
&lt;li&gt;master分支&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;新加的文件，或已经挂在分支下，但又有新修改的文件，需要git add将&lt;strong&gt;其修改&lt;/strong&gt;添加到暂存区（本质都是新的修改）&lt;/li&gt;
&lt;li&gt;添加到暂存区 staged的&lt;strong&gt;修改&lt;/strong&gt; ，是准备提交到master分支上的，git commit提交；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201202153545857.png&#34; alt=&#34;image-20201202153545857&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# vim file2.txt &lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git add file2.txt&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git status&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# On branch master&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Changes to be committed:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   (use &amp;#34;git reset HEAD &amp;lt;file&amp;gt;...&amp;#34; to unstage)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#	modified:   file2.txt&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git commit -m &amp;#34;file2 add two-line&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;master 4285c1a&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; file2 add two-line
 &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; file changed, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; insertion&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
 
 &lt;span class=&#34;c1&#34;&gt;# 修改file2后，先add，后commit，后即可；&lt;/span&gt;



&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# vim file2.txt &lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git commit -m &amp;#34;file2 add three-line&amp;#34;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# On branch master&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 提示看出，还没有提交到staged阶段，为commit做准备，&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# staged就是暂存区&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 需要先add&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Changes not staged for commit:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   (use &amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34; to update what will be committed)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#   (use &amp;#34;git checkout -- &amp;lt;file&amp;gt;...&amp;#34; to discard changes in working directory)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#	modified:   file2.txt&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
no changes added to commit &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span class=&#34;s2&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 再次修改file2，跳过add，直接commit不行，因为又是一个新的修改，需要先add！&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;总结：即每一个修改（修改原有文件、或添加新文件），都要先add到暂存区，再commit到分支上，多次修改，可以最后只一个add，一个commit；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;撤销修改&#34;&gt;撤销修改&lt;/h2&gt;
&lt;p&gt;分三种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只是工作区修改，修改后并未git add；&lt;/li&gt;
&lt;li&gt;修改到了暂存区，修改后git add添加到了暂存区；&lt;/li&gt;
&lt;li&gt;修改提交到了版本库中，修改后git add、git commit到了分支上；（但没有推送到远程库）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;修改在工作区&#34;&gt;修改在工作区&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git status
# On branch master
# Changes not staged for commit:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#	modified:   file2.txt
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)

# 修改file2，发现是不想要的修改，在未提交到staged时，可以用checkout撤销修改
# git status都有对应提示
# 撤销后，刚刚修改丢失

[root@git-client git-demo]# git checkout -- file2.txt
[root@git-client git-demo]# git status
# On branch master
nothing to commit, working directory clean

[root@git-client git-demo]# cat file2.txt 
linux user
two line
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改到了暂存区&#34;&gt;修改到了暂存区&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# vim file2.txt 

[root@git-client git-demo]# git add file2.txt 
[root@git-client git-demo]# git status
# On branch master
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#	modified:   file2.txt

修改后还add了，，根据提示撤销，分2步：

[root@git-client git-demo]# git reset HEAD file2.txt 
Unstaged changes after reset:
M	file2.txt

[root@git-client git-demo]# git checkout -- file2.txt 
[root@git-client git-demo]# git status
# On branch master
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改到了版本库&#34;&gt;修改到了版本库&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# vim file2.txt 
[root@git-client git-demo]# git add file2.txt 
[root@git-client git-demo]# git commit -m &#39;file2 add three-line&#39;
[master cef9515] file2 add three-line
 1 file changed, 1 insertion(+)
[root@git-client git-demo]# cat file2.txt 
linux user
two line
three-line

[root@git-client git-demo]# git log
commit cef95158395c8843bd694ceadf7ef7e78c5c8f7b
Author: ice_latte &amp;lt;boogies@163.com&amp;gt;
Date:   Wed Dec 2 16:07:16 2020 +0800

    file2 add three-line

commit 4285c1a19de268ab63c63200a6990c316fc86580
...

# 修改后，add，还commit了，此时就属于版本回退了，
# git log找到上一个commit的id，然后reset到那个版本即可；

[root@git-client git-demo]# git reset --hard 4285c1a19de268ab63c63200a6990c316fc86580
HEAD is now at 4285c1a file2 add two-line
[root@git-client git-demo]# cat file2.txt 
linux user
two line

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;删除文件&#34;&gt;删除文件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;工作区、先直接rm删除需要的文件
&lt;ol&gt;
&lt;li&gt;若确认删除，版本库中文件也继续删除&lt;/li&gt;
&lt;li&gt;若为误删除，需要从版本库中恢复该文件到工作区&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;ps：
&lt;ol&gt;
&lt;li&gt;只有之前提交过到版本库（分支）后的可以恢复&lt;/li&gt;
&lt;li&gt;恢复后，最近一次commit后的修改会丢失&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实验：&lt;/p&gt;
&lt;p&gt;1，添加新文件f3，并加到版本库中&lt;/p&gt;
&lt;p&gt;​	添加、删除都是&lt;strong&gt;修改&lt;/strong&gt;，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# touch f3

[root@git-client git-demo]# git add f3

[root@git-client git-demo]# git commit -m &amp;quot;add f3&amp;quot;
[master 9357e75] add f3
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 f3
[root@git-client git-demo]# git status
# On branch master
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，删除f3后，并删除版本库中f3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# rm -rf f3 

[root@git-client git-demo]# git rm f3
rm &#39;f3&#39;

[root@git-client git-demo]# git commit -m &#39;delete f3&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，删除f3后，发现误删除，要恢复&lt;/p&gt;
&lt;p&gt;​	多git status查看状态，都有对应提示；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# rm -rf f3 
[root@git-client git-demo]# git status
# On branch master
# Changes not staged for commit:
#   (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#	deleted:    f3
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
[root@git-client git-demo]# git checkout -- f3

[root@git-client git-demo]# ll
total 8
-rw-r--r-- 1 root root  0 Dec  2 16:24 f3
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;远程仓库&#34;&gt;远程仓库&lt;/h1&gt;
&lt;h2 id=&#34;本地上传到github&#34;&gt;本地上传到github&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建github仓库&lt;/li&gt;
&lt;li&gt;添加本地机器生成的公钥到github的ssh-key&lt;/li&gt;
&lt;li&gt;github创建一个仓库&lt;/li&gt;
&lt;li&gt;上三步略...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将本地仓库关联到新建立的github仓库；下为新建仓库后，给出的提示命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:ice-latte/git-demo.git
添加远程库信息
git branch -M main
创建main分支
git push -u origin main
第一次-u参数，将main分支关联到本地的master分支，origin为远程仓库的名字
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;先验证github联通性
[root@git-client git-demo]# ssh -T git@github.com
Hi ice-latte! You&#39;ve successfully authenticated, but GitHub does not provide shell access.

根据提示命令执行即可；
[root@git-client git-demo]# git remote add origin git@github.com:ice-latte/git-demo.git
[root@git-client git-demo]# git branch -M main
[root@git-client git-demo]# git push -u origin main
Counting objects: 26, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (20/20), done.
Writing objects: 100% (26/26), 2.15 KiB | 0 bytes/s, done.
Total 26 (delta 4), reused 0 (delta 0)
remote: Resolving deltas: 100% (4/4), done.
To git@github.com:ice-latte/git-demo.git
 * [new branch]      main -&amp;gt; main
Branch main set up to track remote branch main from origin.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;推送后，github可以看到相应文件，之后再提交到本地的修改，直接&lt;code&gt;git push orgin main&lt;/code&gt;即可；不再需要u参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201202173741140.png&#34; alt=&#34;image-20201202173741140&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;github仓库克隆到本地&#34;&gt;github仓库克隆到本地&lt;/h2&gt;
&lt;p&gt;github创建好仓库后，直接git clone即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client /]# git clone git@github.com:ice-latte/git-demo2.git
Cloning into &#39;git-demo2&#39;...
remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (4/4), 4.49 KiB | 0 bytes/s, done.
[root@git-client /]# ll /git-demo2/
total 16
-rw-r--r-- 1 root root 11357 Dec  2 17:47 LICENSE
-rw-r--r-- 1 root root    11 Dec  2 17:47 README.md
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;分支管理&#34;&gt;分支管理&lt;/h1&gt;
&lt;p&gt;分支的管理，本质就是指针的切换，创建与删除；&lt;a href=&#34;https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424&#34;&gt;参考图示&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建合并分支&#34;&gt;创建、合并分支&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查看当前分支，并创建新分支并同时切换，*表示的是当前分支位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git branch
* main
[root@git-client git-demo2]# git checkout -b dev
Switched to a new branch &#39;dev&#39;
[root@git-client git-demo2]# git branch
* dev
  main
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先创建分支，再切换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git branch test
[root@git-client git-demo2]# git checkout test
Switched to branch &#39;test&#39;
[root@git-client git-demo2]# git branch
  dev
  main
* test
[root@git-client git-demo2]# git checkout dev
Switched to branch &#39;dev&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在dev分支开发继续&lt;/p&gt;
&lt;p&gt;在dev分支，开发的code1，提交后，再切换为main，看不到code1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# touch code1
[root@git-client git-demo2]# git add code1
[root@git-client git-demo2]# git commit -m &#39;dev code1&#39;
[dev 155bb55] dev code1
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 code1
[root@git-client git-demo2]# ll
total 16
-rw-r--r-- 1 root root     0 Dec  2 18:08 code1
-rw-r--r-- 1 root root 11357 Dec  2 17:47 LICENSE
-rw-r--r-- 1 root root    11 Dec  2 17:47 README.md
[root@git-client git-demo2]# git checkout main
Switched to branch &#39;main&#39;
[root@git-client git-demo2]# ll
total 16
-rw-r--r-- 1 root root 11357 Dec  2 17:47 LICENSE
-rw-r--r-- 1 root root    11 Dec  2 17:47 README.md
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;合并dev分支的内容到main主分支，&lt;/p&gt;
&lt;p&gt;其实就是将main分支的指针指向了dev，fast-forward为一种合并模式，就是只切换了指针指向，&lt;/p&gt;
&lt;p&gt;合并后，看到了code1文件&lt;/p&gt;
&lt;p&gt;先要切换到main分支，且merge其他分支&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git merge dev
Updating 012d8ac..155bb55
Fast-forward
 code1 | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 code1
[root@git-client git-demo2]# ll
total 16
-rw-r--r-- 1 root root     0 Dec  2 18:12 code1
-rw-r--r-- 1 root root 11357 Dec  2 17:47 LICENSE
-rw-r--r-- 1 root root    11 Dec  2 17:47 README.md
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除dev分支&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git branch -d dev
Deleted branch dev (was 155bb55).
[root@git-client git-demo2]# git branch
* main
  test
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新的分支命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git switch -c dev2 创建并切换到dev2分支
git switch master 切换到master分支
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git推荐，拉取新分支进行开发功能，对分支代码确认后，再merge到主分支，效果一致，且更安全，&lt;/p&gt;
&lt;h2 id=&#34;解决冲突&#34;&gt;解决冲突&lt;/h2&gt;
&lt;p&gt;​	一般情况下，多人协同开发时，都是各自开发不同的模块，操作不同的文本文件、各自拉取的分支在合并后，只是不同模块代码文件的合并；fast-forward合并模式基本可以应付；&lt;/p&gt;
&lt;p&gt;​	但当有多个分支的开发人员操作了同一个文件，且修改了同一行的，且修改不同，此时自动合并就会报出冲突，需要合并时 ，手动解决冲突：&lt;strong&gt;就是在多份修改不同时，敲定一个版本，然后提交&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先拉取一个新特性分支feature1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新分支上修改file1，并在第五行添加 is cool&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git branch
* main
[root@git-client git-demo]# git checkout -b feature1
Switched to a new branch &#39;feature1&#39;
[root@git-client git-demo]# git branch
* feature1
  main
[root@git-client git-demo]# ll
total 8
-rw-r--r-- 1 root root  0 Dec  2 16:24 f3
-rw-r--r-- 1 root root  0 Dec  2 17:41 f4
-rw-r--r-- 1 root root 79 Dec  2 15:20 file1.txt
-rw-r--r-- 1 root root 20 Dec  2 16:08 file2.txt
[root@git-client git-demo]# vim file1.txt 
[root@git-client git-demo]# cat file1.txt 
hello git cool!
I am the one!
third modified,add one line.
four line
five line is cool.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git add&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git commit提交&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git add file1.txt 
[root@git-client git-demo]# git commit -m &amp;quot;file1 add is cool&amp;quot;
[feature1 043bf76] file1 add is cool
 1 file changed, 1 insertion(+), 1 deletion(-)
[root@git-client git-demo]# git status
# On branch feature1
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换回main主分支&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;此时查看file1，第五行未添加任何内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git checkout main
Switched to branch &#39;main&#39;
[root@git-client git-demo]# git status
# On branch main
nothing to commit, working directory clean
[root@git-client git-demo]# cat file1.txt 
hello git cool!
I am the one!
third modified,add one line.
four line
five line
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改file1，并在第五行添加 is not cool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git add&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git commit提交&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# vim file1.txt 
[root@git-client git-demo]# git status
# On branch main
# Changes not staged for commit:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
#	modified:   file1.txt
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
[root@git-client git-demo]# git add file1.txt
[root@git-client git-demo]# git commit -m &#39;file1 add is not cool&#39;
[main c246768] file1 add is not cool
 1 file changed, 1 insertion(+), 1 deletion(-)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始合并&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在main主分支上，合并feature1上的修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git branch merge feature1时报错，报合并冲突，因为2个分支都修改了同一个文件，同一行；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git merge feature1
Auto-merging file1.txt
CONFLICT (content): Merge conflict in file1.txt
Automatic merge failed; fix conflicts and then commit the result.
[root@git-client git-demo]# git status
# On branch main
# Your branch is ahead of &#39;origin/main&#39; by 1 commit.
#   (use &amp;quot;git push&amp;quot; to publish your local commits)
#
# You have unmerged paths.
#   (fix conflicts and run &amp;quot;git commit&amp;quot;)
#
# Unmerged paths:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to mark resolution)
#
#	both modified:      file1.txt
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决冲突&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在main主分支上，查看file1内容，会有冲突行的提示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# cat file1.txt 
hello git cool!
I am the one!
third modified,add one line.
four line
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
five line is not cool.
=======
five line is cool.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; feature1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在main主分支上，编辑file1，敲定冲突行到底选定那个分支的修改，或综合一下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# vim file1.txt 
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决冲突后提交&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;git add&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git commit提交即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git add file1.txt 
[root@git-client git-demo]# git commit -m &amp;quot;conflict fixed,real cool&amp;quot;
[main 10fc0d3] conflict fixed,real cool
[root@git-client git-demo]# git status
# On branch main
# Your branch is ahead of &#39;origin/main&#39; by 3 commits.
#   (use &amp;quot;git push&amp;quot; to publish your local commits)
#
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看提交日志&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@git-client git-demo&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# git log --graph --pretty=oneline --abbrev-commit&lt;/span&gt;
*   10fc0d3 conflict fixed,real cool
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt; 
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; * 043bf76 file1 add is cool
* &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; c246768 file1 add is not cool
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;/  &lt;span class=&#34;c1&#34;&gt;# 这块儿看到，2个分支，冲突，最后解决了冲突再merge&lt;/span&gt;
* d90cc73 add f4
* cf3d7d1 add f3
* 3837d88 delete f3
* 9357e75 add f3
* 4285c1a file2 add two-line
* 74a3395 yes
* b9c43df add four line
* 2ba3654 third modified
* 409066c i confirm
* c5adcc0 add file2.txt
* af61fed my first commit,include two file2
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;​	删除feature1分支&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git branch
  feature1
* main
[root@git-client git-demo]# git branch -d feature1
Deleted branch feature1 (was 043bf76).
[root@git-client git-demo]# git branch
* main
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;分支管理策略&#34;&gt;分支管理策略&lt;/h2&gt;
&lt;p&gt;​	默认分支合并策略为fast-forwarding，也可以用--no-ff参数禁用fast-forwarding合并策略；采用普通合并模式；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;拉取新分支dev&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改f3文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git checkout -b dev
Switched to a new branch &#39;dev&#39;
[root@git-client git-demo]# git branch
* dev
  main
[root@git-client git-demo]# vim f3 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add、commit2步提交&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git add f3
      
[root@git-client git-demo]# git commit -m &#39;f3 add &#39;
[dev 6dd5183] f3 add
 1 file changed, 1 insertion(+)
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换回main分支&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git status
# On branch dev
nothing to commit, working directory clean
[root@git-client git-demo]# git checkout main
Switched to branch &#39;main&#39;
Your branch is ahead of &#39;origin/main&#39; by 3 commits.
  (use &amp;quot;git push&amp;quot; to publish your local commits)
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用no-ff模式合并dev&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git merge --no-ff -m &#39;test no-ff merge&#39; dev
Merge made by the &#39;recursive&#39; strategy.
 f3 | 1 +
 1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看git log图形&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo]# git log --graph --pretty=oneline --abbrev-commit
*   e9a12ff test no-ff merge
|\  
| * 6dd5183 f3 add
|/  
*   10fc0d3 conflict fixed,real cool
|\  
| * 043bf76 file1 add is cool
* | c246768 file1 add is not cool
|/  
* d9
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;开发时分支策略：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master应保持稳定，只有在发布新版本时使用，将dev分支的代码合并到master然后发布；&lt;/li&gt;
&lt;li&gt;在master初始化后拉取一个dev分支，作为各个开发人员开发后汇总的分支；&lt;/li&gt;
&lt;li&gt;在dev拉取各个开发人员自己的分支，根据需要合并，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;图示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	各个开发人员开发分支示意，dev分支汇总各开发的代码，测试通过后，再merge到master上发版；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201203112610865.png&#34; alt=&#34;image-20201203112610865&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;bug分支&#34;&gt;bug分支&lt;/h2&gt;
&lt;p&gt;​	假定，正在dev分支进行开发，开发到中途，上一版master的发版有bug，需要立刻修复，方法：保存dev分支现场，切换到master，拉取bug修复分支，然后切换到master合并bug分支，最后切换为dev，还原现场，继续开发；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;保存dev现场&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# touch code3
[root@git-client git-demo2]# git add code3 
[root@git-client git-demo2]# git status
# On branch dev
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#	new file:   code3
#
此时code3还未提交，未完成也不能提交，只能先保存现场；
[root@git-client git-demo2]# git stash
Saved working directory and index state WIP on dev: df5c057 add code2
HEAD is now at df5c057 add code2
[root@git-client git-demo2]# git status
# On branch dev
nothing to commit, working directory clean
   
git stash保存现场，保存后，工作目录是干净的
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换到master&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git checkout main
Switched to branch &#39;main&#39;
Your branch is ahead of &#39;origin/main&#39; by 2 commits.
  (use &amp;quot;git push&amp;quot; to publish your local commits)
[root@git-client git-demo2]# git status
# On branch main
# Your branch is ahead of &#39;origin/main&#39; by 2 commits.
#   (use &amp;quot;git push&amp;quot; to publish your local commits)
#
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉取bug修复分支，并修复&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git checkout -b bugfix
Switched to a new branch &#39;bugfix&#39;
[root@git-client git-demo2]# ll
total 20
-rw-r--r-- 1 root root     4 Dec  3 15:02 code1
-rw-r--r-- 1 root root 11357 Dec  2 17:47 LICENSE
-rw-r--r-- 1 root root    11 Dec  2 17:47 README.md
[root@git-client git-demo2]# cat code1 
bug
   
# 假定code1中的bug删除，就为bug修复操作；
   
[root@git-client git-demo2]# &amp;gt; code1 
[root@git-client git-demo2]# cat code1 
[root@git-client git-demo2]# git add code1 
[root@git-client git-demo2]# git commit -m &#39;fixed bug&#39;
[bugfix ba43126] fixed bug
 1 file changed, 1 deletion(-)
[root@git-client git-demo2]# git status
# On branch bugfix
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换到master，合并bug修复分支&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git checkout main
Switched to branch &#39;main&#39;
Your branch is ahead of &#39;origin/main&#39; by 2 commits.
  (use &amp;quot;git push&amp;quot; to publish your local commits)
[root@git-client git-demo2]# git merge --no-ff -m &#39;merge bug fixed&#39; bugfix
Merge made by the &#39;recursive&#39; strategy.
 code1 | 1 -
 1 file changed, 1 deletion(-)
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换为dev，恢复现场&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git checkout dev
Switched to branch &#39;dev&#39;
[root@git-client git-demo2]# git status
# On branch dev
nothing to commit, working directory clean
   
# 列出之前保存的现场
[root@git-client git-demo2]# git stash list
stash@{0}: WIP on dev: df5c057 add code2
   
# 用git stash pop恢复
[root@git-client git-demo2]# git stash pop
# On branch dev
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#	new file:   code3
#
Dropped refs/stash@{0} (985929981fb0112131abe194d466ae595d166c66)
[root@git-client git-demo2]# git stash list
[root@git-client git-demo2]# git status
# On branch dev
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#	new file:   code3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（重放，修复dev中隐含的相同的bug）&lt;/p&gt;
&lt;p&gt;dev是从master拉取的分支，master的bug在dev分支同样存在，可以采用重放的方式，快速修复dev中的bug；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git cherry-pick ba43126
[dev 8f58ed9] fixed bug
 1 file changed, 1 deletion(-)
[root@git-client git-demo2]# cat code1 
   
找到修改bug的那个commit的id，git cherry-pick ID即可，前提，当前git status要是干净的；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;feature分支&#34;&gt;feature分支&lt;/h2&gt;
&lt;p&gt;1、拉取用于新的特性开发的分支，并做了commit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git checkout -b feature
Switched to a new branch &#39;feature&#39;

[root@git-client git-demo2]# touch func1
[root@git-client git-demo2]# git add func1 
[root@git-client git-demo2]# git commit -m &#39;add func1&#39;
[feature f40650c] add func1
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 func1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、切换回dev上，若要删除刚刚的分支的话，对于已经commit但未合并的分支，删除需要D参数，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@git-client git-demo2]# git status
# On branch feature
nothing to commit, working directory clean
[root@git-client git-demo2]# git checkout dev
Switched to branch &#39;dev&#39;
[root@git-client git-demo2]# git branch -d feature
error: The branch &#39;feature&#39; is not fully merged.
If you are sure you want to delete it, run &#39;git branch -D feature&#39;.
[root@git-client git-demo2]# git branch -D feature
Deleted branch feature (was f40650c).
[root@git-client git-demo2]# git branch
* dev
  main
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;多人协作&#34;&gt;多人协作&lt;/h2&gt;
&lt;p&gt;推送分支：除主分支外，其余分支可以根据需要推送；&lt;/p&gt;
&lt;p&gt;​	多人协助时，一般都有一个远程仓库，做汇总，和远程仓库同步时，需要指定远程的仓库名，（是仓库在本地的标识名，不一定是创建仓库时的名字）&lt;/p&gt;
&lt;p&gt;​	git remote add origin &lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:ice-latte/git-demo.git，origin就是远程仓库在本地的标识名，默认是origin，当有多个远程库要同步时，要定义不同的名字区分开，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看远程仓库的信息

[root@git-client git-demo2]# git remote
origin
[root@git-client git-demo2]# git remote -v
origin	git@github.com:ice-latte/git-demo2.git (fetch)
origin	git@github.com:ice-latte/git-demo2.git (push)

# 将本地的main分支，对应远程的主分支master，推送上去；

[root@git-client git-demo2]# git push origin main
Counting objects: 13, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (10/10), done.
Writing objects: 100% (12/12), 1003 bytes | 0 bytes/s, done.
Total 12 (delta 5), reused 0 (delta 0)
remote: Resolving deltas: 100% (5/5), done.
To git@github.com:ice-latte/git-demo2.git
   012d8ac..1dc27c7  main -&amp;gt; main

# 将本地的dev分支，推送上去，远程也将创建一个dev分支；
[root@git-client git-demo2]# git push origin dev
Total 0 (delta 0), reused 0 (delta 0)
remote: 
remote: Create a pull request for &#39;dev&#39; on GitHub by visiting:
remote:      https://github.com/ice-latte/git-demo2/pull/new/dev
remote: 
To git@github.com:ice-latte/git-demo2.git
 * [new branch]      dev -&amp;gt; dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;推送分支：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;推送自己本地分支提交的更新时，&lt;/li&gt;
&lt;li&gt;若推送失败，提示远程库较新，需要先把远程库pull下来合并，然后再push&lt;/li&gt;
&lt;li&gt;若合并有冲突，就手动解决冲突，然后提交，然后再push&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# 下为提示，push被拒绝，因为，远程库较新，有别人先push了，提示要先pull下来跟自己合并，
# 若修改了冲突的行，还需解决冲突，然后再push

[root@git-client git-demo2]# git push origin dev
Warning: Permanently added the RSA host key for IP address &#39;192.30.255.113&#39; to the list of known hosts.
To git@github.com:ice-latte/git-demo2.git
 ! [rejected]        dev -&amp;gt; dev (fetch first)
error: failed to push some refs to &#39;git@github.com:ice-latte/git-demo2.git&#39;
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first merge the remote changes (e.g.,
hint: &#39;git pull&#39;) before pushing again.
hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/ci/cd/" term="ci/cd" label="ci/cd" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/git/" term="git" label="git" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/gitlab/" term="gitlab" label="gitlab" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之二进制部署集群</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8B%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8B%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/</id>
            <updated>2020-12-02T09:45:49&#43;08:00</updated>
            <published>2020-11-18T15:18:16&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之二进制部署集群</summary>
            
                <content type="html"></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/" term="未完成" label="未完成" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之kubeadm部署集群</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bkubeadm%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bkubeadm%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/</id>
            <updated>2020-11-18T15:18:52&#43;08:00</updated>
            <published>2020-11-11T14:37:19&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之kubeadm部署集群</summary>
            
                <content type="html">&lt;h1 id=&#34;kubeadm简介&#34;&gt;kubeadm简介&lt;/h1&gt;
&lt;h2 id=&#34;kubeadm部署过程解析&#34;&gt;kubeadm部署过程解析&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.10.md&#34;&gt;官方介绍：kubeadm部署中步骤解析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;kubernetes集群部署方式&#34;&gt;kubernetes集群部署方式&lt;/h2&gt;
&lt;p&gt;​	常用kubernetes的集群部署方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minikube：单机的伪分布式集群，适合测试，新手入门&lt;/li&gt;
&lt;li&gt;kubeadm部署工具：算是kubernetes一键部署工具&lt;/li&gt;
&lt;li&gt;二进制部署：手动部署kubernetes各个组件为节点daemon进程，需要手动定义一系列认证信息等，较为繁琐，可参考github相关ansible playbook一键部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kubernetes集群运行方式&#34;&gt;kubernetes集群运行方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;独立的守护进程&lt;/li&gt;
&lt;li&gt;静态pod方式&lt;/li&gt;
&lt;li&gt;自托管pod方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;独立的守护进程：&lt;/p&gt;
&lt;p&gt;​	master节点的进程：kube-apiserver、kube-schedule、kube-controller-manager、etcd以节点上daemon进程的方式运行；&lt;strong&gt;master节点就是一般的linux主机即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态pod方式&lt;/p&gt;
&lt;p&gt;​	master节点的进程：kube-apiserver、kube-schedule、kube-controller-manager、etcd以静态pod方式运行为容器进程；&lt;strong&gt;master节点需要kubelet和docker环境，借此管理api-server等容器；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自托管pod方式&lt;/p&gt;
&lt;p&gt;​	master节点的进程：kube-apiserver、kube-schedule、kube-controller-manager、etcd仍运行为pod，只是受daemonset控制器管理：&lt;strong&gt;master节点也需要kubelet和docker环境，借此管理api-server等容器；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;kubeadm可以选择运行为静态pod、或自托管pod方式；默认为静态pod；kubeadm --int 采用参数--features-gates=selfHosting即可选择自托管方式；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h1 id=&#34;kubeadm实验环境&#34;&gt;kubeadm实验环境&lt;/h1&gt;
&lt;h2 id=&#34;kubeadm部署总结&#34;&gt;kubeadm部署总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主机基础环境准备
&lt;ol&gt;
&lt;li&gt;时间同步&lt;/li&gt;
&lt;li&gt;主机名解析&lt;/li&gt;
&lt;li&gt;防火墙关闭&lt;/li&gt;
&lt;li&gt;selinux禁用&lt;/li&gt;
&lt;li&gt;禁用主机上swap设备或后续kubeadm配置忽略swap未关闭报错&lt;/li&gt;
&lt;li&gt;（可选）脚本加载ipvs mudule（新版k8s采用ipvs做service规则配置时需要）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;集群初始化
&lt;ol&gt;
&lt;li&gt;master/node节点安装docker、kubelet、kubeadm
&lt;ol&gt;
&lt;li&gt;（根据需要配置docker镜像加速、代理、forward链策略等配置）&lt;/li&gt;
&lt;li&gt;（kubelet忽略swap错误）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;master节点kubeadm init初始化
&lt;ol&gt;
&lt;li&gt;命令行或yaml文件方式&lt;/li&gt;
&lt;li&gt;kubeadm init过程分析&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;node节点kubeadm join加入
&lt;ol&gt;
&lt;li&gt;node节点加入时过程分析&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;master节点拉取部署网络插件&lt;/li&gt;
&lt;li&gt;安装配置kubectl&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;部署完成验证
&lt;ol&gt;
&lt;li&gt;查看集群信息&lt;/li&gt;
&lt;li&gt;如何移除node&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&#34;&gt;kubeadm安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/&#34;&gt;kubeadm集群部署官方参考文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;集群结构示意图&#34;&gt;集群结构示意图&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;下图中节点网络改为同一个网段的虚拟机网段&lt;/strong&gt;：192.168.80.0/24&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201106162503597.png&#34; alt=&#34;image-20201106162503597&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;基础环境与版本信息&#34;&gt;基础环境与版本信息&lt;/h2&gt;
&lt;p&gt;​	实验用机为vmvare workstation 15上安装的虚拟机：1台master节点、3台node节点，1台单独kubectl客户端，共5台虚拟机：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;master:192.168.80.101

node1:192.168.80.106
node2:192.168.80.107
node3:192.168.80.108

client:192.168.80.102
# 虚拟机为vmnet8的nat网络，可以借助实验pc机访问外网；
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;OS：CentOS Linux release 7.5.1804 (Core) | 3.10.0-862.el7.x86_64&lt;/li&gt;
&lt;li&gt;docker：Docker version 18.03.1-ce, build 9ee9f40&lt;/li&gt;
&lt;li&gt;kubernetes：1.12&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;部署集群过程&#34;&gt;部署集群过程&lt;/h1&gt;
&lt;h2 id=&#34;主机环境准备&#34;&gt;主机环境准备&lt;/h2&gt;
&lt;h3 id=&#34;时间同步&#34;&gt;时间同步&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# systemctl start chronyd
[root@master ~]# systemctl enable chronyd

# 安装chronyd包，直接启动，采用默认centos站点的时间服务器同步时间即可；也可换为国内时间服务器ip
# 内网一般有单独的时间服务器，
# Use public servers from the pool.ntp.org project.
# Please consider joining the pool (http://www.pool.ntp.org/join.html).
server 0.centos.pool.ntp.org iburst
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;主机名解析&#34;&gt;主机名解析&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 注意ip在前；
[root@master ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.80.101 master
192.168.80.106 node1
192.168.80.107 node2
192.168.80.108 node3
192.168.80.102 client

[root@master ~]# scp /etc/hosts root@192.168.80.106:/etc/hosts
[root@master ~]# scp /etc/hosts root@192.168.80.107:/etc/hosts
...

# 因实验主机较少，采用直接编辑hosts文件即可；
# 生产中大量主机一般需要dns解析服务
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;防火墙关闭&#34;&gt;防火墙关闭&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# systemctl status firewalld
● firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)
   Active: inactive (dead)
     Docs: man:firewalld(1)

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;selinux禁用&#34;&gt;selinux禁用&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# getenforce 
Disabled
        
[root@master ~]# grep dis /etc/selinux/config 
#     disabled - No SELinux policy is loaded.
SELINUX=disabled
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;swap禁用&#34;&gt;swap禁用&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# swapoff -a

# 禁用swap设备，
# kubeadm会检查节点的swap有无禁用，没禁用时默认会部署失败，swap设备会有影响性能，一般不应该开启，
# 对于有swap设备的节点应该swapoff -a禁用，并在/etc/fstab中注释掉，
# 也可：在kubelet配置文件、kubeadm init和join时，分别加上忽略swap设备未禁用错误 的配置
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;加载ipvs模块&#34;&gt;加载ipvs模块&lt;/h3&gt;
&lt;p&gt;​	kubernetes1.11后，采用ipvs作为sevice的规则实现，因此需要加载ipvs相关模块，但ipvs只实现负载均衡部分，snat等功能仍需要iptables实现，&lt;/p&gt;
&lt;p&gt;​	加载脚本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# vim /etc/sysconfig/modules/ipvs.modules
[root@master ~]# sh -n !$
sh -n /etc/sysconfig/modules/ipvs.modules
[root@master ~]# cat !$
cat /etc/sysconfig/modules/ipvs.modules
#!/bin/bash

ipvs_module_dir=&amp;quot;/usr/lib/modules/$(uname -r)/kernel/net/netfilter/ipvs&amp;quot;

for i in $(ls $ipvs_module_dir |grep -o &amp;quot;^[^.]*&amp;quot;); do

	/sbin/modinfo -F filename $i &amp;amp;&amp;gt; /dev/null
	if [ $? -eq 0 ];then
		/sbin/modprobe $i
	fi
done


[root@master ~]# chmod +x /etc/sysconfig/modules/ipvs.modules 
[root@master ~]# sh  /etc/sysconfig/modules/ipvs.modules 

# 并复制到其他的master/node节点，然后加载模块；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;部署集群&#34;&gt;部署集群&lt;/h2&gt;
&lt;p&gt;​	kubeadm部署集群过程大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master和node节点安装docker环境、kubelet、kubeadm包；
&lt;ol&gt;
&lt;li&gt;docker配置加速、代理、accept forward链配置；&lt;/li&gt;
&lt;li&gt;kubelet配置忽略swap错误；enable&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;master节点上kubeadm init初始化集群；&lt;/li&gt;
&lt;li&gt;node节点上kubeadm join加入master上初始化后集群；&lt;/li&gt;
&lt;li&gt;master节点拉取并部署网络插件容器，如flannel，提供pod和service网络；&lt;/li&gt;
&lt;li&gt;部署kubectl客户端，（可选择部署在单独的客户端节点）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;安装dockerkubeletkubeadm&#34;&gt;安装docker、kubelet、kubeadm&lt;/h3&gt;
&lt;p&gt;0、虚拟机访问“互联网”的配置&lt;/p&gt;
&lt;p&gt;​	本设置可以实现虚拟机通过pc而访问”科学的网络“，但是只是为了拉取k8s组件镜像的话，代理配置在docker的unitfile即可，且该系统级别的配置，导致了后面的kubeadm init老失败！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 配置ssr开启，并允许局域网的连接

# 虚拟机配置pc的ip作为代理，端口默认为1080，示例如下：

[root@node3 ~]# cat /etc/profile.d/http_proxy.sh 
http_proxy=http://192.168.31.107:1080
https_proxy=http://192.168.31.107:1080
export http_proxy
export https_proxy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、master和3个node节点均安装dokcer-ce-18.03&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、安装yum-config工具
yum install -y yum-utils

2、配置docker-ce的源
yum-config-manager \
    --add-repo \
    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 
    
3、列出所有提供的docker-ce版本
yum list docker-ce --showduplicates | sort -r

4、指定docker-ce版本安装
[root@host2 ~]# yum install docker-ce-18.03.1.ce-1.el7.centos docker-ce-cli-18.03.1.ce-1.el7.centos containerd.io

# master和3个node均安装了docker-ce1803版本；
[root@master ~]# docker --version
Docker version 18.03.1-ce, build 9ee9f40

[root@node1 ~]# docker --version
Docker version 18.03.1-ce, build 9ee9f40

[root@node2 ~]# docker --version
Docker version 18.03.1-ce, build 9ee9f40

[root@node3 ~]# docker --version
Docker version 18.03.1-ce, build 9ee9f40
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、配置阿里云的kubernetes仓库安装kubeadm、kubelet、kubectl（可选）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 配置kubernetes仓库地址；采用阿里云镜像仓库

[root@master ~]# cat /etc/yum.repos.d/k8s.repo 
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg

# 列出所有提供的版本
[root@master ~]# yum list kubelet kubeadm kubectl  --showduplicates|sort -r | tail
kubeadm.x86_64                       1.10.2-0                         kubernetes
kubeadm.x86_64                       1.10.13-0                        kubernetes
kubeadm.x86_64                       1.10.12-0                        kubernetes
kubeadm.x86_64                       1.10.11-0                        kubernetes
kubeadm.x86_64                       1.10.1-0                         kubernetes
kubeadm.x86_64                       1.10.10-0                        kubernetes
kubeadm.x86_64                       1.10.0-0                         kubernetes
...

# 安装指定版本，此处安装kubeadm，kubelet，kubectl 均为1.12版本；
# 主节点安装如下：
[root@master ~]# yum install -y kubeadm-1.12.9 kubelet-1.12.9 kubectl-1.12.9 kubernetes-cni-0.7.5-0.x86_64

# 3个node节点安装，除去了kubectl安装：
# 配置了代理后，无法访问阿里云仓库，这里先暂时取消代理
[root@node1 ~]# unset http_proxy
[root@node1 ~]# unset https_proxy
[root@node1 ~]# yum install -y kubeadm-1.12.9  kubelet-1.12.9 kubernetes-cni-0.7.5-0.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;kubelet配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# vim /etc/sysconfig/kubelet 
[root@master ~]# cat !$
cat /etc/sysconfig/kubelet
KUBELET_EXTRA_ARGS=&amp;quot;--fail-swap-on=false&amp;quot;
[root@master ~]# systemctl daemon-reload
[root@master ~]# systemctl enable kubelet
Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.

# 开机启动，并配置忽略swap未关闭报错；无需手动启动，kubeadm init时会生成其所需证书等文件，并启动kubelet，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、配置docker加速&lt;/p&gt;
&lt;p&gt;​	此处采用阿里云提供的个人加速地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# cat /etc/docker/daemon.json 
{
  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://****.mirror.aliyuncs.com&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、配置docker代理（可选）&lt;/p&gt;
&lt;p&gt;​	在dokcer的服务启动脚本中，添加环境变量：environment，对于无法访问真正互联网的环境，需要该配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# grep Environ /usr/lib/systemd/system/docker.service 
Environment=&amp;quot;HTTP_PROXY=http://192.168.31.107:1080&amp;quot;

# 在[service]配置段加上即可

# 查看是否生效，31.107为实验pc机上在局域网获得的dhcp地址，注意地址可能会过期；
[root@master ~]# docker info |grep Proxy
HTTP Proxy: http://192.168.31.107:1080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、配置docker对forward链默认策略&lt;/p&gt;
&lt;p&gt;​	docker自1.13版本后对forward链默认策略为drop，可能影响k8s的报文转发功能；&lt;/p&gt;
&lt;p&gt;​	在dokcer的服务启动脚本中，修改启动命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# iptables -vnL |grep FORWARD
Chain FORWARD (policy DROP 0 packets, 0 bytes)
[root@master ~]# vim /usr/lib/systemd/system/docker.service 
[root@master ~]# grep StartPost !$
grep StartPost /usr/lib/systemd/system/docker.service
ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT
# 在execstart后加一行startpost，修改docker对forward的链的默认策略
# 修改后默认为accept
[root@master ~]# iptables -vnL |grep FORWARD
Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)


[root@master ~]# systemctl daemon-reload
[root@master ~]# systemctl restart docker

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;安装后，各节点的包：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# rpm -qa|grep kube
kubelet-1.12.9-0.x86_64
kubernetes-cni-0.7.5-0.x86_64
kubectl-1.12.9-0.x86_64
kubeadm-1.12.9-0.x86_64
# 主节点

[root@client ~]# rpm -qa|grep kube
kubectl-1.12.9-0.x86_64
# 客户端


[root@node1 ~]# rpm -qa |grep kube
kubelet-1.12.9-0.x86_64
kubernetes-cni-0.7.5-0.x86_64
kubectl-1.19.3-0.x86_64
kubeadm-1.12.9-0.x86_64
# 各个node节点；node节点未安装kubectl，但会被依赖而安装，且安装的是最新版本1.19
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;kubeadm-init&#34;&gt;kubeadm init&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubeadm  init --kubernetes-version=v1.12.9 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=Swap

# 指定安装版本
# 指定pod和service网络的网段
# 指定apiserver的监听，通信地址，0.0.0.0为本机所有ip，也可指定某网卡的单一ip
# 忽略环境检查时的swap未关闭错误
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;最终成功输出&#34;&gt;最终成功输出&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubeadm  init --kubernetes-version=v1.12.9 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=Swap
[init] using Kubernetes version: v1.12.9
[preflight] running pre-flight checks
	[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.03.1-ce. Latest validated version: 18.06
[preflight/images] Pulling images required for setting up a Kubernetes cluster
[preflight/images] This might take a minute or two, depending on the speed of your internet connection
[preflight/images] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;
[kubelet] Writing kubelet environment file with flags to file &amp;quot;/var/lib/kubelet/kubeadm-flags.env&amp;quot;
[kubelet] Writing kubelet configuration to file &amp;quot;/var/lib/kubelet/config.yaml&amp;quot;
[preflight] Activating the kubelet service
[certificates] Generated front-proxy-ca certificate and key.
[certificates] Generated front-proxy-client certificate and key.
[certificates] Generated etcd/ca certificate and key.
[certificates] Generated etcd/peer certificate and key.
[certificates] etcd/peer serving cert is signed for DNS names [master localhost] and IPs [192.168.80.101 127.0.0.1 ::1]
[certificates] Generated etcd/server certificate and key.
[certificates] etcd/server serving cert is signed for DNS names [master localhost] and IPs [127.0.0.1 ::1]
[certificates] Generated etcd/healthcheck-client certificate and key.
[certificates] Generated apiserver-etcd-client certificate and key.
[certificates] Generated ca certificate and key.
[certificates] Generated apiserver-kubelet-client certificate and key.
[certificates] Generated apiserver certificate and key.
[certificates] apiserver serving cert is signed for DNS names [master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.80.101]
[certificates] valid certificates and keys now exist in &amp;quot;/etc/kubernetes/pki&amp;quot;
[certificates] Generated sa key and public key.
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/admin.conf&amp;quot;
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/kubelet.conf&amp;quot;
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/controller-manager.conf&amp;quot;
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/scheduler.conf&amp;quot;
[controlplane] wrote Static Pod manifest for component kube-apiserver to &amp;quot;/etc/kubernetes/manifests/kube-apiserver.yaml&amp;quot;
[controlplane] wrote Static Pod manifest for component kube-controller-manager to &amp;quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&amp;quot;
[controlplane] wrote Static Pod manifest for component kube-scheduler to &amp;quot;/etc/kubernetes/manifests/kube-scheduler.yaml&amp;quot;
[etcd] Wrote Static Pod manifest for a local etcd instance to &amp;quot;/etc/kubernetes/manifests/etcd.yaml&amp;quot;
[init] waiting for the kubelet to boot up the control plane as Static Pods from directory &amp;quot;/etc/kubernetes/manifests&amp;quot; 
[init] this might take a minute or longer if the control plane images have to be pulled
[apiclient] All control plane components are healthy after 21.002522 seconds
[uploadconfig] storing the configuration used in ConfigMap &amp;quot;kubeadm-config&amp;quot; in the &amp;quot;kube-system&amp;quot; Namespace
[kubelet] Creating a ConfigMap &amp;quot;kubelet-config-1.12&amp;quot; in namespace kube-system with the configuration for the kubelets in the cluster
[markmaster] Marking the node master as master by adding the label &amp;quot;node-role.kubernetes.io/master=&#39;&#39;&amp;quot;
[markmaster] Marking the node master as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[patchnode] Uploading the CRI Socket information &amp;quot;/var/run/dockershim.sock&amp;quot; to the Node API object &amp;quot;master&amp;quot; as an annotation
[bootstraptoken] using token: rdif9c.h8084b6polru2bde
[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstraptoken] creating the &amp;quot;cluster-info&amp;quot; ConfigMap in the &amp;quot;kube-public&amp;quot; namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &amp;quot;kubectl apply -f [podnetwork].yaml&amp;quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 192.168.80.101:6443 --token rdif9c.h8084b6polru2bde --discovery-token-ca-cert-hash sha256:e64e4335f619b04dc17a004c626876451f96c80005aea0e05ed73269033bddbd

&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;配置主节点kubectl&#34;&gt;配置主节点kubectl&lt;/h4&gt;
&lt;p&gt;​	又受到了系统代理设置影响，配置好后kubectl报错，unknown host，设置删除其变量文件后即可；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# rm -rf /etc/profile.d/http_proxy.sh 
[root@master ~]# logout
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  
  
[root@master ~]# kubectl get cs
NAME                 STATUS    MESSAGE              ERROR
controller-manager   Healthy   ok                   
scheduler            Healthy   ok                   
etcd-0               Healthy   {&amp;quot;health&amp;quot;: &amp;quot;true&amp;quot;}   
[root@master ~]# kubectl get nodes
NAME     STATUS     ROLES    AGE    VERSION
master   NotReady   master   106m   v1.12.9
[root@master ~]# 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;各节点运行的pod&#34;&gt;各节点运行的pod&lt;/h4&gt;
&lt;p&gt;master：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# docker ps -a  |grep kube |grep -v pause
97709d637ee8        295526df163c           &amp;quot;/usr/local/bin/kube…&amp;quot;   2 hours ago         Up 2 hours                              k8s_kube-proxy_kube-proxy-hqh4m_kube-system_0cb936d7-2321-11eb-8d73-000c292d5d7c_0
705848fe4797        c79506ccc1bc           &amp;quot;kube-scheduler --ad…&amp;quot;   2 hours ago         Up 2 hours                              k8s_kube-scheduler_kube-scheduler-master_kube-system_63688448321beb5bd69c28a75cff89a4_0
82cc49978e77        f473e8452c8e           &amp;quot;kube-controller-man…&amp;quot;   2 hours ago         Up 2 hours                              k8s_kube-controller-manager_kube-controller-manager-master_kube-system_45e2f4eec8cacc28e2e3a79e0ef42efc_0
b761d3dc1486        8ea704c2d4a7           &amp;quot;kube-apiserver --au…&amp;quot;   2 hours ago         Up 2 hours                              k8s_kube-apiserver_kube-apiserver-master_kube-system_f6b13d90320c48e622e8a00e1ce786e9_0
a5fb6d7e2943        3cab8e1b9802           &amp;quot;etcd --advertise-cl…&amp;quot;   2 hours ago         Up 2 hours                              k8s_etcd_etcd-master_kube-system_d2f4eef271e0e5c9c74810d2ad56adce_0

# 目前共有5个pod：api-server、scheduler、controller-manager、etcd、kube-proxy，以及5个pause的模版pod
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;遇到错误1&#34;&gt;遇到错误1&lt;/h4&gt;
&lt;p&gt;​	内核参数未设置；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubeadm  init --kubernetes-version=v1.12.1 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=Swap
[init] using Kubernetes version: v1.12.1
[preflight] running pre-flight checks
	[WARNING HTTPProxy]: Connection to &amp;quot;https://192.168.80.101&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. If that is not intended, adjust your proxy settings
	[WARNING HTTPProxyCIDR]: connection to &amp;quot;10.96.0.0/12&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. This may lead to malfunctional cluster setup. Make sure that Pod and Services IP ranges specified correctly as exceptions in proxy configuration
	[WARNING HTTPProxyCIDR]: connection to &amp;quot;10.244.0.0/16&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. This may lead to malfunctional cluster setup. Make sure that Pod and Services IP ranges specified correctly as exceptions in proxy configuration
	[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.03.1-ce. Latest validated version: 18.06
[preflight] Some fatal errors occurred:
	[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`


# 修改：
cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;错误2&#34;&gt;错误2&lt;/h4&gt;
&lt;p&gt;​	代理设置格式错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[preflight] Some fatal errors occurred:
	[ERROR ImagePull]: failed to pull image k8s.gcr.io/kube-apiserver:v1.12.1: output: Error response from daemon: Get https://k8s.gcr.io/v2/: invalid proxy URL port &amp;quot;1080,HTTPS_PROXY=https:&amp;quot;

# 修改：去掉了https的代理
[root@master ~]# grep Environ /usr/lib/systemd/system/docker.service 
Environment=&amp;quot;HTTP_PROXY=http://192.168.31.107:1080&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;错误3&#34;&gt;错误3&lt;/h4&gt;
&lt;p&gt;​	设置的系统级别http代理影响了api-server的访问；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubeadm  init --kubernetes-version=v1.12.1 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=Swap
[init] using Kubernetes version: v1.12.1
[preflight] running pre-flight checks
	[WARNING HTTPProxy]: Connection to &amp;quot;https://192.168.80.101&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. If that is not intended, adjust your proxy settings
	[WARNING HTTPProxyCIDR]: connection to &amp;quot;10.96.0.0/12&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. This may lead to malfunctional cluster setup. Make sure that Pod and Services IP ranges specified correctly as exceptions in proxy configuration
	[WARNING HTTPProxyCIDR]: connection to &amp;quot;10.244.0.0/16&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. This may lead to malfunctional cluster setup. Make sure that Pod and Services IP ranges specified correctly as exceptions in proxy configuration
	[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.03.1-ce. Latest validated version: 18.06
[preflight/images] Pulling images required for setting up a Kubernetes cluster
[preflight/images] This might take a minute or two, depending on the speed of your internet connection
[preflight/images] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;
[kubelet] Writing kubelet environment file with flags to file &amp;quot;/var/lib/kubelet/kubeadm-flags.env&amp;quot;
[kubelet] Writing kubelet configuration to file &amp;quot;/var/lib/kubelet/config.yaml&amp;quot;
[preflight] Activating the kubelet service
[certificates] Generated etcd/ca certificate and key.
[certificates] Generated etcd/peer certificate and key.
[certificates] etcd/peer serving cert is signed for DNS names [master localhost] and IPs [192.168.80.101 127.0.0.1 ::1]
[certificates] Generated etcd/healthcheck-client certificate and key.
[certificates] Generated apiserver-etcd-client certificate and key.
[certificates] Generated etcd/server certificate and key.
[certificates] etcd/server serving cert is signed for DNS names [master localhost] and IPs [127.0.0.1 ::1]
[certificates] Generated ca certificate and key.
[certificates] Generated apiserver certificate and key.
[certificates] apiserver serving cert is signed for DNS names [master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.80.101]
[certificates] Generated apiserver-kubelet-client certificate and key.
[certificates] Generated front-proxy-ca certificate and key.
[certificates] Generated front-proxy-client certificate and key.
[certificates] valid certificates and keys now exist in &amp;quot;/etc/kubernetes/pki&amp;quot;
[certificates] Generated sa key and public key.
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/admin.conf&amp;quot;
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/kubelet.conf&amp;quot;
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/controller-manager.conf&amp;quot;
[kubeconfig] Wrote KubeConfig file to disk: &amp;quot;/etc/kubernetes/scheduler.conf&amp;quot;
[controlplane] wrote Static Pod manifest for component kube-apiserver to &amp;quot;/etc/kubernetes/manifests/kube-apiserver.yaml&amp;quot;
[controlplane] wrote Static Pod manifest for component kube-controller-manager to &amp;quot;/etc/kubernetes/manifests/kube-controller-manager.yaml&amp;quot;
[controlplane] wrote Static Pod manifest for component kube-scheduler to &amp;quot;/etc/kubernetes/manifests/kube-scheduler.yaml&amp;quot;
[etcd] Wrote Static Pod manifest for a local etcd instance to &amp;quot;/etc/kubernetes/manifests/etcd.yaml&amp;quot;
[init] waiting for the kubelet to boot up the control plane as Static Pods from directory &amp;quot;/etc/kubernetes/manifests&amp;quot; 
[init] this might take a minute or longer if the control plane images have to be pulled

Unfortunately, an error has occurred:
	timed out waiting for the condition

This error is likely caused by:
	- The kubelet is not running
	- The kubelet is unhealthy due to a misconfiguration of the node in some way (required cgroups disabled)

If you are on a systemd-powered system, you can try to troubleshoot the error with the following commands:
	- &#39;systemctl status kubelet&#39;
	- &#39;journalctl -xeu kubelet&#39;

Additionally, a control plane component may have crashed or exited when started by the container runtime.
To troubleshoot, list all containers using your preferred container runtimes CLI, e.g. docker.
Here is one example how you may list all Kubernetes containers running in docker:
	- &#39;docker ps -a | grep kube | grep -v pause&#39;
	Once you have found the failing container, you can inspect its logs with:
	- &#39;docker logs CONTAINERID&#39;
couldn&#39;t initialize a Kubernetes cluster


# 更正：
# 排查过程：
1、kubelet和docker用的cgroupfs不一致问题，修改kubelet的unitfile，改为一致；
	但没用
2、版本bug，
	升级，降级后都没用
3、域名解析问题，
	域名解析正常，不是这个问题
4、pod也都运行正常，端口在监听，telnet也通

5、最终问题：网络访问问题，在该博客上，https://blog.fleeto.us/post/kubeadm-traps/列出的第二点：
“kubeadm init过程首先会检查代理服务器，确定跟 kube-apiserver 的 https 连接方式，如果有代理设置，会提出警告。”
# 才注意到init时，开头的警告部分：[WARNING HTTPProxy]: Connection to &amp;quot;https://192.168.80.101&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. If that is not intended, adjust your proxy settings
	[WARNING HTTPProxyCIDR]: connection to &amp;quot;10.96.0.0/12&amp;quot; uses proxy &amp;quot;http://192.168.31.107:1080&amp;quot;. This may lead to malfunctional cluster setup. Make sure that Pod and Services IP ranges specified correctly as exceptions in proxy configuration
	[WARNING HTTPProxyCIDR]: connection to &amp;quot;10.244.0.0/16&amp;quot; uses proxy 
# 再结合kubelet的日志报错，Unable to register node &amp;quot;master&amp;quot; with API server: Post https://192.168.80.101:6443/api/v1/nodes: dial tcp 192.168.80.101:6443: connect: connection refused

# 怀疑是因为之前设置宿主机的ip:1080做拉取谷歌容器的代理，变量 http(s)_proxy，根据警告部分得知，访问service和pod网络时都会经由代理，而代理无法访问主节点的6443，导致了后续失败，
# printenv打出环境变量，然后unset2个代理变量后，清理之前的环境，再用相同的init命令，就成功了！
[root@master ~]# unset http_proxy
[root@master ~]# unset https_proxy
[root@master ~]# kubeadm reset
[root@master ~]# kubeadm  init --kubernetes-version=v1.12.9 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=Swap
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;kubeadm-init常见错误&#34;&gt;kubeadm init常见错误&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.fleeto.us/post/kubeadm-traps/&#34;&gt;https://blog.fleeto.us/post/kubeadm-traps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该博客列出了kubeadm常见的几个可能出现的错误：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理问题，（本次实验，就是设置的代理影响了master节点6443端口的访问）
&lt;ul&gt;
&lt;li&gt;（设置拉取镜像的代理时，设置在docker的unitfile中，而不是节点上整个系统的环境变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cgroupfs不一致&lt;/li&gt;
&lt;li&gt;内核参数net.bridge.bridge-nf-call-iptables没设置为1&lt;/li&gt;
&lt;li&gt;以及pod中容器问题，注意看日志：pod中容器日志、kubelet日志，系统日志/var/log/message&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;部署flannel&#34;&gt;部署flannel&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;第一次部署错误：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;下载文件：
https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

[root@master ~]# kubectl apply -f kube-flannel.yml 
podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	部署flannel有问题，flannel未运行pod，集群节点也是notready状态，查看flnanel的控制器ds期望状态pod是0，查看pod也是没有flnanel的pod运行在kube-system空间；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl get nodes
NAME     STATUS     ROLES    AGE     VERSION
master   NotReady   master   3h22m   v1.12.9
node2    NotReady   &amp;lt;none&amp;gt;   4m30s   v1.12.9

[root@master ~]# kubectl get ds -n kube-system
NAME              DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
kube-flannel-ds   0         0         0       0            0           &amp;lt;none&amp;gt;          17h
kube-proxy        2         2         1       2            1           &amp;lt;none&amp;gt;          19h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;更正后：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	错误原因：flnanel的最新的清单版本与k8s版本1.12.9不匹配，flannel官方介绍：k8s1.6到1.15需要采用旧版的yml文件；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kube-flannel.yaml&lt;/code&gt; has some features that aren&#39;t compatible with older versions of Kubernetes, though flanneld itself should work with any version of Kubernetes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# vim kube-flannel-old.yml 
https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel-old.yaml

[root@master ~]# docker pull quay.io/coreos/flannel:v0.11.0-amd64
# 采用了旧版的yaml文件后，即正常；

[root@master ~]# kubectl get pods -n kube-system -o wide
NAME                             READY   STATUS    RESTARTS   AGE    IP               NODE     NOMINATED NODE
coredns-576cbf47c7-8fpsn         1/1     Running   0          20h    10.244.0.2       master   &amp;lt;none&amp;gt;
coredns-576cbf47c7-tzmmt         1/1     Running   0          20h    10.244.0.3       master   &amp;lt;none&amp;gt;
etcd-master                      1/1     Running   3          16h    192.168.80.101   master   &amp;lt;none&amp;gt;
kube-apiserver-master            1/1     Running   4          16h    192.168.80.101   master   &amp;lt;none&amp;gt;
kube-controller-manager-master   1/1     Running   9          16h    192.168.80.101   master   &amp;lt;none&amp;gt;
kube-flannel-ds-amd64-lnwmf      1/1     Running   0          106s   192.168.80.107   node2    &amp;lt;none&amp;gt;
kube-flannel-ds-amd64-lqkv5      1/1     Running   0          106s   192.168.80.101   master   &amp;lt;none&amp;gt;
kube-proxy-hqh4m                 1/1     Running   3          20h    192.168.80.101   master   &amp;lt;none&amp;gt;
kube-proxy-szvvw                 1/1     Running   0          16h    192.168.80.107   node2    &amp;lt;none&amp;gt;
kube-scheduler-master            1/1     Running   8          16h    192.168.80.101   master   &amp;lt;none&amp;gt;
[root@master ~]# kubectl get nodes
NAME     STATUS   ROLES    AGE   VERSION
master   Ready    master   20h   v1.12.9
node2    Ready    &amp;lt;none&amp;gt;   16h   v1.12.9
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;kubeadm-join&#34;&gt;kubeadm join&lt;/h3&gt;
&lt;p&gt;1、初次加入报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node2 ~]#  kubeadm join 192.168.80.101:6443 --token rdif9c.h8084b6polru2bde --discovery-token-ca-cert-hash sha256:e64e4335f619b04dc17a004c626876451f96c80005aea0e05ed73269033bddbd
[preflight] running pre-flight checks
	[WARNING RequiredIPVSKernelModulesAvailable]: the IPVS proxier will not be used, because the following required kernel modules are not loaded: [ip_vs_sh ip_vs ip_vs_rr ip_vs_wrr] or no builtin kernel ipvs support: map[ip_vs:{} ip_vs_rr:{} ip_vs_wrr:{} ip_vs_sh:{} nf_conntrack_ipv4:{}]
you can solve this problem with following methods:
 1. Run &#39;modprobe -- &#39; to load missing kernel modules;
2. Provide the missing builtin kernel ipvs support

	[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.03.1-ce. Latest validated version: 18.06
	[WARNING Hostname]: hostname &amp;quot;node2&amp;quot; could not be reached
	[WARNING Hostname]: hostname &amp;quot;node2&amp;quot; lookup node2 on 192.168.80.2:53: no such host
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run &#39;systemctl enable kubelet.service&#39;
[preflight] Some fatal errors occurred:
	[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`

# 根据报错分别修改：
1，加载ipvs模块
2，enable kubelet服务
3，设置内核参数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、成功加入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node2 ~]#  kubeadm join 192.168.80.101:6443 --token rdif9c.h8084b6polru2bde --discovery-token-ca-cert-hash sha256:e64e4335f619b04dc17a004c626876451f96c80005aea0e05ed73269033bddbd
[preflight] running pre-flight checks
	[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.03.1-ce. Latest validated version: 18.06
	[WARNING Hostname]: hostname &amp;quot;node2&amp;quot; could not be reached
	[WARNING Hostname]: hostname &amp;quot;node2&amp;quot; lookup node2 on 192.168.80.2:53: no such host
[discovery] Trying to connect to API Server &amp;quot;192.168.80.101:6443&amp;quot;
[discovery] Created cluster-info discovery client, requesting info from &amp;quot;https://192.168.80.101:6443&amp;quot;
[discovery] Requesting info from &amp;quot;https://192.168.80.101:6443&amp;quot; again to validate TLS against the pinned public key
[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server &amp;quot;192.168.80.101:6443&amp;quot;
[discovery] Successfully established connection with API Server &amp;quot;192.168.80.101:6443&amp;quot;
[kubelet] Downloading configuration for the kubelet from the &amp;quot;kubelet-config-1.12&amp;quot; ConfigMap in the kube-system namespace
[kubelet] Writing kubelet configuration to file &amp;quot;/var/lib/kubelet/config.yaml&amp;quot;
[kubelet] Writing kubelet environment file with flags to file &amp;quot;/var/lib/kubelet/kubeadm-flags.env&amp;quot;
[preflight] Activating the kubelet service
[tlsbootstrap] Waiting for the kubelet to perform the TLS Bootstrap...
[patchnode] Uploading the CRI Socket information &amp;quot;/var/run/dockershim.sock&amp;quot; to the Node API object &amp;quot;node2&amp;quot; as an annotation

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run &#39;kubectl get nodes&#39; on the master to see this node join the cluster.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、最终集群节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl get nodes
NAME     STATUS   ROLES    AGE     VERSION
master   Ready    master   20h     v1.12.9
node1    Ready    &amp;lt;none&amp;gt;   3m46s   v1.12.9
node2    Ready    &amp;lt;none&amp;gt;   17h     v1.12.9
node3    Ready    &amp;lt;none&amp;gt;   3m39s   v1.12.9
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;部署kubectl&#34;&gt;部署kubectl&lt;/h3&gt;
&lt;p&gt;​	配置阿里云的kubernetes镜像仓库，安装对应版本的kubectl；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# cat /etc/yum.repos.d/k8s.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg

[root@client ~]# yum install -y kubectl-1.12.9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	配置kubectl的配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# scp /etc/kubernetes/admin.conf 192.168.80.102:/root/.kube/config
复制到单独的kubectl客户端；

[root@client ~]# kubectl get cs
NAME                 STATUS    MESSAGE              ERROR
controller-manager   Healthy   ok                   
scheduler            Healthy   ok                   
etcd-0               Healthy   {&amp;quot;health&amp;quot;: &amp;quot;true&amp;quot;}   
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;集群相关目录&#34;&gt;集群相关目录&lt;/h3&gt;
&lt;p&gt;1、主目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# ll /etc/kubernetes/
total 36
-rw------- 1 root root 5454 Nov 10 14:50 admin.conf
# kubectl需要，用户管理整个集群的kubectl客户端的配置文件，
-rw------- 1 root root 5490 Nov 10 14:50 controller-manager.conf
-rw------- 1 root root 5462 Nov 10 14:50 kubelet.conf
# kubelet controller-manager的配置文件
drwxr-xr-x 2 root root  113 Nov 10 14:50 manifests
drwxr-xr-x 3 root root 4096 Nov 10 14:50 pki
-rw------- 1 root root 5438 Nov 10 14:50 scheduler.conf
# scheduler配置文件
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、证书目录&lt;/p&gt;
&lt;p&gt;​	各组件基于https安全通信的一些列证书，私钥；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# ll /etc/kubernetes/pki/
total 56
-rw-r--r-- 1 root root 1216 Nov 10 14:50 apiserver.crt
-rw-r--r-- 1 root root 1090 Nov 10 14:50 apiserver-etcd-client.crt
-rw------- 1 root root 1679 Nov 10 14:50 apiserver-etcd-client.key
-rw------- 1 root root 1675 Nov 10 14:50 apiserver.key
-rw-r--r-- 1 root root 1099 Nov 10 14:50 apiserver-kubelet-client.crt
-rw------- 1 root root 1675 Nov 10 14:50 apiserver-kubelet-client.key
-rw-r--r-- 1 root root 1025 Nov 10 14:50 ca.crt
-rw------- 1 root root 1675 Nov 10 14:50 ca.key
drwxr-xr-x 2 root root  162 Nov 10 14:50 etcd
-rw-r--r-- 1 root root 1038 Nov 10 14:50 front-proxy-ca.crt
-rw------- 1 root root 1675 Nov 10 14:50 front-proxy-ca.key
-rw-r--r-- 1 root root 1058 Nov 10 14:50 front-proxy-client.crt
-rw------- 1 root root 1679 Nov 10 14:50 front-proxy-client.key
-rw------- 1 root root 1679 Nov 10 14:50 sa.key
-rw------- 1 root root  451 Nov 10 14:50 sa.pub

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、组件的静态pod运行定义文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# ll /etc/kubernetes/manifests/
total 16
-rw------- 1 root root 1933 Nov 10 14:50 etcd.yaml
-rw------- 1 root root 2674 Nov 10 14:50 kube-apiserver.yaml
-rw------- 1 root root 2547 Nov 10 14:50 kube-controller-manager.yaml
-rw------- 1 root root 1051 Nov 10 14:50 kube-scheduler.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;程序组成文件&#34;&gt;程序组成文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 
[root@master ~]# rpm -qa |grep kube
kubelet-1.12.9-0.x86_64
kubernetes-cni-0.7.5-0.x86_64
kubectl-1.12.9-0.x86_64
kubeadm-1.12.9-0.x86_64

#
[root@master ~]# rpm -ql kubelet
/etc/kubernetes/manifests
/etc/sysconfig/kubelet
/usr/bin/kubelet
/usr/lib/systemd/system/kubelet.service

[root@master ~]# rpm -ql kubeadm
/usr/bin/kubeadm
/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf

[root@master ~]# rpm -ql kubectl
/usr/bin/kubectl

[root@master ~]# rpm -ql kubernetes-cni
/opt/cni
/opt/cni/bin
/opt/cni/bin/bridge
/opt/cni/bin/dhcp
/opt/cni/bin/flannel
/opt/cni/bin/host-device
/opt/cni/bin/host-local
/opt/cni/bin/ipvlan
/opt/cni/bin/loopback
/opt/cni/bin/macvlan
/opt/cni/bin/portmap
/opt/cni/bin/ptp
/opt/cni/bin/sample
/opt/cni/bin/tuning
/opt/cni/bin/vlan
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;完成后验证&#34;&gt;完成后验证&lt;/h2&gt;
&lt;h3 id=&#34;查看集群信息&#34;&gt;查看集群信息&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl get cs
NAME                 STATUS    MESSAGE              ERROR
scheduler            Healthy   ok                   
controller-manager   Healthy   ok                   
etcd-0               Healthy   {&amp;quot;health&amp;quot;: &amp;quot;true&amp;quot;}   
[root@client ~]# kubectl get nodes
NAME     STATUS   ROLES    AGE     VERSION
master   Ready    master   20h     v1.12.9
node1    Ready    &amp;lt;none&amp;gt;   4m32s   v1.12.9
node2    Ready    &amp;lt;none&amp;gt;   17h     v1.12.9
node3    Ready    &amp;lt;none&amp;gt;   4m25s   v1.12.9
[root@client ~]# kubectl cluster-info
Kubernetes master is running at https://192.168.80.101:6443
KubeDNS is running at https://192.168.80.101:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.
[root@client ~]# kubectl version
Client Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;12&amp;quot;, GitVersion:&amp;quot;v1.12.9&amp;quot;, GitCommit:&amp;quot;e09f5c40b55c91f681a46ee17f9bc447eeacee57&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2019-05-27T16:08:57Z&amp;quot;, GoVersion:&amp;quot;go1.10.8&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;linux/amd64&amp;quot;}
Server Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;12&amp;quot;, GitVersion:&amp;quot;v1.12.9&amp;quot;, GitCommit:&amp;quot;e09f5c40b55c91f681a46ee17f9bc447eeacee57&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2019-05-27T15:58:45Z&amp;quot;, GoVersion:&amp;quot;go1.10.8&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;linux/amd64&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;移除node的方法&#34;&gt;移除node的方法&lt;/h3&gt;
&lt;p&gt;1、先排干节点，即将该节点上pod等资源迁移走或停止&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl get nodes
NAME     STATUS   ROLES    AGE     VERSION
master   Ready    master   20h     v1.12.9
node1    Ready    &amp;lt;none&amp;gt;   8m45s   v1.12.9
node2    Ready    &amp;lt;none&amp;gt;   17h     v1.12.9
node3    Ready    &amp;lt;none&amp;gt;   8m38s   v1.12.9
[root@client ~]# kubectl drain node3 --delete-local-data --force --ignore-daemonsets 
node/node3 cordoned
WARNING: Ignoring DaemonSet-managed pods: kube-flannel-ds-amd64-bww5t, kube-proxy-szcnx
[root@client ~]# kubectl get nodes
NAME     STATUS                     ROLES    AGE     VERSION
master   Ready                      master   20h     v1.12.9
node1    Ready                      &amp;lt;none&amp;gt;   9m22s   v1.12.9
node2    Ready                      &amp;lt;none&amp;gt;   17h     v1.12.9
node3    Ready,SchedulingDisabled   &amp;lt;none&amp;gt;   9m15s   v1.12.9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、删除node节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl delete node node3
node &amp;quot;node3&amp;quot; deleted
[root@client ~]# kubectl get nodes
NAME     STATUS   ROLES    AGE     VERSION
master   Ready    master   20h     v1.12.9
node1    Ready    &amp;lt;none&amp;gt;   9m33s   v1.12.9
node2    Ready    &amp;lt;none&amp;gt;   17h     v1.12.9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、reset节点，登陆到要删除的节点，用kubeadm命令reset节点即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node3 ~]# kubeadm reset
[reset] WARNING: changes made to this host by &#39;kubeadm init&#39; or &#39;kubeadm join&#39; will be reverted.
[reset] are you sure you want to proceed? [y/N]: y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、再次加入，再次在node节点上采用kubeadm join即可&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/kubeadm/" term="kubeadm" label="kubeadm" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之helm包管理器</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bhelm%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bhelm%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</id>
            <updated>2020-12-01T15:35:03&#43;08:00</updated>
            <published>2020-11-11T14:36:02&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之helm包管理器</summary>
            
                <content type="html">&lt;h1 id=&#34;helm简介&#34;&gt;helm简介&lt;/h1&gt;
&lt;p&gt;​	k8s之上所有应用pod的运行，都需要靠编写yaml清单实现，（只一个应用pod，通常需要的就有deploment、service、configmap、serviceaccount、role、rolebinding等）而对于大规模实践场景，应用的配置、分发、版本控制、升级、回滚，如果只是手动写yaml文件，必然很繁琐，且容易出错；&lt;/p&gt;
&lt;p&gt;​	helm的出现，可以简化这些清单文件的管理难度，类比linux的yum包管理器&lt;/p&gt;
&lt;h2 id=&#34;helm术语&#34;&gt;helm术语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;charts，一个helm程序包，包含了k8s应用所需镜像、依赖、资源定义yaml文件等&lt;/li&gt;
&lt;li&gt;repository，存储charts的仓库，类比yum仓库，存储rpm包的&lt;/li&gt;
&lt;li&gt;config，charts实例为release时，需要的配置信息&lt;/li&gt;
&lt;li&gt;release，charts运行为实例后就是release，chart类比某文件路径下的程序文件，release类比其运行起来时的进程；（charts可用不同的config实例化多次，类比linux上程序文件，传不同的启动参数，启动多个进程）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;helm架构&#34;&gt;helm架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;helm客户端：
&lt;ul&gt;
&lt;li&gt;本地charts开发&lt;/li&gt;
&lt;li&gt;管理charts仓库&lt;/li&gt;
&lt;li&gt;和tiller服务端交互，发送charts，并运行为实例即release，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tiller服务端：
&lt;ul&gt;
&lt;li&gt;接收helm客户端请求，&lt;/li&gt;
&lt;li&gt;将charts和其配置提交给k8s，运行为实例即release&lt;/li&gt;
&lt;li&gt;升级、卸载charts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;charts仓库：
&lt;ul&gt;
&lt;li&gt;存储charts，利于分发，复用，版本管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201130182229949.png&#34; alt=&#34;image-20201130182229949&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;helm-client&#34;&gt;helm client&lt;/h2&gt;
&lt;p&gt;​	此处采用，安装预编译二进制方式安装，将二进制程序文件，放到PATH路径下即可，（安装helm的主机，必须具有能连接集群的kubectl，因为helm依赖kubectl和集群通信）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# tar -xf helm-v2.9.1-linux-amd64.tar.gz 

[root@client ~]# cd linux-amd64/
[root@client linux-amd64]# ll
total 29348
-rwxr-xr-x 1 root root 30033696 May 15  2018 helm
-rw-r--r-- 1 root root    11373 May 15  2018 LICENSE
-rw-r--r-- 1 root root     3310 May 15  2018 README.md
[root@client linux-amd64]# file helm 
helm: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped
[root@client linux-amd64]# mv helm /usr/local/bin/
[root@client linux-amd64]# helm --help
The Kubernetes package manager

To begin working with Helm, run the &#39;helm init&#39; command:

	$ helm init

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装tiller-server&#34;&gt;安装tiller server&lt;/h2&gt;
&lt;p&gt;1、先给tiller定义sa，以及其clusterrolebinding，将其绑定到cluster-admin角色，在tiller和api-server交互时，使得其具有最高管理员权限；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client helm]# cat tiller.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceAccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tiller&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tiller&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster-admin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceAccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tiller&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、helm init初始化，会自动将tiller运行为k8s之上的pod，拉取镜像为helm同版本的tiller，拉取地址为gcr.io/kubernetes-helm，需要科学的上一下网；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# !804
helm init --service-account tiller
$HELM_HOME has been configured at /root/.helm.

Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.

Please note: by default, Tiller is deployed with an insecure &#39;allow unauthenticated users&#39; policy.
For more information on securing your installation see: https://docs.helm.sh/using_helm/#securing-your-helm-installation
Happy Helming!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、tiller的pod一直启动失败；&lt;/p&gt;
&lt;h2 id=&#34;helm使用&#34;&gt;helm使用&lt;/h2&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h1 id=&#34;helm-charts&#34;&gt;helm charts&lt;/h1&gt;
&lt;p&gt;​	charts就是描述一组k8s对象定义的文件的集合；并遵从一定的目录结构，顶层目录即为charts名，可打包为归档文件；&lt;/p&gt;
&lt;h2 id=&#34;charts的文件组织结构&#34;&gt;charts的文件组织结构&lt;/h2&gt;
&lt;p&gt;​	以一个Jenkins的chart为例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client jenkins]# ll -rt
total 0
-rw-r--r-- 1 root root  0 Dec  1 09:51 Chart.yaml
# 当前charts的描述信息

-rw-r--r-- 1 root root  0 Dec  1 09:52 LICESENSE
# 许可证信息，文本文件

-rw-r--r-- 1 root root  0 Dec  1 09:52 README.md
# readme文件，可选


-rw-r--r-- 1 root root  0 Dec  1 09:52 requirements.yaml
# 当前charts的依赖关系描述文件，可选


-rw-r--r-- 1 root root  0 Dec  1 09:52 values.yaml
# 当前charts的配置信息的默认值

drwxr-xr-x 2 root root  6 Dec  1 09:52 charts
# 存放当前chart依赖到的所有chart文件


drwxr-xr-x 2 root root 23 Dec  1 09:52 
templates
# 存放单曲charts用到的模版文件

-rw-r--r-- 1 root root 0 Dec  1 09:52 templates/NOTES.txt
# templates的使用注解
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;chartyaml文件组织结构&#34;&gt;chart.yaml文件组织结构&lt;/h2&gt;
&lt;h2 id=&#34;charts中的依赖关系&#34;&gt;charts中的依赖关系&lt;/h2&gt;
&lt;h2 id=&#34;模版和值&#34;&gt;模版和值&lt;/h2&gt;
&lt;h2 id=&#34;自定义charts&#34;&gt;自定义charts&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/helm/" term="helm" label="helm" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/" term="未完成" label="未完成" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之资源指标与hpa控制器</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8B%E8%B5%84%E6%BA%90%E6%8C%87%E6%A0%87%E4%B8%8Ehpa%E6%8E%A7%E5%88%B6%E5%99%A8/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8B%E8%B5%84%E6%BA%90%E6%8C%87%E6%A0%87%E4%B8%8Ehpa%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
            <updated>2020-12-01T15:36:27&#43;08:00</updated>
            <published>2020-11-11T14:35:52&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之资源指标与hpa控制器</summary>
            
                <content type="html">&lt;h1 id=&#34;资源监控与资源指标&#34;&gt;资源监控与资源指标&lt;/h1&gt;
&lt;h2 id=&#34;资源监控与heapster&#34;&gt;资源监控与heapster&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;k8s集群监控三大方面：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k8s集群本身的监控：
&lt;ul&gt;
&lt;li&gt;包括，cpu、内存、存储、网络、节点规模、节点健康状态等监控&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k8s之上容器的监控
&lt;ul&gt;
&lt;li&gt;包括，容器的cpu、内存使用率，有无异常，副本数等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容器中业务应用监控
&lt;ul&gt;
&lt;li&gt;包括，业务并发数、连接数、数据库中表数据规模等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;监控系统的一般构成&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各节点的采集器，一般是agent程序，采集当前节点各项指标数据&lt;/li&gt;
&lt;li&gt;中心的收集器，收集个节点上agent收集的指标数据，并汇总，（并转化为提供给客户端的api服务）&lt;/li&gt;
&lt;li&gt;存储端，数据存储系统，一般是时序型数据库，对收集的数据做持久化存储，（且方便做历史数据的分析）&lt;/li&gt;
&lt;li&gt;展示端，一个webUI，对数据做数据可视化展示，图表形式更直观&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;原有k8s中的监控架构&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采集器：cadvisor、kubelet内置了cadvisor程序，负责收集各个节点上的指标数据，只能收集cpu、内存等最基本的指标数据&lt;/li&gt;
&lt;li&gt;收集器：heapster、收集各个节点的cadvisor采集到的数据&lt;/li&gt;
&lt;li&gt;存储：infuxdb，时序型存储数据库&lt;/li&gt;
&lt;li&gt;展示：grafana：webUI框架，做图形化展示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;资源指标api的使用方，即其客户端&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl top等命令：借助资源指标服务提供的api查询集群的资源使用率，类似linux的top&lt;/li&gt;
&lt;li&gt;hpa控制器：水平-pod-自动扩缩容控制器：通过资源指标服务提供的api监控某pod的副本数和负载情况，监控到负载高时，自动通过replicas增加副本&lt;/li&gt;
&lt;li&gt;schduler调度器：选择节点调度时需要参考资源指标服务收集来的指标数据&lt;/li&gt;
&lt;li&gt;dashboard展示部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;heapster简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	heapster为收集各节点指标数据的聚合器，并将数据转换为api对外提供服务，如kubectl top等客户端；可以结合influxdb做存储、grafana做展示；&lt;/p&gt;
&lt;h2 id=&#34;新一代k8s监控架构&#34;&gt;新一代k8s监控架构&lt;/h2&gt;
&lt;p&gt;​	heapster的耦合度较高，不方便扩展，且只支持cpu指标，因此heapster逐渐被metric-server替代，heapster-》metric-server；&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;k8s将指标数据分为了2部分：且只定义了其api规范，并未具体实现，从而可以在保持api不变的情况下，可切换其底层实现，从而降低了耦合度，提高了灵活度；其具体实现由用户采用的组件而定，&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心资源指标api：【resource metrics server】
&lt;ul&gt;
&lt;li&gt;定义的是核心的基础资源监控，如cpu、内存、网络等&lt;/li&gt;
&lt;li&gt;常用实现为：matric-server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义指标api：【custom metrics server】
&lt;ul&gt;
&lt;li&gt;为用户自定义的监控指标，可以是业务的、可以是集群本身的、pod的&lt;/li&gt;
&lt;li&gt;常用实现为：prometheues，不同的监控指标由节点上不同的exporter采集，再由promethus-server收集并存储到数据库中，借助grafana展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2种指标api架构图示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;metrics-server
&lt;ul&gt;
&lt;li&gt;节点上的cadvisor收集各项基础指标数据&lt;/li&gt;
&lt;li&gt;由metrics-server收集汇总各节点的指标数据
&lt;ul&gt;
&lt;li&gt;存储到存储系统&lt;/li&gt;
&lt;li&gt;借助UI展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过kube-aggregator聚合到api-server，统一对外提供服务&lt;/li&gt;
&lt;li&gt;客户端hpaV2第二版，kubectl top或scheduler通过api-server访问其服务&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;prometheus
&lt;ul&gt;
&lt;li&gt;prometheus各种exporter部署在节点上，收集不同的指标数据；&lt;/li&gt;
&lt;li&gt;promethues-adapter汇总收集各个节点采集到的数据；
&lt;ul&gt;
&lt;li&gt;存储到存储系统&lt;/li&gt;
&lt;li&gt;借助UI展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过kube-aggregator聚合到api-server，统一对外提供服务&lt;/li&gt;
&lt;li&gt;客户端hpaV2第二版，或scheduler通过api-server访问其服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201130105206952.png&#34; alt=&#34;image-20201130105206952&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;资源指标及其应用&#34;&gt;资源指标及其应用&lt;/h1&gt;
&lt;h2 id=&#34;部署metrics-server&#34;&gt;部署metrics-server&lt;/h2&gt;
&lt;p&gt;​	metrics-server为heapster的替代品和升级版，运行模式为k8s之上的pod，从各节点的kubelet上的cadvisor收集数据，并存于内存中，没有外部存储时，客户端访问只能访问一段时间的数据，重启后数据丢失；&lt;/p&gt;
&lt;p&gt;​	采用清单创建时，会创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pod的sa身份&lt;/li&gt;
&lt;li&gt;clusterrole和对应的rolebinding，授予pod相应的权限&lt;/li&gt;
&lt;li&gt;service暴露服务&lt;/li&gt;
&lt;li&gt;deployment控制pod&lt;/li&gt;
&lt;li&gt;apiService对象，将metrics-server通过kube-aggerator注册到api-server之上；&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@client metrics-server]# kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.4.1/components.yaml
serviceaccount/metrics-server created
clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
clusterrole.rbac.authorization.k8s.io/system:metrics-server created
rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created
service/metrics-server created
deployment.apps/metrics-server created
apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;问题？容器创建失败&lt;/p&gt;
&lt;h2 id=&#34;kubectl-top&#34;&gt;kubectl top&lt;/h2&gt;
&lt;p&gt;kubectl top在部署好metrics-server后，可以查看node和pod的资源使用率&lt;/p&gt;
&lt;h1 id=&#34;自定义指标与prometheus&#34;&gt;自定义指标与prometheus&lt;/h1&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;prometheus概述&#34;&gt;prometheus概述&lt;/h2&gt;
&lt;p&gt;​	prometheus是一个开源的服务监控系统、加、时序数据库TSDB，prometheus提供了通用的数据模型、便捷的数据采集、存储、和查询接口，核心组件：prometheus server定期从静态配置的监控目标targets，或基于服务发现发现的目标，主动拉取数据，&lt;/p&gt;
&lt;p&gt;​	拉取数据超过内存缓存区时，会持久化到存储数据库上；&lt;/p&gt;
&lt;h3 id=&#34;prometheus自定义指标实现&#34;&gt;prometheus自定义指标实现&lt;/h3&gt;
&lt;p&gt;​	自定义指标的采集实现，依赖节点上各种采集程序，就prometheus来说，是依赖节点上各类的exporter实现，流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;节点的各类exporter采集数据；&lt;/li&gt;
&lt;li&gt;prometheus通过“拉”的方式从节点收集数据；
&lt;ol&gt;
&lt;li&gt;并提供了promQL接口，给客户端工具如grafana、命令行、promeWebUI使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;k8s-prometheus-adapter适配器将收集的数据，（转为k8s定义的：自定义指标api的标准形式）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201130154137834.png&#34; alt=&#34;image-20201130154137834&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;prometheus组件架构&#34;&gt;prometheus组件架构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;各类exporter：
&lt;ul&gt;
&lt;li&gt;节点上的exporter负责采集数据，然后由prometheus server拉取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;prometheus server：
&lt;ul&gt;
&lt;li&gt;主动拉取节点上采集到的数据&lt;/li&gt;
&lt;li&gt;收集汇集、解析&lt;/li&gt;
&lt;li&gt;数据存储到TSDB中&lt;/li&gt;
&lt;li&gt;对外提供http server&lt;/li&gt;
&lt;li&gt;对外提供PromQL接口：供客户端使用&lt;/li&gt;
&lt;li&gt;对外，对接altermanager告警系统，通过多种媒介报警&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务发现
&lt;ul&gt;
&lt;li&gt;prometheus可以通过静态配置、&lt;/li&gt;
&lt;li&gt;或kube-apiserver动态发现机制，实现要监控对象的动态发现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pushgateway
&lt;ul&gt;
&lt;li&gt;节点想推送数据时，可以先推送到pushgateway暂存，然后由prometheus server拉取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201130154008304.png&#34; alt=&#34;image-20201130154008304&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;prometheus可采集数据源&#34;&gt;prometheus可采集数据源&lt;/h3&gt;
&lt;p&gt;​	prometheus可以采集的数据来源有如下几种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201130154035998.png&#34; alt=&#34;image-20201130154035998&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;prometheus可监控对象：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node_exporter，收集节点的cpu、内存、负载等信息&lt;/li&gt;
&lt;li&gt;kubelet(cadvisor)，收集容器基础指标，如cpu、内存使用率等&lt;/li&gt;
&lt;li&gt;api server，收集api server性能数据，&lt;/li&gt;
&lt;li&gt;etcd，etcd集群数据&lt;/li&gt;
&lt;li&gt;kube-state-metrics：k8s本身指标数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;k8s可通过api server动态发现，新调度的pod，并纳入监控，但pod需要有以下注解信息，才允许prometheus监控&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prometheus.io/scrape
prometheus.io/path
prometheus.io/port
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;部署prometheus监控&#34;&gt;部署prometheus监控&lt;/h2&gt;
&lt;p&gt;​	部署prometheus包含4个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prometheus server：拉取各个数据源采集到的数据并存储，对外提供promQL查询接口&lt;/li&gt;
&lt;li&gt;kube-state-metrics：通过api-server收集k8s集群整体信息，并转为指标数据&lt;/li&gt;
&lt;li&gt;alter-manager：定义告警规则，推送告警信息&lt;/li&gt;
&lt;li&gt;node_exporter以及其他类型的exporter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自定义适配器k8s-prometheus-adapter&#34;&gt;自定义适配器k8s-prometheus-adapter&lt;/h2&gt;
&lt;p&gt;​	prometheus server收集到的所有数据，并不适用于k8s定义的custom metrics api标准，需要借助k8s-prometheus-adapter做一层转换；转为custom metrics api格式，并聚合到api-server之上；&lt;/p&gt;
&lt;h1 id=&#34;自动扩缩容之hpa&#34;&gt;自动扩缩容之hpa&lt;/h1&gt;
&lt;p&gt;​	k8s提供了四种常用的自动扩缩容组件，分别针对不对的对象：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hpa：水平pod自动扩缩容，通过pod的负载状态，动态调整pod副本数
&lt;ul&gt;
&lt;li&gt;hpav1，只能通过cpu指标，判断是否扩缩容&lt;/li&gt;
&lt;li&gt;hpav2，可以通过cpu等核心资源指标、以及自定义资源指标，判断是否扩缩容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vpa：垂直pod资源扩缩容，扩缩容pod的资源分配量&lt;/li&gt;
&lt;li&gt;ca：cluster autoscaler，通过集群整体负载状态，调整节点的数据，（通常是云环境，依赖云厂商）&lt;/li&gt;
&lt;li&gt;ar：addons resizer，通过检测集群的规模，动态调整附件pod的数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hpa概述&#34;&gt;HPA概述&lt;/h2&gt;
&lt;p&gt;​	hpa全称：horizontal pod autoscaler水平pod自动扩缩容控制器&lt;/p&gt;
&lt;h2 id=&#34;hpav1版本&#34;&gt;HPAv1版本&lt;/h2&gt;
&lt;h2 id=&#34;hpav2版本&#34;&gt;HPAv2版本&lt;/h2&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/%E8%B5%84%E6%BA%90%E6%8C%87%E6%A0%87%E5%92%8Chpa%E6%8E%A7%E5%88%B6%E5%99%A8/" term="资源指标和hpa控制器" label="资源指标和hpa控制器" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/" term="未完成" label="未完成" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之系统扩展</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8B%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8B%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%B1%95/</id>
            <updated>2021-03-08T19:04:27&#43;08:00</updated>
            <published>2020-11-11T14:35:39&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之系统扩展</summary>
            
                <content type="html">&lt;h1 id=&#34;crd自定义资源类型&#34;&gt;CRD自定义资源类型&lt;/h1&gt;
&lt;p&gt;​	k8s系统的扩展，指定是：扩展api-server所识别支持的资源类型、集群单点扩展为高可用、&lt;/p&gt;
&lt;p&gt;​	扩展的资源类型，应兼容k8s基础特性：如kubectl管理、watch机制、etcd存储、通过认证、授权、准入控制等流程；rbac授权，等；&lt;/p&gt;
&lt;p&gt;​	扩展k8s支持的资源类型有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用k8s给定标准k8s对象crd，按照其格式定义自己的自定义资源类型，（限制较大）&lt;/li&gt;
&lt;li&gt;开发自定义api-server，其支持新的资源类型，然后借助聚合器，聚合到k8s的api-server&lt;/li&gt;
&lt;li&gt;定义扩展k8s源码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建crd对象&#34;&gt;创建crd对象&lt;/h2&gt;
&lt;p&gt;​	crd本身就会k8s标准的资源对象；&lt;/p&gt;
&lt;p&gt;自定义资源类型：&lt;/p&gt;
&lt;p&gt;​	用crd定义了一个扩展k8s资源类型为users，其中plural+spec.group两个字段合起来要等于metadata.name，定义的资源为名称空间级别，url路径为/apis/user.auth.ilinux.io/v1beta1/namespace/NS-NAME/user/具体的对象名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# cat crd-users.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiextensions.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CustomResourceDefinition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user.auth.ilinux.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auth.ilinux.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plural&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;singular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;shortNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Namespaced&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# vim crd-users.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# kubectl apply -f crd-users.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;customresourcedefinition.apiextensions.k8s.io/user.auth.ilinux.io created&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建自定义类型的对象：其中spec字段，可随意指定，但要符合yaml语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client crd]# cat user-obj1.yaml 
apiVersion: auth.ilinux.io/v1beta1
kind: User
metadata:
 name: user-obj1
spec:
 userID: 1
 email: shuai@gmail.com
 groups:
 - admin
 - superusers
 gender: male
----

[root@client crd]# kubectl apply -f user-obj1.yaml 
user.auth.ilinux.io/user-obj1 created
[root@client crd]# kubectl get crd
NAME                  CREATED AT
user.auth.ilinux.io   2020-11-29T02:54:03Z
[root@client crd]# kubectl get user.auth.ilinux.io
NAME        AGE
user-obj1   26s
[root@client crd]# kubectl get user.auth.ilinux.io user-obj1 -o yaml
apiVersion: auth.ilinux.io/v1beta1
kind: User
metadata:
  annotations:
    kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;限制自定义资源格式&#34;&gt;限制自定义资源格式&lt;/h2&gt;
&lt;p&gt;​	定义crd新的资源类似时，在spec.validation中，可以定义自定义的资源类型，&lt;strong&gt;有哪些字段、每个字段的数据格式、数据取值范围、必填字段等信息，如下&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# cat crd-users.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiextensions.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CustomResourceDefinition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user.auth.ilinux.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auth.ilinux.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plural&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;singular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;shortNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Namespaced&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;validation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;openAPIV3Schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;userID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;integer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;minimum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maximum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;userID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;groups&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# kubectl apply -f crd-users.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;customresourcedefinition.apiextensions.k8s.io/user.auth.ilinux.io configured&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 修改crd的实例对象后，其userid改为101，再次创建就验证失败，因为其取值范围最大101&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# vim user-obj1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# vim user-obj1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client crd]# kubectl apply -f user-obj1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;The User &amp;#34;user-obj1&amp;#34; is invalid: []: Invalid value: map[string]interface {}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec.userID in body should be less than or equal to 100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此外：可以通过spec.additionalPrinterColumns字段，定义kubectl get 对象名时，打印哪些字段&lt;/p&gt;
&lt;h2 id=&#34;子资源&#34;&gt;子资源&lt;/h2&gt;
&lt;p&gt;​	刚定义的crd新资源类型，默认是没有status字段，因为也没有相应的控制器，自然不会去获取它的status和spec，通过不断的和解循环，使两者保持一致，&lt;/p&gt;
&lt;p&gt;​	但可以通过subresources字段，定义staus字段，然后describe新资源类型的对象就可以看到status资源，只是是“假的”status信息，因为它没有控制器去获取它并和spec进行不断的和解循环，若定义了相应控制器情况下，也可以搭配scale实现资源扩缩容的效果；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client crd]# kubectl explain crd.spec.subresources
KIND:     CustomResourceDefinition
VERSION:  apiextensions.k8s.io/v1beta1

RESOURCE: subresources &amp;lt;Object&amp;gt;

DESCRIPTION:
     Subresources describes the subresources for CustomResources

     CustomResourceSubresources defines the status and scale subresources for
     CustomResources.

FIELDS:
   scale	&amp;lt;Object&amp;gt;
     Scale denotes the scale subresource for CustomResources

   status	&amp;lt;&amp;gt;
     Status denotes the status subresource for CustomResources

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;资源类别使用&#34;&gt;资源类别使用&lt;/h2&gt;
&lt;p&gt;​	资源类型都有分类分组，如pod，service，在kubectl get时可以利用分类名获取当前类下所有对象，而all包含了所有分类，&lt;/p&gt;
&lt;p&gt;​	如下，定义crd时，将其归为了all分类，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiextensions.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CustomResourceDefinition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user.auth.ilinux.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auth.ilinux.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plural&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;singular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;shortNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;categories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subresources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	get 查看all分类时就能看到其对应的实例对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client crd]# kubectl get all
NAME             READY   STATUS      RESTARTS   AGE
pod/limit-pod1   0/1     Completed   0          4d1h

NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    &amp;lt;none&amp;gt;        443/TCP   4d1h

NAME                            AGE
user.auth.ilinux.io/user-obj1   1h
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;自定义api-server&#34;&gt;自定义api-server&lt;/h1&gt;
&lt;p&gt;​	自行编写api-server也可以实现k8s资源类型的扩展，但一般编写的自定义api-server要通过原生kube-apiserver中的kube-aggregator聚合到主api-server，由其统一对外提供服务；&lt;/p&gt;
&lt;h2 id=&#34;apiservice&#34;&gt;apiService&lt;/h2&gt;
&lt;p&gt;​	自定义api-server扩展k8s资源类型的实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编写自定义的api-servre代码，并以pod方式运行在k8s集群上&lt;/li&gt;
&lt;li&gt;为其pod创建service对象&lt;/li&gt;
&lt;li&gt;定义个apiService对象，引用上步的service对象，kube-aggregator借助该apiService对象完全自定义api-server的聚合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;apiService就是帮助把自定义的api-server聚合到aggregator之上的一种资源对象；&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;k8s集群高可用&#34;&gt;k8s集群高可用&lt;/h1&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201129173256849.png&#34; alt=&#34;image-20201129173256849&#34;&gt;&lt;/p&gt;
&lt;p&gt;k8s集群(控制端)各组件高可用结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kube-apiserver为无状态组件：可同时运行多个，分担客户端的请求&lt;/li&gt;
&lt;li&gt;kube-controller-manager&lt;/li&gt;
&lt;li&gt;kube-schduler，调度器和控制器组件，为避免多个组件做的决策冲突，因此运行多个副本，但只有一个为活动态，其余备用&lt;/li&gt;
&lt;li&gt;etcd集群，整个集群的数据、状态所在地，可以同时运行奇数个节点做高可用，依赖其raft算法实现，（一般3、5、7个节点）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;k8s部署模式&#34;&gt;k8s部署模式&lt;/h1&gt;
&lt;h2 id=&#34;k8s集群及周边组件&#34;&gt;k8s集群及周边组件&lt;/h2&gt;
&lt;p&gt;​	k8s作为容器应用编排系统，基本完成了容器应用的编排各个方面，但若投入生产中使用，还需周边一系列配套的组件和基础架构，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;底层平台：数据中心物理机、虚拟机、公有云、私有云；&lt;/li&gt;
&lt;li&gt;网络和存储
&lt;ol&gt;
&lt;li&gt;依赖sdn-软件定义网络，的组件实现k8s集群的网络实现&lt;/li&gt;
&lt;li&gt;依赖sds-软件定义存储，的组件，如ceph、glusterfs集群为k8s集群提供持久、高可用存储&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;然后是k8s自身
&lt;ol&gt;
&lt;li&gt;控制平面组件&lt;/li&gt;
&lt;li&gt;其上容器化应用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;外部负载均衡器
&lt;ol&gt;
&lt;li&gt;控制端高可用的apiserver组件需要通过负载均衡器接入管理员客户端&lt;/li&gt;
&lt;li&gt;容器化应用提供的服务，暴露到集群外部时，如loadbalancer型service需要负载均衡器接入&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;日志和监控
&lt;ol&gt;
&lt;li&gt;elk日志收集、处理系统&lt;/li&gt;
&lt;li&gt;prometheus、grafana等监控系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;配置管理
&lt;ol&gt;
&lt;li&gt;puppet&lt;/li&gt;
&lt;li&gt;ansible&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;镜像仓库
&lt;ol&gt;
&lt;li&gt;habor&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;it资产管理
&lt;ol&gt;
&lt;li&gt;cmdb等系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CI/CD系统
&lt;ol&gt;
&lt;li&gt;gitlab&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;snarqube等，做流水线式应用编码、构建、测试、上线、失败回滚等一系列流程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201129173826753.png&#34; alt=&#34;image-20201129173826753&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;k8s常用部署模式&#34;&gt;k8s常用部署模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;完全由管理员手动一步步部署k8s集群，以及其周边组件；&lt;/li&gt;
&lt;li&gt;借助部署工具部署k8s集群，如kubeadm简化k8s的部署，以及其他周边组件；&lt;/li&gt;
&lt;li&gt;直接使用云服务商的k8s集群服务、以及其周边服务；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;容器与devops&#34;&gt;容器与devops&lt;/h1&gt;
&lt;p&gt;​	容器自包含依赖的特性消除了开发、测试、生产各种环境的差异，使得开发、测试、运维专注于自己的部分，且极大提高了运维效率，降低了复杂性；&lt;/p&gt;
&lt;p&gt;​	开发人员在k8s和容器化应用的工作流：【编码、构建镜像、提交清单给k8s】&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;**编码：**开发编写应用代码，推送到git仓库，经由ci工具链测试，然后释出；&lt;/li&gt;
&lt;li&gt;**构建镜像：**开发编写dockerfile，推送到git仓库，基于基础镜像、释出应用包构建docker镜像，推送到docker仓库；&lt;/li&gt;
&lt;li&gt;**提交清单：**开发编写k8s清单-yaml文件，或helm charts，由kube applier等客户端应用提交到k8s集群运行；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;运维只需维护k8s集群，以及周边组件集群如监控、存储即可；各司其职！（不止应用程序、很多周边组件，也可以托管于k8s之上）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201129180509406.png&#34; alt=&#34;image-20201129180509406&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201129180409269.png&#34; alt=&#34;image-20201129180409269&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B%E6%89%A9%E5%B1%95/" term="k8s资源类型扩展" label="k8s资源类型扩展" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之pod资源调度</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bpod%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bpod%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/</id>
            <updated>2020-12-01T15:35:14&#43;08:00</updated>
            <published>2020-11-11T14:35:07&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之pod资源调度</summary>
            
                <content type="html">&lt;h1 id=&#34;调度器概述&#34;&gt;调度器概述&lt;/h1&gt;
&lt;p&gt;​	调度器kube-scheduler负责将pod调度到合适的节点上，然后由该节点上的kubelet运行该pod，&lt;/p&gt;
&lt;p&gt;​	调度器有多种，k8s内置的默认的调度器，也是最常用的，叫default-scheduler，&lt;/p&gt;
&lt;p&gt;​	默认调度器的调度步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预选：从所有节点中，过滤掉不符合pod定义要求的节点，如pod需要ssd类型磁盘的节点&lt;/li&gt;
&lt;li&gt;排序：过滤后的节点，按照优先级排序&lt;/li&gt;
&lt;li&gt;选中：排序后，选中优先级最高的，若多个最高优先级，则随机选一个&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;预选策略&#34;&gt;预选策略&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/scheduling/policies/#predicates&#34;&gt;https://kubernetes.io/docs/reference/scheduling/policies/#predicates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	预选即根据pod定义的需求，先过滤掉一批不符合要求的节点，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点的剩余资源不满足pod要求&lt;/li&gt;
&lt;li&gt;pod要求的hostport，某些节点已经被占用&lt;/li&gt;
&lt;li&gt;节点的标签不满足pod要求&lt;/li&gt;
&lt;li&gt;节点有pod不能容忍的污点&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优选函数&#34;&gt;优选函数&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/scheduling/policies/#priorities&#34;&gt;https://kubernetes.io/docs/reference/scheduling/policies/#priorities&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	根据一系列优选函数，考虑其各个因子的权重得出&lt;/p&gt;
&lt;h1 id=&#34;节点亲和调度&#34;&gt;节点亲和调度&lt;/h1&gt;
&lt;p&gt;​	节点亲和调度是指利用pod的节点特性选择器和节点的既定标签将节点调度到特定特征节点上的机制；&lt;/p&gt;
&lt;p&gt;​	亲和度有软硬之分：即硬亲和为找不到需要的节点pod就一直处于pending状态，软亲和为尽量找到特征节点，如果找不到也会可以正常调度，找个其他节点；&lt;/p&gt;
&lt;h2 id=&#34;节点硬亲和性&#34;&gt;节点硬亲和性&lt;/h2&gt;
&lt;p&gt;​	nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution定义节点的硬亲和性，&lt;/p&gt;
&lt;p&gt;1、语法：在亲和性定义字段，有节点亲和、pod间亲和、pod间反亲和三个子字段；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl explain pods.spec.affinity
KIND:     Pod
VERSION:  v1

RESOURCE: affinity &amp;lt;Object&amp;gt;

DESCRIPTION:
     If specified, the pod&#39;s scheduling constraints

     Affinity is a group of affinity scheduling rules.

FIELDS:
   nodeAffinity	&amp;lt;Object&amp;gt;
     Describes node affinity scheduling rules for the pod.

   podAffinity	&amp;lt;Object&amp;gt;
     Describes pod affinity scheduling rules (e.g. co-locate this pod in the
     same node, zone, etc. as some other pod(s)).

   podAntiAffinity	&amp;lt;Object&amp;gt;
     Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod
     in the same node, zone, etc. as some other pod(s)).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、示例：&lt;/p&gt;
&lt;p&gt;​	通过匹配表达式匹配了zone在foo或bar里且带有ssd磁盘的节点，若集群没有该节点，则调度失败；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVerion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;require-nodeAffinity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;affinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nodeAffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredDuringSchuedulingIgnoredDuringExecution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nodeSelectorTerms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: zone, operator: In, values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: ssd, operator: Exists, values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;节点软亲和性&#34;&gt;节点软亲和性&lt;/h2&gt;
&lt;p&gt;​	nodeAffinity.perferredDuringSchedulingIgnoredDuringExecution定义节点的硬亲和性，&lt;/p&gt;
&lt;p&gt;1、语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl explain pods.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution
KIND:     Pod
VERSION:  v1

FIELDS:
   preference	&amp;lt;Object&amp;gt; -required-
     A node selector term, associated with the corresponding weight.

   weight	&amp;lt;integer&amp;gt; -required-
     Weight associated with matching the corresponding nodeSelectorTerm, in the
     range 1-100.

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、示例：&lt;/p&gt;
&lt;p&gt;​	子字段，preference定义匹配节点的表达式，weight定义该表达式的权重，如下示例中，若pod定义副本够大的情况下，假设集群中存在，1-同时有ssd和zone是foo的节点、2-只是zone在foo的节点，3-只有ssd的三类节点，那么调度pod数量比例应该是9:6:3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVerion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;require-nodeAffinity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;affinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nodeAffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preferredDuringSchedulingIgnoredDuringExecution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: zone,operator:In,values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;perference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: ssd,operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Exists,values:[]}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;pod间亲和调度&#34;&gt;pod间亲和调度&lt;/h1&gt;
&lt;p&gt;​	出于网络通信高效的需要：有时需要相关pod被调度到相近的位置，此时需要pod间亲和调度；&lt;/p&gt;
&lt;p&gt;​	出于安全或异地多活高可用的需要：有时需要相同pod的副本调度到不同的机架、机房、地区等，此时需要pod间反亲和调度；&lt;/p&gt;
&lt;p&gt;​	pod间亲和调度也有“软”和“硬”之分；&lt;/p&gt;
&lt;h2 id=&#34;何为pod的位置&#34;&gt;何为pod的位置&lt;/h2&gt;
&lt;p&gt;​	pod间亲和或反亲和就是考虑pod之间处于远或近，或相同节点位置，pod的位置就是节点，节点的位置可以靠节点的标签指定，节点的位置：（同位置可能是同节点、同机架、同机房，靠topoloyKey 字段定义）可能是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同节点&lt;/li&gt;
&lt;li&gt;不同节点
&lt;ul&gt;
&lt;li&gt;不同机架&lt;/li&gt;
&lt;li&gt;不同机房&lt;/li&gt;
&lt;li&gt;不同地区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod间硬亲和&#34;&gt;pod间硬亲和&lt;/h2&gt;
&lt;p&gt;1、先定义一个“基准”pod，默认调度器正常调度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl run tomcat -l app=tomcat --image tomcat:alpine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、定义第一个pod，依赖基准pod的位置，调度到和其相同的节点&lt;/p&gt;
&lt;p&gt;​	由于亲和性，第二个pod应该必须调度到和tomcat节点一样的“位置”，而这个位置的标准是同一个节点，由toppologyKey定义，其值kubernetes.io/hostname是k8s内建的节点标签，&lt;/p&gt;
&lt;p&gt;​	也可以定义自己的代表位置的“位置标签”，如rack机架、zone可用区等；查找时，只要节点带有相同的rack标签或zone标签，就视为同一个位置，可调度；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;affinity-tomcat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;affinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podAffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredDuringSchedulingIgnoreDuringExecution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;labelSelctor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: app,operator: In,values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tomcat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topologyKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes.io/hostname &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;pod间软亲和&#34;&gt;pod间软亲和&lt;/h2&gt;
&lt;p&gt;​	软亲和是在根据定义找不到特定的pod所在位置做“同位置”调度时，也可以找个别的地儿调度&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;​	weight定义权重、podAffinityTerm定义选择要亲和的pod的标准&lt;/p&gt;
&lt;p&gt;​	其中在调度时，调度器会将集群节点分为4类：cache pod和db pod都在的zone，cache pod单独在的zone，db pod单独在的zone，以及其他zone，若这几种zone都存在，且副本样本数够大，调度比例约为：10:8:2；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;preferred-affinity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;affinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podAffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;preferredDuringSchedulingIgnoreDuringExecution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podAffinityTerm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labelSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: app,operator: In,values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cache&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topologyKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;zone&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podAffinityTerm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labelSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: app,operator: In,values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;db&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topologyKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;zone&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;pod间反亲和&#34;&gt;pod间反亲和&lt;/h2&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;​	调度时，3个副本的pod，会被调度到不同的节点上；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-anti-affinity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;affinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podAntiAffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requiredDuringSchedulingIgnoredDuringExecution&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;labelSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: app, operator: In,values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;myapp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;topologyKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernets.io/hostname&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;污点和容忍度&#34;&gt;污点和容忍度&lt;/h1&gt;
&lt;p&gt;​	污点taint为节点上的键值对型数据；容忍度tolerations为pod上定义的键值对型数据；&lt;/p&gt;
&lt;p&gt;​	定义pod时，nodeselector，和nodeaffinity都是提供了pod选择节点的能力，而taint而是提供了节点拒绝pod被调度到自己上的能力；&lt;/p&gt;
&lt;p&gt;​	pod要想调度到一个具有一些污点的节点上时，其必须定义对应每个污点的容忍度，才可调度到该节点；&lt;strong&gt;如控制端节点定义的污点，可以让pod不被调度到其上；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	k8s使用podtoleratenodetaints预选策略和tainttorerationpriority优选函数来完成此类型调度机制；&lt;/p&gt;
&lt;h2 id=&#34;定义污点和容忍度&#34;&gt;定义污点和容忍度&lt;/h2&gt;
&lt;p&gt;​	污点taints定义在节点的nodespec中；容忍度tolerations定义在podspce中，都是键值对型数据；**另外支持一个effect标记，**effect共有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NoSchedule:不能容忍该节点的pod，就不用调度了，但节点上现有pod不受影响&lt;/li&gt;
&lt;li&gt;PreferNoSchedule：在没有其他节点可用时，也是可以忍忍节点的污点，然后调度&lt;/li&gt;
&lt;li&gt;NoExecute:不能容忍该节点污点的pod，不调度，且节点已经存在的不能容忍该污点的pod会被驱逐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义污点整体的语法格式：key=value:effect；&lt;/p&gt;
&lt;p&gt;pod上定义容忍度的语法格式有2种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等值判断：即和节点定义的污点key value effect完全一致&lt;/li&gt;
&lt;li&gt;存在判断：即和节点定义的污点key effect完全一致，value要为空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	kubeadm部署集群时，master节点定义了一个污点，且一般创建的pod没有对应的容忍度，因此调度时，master节点就不会被调度到普通的pod，&lt;strong&gt;而管理型pod如k8s组件，kube-proxy，kube-flannel这种需要在master节点运行的pod，则会添加对应的容忍度，以实现调度到master节点；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;master节点的污点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl describe nodes/master
Name:               master
Roles:              master

#污点，键值数据为 node-role.kubernetes.io/master，效果effect是noschedule，
#未定义相应容忍度的就不能调度到master节点
Taints:             node-role.kubernetes.io/master:NoSchedule

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	一般pod的容忍度：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl describe pods/limit-pod1
Name:               limit-pod1
Namespace:          default

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
#普通pod，并未有对master那个键值的相应容忍度
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;k8s组件的容忍度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl describe pods/kube-apiserver-master -n kube-system

Tolerations:       :NoExecute
# api-server的pod有容忍所有的noexecute
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;管理节点的污点&#34;&gt;管理节点的污点&lt;/h2&gt;
&lt;p&gt;​	节点上的污点通常用于描述具体的部署规划，键名有如：node-type，node-role，node-project等&lt;/p&gt;
&lt;p&gt;添加：&lt;/p&gt;
&lt;p&gt;​	kubectl taint可以管理节点的污点，键值对数据，语法：添加时，effect不同，就是不同的污点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl taint nodes &amp;lt;node-name&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;:&amp;lt;effect&amp;gt; ...

例如：
kubectl taint nodes node1.bo.com node-type=production:NoSchedule


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除：&lt;/p&gt;
&lt;p&gt;​	删除某key下所有的污点，如node-type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl taint nodes node1 node-type-
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	删除某key下某个effcet的污点，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl taint nodes node1 nodt-type:NoSchedule-
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	删除节点上的全部污点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl patch nodes node1 -p &#39;{&amp;quot;spec&amp;quot;:{&amp;quot;taints&amp;quot;:[]}}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;节点的污点变动，会影响后续新建pod的调度结果，且若effect是NoExecute，还会影响节点上现有对象&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;管理pod的容忍度&#34;&gt;管理pod的容忍度&lt;/h2&gt;
&lt;p&gt;​	定义pod的容忍度时，有2种方式，在spec.tolerations中定义；&lt;/p&gt;
&lt;p&gt;1、等值判断&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tolerations:
- key: &amp;quot;key1&amp;quot;
  operator: &amp;quot;Equal&amp;quot;
  value: &amp;quot;value1&amp;quot;
  effect: &amp;quot;NoExcute&amp;quot;
  tolerationSeconds: 3600  #定义污点变化时，驱逐当前pod的延时时长
  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、存在判断&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tolerations:
- key: &amp;quot;key1&amp;quot;
  operator: &amp;quot;Exists&amp;quot;
  effect: &amp;quot;NoExecute&amp;quot;
  tolerationSeconds: 3600
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ps:&lt;strong&gt;实践中，若集群中有专为运行非生产型容器（测试，开发环境）准备，可以添加相应污点，运行测试和开发pod时，添加对应容忍度即可，还有，针对特殊硬件，如高性能ssd或gpu的节点，可以添加相应污点，然后在特殊需求的pod上添加对应的容忍度；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;标识问题节点&#34;&gt;标识问题节点&lt;/h2&gt;
&lt;p&gt;​	k8s自1.6后，支持使用污点，自动标识问题节点，&lt;strong&gt;它通过节点控制器，在监测到节点到了某特定状态时，自动为其添加相应的污点，都使用noexecute标识，即节点现有的pod也会被驱逐；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	常用内建污点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node.kubernetes.io/not-ready:节点进入not-ready状态时自动添加&lt;/li&gt;
&lt;li&gt;node.alpha.kubernets.io/unreachable:节点进入notreachable时自动添加&lt;/li&gt;
&lt;li&gt;node.kubernetes.io/out-of-disk&lt;/li&gt;
&lt;li&gt;node.kubernetes.io/disk-pressure&lt;/li&gt;
&lt;li&gt;node.kubernetes.io/network-unavailable&lt;/li&gt;
&lt;li&gt;node.cloudprovider.kuberntes.io/unintitialized&lt;/li&gt;
&lt;li&gt;以上均为node进入到相应状态后，由节点控制其监测到变化，并添加污点&lt;/li&gt;
&lt;li&gt;但，k8s核心组件，管理型附件，一般需要容忍此类污点，以确保这些pod能被部署上去，如kube-proxy，kube-flannel这种必须的&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;pod优先级和抢占式调度&#34;&gt;pod优先级和抢占式调度&lt;/h1&gt;
&lt;p&gt;​	k8s自1.8后，支持pod的资源优选，即区分了pod对象的重要程序，一个高优先级重要的pod无法被调度时，（如它能调度的节点，却资源不足了）调度器会驱逐节点上比它优先级低的pod，来调度它这个优先级高的；&lt;/p&gt;
&lt;p&gt;​	默认禁用，需要在api-server、schduler、kubelet的启动参数中添加PodPriority=true才行；&lt;/p&gt;
&lt;p&gt;​	优先级定义由pod.spec.priorityClassName定义&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl describe pods/kube-apiserver-master -n kube-system
Name:               kube-apiserver-master
Namespace:          kube-system
Priority:           2000000000
PriorityClassName:  system-cluster-critical
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s%E7%9A%84pod%E8%B0%83%E5%BA%A6/" term="k8s的pod调度" label="k8s的pod调度" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之网络模型与网络策略</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8B%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8B%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5/</id>
            <updated>2020-12-01T15:36:06&#43;08:00</updated>
            <published>2020-11-11T14:35:00&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之网络模型与网络策略</summary>
            
                <content type="html">&lt;h1 id=&#34;k8s网络模型与cni插件&#34;&gt;k8s网络模型与cni插件&lt;/h1&gt;
&lt;h2 id=&#34;k8s集群4种通信类型&#34;&gt;k8s集群4种通信类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pod内容器通信：
&lt;ul&gt;
&lt;li&gt;借助pause通信，同一个pod中容器共享了net名称空间，借助lo接口进行通信；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pod之间通信
&lt;ul&gt;
&lt;li&gt;pod的ip都在一个大的扁平的二层网络内部，（同网段一个大的本地局域网）；&lt;/li&gt;
&lt;li&gt;地址范围如10.244.0.0/16，启动api-server由启动参数传入&lt;/li&gt;
&lt;li&gt;实现方式主要有：叠加网络、路由网络，通过网络插件如flannel、calico实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pod与serviceip通信
&lt;ul&gt;
&lt;li&gt;serviceip，启动api-server时通过启动参数传入，如10.96.0.0/12&lt;/li&gt;
&lt;li&gt;serviceip对应各个节点的ipvs或iptables规则，pod与serviceip通信有节点的内核转发规则实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pod与集群外部ip通信
&lt;ul&gt;
&lt;li&gt;通过nodeport或loadbalancer类型的serviceip实现&lt;/li&gt;
&lt;li&gt;本质是借助了节点上开放的端口实现&lt;/li&gt;
&lt;li&gt;经由节点的nodeport，serviceip两次转发实现，才到pod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod网络实现模型&#34;&gt;pod网络实现模型&lt;/h2&gt;
&lt;h3 id=&#34;容器的伪网络接口实现方式&#34;&gt;容器的伪网络接口实现方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虚拟网桥
&lt;ul&gt;
&lt;li&gt;由内核或OVS创建的虚拟网桥实现；&lt;/li&gt;
&lt;li&gt;每个容器会被分配一对虚拟网卡，借助虚拟网桥桥接到节点的物理网卡上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多路复用
&lt;ul&gt;
&lt;li&gt;macvlan为每个虚拟接口配置一个mac实现二层转发&lt;/li&gt;
&lt;li&gt;ipvlan借助ip实现，更适合vm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬件交换
&lt;ul&gt;
&lt;li&gt;硬件辅助，借助支持sr-iov的网卡实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201125180901522.png&#34; alt=&#34;image-20201125180901522&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cni插件及常见实现&#34;&gt;cni插件及常见实现&lt;/h2&gt;
&lt;p&gt;​	cni为coreos和google联合制定的标准，它连接了容器编排系统k8s、和具体的网络插件实现如flannel；之间以json配置文件通信；cni具有很强的扩展性和灵活性，可以通过输入的args和环境变量CNI_ARGS进行传递，&lt;/p&gt;
&lt;p&gt;​	cni插件分3部分：main插件、meta插件、ipam插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main插件，负责实现bridge、macvlan、ipvlan等特定网络&lt;/li&gt;
&lt;li&gt;meta插件，负责调用其他插件&lt;/li&gt;
&lt;li&gt;ipam插件，负责为pod中容器分配ip地址，如dhcp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	k8s设计了k8s网络模型，但代码实现有cni插件实现，cni（container network interface）只是指定的标准，其具体实现有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flnanel：基于linux tun/tap的叠加网络实现；&lt;/li&gt;
&lt;li&gt;calico：基于bgp的的网络&lt;/li&gt;
&lt;li&gt;cannel：flannel和calico的结合&lt;/li&gt;
&lt;li&gt;kube-route：k8s网络一体化解决方案，可取代kube-proxy实现基于ipvs的service，提供pod网络，支持网络策略，兼容bgp；&lt;/li&gt;
&lt;li&gt;weave net&lt;/li&gt;
&lt;li&gt;contiv&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cni工作流程&#34;&gt;cni工作流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;某节点的kubelet监测到自己被分配到一个新pod&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用自己本地的cni插件为新pod分配网络信息&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建虚拟网卡对，附加到底层网络中；&lt;/li&gt;
&lt;li&gt;根据本节点的pod ip范围设置ip地址；&lt;/li&gt;
&lt;li&gt;设置路由等信息，并注入到pod中；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kubelet先到默认目录/etc/cni/net.d/下查找json配置文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据json配置文件中type字段所述，找到cni插件的二进制文件&lt;/li&gt;
&lt;li&gt;由cni插件调用IPAM插件（IP地址管理插件如dhcp，host-local）设置接口地址&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# cat /etc/cni/net.d/10-flannel.conflist 
{
  &amp;quot;name&amp;quot;: &amp;quot;cbr0&amp;quot;,
  &amp;quot;cniVersion&amp;quot;: &amp;quot;0.3.1&amp;quot;,
  &amp;quot;plugins&amp;quot;: [
    {
      &amp;quot;type&amp;quot;: &amp;quot;flannel&amp;quot;,
      &amp;quot;delegate&amp;quot;: {
        &amp;quot;hairpinMode&amp;quot;: true,
        &amp;quot;isDefaultGateway&amp;quot;: true
      }
    },
    {
      &amp;quot;type&amp;quot;: &amp;quot;portmap&amp;quot;,
      &amp;quot;capabilities&amp;quot;: {
        &amp;quot;portMappings&amp;quot;: true
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;flannel插件&#34;&gt;flannel插件&lt;/h1&gt;
&lt;p&gt;​	docker默认的单机网络模型，在k8s集群多机互联的时候，存在2个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每台docker节点都默认是172.17.0.0/16网络，k8s要求的pod在同一个平面网络会导致，ip地址冲突；&lt;/li&gt;
&lt;li&gt;默认为docker桥接模式，各pod没有到达其他节点网络的路由信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	为解决这2个问题，各种网络插件都有不同的解决方案，以flannel为例；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个问题：预留一个大的网段，并自动为集群中每个节点都分配一个子网，分配信息存储到etcd存储中；&lt;/li&gt;
&lt;li&gt;第二个问题：flannel有多种处理方法，每一种称为一种网络模型，也叫做flannel使用的后端&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;flannel常用后端&#34;&gt;flannel常用后端&lt;/h2&gt;
&lt;p&gt;​	flannel共有3种常用后端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vxlan&lt;/li&gt;
&lt;li&gt;host-gw&lt;/li&gt;
&lt;li&gt;udp&lt;/li&gt;
&lt;li&gt;alivpc&lt;/li&gt;
&lt;li&gt;aws vpc&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vxlan&#34;&gt;vxlan&lt;/h3&gt;
&lt;p&gt;​	内核3.7.0后支持的vxlan，flannel借助内核的vxlan模块封装报文，也是flannel推荐后端；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201126160849608.png&#34; alt=&#34;image-20201126160849608&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;host-gw&#34;&gt;host-gw&lt;/h3&gt;
&lt;p&gt;​	host gateway，通过在节点上创建到达各个目标容器网段的路由实现，此种方式必须要求各节点在同一个二层网络，因此不适合大的网络规模；有较好的转发性能，&lt;/p&gt;
&lt;h3 id=&#34;udp&#34;&gt;udp&lt;/h3&gt;
&lt;p&gt;​	使用udp包对容器之间的通信报文进行封装、隧道转发，性能较低；属于叠加网络；&lt;/p&gt;
&lt;h2 id=&#34;flannel配置参数&#34;&gt;flannel配置参数&lt;/h2&gt;
&lt;p&gt;​	pod的ip分配由运作在每个节点上的flannel进程控制；&lt;/p&gt;
&lt;p&gt;​	flannel使用etcd存储给各个节点分配ip的信息，存储路径在etcd的/coreos.com/network/config下，config值为json格式的字典数据结构，示例配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
	&amp;quot;network&amp;quot;: &amp;quot;10.244.0.0/16&amp;quot;,
	&amp;quot;SubnetLen&amp;quot;: 24,
	&amp;quot;Backend&amp;quot;: {
		&amp;quot;Type&amp;quot;: &amp;quot;Vxlan&amp;quot;,
		&amp;quot;Port&amp;quot;: 8472
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vxlan后端和direct-routing后端&#34;&gt;vxlan后端和direct routing后端&lt;/h2&gt;
&lt;p&gt;​	vxlan，全程virtual extensible local area network，虚拟可扩展局域网，采用的是mac in udp，容器之间通信的数据包，进入节点的物理网络前，被封装在节点的物理网络的udp包中，udp包根据物理节点之间的路由信息正常转发；**可跨不同网段，**到达目标节点后再拆掉udp包，然后交给目录容器，&lt;strong&gt;2次封装，造成性能较差&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	flannel支持vxlan+direct routing模式，即若目标容器所在物理节点跨了物理网段，就采用vxlan方式采用udp包跨网段转发，若目标容器所在物理节点在同一个物理网段，就采用direct routing的方式，较少了二层封包带来的损耗，&lt;strong&gt;直接路由就是同一个物理网络的物理节点上，添加上彼此分配到的pod的网段的路由信息，pod通信借助节点的路由即可，（仅限同一个物理网段）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、修改flannel的部署清单文件，启用vxlan+direct routing，默认是vxlan&lt;/p&gt;
&lt;p&gt;​	在清单文件中，定义configmap中，后端类型添加一个directrouting；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  net-conf.json: |
    {
      &amp;quot;Network&amp;quot;: &amp;quot;10.244.0.0/16&amp;quot;,
      &amp;quot;Backend&amp;quot;: {
        &amp;quot;Type&amp;quot;: &amp;quot;vxlan&amp;quot;
        &amp;quot;Directrouting&amp;quot;: true
      }
    }
---

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看节点上生成的对应pod网段的路由信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    102    0        0 eth0
10.244.0.0      10.244.0.0      255.255.255.0   UG    0      0        0 flannel.1
10.244.1.0      10.244.1.0      255.255.255.0   UG    0      0        0 flannel.1
10.244.2.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.4.0      10.244.4.0      255.255.255.0   UG    0      0        0 flannel.1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;host-gw后端&#34;&gt;host-gw后端&lt;/h2&gt;
&lt;p&gt;​	host-gw和vxlan的direct routing类似，**都是在节点色和功能添加pod网段路由的方式，实现pod间通信；**只是仅限于一个二层网络，不具备vxlan支持跨物理节点网段；&lt;/p&gt;
&lt;p&gt;​	host-gw相比vxlan这种承载网络，性能表现更好，但不适合大型的集群，网络规模大的时候，维护节点上路由就很困难；&lt;/p&gt;
&lt;p&gt;1、修改flannel的清单，改为host-gw模式；重新apply即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  net-conf.json: |
    {
      &amp;quot;Network&amp;quot;: &amp;quot;10.244.0.0/16&amp;quot;,
      &amp;quot;Backend&amp;quot;: {
        &amp;quot;Type&amp;quot;: &amp;quot;host-gw&amp;quot;
      }
    }
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看节点路由信息&lt;/p&gt;
&lt;p&gt;​	物理节点上，仍会生成各pod网段的路由信息；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@node1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    102    0        0 eth0
10.244.0.0      10.244.0.0      255.255.255.0   UG    0      0        0 flannel.1
10.244.1.0      10.244.1.0      255.255.255.0   UG    0      0        0 flannel.1
10.244.2.0      0.0.0.0         255.255.255.0   U     0      0        0 cni0
10.244.4.0      10.244.4.0      255.255.255.0   UG    0      0        0 flannel.1

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;网络策略&#34;&gt;网络策略&lt;/h1&gt;
&lt;p&gt;​	flannel本身只实现了网络模型的通信，但并未实现网络隔离等策略&lt;/p&gt;
&lt;h2 id=&#34;网络策略简介&#34;&gt;网络策略简介&lt;/h2&gt;
&lt;p&gt;​	支持网络策略的插件有：calico、cannel、kube-router；&lt;/p&gt;
&lt;p&gt;​	网络策略networkPolicy为k8s标准资源，定义的网络策略，由网络插件实现，类比ingress资源和ingress controller的关系，&lt;strong&gt;需要具有网络策略功能的网络插件才可以，flannel就不支持网络策略；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	pod网络流量分为：出栈egress、进栈ingress，策略有拒绝、允许；&lt;/p&gt;
&lt;p&gt;​	被网络策略选择器选中的pod，所有未明确允许的流量都会被禁止；未被选中的pod仍流量来去自如&lt;/p&gt;
&lt;p&gt;网络策略生效过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义的网络策略对象，由网络插件解释执行；&lt;/li&gt;
&lt;li&gt;新创建pod对象，会生成对应的端点api，反映在etcd和api-server中&lt;/li&gt;
&lt;li&gt;向api-server注册了监听事件的网络插件，监听到新的pod端口&lt;/li&gt;
&lt;li&gt;将对应规则推送到各个节点的agent&lt;/li&gt;
&lt;li&gt;agent在各个节点生成对应该pod的规则，（例如iptables规则）&lt;/li&gt;
&lt;li&gt;networkpolicy对象发生变更，也会被网络插件监听到，并推送各个节点，更新网络策略&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201126181826388.png&#34; alt=&#34;image-20201126181826388&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;部署cannal提供网络策略&#34;&gt;部署cannal提供网络策略&lt;/h2&gt;
&lt;p&gt;​	calico本身可为k8s提供网络模型通信、和网络策略，也可以结合flannel，由flannel负责网络通信、calico负责网络策略；此时合称为canal；&lt;/p&gt;
&lt;p&gt;官方安装文档：https://docs.projectcalico.org/getting-started/kubernetes/flannel/flannel&lt;/p&gt;
&lt;p&gt;问题？版本不匹配，配置清单的语法版本高于k8s集群&lt;/p&gt;
&lt;h2 id=&#34;配置网络策略&#34;&gt;配置网络策略&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;networkPolicy介绍：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	spec中，主要定义字段，策略方向、pod的选择器、&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client canal]# kubectl explain networkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;KIND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DEPRECATED 1.9 - This group version of NetworkPolicy is deprecated by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking/v1/NetworkPolicy. NetworkPolicy describes what network traffic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;is allowed for a set of Pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client canal]# kubectl explain networkPolicy.spec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;KIND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;RESOURCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec &amp;lt;Object&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Specification of the desired behavior for this NetworkPolicy.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DEPRECATED 1.9 - This group version of NetworkPolicySpec is deprecated by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking/v1/NetworkPolicySpec.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;FIELDS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;egress	&amp;lt;[]Object&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;List of egress rules to be applied to the selected pods. Outgoing traffic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;is allowed if there are no NetworkPolicies selecting the pod (and cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;policy otherwise allows the traffic), OR if the traffic matches at least&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;one egress rule across all of the NetworkPolicy objects whose podSelector&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;matches the pod. If this field is empty then this NetworkPolicy limits all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;outgoing traffic (and serves solely to ensure that the pods it selects are&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;isolated by default). This field is beta-level in 1.8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress	&amp;lt;[]Object&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;List of ingress rules to be applied to the selected pods. Traffic is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;allowed to a pod if there are no NetworkPolicies selecting the pod OR if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;the traffic source is the pod&amp;#39;s local node, OR if the traffic matches at&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;least one ingress rule across all of the NetworkPolicy objects whose&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;podSelector matches the pod. If this field is empty then this NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;does not allow any traffic (and serves solely to ensure that the pods it&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;selects are isolated by default).&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;podSelector	&amp;lt;Object&amp;gt; -required-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Selects the pods to which this NetworkPolicy object applies. The array of&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingress rules is applied to any pods selected by this field. Multiple&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;network policies can select the same set of pods. In this case, the ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rules for each are combined additively. This field is NOT optional and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;follows standard label selector semantics. An empty podSelector matches all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pods in this namespace.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;policyTypes	&amp;lt;[]string&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;networkpolicy常用术语&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pod组，网络策略作用的对象，通过pod选择器选择，matchLabel或matchExpression选定

egress出栈流量，被选中的pod组发往其他网络端点的流量，
用to 和ports 去往某网络的某端口的含义

ingress 入栈流量，其他网络端口来往被选中的pod组的流量，
from源端点的地址，和访问自己的目标端口定义

端口：tcp udp端口号

端点：流量的发起的源，或去往的目标，可以由cidr地址块ipblock、ns选择器namespaceselector(多租户常用)，pod选择器podselector选中
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;定义了ingress或egress字段后，其to或from字段指定或通过选择器选中的端点即为白名单，其余为黑名单；&lt;/p&gt;
&lt;h2 id=&#34;管控入栈流量&#34;&gt;管控入栈流量&lt;/h2&gt;
&lt;p&gt;​	ingress用于定义入栈流量，即访问networkpolicy标签选择器选中的pod组，&lt;/p&gt;
&lt;p&gt;​	from定义哪些来源可访问，ports定义可以访问我的哪些端口，定义的为白名单、其余为决绝，若定义时字段留空，则为拒绝所有&lt;/p&gt;
&lt;p&gt;​	from可以由ipblock nsselector podselecor选择匹配来源；&lt;/p&gt;
&lt;p&gt;​	networkpolicy为名称空间级别，可以为ns设置默认拒绝所有的策略，然后指定用啥放行啥；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client canal]# kubectl explain networkPolicy.spec.ingress.
KIND:     NetworkPolicy
VERSION:  extensions/v1beta1

RESOURCE: ingress &amp;lt;[]Object&amp;gt;

FIELDS:
   from	&amp;lt;[]Object&amp;gt;


   ports	&amp;lt;[]Object&amp;gt;


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、放行流量示例&lt;/p&gt;
&lt;p&gt;​	该策略定义了标签app=myapp的pod开放80端口给10.244.0.0/16除了10.244.3.0/24网段的ip，以及开放给自己人app=myapp标签的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;allow-myapp-ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ipBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cidr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.244.0.0&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;expect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;m&#34;&gt;10.244.3.0&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/24&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLebels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;管控出栈流量&#34;&gt;管控出栈流量&lt;/h2&gt;
&lt;p&gt;​	出栈流量，一般都予以放行，在严格要求的场景下，也可以定义默认策略：拒绝所有出栈流量，然后显示放行需要的出栈流量；&lt;/p&gt;
&lt;p&gt;1、定义默认策略，拒绝所有&lt;/p&gt;
&lt;p&gt;​	podselector为空，表示选择此ns中所有pod，policytype策略类型选择为egress，但未定义任何egress字段，定义的egress字段为白名单，未定义即没有白名单，拒绝所有。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all-egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Egress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、显示放行某些出栈流量&lt;/p&gt;
&lt;p&gt;​	pod选择器选中了tomcat的pod，然后放行了其访问nginx的80端口和mysql的3306端口；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;allow-tomcat-egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tomcat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Egress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3306&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;隔离名称空间&#34;&gt;隔离名称空间&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;多租户环境中，各个用户的名称空间应严格隔离，因此各用户的名称空间应该进行所有出栈、入栈流量，但和系统应用所在的名称空间的流量应该相互放行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;​	该网络策略对象定义中，放行了user1和kube-system名称空间的进出栈流量，自己名称空间内部的进入栈流量，&lt;/p&gt;
&lt;p&gt;​	然后禁用了和其他用户的名称空间的所有进出栈流量；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ns-deny-all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PolicyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Egress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Ingress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 禁止了user1用户名称空间中，所有pod的所有出入栈流量，包括该名称空间内部的通信流量，此时每个pod都是“孤岛”&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io.v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;all-kubesystem-and-allow-user1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PolicyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Egress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Ingress&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PodSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;In&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;In&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ps：&lt;/p&gt;
&lt;p&gt;​	其他类的系统附件一般部署在单独的名称空间中，如prometheus部署到了prom名称空间、nginx-ingress-controller部署到了nginx-ingress中，这些管控类的pod所在名称空间，也应和kube-system一样，放开和普通的用户使用的名称空间的进入栈流量！&lt;/p&gt;
&lt;h2 id=&#34;网络策略应用示例&#34;&gt;网络策略应用示例&lt;/h2&gt;
&lt;p&gt;场景要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名为testing的ns中，有myapp和nginx2组pod&lt;/li&gt;
&lt;li&gt;myapp可以访问nginx所有端口，可被nginx访问80端口，可和kube-system中所有pod相互通信&lt;/li&gt;
&lt;li&gt;nginx可以被所有来源访问80端口，可以访问所有的pod，可以访问myapp的80，可被myapp访问所有端口，可和kube-system中所有pod相互通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201127134359842.png&#34; alt=&#34;image-20201127134359842&#34;&gt;&lt;/p&gt;
&lt;p&gt;定义网络策略：&lt;/p&gt;
&lt;p&gt;1、先拒绝testing中所有出入栈流量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;deny-all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PolicyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、开发nginx的80端口给所有来源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx-allow-all&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PolicyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3、开放myapp的80端口，及它与kube-system之间流量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp-allow&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myapp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;podSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Egress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;calico插件&#34;&gt;calico插件&lt;/h1&gt;
&lt;p&gt;​	calico为同时支持网络模型通信，和网络策略的网络插件，可集成于k8s、openstack、mesos等编排系统之上，&lt;/p&gt;
&lt;p&gt;​	calico本身为三层的虚拟网络方案，工作原理：&lt;strong&gt;将每个节点视为路由器，节点上的pod视为挂在节点路由器下的一个个终端，节点路由器通过bgp路由协议，动态的学习集群各节点的路由信息，从而节点（节点路由器）可以帮助其上的pod完成路由转发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	因此calico不局限物理节点同在一个二层网络，可以跨三层，进而扩大了集群的网络规模，&lt;/p&gt;
&lt;p&gt;​	calico同时支持ip-in-ip网络模型，内置在内核中，属于overlay叠加网络，但理论上比vxlan的叠加性能要好；&lt;/p&gt;
&lt;h2 id=&#34;calico特性&#34;&gt;calico特性&lt;/h2&gt;
&lt;p&gt;​	calico利用linux内核，在每个计算节点实现了一个vrouter进行报文转发，&lt;strong&gt;每个vrouter利用bgp协议，通过节点上agent-felix将节点上的pod的地址信息广播出去，直到全网络相互学习到路由信息；felix还支持acl实现安全策略&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经由ip路由直连
&lt;ul&gt;
&lt;li&gt;pod的ip信息借助bgp广播到全网，&lt;/li&gt;
&lt;li&gt;无报文封装、隧道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简单高效容易扩展
&lt;ul&gt;
&lt;li&gt;bgp协议本就适合大规模网络&lt;/li&gt;
&lt;li&gt;calico也适合大规模集群&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全性较好
&lt;ul&gt;
&lt;li&gt;可借助内核的iptables规则，acl策略实现多租户的网络隔离&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简洁
&lt;ul&gt;
&lt;li&gt;没有报文的多层封装、隧道，&lt;/li&gt;
&lt;li&gt;实现了what you see is what you get，方便管理员分析报文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;calico系统架构&#34;&gt;calico系统架构&lt;/h2&gt;
&lt;p&gt;calico系统组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;felix，calico的agent，运行于每个节点，管理节点的acl，和路由信息&lt;/li&gt;
&lt;li&gt;etcd，存储calico配置，路由等信息&lt;/li&gt;
&lt;li&gt;route reflector，bgp路由反射器，大规模网络采用&lt;/li&gt;
&lt;li&gt;orchestrator plugin ，编排系统插件，将calico集成到编排系统的插件，如k8s的cni&lt;/li&gt;
&lt;li&gt;BIRD，分发路由信息的bgp客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201127144203578.png&#34; alt=&#34;image-20201127144203578&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/" term="k8s网络模型" label="k8s网络模型" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之认证-授权-准入控制</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8B%E8%AE%A4%E8%AF%81-%E6%8E%88%E6%9D%83-%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8B%E8%AE%A4%E8%AF%81-%E6%8E%88%E6%9D%83-%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/</id>
            <updated>2020-12-01T15:35:51&#43;08:00</updated>
            <published>2020-11-11T14:34:47&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之认证-授权-准入控制</summary>
            
                <content type="html">&lt;h1 id=&#34;whats-访问控制&#34;&gt;what`s 访问控制&lt;/h1&gt;
&lt;p&gt;​	&lt;strong&gt;api-server是k8s集群各个组件、scheduler、controller-manager、kubelet、kube-proxy、etcd、以及用户账户user、pod进程账户serviceaccount通信的唯一入口，是集群的网关；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	ks8的访问控制分为3个阶段：由api-server实现，插件机制，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户认证，确保该用户有权限连入api-server；所有插件通过一个就放行&lt;/li&gt;
&lt;li&gt;用户鉴权，识别该用户对哪些用户、有哪些操作权限；所有插件通过一个就放行&lt;/li&gt;
&lt;li&gt;准入控制，对用户操作进行细粒度的补充，如用默认值填充用户未定义的字段；所有插件需全部通过才可放行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201123151735032.png&#34; alt=&#34;image-20201123151735032&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;用户账户&#34;&gt;用户账户&lt;/h2&gt;
&lt;p&gt;通过api-server操作k8s集群一般有3种途径：&lt;strong&gt;发起操作的对象有人、pod对象，分别对应user、serviceaccount2类账户&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl命令行客户端，或图形客户端&lt;/li&gt;
&lt;li&gt;客户端接口库&lt;/li&gt;
&lt;li&gt;对接口发起rest的http请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	用户账户分2类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人用的：useraccount；集群级别资源，&lt;/li&gt;
&lt;li&gt;pod用的：serviceaccount；名称空间级别资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于k8s集群来说，api-server作为唯一的集群网关，其接收着，来自用户的、其他组件的、运行其上的pod的所有的api请求，&lt;strong&gt;每个api请求都要经过api-server的认证鉴权准入控制的检测步骤；在认证验证api请求来自哪个用户身份时，就分为了2类，一类是人类用户user、一类是pod用户serviceaccount、&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;api请求会附带其用户身份信息供api-server验证，如某个user身份、某个serviceaccount身份、&lt;/p&gt;
&lt;p&gt;无论是user账户还是sa账户（serviceaccount），都可以属于某个用户组，该组上添加的权限，会被组内成员自动继承，&lt;strong&gt;因此方便了某一类用户的批量授予某些权限或取消&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;用户组&#34;&gt;用户组&lt;/h2&gt;
&lt;p&gt;​	用户账户分组有4类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;system:authenticated 所有通过api-server认证的账户，user或sa，自动归为自类&lt;/li&gt;
&lt;li&gt;system:unauthenticated 未通过api-server认证的账户，user或sa，&lt;/li&gt;
&lt;li&gt;system:serviceaacounts 当前集群下所有sa账户所在的组&lt;/li&gt;
&lt;li&gt;system:serviceaccounts:&lt;namespace&gt; 指定名称空间下所有sa账户所在组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是谁发起的，每个api请求要么携带user人类身份、要么携带serviceaccount pod对象的身份，且需通过认证，否则就归为匿名请求，为匿名用户身份&lt;/p&gt;
&lt;h2 id=&#34;认证授权准入控制&#34;&gt;认证、授权、准入控制&lt;/h2&gt;
&lt;h3 id=&#34;认证&#34;&gt;认证&lt;/h3&gt;
&lt;p&gt;​	认证时，api-server会从客户端提供的认证信息中，抽取出username、uid、groups、extra的信息，用做后续标识该用户的信息&lt;/p&gt;
&lt;p&gt;​	认证客户端身份时，api-server可支持客户端多种认证方式，常见的有：每种认证方式由一种认证的插件来实现，至少k8s集群应启用user和sa认证插件，因为此2种方式为客户端最常用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x509客户端证书&lt;/li&gt;
&lt;li&gt;静态令牌文件static token file&lt;/li&gt;
&lt;li&gt;引导令牌bootstrap token，用于新节点加入时对新node的身份认证&lt;/li&gt;
&lt;li&gt;静态密码文件&lt;/li&gt;
&lt;li&gt;serviceaccount令牌&lt;/li&gt;
&lt;li&gt;openID连接令牌&lt;/li&gt;
&lt;li&gt;webhook令牌&lt;/li&gt;
&lt;li&gt;认证代理&lt;/li&gt;
&lt;li&gt;外部keystone服务器认证&lt;/li&gt;
&lt;li&gt;匿名请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;授权&#34;&gt;授权&lt;/h3&gt;
&lt;p&gt;​	经过前一步的身份认证后，就要由鉴权插件确认该用户对哪些资源、具有哪些操作权限，场景鉴权插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node，对kubelet的访问控制&lt;/li&gt;
&lt;li&gt;abac，基于属性的访问控制&lt;/li&gt;
&lt;li&gt;rbac，基于角色的访问控制&lt;/li&gt;
&lt;li&gt;webhook，基于http回调机制，借助外部rest服务检查权限的访问控制&lt;/li&gt;
&lt;li&gt;alwaysdeny&lt;/li&gt;
&lt;li&gt;alwaysallow，2类特殊插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;准入控制&#34;&gt;准入控制&lt;/h3&gt;
&lt;p&gt;​	经过身份认证、用户鉴权后，对于有写操作的请求，还会经过准入控制插件的拦截，在写入etcd集群前，对写操作进行更细粒度的检查、补充等操作，常见插件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alwaysallow&lt;/li&gt;
&lt;li&gt;alwaysdeny&lt;/li&gt;
&lt;li&gt;alwayspullimage&lt;/li&gt;
&lt;li&gt;namespacelifecycle&lt;/li&gt;
&lt;li&gt;limitRanger，资源限制方面&lt;/li&gt;
&lt;li&gt;serviceaccount，为pod对象自动关联sa账户&lt;/li&gt;
&lt;li&gt;resourceQuota&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps：只读的api请求，不经过准入控制插件检查&lt;/p&gt;
&lt;h1 id=&#34;服务账户serviceaccount&#34;&gt;服务账户serviceaccount&lt;/h1&gt;
&lt;p&gt;​	运行中，pod可能会需要通过api-server发起api请求，访问集群中其他服务，这些服务会要求验证身份，因此pod就需要提供自己的身份信息给要请求的服务方。该信息就由pod携带的serviceaccount提供，通常包含用户名，和相关的secret对象&lt;/p&gt;
&lt;p&gt;​	如：监控用pod，需要请求各个节点的kubelet提供监控数据，就需要提供sa账户给kubelet认证，且该账户还需要有获得节点监控数据的权限&lt;/p&gt;
&lt;h2 id=&#34;serviceaccount自动化&#34;&gt;serviceaccount自动化&lt;/h2&gt;
&lt;p&gt;​	未明确定义sa账户的pod都会被分配一个默认的sa账户&lt;/p&gt;
&lt;p&gt;1、查看某运行中pod信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl get pods ngx1 -o yaml
apiVersion: v1
kind: Pod
metadata:
...
  serviceAccount: default
  serviceAccountName: default
...
volumeMounts:
    - mountPath: /usr/share/nginx/html/
      name: nginx
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-q6vpk
      readOnly: true


...
  volumes:
  - name: default-token-q6vpk
    secret:
      defaultMode: 420
      secretName: default-token-q6vpk
1，定义了一个secret类型的存储卷，其中，引用了名为default-token-q6vpk的secret对象
2，在容器中引用，并挂载到了容器中/var/run/secrets/kubernetes.io/serviceaccount目录下，只读权限
3、secret对象中存储了认证需要的信息
4，由准入控制器补全的默认的sa账户，为当前名称空间下的default账户
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看对应的secret对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl get secret default-token-q6vpk
NAME                  TYPE                                  DATA   AGE
default-token-q6vpk   kubernetes.io/service-account-token   3      13d

1，其中提供了ca.crt，namespace，token三个字段的信息
[root@client ~]# kubectl get secret default-token-q6vpk -o yaml
apiVersion: v1
data:
  ca.crt: LS0tLS1C...
  namespace: ZGVmYXVsdA==
  token: ZXlKaGJHY2...
kind: Secret

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看挂载到容器中的文件&lt;/p&gt;
&lt;p&gt;​	可以看到，secret中定义的3个字段，被挂载成为了容器中的三个文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl exec  ngx1 -- ls /var/run/secrets/kubernetes.io/serviceaccount
ca.crt
namespace
token
[root@client ~]# kubectl exec  ngx1 -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
-----BEGIN CERTIFICATE-----
MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl
cm5ldGVzMB4XDTIwMTExMDA2NTAwM1oXDTMwMTEwODA2NTAwM1owFTETMBEGA1UE
AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALue
E6S/sjrJd0CKIQjTK2wLdOSo+Q9HMiJQLvwq6A3daLLqaIGo0FRcvVIWtwwW78oO
SXKJWqImUQsthj+Fhuy8QFaaGIJgoQnSL5VYDzDRLaRN6lg0fjOYIFB055QVQ54R
apbpgW/N9BwrTiOQmGSBVWJt7SCb9Mz1ngw4FWSErLUpatFQ9id9AGa+5+H1XxO1
eiq6MPyejZ4Cfy+w3LCeDLwOizFPdfCP9t0HXYwgQkTOS8WfuyBTa4YCvQX2cM47
eGxJVB+R0aKOOW9pdtqiIanfYwwIf+oxE+CBYO+KIzWgNnD2wTbjsmebk8KoOk4o
vgbNPIjeQboEIDKHyskCAwEAAaMjMCEwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB
/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAI0HpRWd4ZsEHJe6Ef4cWrTX/gSv
Sbss22pqoZF6EURSpxBMlYa5DFAHBpRqBcWVig4KViCSl+hhSLRvOF8He6nlkxvc
bsKJT9c4eyFI+dOfEaAZUuhmUddSg72KcJpA+3dCnnYVvGI3gFfydaM8nkUr3Pm1
88Ixm66VCB/+IFzW88mHY9t3s9/v1aVizlAq3kknTZt7pwvNTirCD39I5PpBfPXL
/XuzUMBJ9jO4Goi+fwue+yjpOanDQcGCOX2LO7MoafKgMb1Dm3+MsfdNRtjS9FNS
aFzXCk/+V73U2BHb0qvFMaS4aO5RGJvUzGuzEpoAxDKUWA+Oudo4bI6XWBI=
-----END CERTIFICATE-----
[root@client ~]# kubectl exec  ngx1 -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace
default[root@client ~]#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、查看名称空间下生成的默认sa账户&lt;/p&gt;
&lt;p&gt;​	其中引用了包含认证信息的secret对象&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;每个ns中，都会生成一个default的sa账户，生成一个default-token-xxx的secret对象，并2者关联起来&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl get sa -o yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: 2020-11-10T06:50:41Z
    name: default
    namespace: default
    resourceVersion: &amp;quot;333&amp;quot;
    selfLink: /api/v1/namespaces/default/serviceaccounts/default
    uid: 0caad4cf-2321-11eb-8d73-000c292d5d7c
  secrets:
  - name: default-token-q6vpk
kind: List
metadata:
  resourceVersion: &amp;quot;&amp;quot;
  selfLink: &amp;quot;&amp;quot;

[root@client ~]# kubectl get sa -o wide
NAME      SECRETS   AGE
default   1         13d
[root@client ~]# kubectl get secret -o wide
NAME                  TYPE                                  DATA   AGE
default-token-q6vpk   kubernetes.io/service-account-token   3      13d

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、sa账户自动化实现过程，（由3个组件协同实现）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sa账户的控制器&lt;/li&gt;
&lt;li&gt;token的控制器&lt;/li&gt;
&lt;li&gt;sa的准入控制器&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;sa账户控制器，负责在每个ns中生成一个默认的sa账户&lt;/li&gt;
&lt;li&gt;token控制器，负责监控sa账户的生成，并为其添加secret对象，其中存储了认证相关信息&lt;/li&gt;
&lt;li&gt;sa的准入控制器，
&lt;ol&gt;
&lt;li&gt;创建pod的请求来临时，未指定sa账户的补上pod所在ns中默认的sa账户，名为default&lt;/li&gt;
&lt;li&gt;指定sa账户的pod，检查引用sa是否存在，不存在报错&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;6、指定给sa的token签名的密钥对&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;controller-manager启动时指定--service-account-private-key-file给sa的token签名的私钥&lt;/li&gt;
&lt;li&gt;api-server指定--service-account-key-file指定验证sa的token时的公钥，验证sa的token的合法性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建serviceaccount&#34;&gt;创建serviceaccount&lt;/h2&gt;
&lt;p&gt;​	创建pod时，可以用spec.serviceAccount字段指定sa，没指定的就是该ns中默认的sa账户，名为default；&lt;/p&gt;
&lt;p&gt;​	命令行或yaml清单均可创建sa账户，创建sa账户后，由controller-manager其中的子组件：token控制器监测到，然后自动生成一个token添加到一个secret对象中，并关联到创建的sa账户上；&lt;/p&gt;
&lt;p&gt;1、查看ns中默认的sa账户，每个ns都有一个名为default的sa账户；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl get sa   --all-namespaces |grep default
NAMESPACE       NAME                                 SECRETS   AGE
default         default                              1         13d
ingress-nginx   default                              1         5d4h
kube-public     default                              1         13d
kube-system     default                              1         13d
test            default                              1         5d3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、基于yaml文件创建sa账户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client sa]# kubectl apply -f sa-demo1.yaml 
serviceaccount/da-demo1 created
[root@client sa]# kubectl get sa
NAME       SECRETS   AGE
da-demo1   1         3s
default    1         13d
[root@client sa]# cat sa-demo1.yaml 
apiVersion: v1
kind: ServiceAccount
metadata:
 name: da-demo1

定义sa名称和名称空间即可，其中的secret会自动被token控制器创建；名字格式：SA_NAME-token-xxx
当然，可以手动指定secret对象，
以及，imagePullSecrets对象，私有仓库的认证信息
[root@client sa]# kubectl get secrets
NAME                   TYPE                                  DATA   AGE
da-demo1-token-b6tln   kubernetes.io/service-account-token   3      50s


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sa引用imagepullsecret&#34;&gt;sa引用imagepullSecret&lt;/h2&gt;
&lt;p&gt;​	sa的spec.imagePullSecrets字段，通过指定docker-registry类型的secret，之后，引用该sa账户的pod，可以从对应的私有镜像仓库拉取镜像，而无需手动在节点上先docker login登陆&lt;/p&gt;
&lt;p&gt;​	docker-registry类型的secret需要事先创建，其中加密了私有仓库的地址，用户名，密码，用户邮箱信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl explain sa.imagePullSecrets
KIND:     ServiceAccount
VERSION:  v1
...

---
apiVersion: v1
kind: ServiceAccount
metadata:
 name: da-demo1
imagePullSecrets:
- name: some-regstiry-secrets
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;x509数字证书认证&#34;&gt;x509数字证书认证&lt;/h1&gt;
&lt;p&gt;tls/ssl单向认证图示：&lt;/p&gt;
&lt;p&gt;​	只有客户验证服务端的证书，确保服务端的安全性&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201123183508821.png&#34; alt=&#34;image-20201123183508821&#34;&gt;&lt;/p&gt;
&lt;p&gt;tls/ssl双向认证图示：&lt;/p&gt;
&lt;p&gt;​	客户端/服务端相互验证证书，确保双方均为安全用户，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201123183519258.png&#34; alt=&#34;image-20201123183519258&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;k8s中的tlsssl认证&#34;&gt;k8s中的tls/ssl认证&lt;/h2&gt;
&lt;p&gt;k8s中各组件之间、客户端和api-server之间，api-server和etcd集群之间，均需要安全通信，且都是双向安全通信，即客户端，服务端都需要提供对方自己的证书，并验证对方的证书；（基本由一个私有ca签发即可）&lt;/p&gt;
&lt;p&gt;k8s集群安全通信举例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;api-server和其他组件
&lt;ul&gt;
&lt;li&gt;controller-manager&lt;/li&gt;
&lt;li&gt;scheduler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;api-server和其客户端之间
&lt;ul&gt;
&lt;li&gt;kubectl或gui客户端&lt;/li&gt;
&lt;li&gt;各节点：kubelet和kube-proxy，其中新节点加入集群的时候，可自动生成私钥和证书请求文件csr，提交给api-server，并由master节点签发证书，这过程叫做：tls bootstraping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;etcd集群节点之间，2380端口&lt;/li&gt;
&lt;li&gt;etcd集群和其客户端api-server，2379端口&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201123183841417.png&#34; alt=&#34;image-20201123183841417&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;客户端配置kubeconfig&#34;&gt;客户端配置kubeconfig&lt;/h2&gt;
&lt;h3 id=&#34;kubectl-config命令&#34;&gt;kubectl config命令&lt;/h3&gt;
&lt;p&gt;kubeconfig命令格式：用户配置kubeconfig配置文件；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client sa]# kubectl config --help
Modify kubeconfig files using subcommands like &amp;quot;kubectl config set current-context my-context&amp;quot; 

Available Commands:
  current-context Displays the current-context
  delete-cluster  Delete the specified cluster from the kubeconfig
  delete-context  Delete the specified context from the kubeconfig
  get-clusters    Display clusters defined in the kubeconfig
  get-contexts    Describe one or many contexts
  rename-context  Renames a context from the kubeconfig file.
  set             Sets an individual value in a kubeconfig file
  set-cluster     Sets a cluster entry in kubeconfig
  set-context     Sets a context entry in kubeconfig
  set-credentials Sets a user entry in kubeconfig
  unset           Unsets an individual value in a kubeconfig file
  use-context     Sets the current-context in a kubeconfig file
  view            Display merged kubeconfig settings or a specified kubeconfig file
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;kubeconfig文件格式&#34;&gt;kubeconfig文件格式&lt;/h3&gt;
&lt;p&gt;kubeconfig配置文件，为api-server各类客户端可使用的连接到api-server的认证配置文件，组成格式有4部分：可以定义多个集群和用户，并组合为不同的上下文，利用use-context可以实现在不同集群、不同认证用户之间快速切换；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clusters，定义集群信息，url，名称，&lt;/li&gt;
&lt;li&gt;users，定义用户信息，名称&lt;/li&gt;
&lt;li&gt;contexts：集群信息和用户的组合，&lt;/li&gt;
&lt;li&gt;current-context：当前默认使用哪个用户连接哪个集群&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@client sa]# kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://192.168.80.101:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建kubeconfig文件&#34;&gt;创建kubeconfig文件&lt;/h3&gt;
&lt;p&gt;1、创建用户、用户私钥、用户证书&lt;/p&gt;
&lt;p&gt;创建普通用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master kube_config]# useradd kube_user1
[root@master kube_config]# su - kube_user1
[kube_user1@master ~]$ ll
total 0

[kube_user1@master ~]$ (umask 077; openssl genrsa -out kube_user1.key 2048)
Generating RSA private key, 2048 bit long modulus
............................................+++
................................................+++
e is 65537 (0x10001
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成key和csr文件：subj就是身份认证时，用户的标识id，分别为用户名、用户组名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kube_user1@master ~]$ openssl req -new -key kube_user1.key -out kube_user1.csr -subj &amp;quot;/CN=kube_user1/O=k8s&amp;quot;
[kube_user1@master ~]$ ll
total 8
-rw-rw-r-- 1 kube_user1 kube_user1  911 Nov 23 19:24 kube_user1.csr
-rw------- 1 kube_user1 kube_user1 1679 Nov 23 19:24 kube_user1.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;切换为root用户，然后签发证书，用kubeadm部署集群时生成的k8s集群的ca证书&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master kube_config]# openssl x509 -req -in /home/kube_user1/kube_user1.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out kube_user1.crt -days 3650
Signature ok
subject=/CN=kube_user1/O=k8s
Getting CA Private Key

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复制到kube_user1用户家目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master kube_config]# chown -R kube_user1.kube_user1 /home/kube_user1/kube_user1.crt 
[root@master kube_config]# ll /home/kube_user1/
total 12
-rw-r--r-- 1 kube_user1 kube_user1  997 Nov 23 19:26 kube_user1.crt
-rw-rw-r-- 1 kube_user1 kube_user1  911 Nov 23 19:24 kube_user1.csr
-rw------- 1 kube_user1 kube_user1 1679 Nov 23 19:24 kube_user1.key

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、配置为kubeconfig文件&lt;/p&gt;
&lt;p&gt;设置集群信息字段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kube_user1@master ~]$ kubectl config set-cluster kubernetes --embed-certs=true \
&amp;gt; --certificate-authority=/etc/kubernetes/pki/ca.crt --server=&amp;quot;https://192.168.80.101:6443&amp;quot;
Cluster &amp;quot;kubernetes&amp;quot; set.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置用户信息字段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kube_user1@master ~]$ kubectl config set-credentials kube_user1 --embed-certs=true --client-certificate=/home/kube_user1/kube_user1.crt \
&amp;gt; --client-key=/home/kube_user1/kube_user1.key 
User &amp;quot;kube_user1&amp;quot; set.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置context字段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kube_user1@master ~]$ kubectl config set-context kube_user1@kubernetes --cluster=kubernetes --user=kube_user1
Context &amp;quot;kube_user1@kubernetes&amp;quot; created.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置current-context字段：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kube_user1@master ~]$ kubectl config use-context kube_user1@kubernetes
Switched to context &amp;quot;kube_user1@kubernetes&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kube_user1@master ~]$ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://192.168.80.101:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kube_user1
  name: kube_user1@kubernetes
current-context: kube_user1@kubernetes
kind: Config
preferences: {}
users:
- name: kube_user1
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、使用上步的kubeconfig文件访问测试&lt;/p&gt;
&lt;p&gt;​	访问被拒绝，因为没有设置对应的权限，但证明kubeconfig文件配置成功；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kube_user1@master ~]$ kubectl get pods
Error from server (Forbidden): pods is forbidden: User &amp;quot;kube_user1&amp;quot; cannot list resource &amp;quot;pods&amp;quot; in API group &amp;quot;&amp;quot; in the namespace &amp;quot;default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	每个用户默认读取kubeconfig文件路径：$HOME/.kube/config，也可以指定具体采用的kubeconfig文件具体路径；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master kube_config]# kubectl get pods --kubeconfig=/home/kube_user1/.kube/config 
Error from server (Forbidden): pods is forbidden: User &amp;quot;kube_user1&amp;quot; cannot list resource &amp;quot;pods&amp;quot; in API group &amp;quot;&amp;quot; in the namespace &amp;quot;default&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tls-bootstraping机制&#34;&gt;tls bootstraping机制&lt;/h2&gt;
&lt;p&gt;​	此前说过，k8s集群通信几乎都需要双向tls认证，然后加密通信，新节点加入集群时也不例外。&lt;/p&gt;
&lt;p&gt;​	给新节点做tls配置有2种方式：1、手动给每个节点，配置好私钥、证书，然后分发到各个节点；2、由各个节点自行生成私钥和签名证书；&lt;/p&gt;
&lt;p&gt;​	集群规模大时，1方法显然任务繁重、2方法又存在安全隐患，因此采用较为折中的办法：tls bootstraping；&lt;/p&gt;
&lt;p&gt;​	新节点加入，由其上kubelet自动生成私钥，和证书请求文件csr，并发送给master进行审核，管理员在master上审核通过后，再进行证书签发；但逐一审核csr文件仍较为繁重，因此引入了token&lt;/p&gt;
&lt;p&gt;​	新节点只有采用了master上生成的，认可的相同的token，就可以在发送csr请求后，自动由controller-manager中的一个证书签发控制器自动签发，避免了手动审核的繁琐，且token有过期时长，持有该token的用户会加入到system:bootstrappers组内；且具有适当的rbac权限，用于证书签发；&lt;/p&gt;
&lt;p&gt;​	kubeadm部署集群时，kubectl join 就需要指定一个token参数，才可加入集群，就是该token&lt;/p&gt;
&lt;p&gt;​	api-server启动参数--client-ca-file，要和证书签发控制器使用的是一个ca，这样才能通过认证；&lt;/p&gt;
&lt;h1 id=&#34;rbacrole-based-access-control&#34;&gt;RBAC:role-based-access-control&lt;/h1&gt;
&lt;p&gt;​	rbac是一种灵活授权的权限授予机制，不同于以往，直接把权限授予用户，**而是在权限和用户之间加入一层：角色role，**角色由；操作verb、对象object构成；即对哪些对象能执行哪些动作，多组操作和对象构成了role角色，角色可以再赋予用户，用户组，用户和角色之间是多对多的关系，&lt;/p&gt;
&lt;p&gt;​	定义好角色后，以后新创建的用户只需关联到角色，就立刻拥有了角色的所有的权限，而不比给新用户一一设置对哪些对象有哪些操作权限，提高了灵活性；&lt;/p&gt;
&lt;h2 id=&#34;rbac授权插件&#34;&gt;RBAC授权插件&lt;/h2&gt;
&lt;p&gt;​	rbac授权插件，将定义好的，包含对某些对象操作权限的role关联到主体；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主体：useraccount或serviceaccount，以及group&lt;/li&gt;
&lt;li&gt;动作：create、delete、update、get&lt;/li&gt;
&lt;li&gt;对象：k8s上各种资源对象&lt;/li&gt;
&lt;li&gt;role定义时：就由动作和对象组成，然后关联给主体，即user账户或sa账户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;k8s与rbac相关的资源对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clusterrole，集群级资源，用于定义对集群级资源如node的操作集合，&lt;/li&gt;
&lt;li&gt;role，名称空间级资源，用于定义对ns级资源如pod的操作集合，&lt;/li&gt;
&lt;li&gt;clusterrolebinding，引用集群级别的clusterrole&lt;/li&gt;
&lt;li&gt;rolebinding，可以引用本ns里的role，也可引用集群级别的clusterrole
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alternatively, a RoleBinding can reference a ClusterRole and bind that ClusterRole to the namespace of the RoleBinding.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注：user为集群级，sa为ns级别，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201124104357284.png&#34; alt=&#34;image-20201124104357284&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;role和rolebinding&#34;&gt;role和rolebinding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;role定义了对象（如pod，service）和所允许的操作（如增删改查）&lt;/li&gt;
&lt;li&gt;rolebing 可以将定义好的role绑定给user、group、sa三种账户（sa是ns级别）&lt;/li&gt;
&lt;li&gt;role和rolebinding属于ns级别资源&lt;/li&gt;
&lt;li&gt;rolebinding只可以引用本ns中的role，以及定义的集群级别的clusterrole&lt;/li&gt;
&lt;li&gt;role和rolebinding均可通过yaml清单或命令行创建&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、定义role清单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# cat role-get-pod.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;role-get-pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods/log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 在rules中定义了最必须的2个字段，resources定义对象列表；verbs定义可执行的动作列表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# apiGroups指定了资源所在群组，也是个列表，“”代表api核心群组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# kubectl apply -f role-get-pod.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;role.rbac.authorization.k8s.io/role-get-pod created&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# kubectl get role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NAME           AGE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;role-get-pod   2s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# kubectl get role role-get-pod -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubectl.kubernetes.io/last-applied-configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.authorization.k8s.io/v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Role&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;{}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;role-get-pod&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;apiGroups&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;resources&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods/log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;verbs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-11-24T03:20:38Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;role-get-pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;560845&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/apis/rbac.authorization.k8s.io/v1/namespaces/default/roles/role-get-pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;05fd5f74-2e04-11eb-8b3f-000c292d5d7c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pods/log&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、定义rolebinding清单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# cat rolebinding-get-pod.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rolebinding-get-pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;role-get-pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube_user1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3、绑定给上步创建的kube_user1这个user用户&lt;/p&gt;
&lt;p&gt;​	绑定前：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@master ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl get pods --kubeconfig=/home/kube_user1/.kube/config &lt;/span&gt;
Error from server &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Forbidden&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: pods is forbidden: User &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube_user1&amp;#34;&lt;/span&gt; cannot list resource &lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt; in API group &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; in the namespace &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	绑定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl apply -f rolebinding-get-pod.yaml &lt;/span&gt;
rolebinding.rbac.authorization.k8s.io/rolebinding-get-pod created

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl get rolebinding&lt;/span&gt;
NAME                  AGE
rolebinding-get-pod   4s
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	绑定后：根据绑定的role权限，可以查看pod了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kube_user1@master ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ kubectl get pods
NAME                    READY   STATUS              RESTARTS   AGE
dep1-7b96746498-2qv6t   1/1     Running             &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;          5d16h
dep1-7b96746498-59x58   1/1     Running             &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;          5d16h
dep1-7b96746498-8lldj   1/1     Running             &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;          5d16h
nginx-with-ssl          1/1     Running             &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          45h
ngx1                    1/1     Running             &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          46h
pod-env                 0/1     ImagePullBackOff    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          4d18h
pod1                    0/1     ImagePullBackOff    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          4d20h
pod2                    0/1     ImagePullBackOff    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;          4d20h
state-stateset-0        0/1     ContainerCreating   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          44h

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;kube_user1@master ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ kubectl get service
Error from server &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Forbidden&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: services is forbidden: User &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube_user1&amp;#34;&lt;/span&gt; cannot list resource &lt;span class=&#34;s2&#34;&gt;&amp;#34;services&amp;#34;&lt;/span&gt; in API group &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; in the namespace &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;4、role定义字段说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kubectl explain role.rules
   apiGroups	&amp;lt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;string&amp;gt;
     APIGroups is the name of the APIGroup that contains the resources. If
     multiple API groups are specified, any action requested against one of the
     enumerated resources in any API group will be allowed.

   nonResourceURLs	&amp;lt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;string&amp;gt;
   &lt;span class=&#34;c1&#34;&gt;# 用于定义一些非k8s对象的url型，如/healthz&lt;/span&gt;
     NonResourceURLs is a &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; of partial urls that a user should have access to.
     *s are allowed, but only as the full, final step in the path Since
     non-resource URLs are not namespaced, this field is only applicable &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;
     ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply
     to API resources &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;such as &lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;#34;secrets&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; or non-resource URL paths
     &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;such as &lt;span class=&#34;s2&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, but not both.

   resourceNames	&amp;lt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;string&amp;gt;
     ResourceNames is an optional white list of names that the rule applies to.
     An empty &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; means that everything is allowed.

   resources	&amp;lt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;string&amp;gt;
     Resources is a list of resources this rule applies to. ResourceAll
     represents all resources.

   verbs	&amp;lt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;string&amp;gt; -required-
     Verbs is a list of Verbs that apply to ALL the ResourceKinds and
     AttributeRestrictions contained in this rule. VerbAll represents all kinds
     
     
role下级只有4个字段，分别为apiVersion kind metadata rules，其中在rules中定义了对哪些对象；能够执行哪些动作
对象一般为k8s的资源对象，如pod service
以及某些对象的子对象，如pod/logs nodes/status
以及一些非k8s对象的url型，如/healthz
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;5、rolebinding定义字段说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl explain rolebinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;KIND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding references a role, but does not contain it. It can reference a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role in the same namespace or a ClusterRole in the global namespace. It&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;adds who information via Subjects and namespace information by which&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;namespace it exists in. RoleBindings in a given namespace only have effect&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;in that namespace.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;roleRef	&amp;lt;Object&amp;gt; -required-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleRef can reference a Role in the current namespace or a ClusterRole in&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;the global namespace. If the RoleRef cannot be resolved, the Authorizer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;must return an error.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;subjects	&amp;lt;[]Object&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Subjects holds references to the objects the role applies to.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 最基础的sujects定义关联的用户，有三类：user group serviceaccount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# roleRef指定了关联到哪些角色，类型有2类：role 和 clusterrole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;clusterrole和clusterrolebinding&#34;&gt;clusterrole和clusterrolebinding&lt;/h2&gt;
&lt;p&gt;​	clusterrole用于定义对集群级别资源的操作权限，如node，ns等资源，格式和role类似；&lt;/p&gt;
&lt;p&gt;​	clusterrolebinding可以将clusterrole绑定给用户，从而使得其具有对集群级别资源的操作权限；&lt;/p&gt;
&lt;p&gt;​	rolebinding对象属于ns级别，它绑定clusterrole的时候，**所授予用户的权限作用范围只限于rolebinding所在的名称空间内；**eg：若某clusterrole定义了权限，可以访问所有名称空间的所有configmap资源，该clusterrole通过test名称空间的rolebinding被绑定到了用户user1上，那user1所能访问的只有test名称空间的所有configmap，若采用的是clusterrolebinding，则user可访问所有名称空间的所有configmap；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群级资源：如node，pv无法被rolebinding绑定，只能被clusterrolebinding绑定；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、系统内置了对非k8s对象的url型的访问权限&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# kubectl get clusterrole system:discovery -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.authorization.kubernetes.io/autoupdate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-11-10T06:50:24Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/bootstrapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac-defaults&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:discovery&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;55&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/apis/rbac.authorization.k8s.io/v1/clusterroles/system%3Adiscovery&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;02162b27-2321-11eb-8d73-000c292d5d7c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;nonResourceURLs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/api&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/api/*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/apis&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/apis/*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/healthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/openapi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/openapi/*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/swagger-2.0.0.pb-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/swagger.json&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/swaggerapi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/swaggerapi/*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/version&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/version/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# kubectl get clusterrolebinding system:discovery -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.authorization.kubernetes.io/autoupdate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-11-10T06:50:24Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/bootstrapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac-defaults&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:discovery&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;111&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/system%3Adiscovery&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;024781cd-2321-11eb-8d73-000c292d5d7c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:discovery&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:authenticated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;system:unauthenticated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;clusterrole和clusterrolebinding都叫 system:discovery&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;且授权了2个组， system:authenticated、system:unauthenticated&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;即包含了所有用户，任何用户都可以获得这些url资源的读取权限；&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、自定义对url型资源访问的clusterrole&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;healthz-admin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;nonResourceURLs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/healthz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;聚合型clusterrole&#34;&gt;聚合型clusterrole&lt;/h2&gt;
&lt;p&gt;​	聚合型clusterrole实现了灵活的组合其他多个clusterrole，（通过标签选择器实现）&lt;/p&gt;
&lt;p&gt;​	k8s自1.9后，支持在&lt;code&gt;ClusterRole.aggregationRule&lt;/code&gt;字段中聚合其他的clusterrole，即本身不定义权限，而是将多个clusterrole的权限继承下来并聚合为自己的权限，&lt;strong&gt;通过clusterRoleSelecters标签选择器实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;k8s内建的clusterrole：admin和edit就是聚合型role，用于可以根据需要定义自己的clusterrole，并被admin或edit的标签选择器选中，可以方便的向默认角色中组合添加自定义的权限集合；&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get clusterrole admin -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aggregationRule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusterRoleSelectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.authorization.k8s.io/aggregate-to-admin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get clusterrole edit -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aggregationRule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusterRoleSelectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.authorization.k8s.io/aggregate-to-edit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;1、定义聚合型clusterrole&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# cat aggre-clusterrole.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aggret-clusterrole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aggregationRule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusterRoleSelectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.demo.com/aggregate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、定义带标签可被聚合的clusterrole&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# cat demo.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.demo.com/aggregate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3、查看权限是否被聚合&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# kubectl apply -f demo.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;clusterrole.rbac.authorization.k8s.io/demo created&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client role]# kubectl get clusterrole aggret-clusterrole -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;aggregationRule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusterRoleSelectors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rbac.demo.com/aggregate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubectl.kubernetes.io/last-applied-configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;aggregationRule&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;clusterRoleSelectors&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;matchLabels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.demo.com/aggregate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;}}&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.authorization.k8s.io/v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ClusterRole&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;{&lt;span class=&#34;s2&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;{}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;aggret-clusterrole&amp;#34;&lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[]&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-11-24T08:34:50Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aggret-clusterrole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;580449&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/apis/rbac.authorization.k8s.io/v1/clusterroles/aggret-clusterrole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;eaf6b98b-2e2f-11eb-8b3f-000c292d5d7c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;内建clusterrole&#34;&gt;内建clusterrole&lt;/h2&gt;
&lt;p&gt;​	k8s内建了一组clusterrole和clusterbinding，供系统各个组件使用，多以system:开头；&lt;/p&gt;
&lt;p&gt;1、示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client role&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl get clusterrole&lt;/span&gt;
NAME                                                                   AGE
admin                                                                  14d
aggret-clusterrole                                                     11m
cluster-admin                                                          14d
demo                                                                   4m50s
edit                                                                   14d
flannel                                                                13d
ingress-nginx                                                          6d2h
ingress-nginx-admission                                                6d2h
system:aggregate-to-admin                                              14d
system:aggregate-to-edit                                               14d
system:aggregate-to-view                                               14d
system:auth-delegator                                                  14d
system:aws-cloud-provider                                              14d
system:basic-user 
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、常用的clusterole&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cluster-admin，集群超级管理员角色；
&lt;ul&gt;
&lt;li&gt;被同名clusterrolebinding绑定到了system:masters组，所有属于该组的用户，都将是集群超级管理员；&lt;/li&gt;
&lt;li&gt;kubeadm部署的集群，管理员/O=system:masters/CN=kubernetes-admin就属于该组&lt;/li&gt;
&lt;li&gt;配置超级管理员方法：
&lt;ul&gt;
&lt;li&gt;创建用户绑定到cluster-admin集群角色&lt;/li&gt;
&lt;li&gt;创建用户绑定到system:masters组，设置O=system:master&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;system:kube-scheduler&lt;/li&gt;
&lt;li&gt;system:kube-controller-manage&lt;/li&gt;
&lt;li&gt;system:node&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;k8s-dashboard&#34;&gt;k8s dashboard&lt;/h1&gt;
&lt;p&gt;​	dashborad为k8s集群的附加组件，可以以图形化方式查看，管理k8s集群，&lt;strong&gt;但其本质就是图形化的代理，是api-server的前端，真正处理请求的还是api-server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	dashboard也是api-server的客户端，认证到api-server的方式有2种：kubeconfig、token，也需要k8s的CA给其颁发证书&lt;/p&gt;
&lt;h2 id=&#34;部署https的dashboard&#34;&gt;部署https的dashboard&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建dashboard的私钥、证书&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client dashboard&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# (umask 077; openssl genrsa -out dashboard.key 2048)&lt;/span&gt;
Generating RSA private key, &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt; bit long modulus
.......................+++
..............................................+++
e is &lt;span class=&#34;m&#34;&gt;65537&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0x10001&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client dashboard&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ll&lt;/span&gt;
total &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
-rw------- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;1675&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; 17:56 dashboard.key
&lt;span class=&#34;c1&#34;&gt;# 生成key&lt;/span&gt;
   
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client dashboard&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# openssl req -new -key dashboard.key -out dashboard.csr -subj &amp;#34;/O=system:masters/CN=dashboard&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client dashboard&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ll&lt;/span&gt;
total &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root  &lt;span class=&#34;m&#34;&gt;924&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; 17:57 dashboard.csr
-rw------- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;1675&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; 17:56 dashboard.key
&lt;span class=&#34;c1&#34;&gt;# 生成csr&lt;/span&gt;
   
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@master ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# openssl x509 -req -in dashboard.csr -CA /etc/kubernetes/pki/ca.crt  -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out dashboard.crt -days 365&lt;/span&gt;
Signature ok
&lt;span class=&#34;nv&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/O&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;system:masters/CN&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;dashboard
Getting CA Private Key
&lt;span class=&#34;c1&#34;&gt;# 签名，&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将上步的私钥、证书，创建为secret&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl create ns !$
kubectl create ns kubernetes-dashboard
namespace/kubernetes-dashboard created
   
[root@master ~]# kubectl create secret generic kubernetes-dashboard-certs --from-file=$HOME/certs -n kubernetes-dashboard
secret/kubernetes-dashboard-certs created
# 创建名称空间，并在其中创建secret，引用上步创建的私钥和证书
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用在线清单部署pod化的dashboard&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.4/aio/deploy/recommended.yaml
# yaml文件链接
# 应用前修改：
# 修改容器启动参数，加上刚刚创建的key和证书路径
# 修改service类型为Nodeport
   
[root@master ~]kubectl apply -f recommended.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看nodeport地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl get svc -n kubernetes-dashboard
NAME                        TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE
dashboard-metrics-scraper   ClusterIP   10.97.49.122   &amp;lt;none&amp;gt;        8000/TCP        9m57s
kubernetes-dashboard        NodePort    10.105.77.10   &amp;lt;none&amp;gt;        443:30717/TCP   9m58s
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部浏览器访问&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201124183239267.png&#34; alt=&#34;image-20201124183239267&#34;&gt;&lt;/p&gt;
&lt;p&gt;ps：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;dashboard运行为pod，其连接api-server用的账户就是serviceaccount类型，登陆dashboard界面用的也是该sa账户，登陆后权限，能看到的东西多少，就取决于该sa的权限，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	sa可以绑定不同的role来获得不同的权限，如内建的cluster-admin获得超级管理员权限；&lt;/p&gt;
&lt;h2 id=&#34;配置token认证&#34;&gt;配置token认证&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建sa账户dash-admin&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl create sa dash-admin -n kube-system
serviceaccount/dash-admin created
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绑定cluster-admin角色给sa账户dash-admin&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl create clusterrolebinding dash-admin --clusterrole=cluster-admin \
&amp;gt; --serviceaccount=kube-system:dash-admin
clusterrolebinding.rbac.authorization.k8s.io/dash-admin created
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取sa账户dash-admin对应的secrts&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@master ~]# kubectl get secret -n kube-system |grep dash-admin
dash-admin-token-wbdpl                           kubernetes.io/service-account-token   3      5m22s
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看secret中的token&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl describe secrets dash-admin-token-wbdpl -n kube-system 
Name:         dash-admin-token-wbdpl
Namespace:    kube-system
Labels:       &amp;lt;none&amp;gt;
Annotations:  kubernetes.io/service-account.name: dash-admin
              kubernetes.io/service-account.uid: aefbae96-2e41-11eb-8b3f-000c292d5d7c
   
Type:  kubernetes.io/service-account-token
   
Data
====
ca.crt:     1025 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoLWFkbWluLXRva2VuLXdiZHBsIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNXJ2aWNlLWFjY291bnQubmFtZSI6ImRhc2gtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJhZWZiYWU5Ni0yZTQxLTExZWItOGIzZi0wMDBjMjkyZDVkN2MiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06ZGFzaC1hZG1pbiJ9.IzI5BD6304jg7Ssq-Fq1DjcS0OWuaqjmuLLgGfib-KhHcOAGrEN8-alAZC_maIEqjFHjlXNQfxZ4ihh09zsEv2CBL7J6heFYX_ZAHtNhdoxpsO_
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入token&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201124184530312.png&#34; alt=&#34;image-20201124184530312&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置kubeconfig认证&#34;&gt;配置kubeconfig认证&lt;/h2&gt;
&lt;p&gt;​	相比于token，kubeconfig文件更易于保存、分发：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;set-cluster写入集群信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set-credentials写入sa账户的token信息&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;user用户的set-credentials是写入用户的：证书和密钥；&lt;/li&gt;
&lt;li&gt;sa用户的set-credentials是写入sa关联的secret的token信息：写入的是secret中的token字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set-context设置上下文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use-context设置默认使用的上下文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新创建一个sa账户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl create sa default-admin -n default
serviceaccount/default-admin created
[root@master ~]# kubectl create clusterrolebinding default-admin --clusterrole=admin \
&amp;gt; --serviceaccount=default:default-admin
clusterrolebinding.rbac.authorization.k8s.io/default-admin created
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set-cluster写入集群信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl config set-cluster kubernetes --embed-certs=true --server=&amp;quot;https://192.168.80.101:6443&amp;quot; --certificate-authority=/etc/kubernetes/pki/ca.crt --kubeconfig=./defautl-admin.kubeconfig
Cluster &amp;quot;kubernetes&amp;quot; set.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set-credentials写入sa账户的token信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl get secret |grep default-admin
default-admin-token-g64d2   kubernetes.io/service-account-token   3      4m31s
   
   
   
~]# token=$(kubectl get secret default-admin-token-g64d2 -o jsonpath={.data.token} |base64 -d)
   
   
   
   
[root@master ~]# kubectl config set-credentials default-admin --token=${token} --kubeconfig=./defautl-admin.kubeconfig 
User &amp;quot;default-admin&amp;quot; set.
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set-context设置上下文&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl config set-context default-admin --cluster=kubernetes --user=default-admin --kubeconfig=./defautl-admin.kubeconfig 
Context &amp;quot;default-admin&amp;quot; created.
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use-context设置默认使用的上下文&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl config use-context default-admin --kubeconfig=./defautl-admin.kubeconfig 
Switched to context &amp;quot;default-admin&amp;quot;.
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将该文件发送到客户端主机上，登陆时选择kubeconfig并选中此文件即可登陆，截图略；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;准入控制器&#34;&gt;准入控制器&lt;/h1&gt;
&lt;p&gt;准入控制器作用：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;经过了身份认证、权限鉴权、后，准入控制器会对写操作做拦截，并经过准入控制器检查，作用有：设置缺失字段为默认值；限制容器镜像必须来自某仓库；检查pod的资源需求是否超过限制；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;limitrange资源准入控制&#34;&gt;limitRange资源准入控制&lt;/h2&gt;
&lt;p&gt;​	定义pod中容器时，用户可以通过资源request和资源limits定义来限制容器可以使用的资源范围，&lt;/p&gt;
&lt;p&gt;​	但对于未定义，或忘记定义资源限制的容器，就有可能无限不断的消耗节点所在资源，造成影响，&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;因此，引入limitrange对象，对名称空间级别的对象，作用是：在每一个名称空间，设置一个limitrange对象，其可以定义运行在该ns中，每个容器所能使用的资源的下限、上限、未定义时的默认值！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	limitrange可以限制的资源有cpu、内存、存储，其中cpu，存储针对的是pod和其中的容器；存储主要针对的是pvc&lt;/p&gt;
&lt;p&gt;​	定义了limitrange之后，提交的创建对象的api请求，经过limitrange准入控制器检查，&lt;strong&gt;若其中定义的资源需求不匹配limitrange中定义的范围，就会被决绝，提交失败！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl explain limitrange
KIND:     LimitRange
VERSION:  v1

DESCRIPTION:
     LimitRange sets resource usage limits for each kind of resource in a
     Namespace.
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、创建limitrange&lt;/p&gt;
&lt;p&gt;​	定义了容器对，cpu需求的最大，最小，默认值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client limitrange]# vim limitrange1.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client limitrange]# kubectl apply -f limitrange1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;limitrange/cpu-limit created&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client limitrange]# kubectl get limitrange -o wide&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NAME        CREATED AT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cpu-limit   2020-11-24T11:32:22Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client limitrange]# cat limitrange1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;LimitRange&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cpu-limit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1000m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1000m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;500m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;2000m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxLimitRequestRatio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3、创建容器，未定义资源需求，查看其默认值是否是limitrange中定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client limitrange]# kubectl run limit-pod1 --image=ikubernetes/myapp:v1 \
&amp;gt; --restart=Never
pod/limit-pod1 created

# 没定义资源需求的容器，自动继承了该名称空间下limitrange的设置
[root@client limitrange]# kubectl get pods limit-pod1 -o yaml
...
  containers:
  - image: ikubernetes/myapp:v1
    imagePullPolicy: IfNotPresent
    name: limit-pod1
    resources:
      limits:
        cpu: &amp;quot;1&amp;quot;
      requests:
        cpu: &amp;quot;1&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、创建容器，资源需求大于最大值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client limitrange&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl run limit-pod2 --image=ikubernetes/myapp:v1 --restart=Never --requests=&amp;#39;cpu=400m&amp;#39;&lt;/span&gt;
Error from server &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Forbidden&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: pods &lt;span class=&#34;s2&#34;&gt;&amp;#34;limit-pod2&amp;#34;&lt;/span&gt; is forbidden: minimum cpu usage per Container is 500m, but request is 400m.

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;5、创建容器，资源需求小于最小值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client limitrange&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl run limit-pod3 --image=ikubernetes/myapp:v1 --restart=Never --requests=&amp;#39;cpu=3000m&amp;#39;&lt;/span&gt;
The Pod &lt;span class=&#34;s2&#34;&gt;&amp;#34;limit-pod3&amp;#34;&lt;/span&gt; is invalid: spec.containers&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.resources.requests: Invalid value: &lt;span class=&#34;s2&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;: must be less than or equal to cpu limit
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到，定义pod时，给容器设置的资源需求，无论是大于还是小于limitrange中设置的数值，都会在经由limitrange准入控制器检查时，检查不通过，而被拒绝创建pod；&lt;/p&gt;
&lt;h2 id=&#34;resourcequota资源准入控制&#34;&gt;resourceQuota资源准入控制&lt;/h2&gt;
&lt;p&gt;​	limitrange只能设置单个pod中容器所能使用的上下限，但某名称空间的用户却可以通过堆积数量的方式来提高该名称空间整体的资源占用量；一个ns对应于一个租户情况下，必须要有机制能限制该租户的资源使用，&lt;strong&gt;于是引入了resourceQuota对象&lt;/strong&gt;；可以设置某名称空间下，所能使用的资源总量的上下限，以及各类资源对象的数量；&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resourceQuota设置在名称空间级别&lt;/li&gt;
&lt;li&gt;限制该ns中各类对象所能创建的数量，如pod总数，servive总数&lt;/li&gt;
&lt;li&gt;限制该ns中所有pod能使用的cpu上下限，内存上下限，pvc使用数，pv使用总存储等&lt;/li&gt;
&lt;li&gt;定义了resourceQouta对象的名称空间，向其提交的pod，其中容器必须定义resource字段，或有limitrange可以继承默认值；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	&lt;strong&gt;多租户环境中，一个ns名称空间一般对应一个租户或一个项目，多租户的各个维度都需要在一个集群里实现隔离，避免干扰&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;namespace实现名称的隔离，即不同ns中可以创建相同名称的相同类型资源，而互不影响；&lt;/li&gt;
&lt;li&gt;cni和网络插件实现网络的隔离，不同租户之间网络隔离借助cni和网络插件实现；&lt;/li&gt;
&lt;li&gt;limitrange设置在ns名称空间级别，为该空间的所有pod设置默认的资源限制、下限、上限；&lt;/li&gt;
&lt;li&gt;resourceQuota设置在ns名称空间级别，设置了该空间的所有资源能使用的资源之和的上限，下限，以及各类资源所能创建的数量，如最多创建100个deployment控制器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl explain resourceQuota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;KIND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ResourceQuota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ResourceQuota sets aggregate quota restrictions enforced per namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl explain resourceQuota.spec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;KIND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ResourceQuota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;RESOURCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec &amp;lt;Object&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Spec defines the desired quota.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ResourceQuotaSpec defines the desired hard limits to enforce for Quota.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、常用定义字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;cpu&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;requests.cpu

memory&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;requests.memory

limits.cpu

limits.memory

requests.storage 所有pvc需要的存储总量

persistentvolumeclaims 可以创建的pvc总数

---
对象数量限制

count/deployment.apps
count/services
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3、创建resourceQuota对象&lt;/p&gt;
&lt;p&gt;​	yaml定义：定义了cpu和内存的上限为2核，2G，deployment控制器最多1个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client resourcesQuota]# cat demo-ns-resourceQuota.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ResourceQuota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demo-quota&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests.cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests.memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits.cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits.memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;2Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;count/deployments.apps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;count/deployments.extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;persistentvolumeclaims&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	查看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client resourcesQuota]# kubectl create ns demo
namespace/demo created


[root@client resourcesQuota]# kubectl get resourceQuota -n demo
NAME         CREATED AT
demo-quota   2020-11-25T07:56:17Z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	查看现在resourceQuota状态，使用部分还为0&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client resourcesQuota]# kubectl describe resourceQuota -n demo 
Name:                         demo-quota
Namespace:                    demo
Resource                      Used  Hard
--------                      ----  ----
count/deployments.apps        0     1
count/deployments.extensions  0     1
limits.cpu                    0     2
limits.memory                 0     2Gi
persistentvolumeclaims        0     2
pods                          0     3
requests.cpu                  0     1
requests.memory               0     1Gi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	创建一个的deployment控制器：看到，使用部分已经有值，为副本数2个pod之和，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client resourcesQuota]# kubectl run demo-dep1 --image=ikubernetes/myapp:v1 --replicas=2 --namespace=demo --requests=&#39;cpu=200m,memory=256Mi&#39; --limits=&#39;cpu=500m,memory=528Mi&#39;
kubectl run --generator=deployment/apps.v1beta1 is DEPRECATED and will be removed in a future version. Use kubectl create instead.
deployment.apps/demo-dep1 created

---
[root@client resourcesQuota]# kubectl describe resourceQuota -n demo 
Name:                         demo-quota
Namespace:                    demo
Resource                      Used    Hard
--------                      ----    ----
count/deployments.apps        1       1
count/deployments.extensions  0       1
limits.cpu                    1       2
limits.memory                 1056Mi  2Gi
persistentvolumeclaims        0       2
pods                          2       3
requests.cpu                  400m    1
requests.memory               512Mi   1Gi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	扩容pod，最多也只能扩容到3个，为Quota中定义的上限；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client resourcesQuota]# kubectl scale deploy demo-dep1 -n demo --replicas=4
deployment.extensions/demo-dep1 scaled
[root@client resourcesQuota]# kubectl get pods -n demo
NAME                        READY   STATUS    RESTARTS   AGE
demo-dep1-894bc78f5-mvzgg   1/1     Running   0          3m17s
demo-dep1-894bc78f5-mxmp6   1/1     Running   0          11s
demo-dep1-894bc78f5-p9x8r   1/1     Running   0          3m17s
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;podsecuritypolicy&#34;&gt;podSecurityPolicy&lt;/h2&gt;
&lt;p&gt;​	podSecurityPolicy简称psp，为集群级别资源：是默认未启用的准入控制插件，因启动后，但没定义psp对象的情况，会禁止在集群中创建任务pod对象&lt;/p&gt;
&lt;p&gt;​	介绍：https://kubernetes.io/docs/concepts/policy/pod-security-policy/&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client resourcesQuota]# kubectl explain podSecurityPolicy.spec&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;KIND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PodSecurityPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;RESOURCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec &amp;lt;Object&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;spec defines the policy enforced.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;PodSecurityPolicySpec defines the policy enforced. Deprecated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PodSecurityPolicySpec from policy API Group instead.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;作用：用于检查用户是否有提交创建特权pod的权限&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据需要定义psp对象，&lt;/li&gt;
&lt;li&gt;在api-server中启用psp，（默认禁用）&lt;/li&gt;
&lt;li&gt;定义role或clusterrole，在角色中引用需要的psp对象&lt;/li&gt;
&lt;li&gt;采用rolebinding或clusterrolebinding将引用了psp对象的角色关联到user或sa账户&lt;/li&gt;
&lt;li&gt;之后，user或sa就拥有了对应psp对象中定义的权限，&lt;/li&gt;
&lt;li&gt;user或sa提交创建pod时，会经过psp控制器检查，若申请创建的是&lt;strong&gt;具有特权的pod&lt;/strong&gt;（能使用宿主机节点网络名称空间、ipc、能使用什么卷类型、能使用的端口范围、等即为特权pod），就检查其引用的psp对象有无对应的特权权限定义，有就通过，否则就失败&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;小结&#34;&gt;小结：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;api-server上：用户身份认证、用户鉴权、用户写请求准入控制检查三步的大体工作流程和各自的功用；&lt;/li&gt;
&lt;li&gt;k8s两类账户：人类用户user（group）、pod进程用户serviceaccount
&lt;ul&gt;
&lt;li&gt;身份认证：user配置身份信息时，&lt;strong&gt;需要有私钥，ca颁发证书&lt;/strong&gt;并注入到客户端配置文件kubeconfig中；&lt;/li&gt;
&lt;li&gt;身份认证：sa配置身份信息时，需要先创建sa账户，&lt;strong&gt;系统随机自动为其创建同名secret对象，其包含了token信息&lt;/strong&gt;用于身份验证，可注入到客户端配置kubeconfig文件中；&lt;/li&gt;
&lt;li&gt;权限赋予：【无论是user（group）还是sa用户，赋予权限都需要借助rolebinding或clusterrolebinding将用户账户绑定到某个已经存在的角色上，角色为操作动作和作用对象的集合，用户为操作主体】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k8s集群之间各组件，安全通信的实现：客户端和服务端的双向tls认证、加密通信；&lt;/li&gt;
&lt;li&gt;tls bootstraping机制和流程&lt;/li&gt;
&lt;li&gt;RBAC授权机制：
&lt;ul&gt;
&lt;li&gt;rbac为k8s默认的授权机制，由第二步的：用户鉴权部分的rbac插件实现&lt;/li&gt;
&lt;li&gt;role和clusterrole&lt;/li&gt;
&lt;li&gt;rolebinding和clusterrolebinding&lt;/li&gt;
&lt;li&gt;聚合型clusterrole，通过将其他多个clusterrole灵活组合的方式，实现灵活定义clusterrole&lt;/li&gt;
&lt;li&gt;系统内建的clusterrole，供各个组件使用，或供tls bootstraping期间使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;k8s dashboard
&lt;ul&gt;
&lt;li&gt;pod运行的dashborad的清单部署过程&lt;/li&gt;
&lt;li&gt;因为dashborad是pod，其身份类型为sa类型，验证其身份就是用关联到sa账户中的secrt对象中的token，&lt;strong&gt;而不是user的私钥和证书的方式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;登陆dashborad的2种方式：token或打入了token的kubeconfig配置文件（本质是一样的）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;准入控制器：检查流程的最后一步，
&lt;ul&gt;
&lt;li&gt;只对写请求的进行拦截检查，有：补全默认字段信息、检查单个pod的资源限制、检查请求创建资源所在的ns的总量资源限制等作用；&lt;/li&gt;
&lt;li&gt;准入控制器由多个插件实现，串行检查，不像前2步，需要所有准入控制器都通过才可以最终通过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/" term="k8s认证授权准入控制" label="k8s认证授权准入控制" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之statefulset控制器</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bstatefulset%E6%8E%A7%E5%88%B6%E5%99%A8/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bstatefulset%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
            <updated>2020-12-01T15:35:35&#43;08:00</updated>
            <published>2020-11-11T14:34:16&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之statefulset控制器</summary>
            
                <content type="html">&lt;h1 id=&#34;statefulset概述&#34;&gt;statefulset概述&lt;/h1&gt;
&lt;h2 id=&#34;stateful和stateless&#34;&gt;stateful和stateless&lt;/h2&gt;
&lt;p&gt;”状态“&lt;/p&gt;
&lt;p&gt;​	进程的时间属性，即随之时间的推进，进程处理的前后请求有无相关性，前面的请求处理对后续的请求处理有无影响，有影响的叫有状态应用；没有影响的前后的请求处理都是独立的叫无状态应用；&lt;/p&gt;
&lt;p&gt;对于有状态的应用，k8s用statefulset控制器进行管理：&lt;strong&gt;保证了每个pod都由一个专用索引、有序部署、有序停止、固定的标识符、固定的存储卷，即便pod被重构后，各种特性也和之前保持一致；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;statefulset的特性&#34;&gt;statefulset的特性&lt;/h2&gt;
&lt;p&gt;statefulset的基础构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;headless service：用于解析各个pod的地址；&lt;/li&gt;
&lt;li&gt;statefulset：管理pod的生命周期；&lt;/li&gt;
&lt;li&gt;volumeClaimTemplate：基于静态或动态pv供给的方式绑定pv，给每一个pod&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个pod都有固定且唯一的标号&lt;/li&gt;
&lt;li&gt;都有一个pvc并绑定一个pv，重构后也不变&lt;/li&gt;
&lt;li&gt;pod编号为数字结尾，pod启动是由小到大依次启动，停止则是反过来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201122154841425.png&#34; alt=&#34;image-20201122154841425&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;statefulset基础应用&#34;&gt;statefulset基础应用&lt;/h1&gt;
&lt;h2 id=&#34;创建statefulset对象&#34;&gt;创建statefulset对象&lt;/h2&gt;
&lt;p&gt;1、创建pv对象&lt;/p&gt;
&lt;p&gt;​	创建2个pv对象，后端存储是nfs，没有动态pv供给能力，但都定义在state存储类中，由后面statefulset的volumeClaimTemplates引用；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client statefulset]# cat 1pv.yaml 2pv.yaml 
apiVersion: v1
kind: PersistentVolume
metadata:
 name: state-pv1
spec:
 capacity: 
  storage: 1Gi
 accessModes:
 - ReadWriteMany
 storageClassName: state
 nfs:
  path: /pv1
  server: 192.168.80.101
apiVersion: v1
kind: PersistentVolume
metadata:
 name: state-pv2
spec:
 capacity: 
  storage: 1Gi
 accessModes:
 - ReadWriteMany
 storageClassName: state
 nfs:
  path: /pv2
  server: 192.168.80.101
  
  [root@client statefulset]# kubectl get pv
NAME        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS      CLAIM   STORAGECLASS   REASON   AGE
state-pv1   1Gi        RWX            Retain           Available           state                   8s
state-pv2   1Gi        RWX            Retain           Available           state                   34s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、定义statefulset对象并创建&lt;/p&gt;
&lt;p&gt;​	定义了headless的service，然后定义了statefulset控制器对象，在volumeClaimTemplates中引用了名为state的存储类，该类为上步定义的2个nfs的pv&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client statefulset]# cat statefulset-demo.yaml 
apiVersion: v1
kind: Service
metadata:
 name: svc-state
spec:
 ports:
 - port: 80
   name: web
 clusterIP: None
 selector:
  app: app-state
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
 name: state-stateset
spec:
 serviceName: svc-state
 replicas: 2
 selector:
  matchLabels:
   app: app-state
 template:
  metadata:
   labels:
    app: app-state
  spec:
   containers:
   - name: myapp
     image: ikubernetes/myapp:v5
     ports:
     - containerPort: 80
       name: web
     volumeMounts:
     - name: myappdata
       mountPath: /usr/share/nginx/html
 volumeClaimTemplates:
  - metadata:
     name: myappdata
    spec:
     accessModes: 
     - ReadWriteMany
     storageClassName: &amp;quot;state&amp;quot;
     resources:
      requests:
       storage: 1Gi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看&lt;/p&gt;
&lt;p&gt;​	查看statefulset控制器的events事件，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Events:
  Type    Reason            Age   From                    Message
  ----    ------            ----  ----                    -------
  Normal  SuccessfulCreate  3s    statefulset-controller  create Claim myappdata-state-stateset-0 Pod state-stateset-0 in StatefulSet state-stateset success
  Normal  SuccessfulCreate  3s    statefulset-controller  create Pod state-stateset-0 in StatefulSet state-stateset successful

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、问题？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Warning  FailedMount  22s  kubelet, node1  MountVolume.SetUp failed for volume &amp;quot;state-pv2&amp;quot; : mount failed: exit status 32
创建pod时卡住，查看pod事件为绑定卷阶段出错了，
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;固定的pod标识符和存储卷&#34;&gt;固定的pod标识符和存储卷&lt;/h2&gt;
&lt;p&gt;​	若statefulset创建成功，观察到的现象应该是：依次启动或停止；重建pod后，其主机名、存储卷pv、dns的解析记录cname都不变，其中dns解析的是cname保持不变，但具体到pod的ip还是会变；&lt;/p&gt;
&lt;h1 id=&#34;statefulset资源扩缩容&#34;&gt;statefulset资源扩缩容&lt;/h1&gt;
&lt;p&gt;​	statefulset扩容pod时，和deployment控制器类似，采用kubectl scale 加 --replicas=数量N即可，或者修改yaml文件再重新apply也可以；&lt;/p&gt;
&lt;p&gt;​	statefulset的扩缩容，也都是按照顺序，串行执行的；&lt;/p&gt;
&lt;h1 id=&#34;statefulset资源更新&#34;&gt;statefulset资源更新&lt;/h1&gt;
&lt;h2 id=&#34;滚动更新&#34;&gt;滚动更新&lt;/h2&gt;
&lt;p&gt;kubectl set image statefulset state_name image_name=image_new_version&lt;/p&gt;
&lt;p&gt;滚动更新也是按照顺序来的&lt;/p&gt;
&lt;p&gt;设置字段：[root@client k8s_yaml]# kubectl explain statefulset.spec.updateStrategy&lt;/p&gt;
&lt;h2 id=&#34;暂存更新&#34;&gt;暂存更新&lt;/h2&gt;
&lt;p&gt;​	假设statefulset设置的副本数为3，那么其pod编号就是xx-0，xx-1，xx-2，所谓暂存更新就是将paritions数值设置为和副本数相等，即比pod编号大1，partions分区的意义为大于及等级该数值的pod会被更新；（需要先set image或直接修改yaml文件修改镜像的版本号）&lt;/p&gt;
&lt;p&gt;​	默认partition数值是0，即更新了镜像版本后，pod会立刻开始逐个按照次序更新&lt;/p&gt;
&lt;p&gt;​	如果将partition数值设置的一开始就和副本数一样大，那么即便更改了镜像版本，pod也不会开始更新，即暂存更新&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl explain statefulset.spec.updateStrategy.rollingUpdate
KIND:     StatefulSet
VERSION:  apps/v1

RESOURCE: rollingUpdate &amp;lt;Object&amp;gt;

DESCRIPTION:
     RollingUpdate is used to communicate parameters when Type is
     RollingUpdateStatefulSetStrategyType.

     RollingUpdateStatefulSetStrategy is used to communicate parameter for
     RollingUpdateStatefulSetStrategyType.

FIELDS:
   partition	&amp;lt;integer&amp;gt;
     Partition indicates the ordinal at which the StatefulSet should be
     partitioned. Default value is 0.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;金丝雀部署&#34;&gt;金丝雀部署&lt;/h2&gt;
&lt;p&gt;​	在上一步设置了partition分区数值的基础之上，逐步调小分区数的值，假设调整到了2，那么编码为xx-2的pod会开始进行更新；&lt;/p&gt;
&lt;h2 id=&#34;分阶段更新&#34;&gt;分阶段更新&lt;/h2&gt;
&lt;p&gt;​	和金丝雀部署更新类似，即分阶段修改分区数的值，直到0，假设pod有6个，编码分别从0-5，可以分3次将分区数设置为5、3、0，那么statefulset控制器会控制pod，进行3次更新，更新编码5、更新编码4，3、更新剩下的2，1，0；直到全部pod更新完毕；&lt;/p&gt;
&lt;p&gt;ps：&lt;strong&gt;通常statefulset无法真正实现有状态应用pod的管理，因为不同类型的应用所需的运维操作不同，一般需要为不同的应用创建不同的operator，operator是对statefulset的进一步封装；一种operator只能管理一种有状态应用，如mysql、redis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;红帽对operator介绍：https://www.redhat.com/en/topics/containers/what-is-a-kubernetes-operator&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/statefulset/" term="statefulset" label="statefulset" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之configmap与secret</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bconfigmap%E4%B8%8Esecret/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bconfigmap%E4%B8%8Esecret/</id>
            <updated>2020-12-01T15:34:24&#43;08:00</updated>
            <published>2020-11-11T14:33:57&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之configmap与secret</summary>
            
                <content type="html">&lt;h1 id=&#34;容器化应用配置方式&#34;&gt;容器化应用配置方式&lt;/h1&gt;
&lt;p&gt;​	configMap，secret是k8s上2种特殊的存储卷，功能：被pod挂载，为pod提供非敏感和敏感的配置信息或文件；&lt;/p&gt;
&lt;p&gt;​	针对容器化容器，其配置方式通常有以下5种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命令行传参：启动容器时，docker run image-name [command...] [args..]&lt;/li&gt;
&lt;li&gt;环境变量传参：启动容器时，docker run xx -e var1=v1 -e var2=v2 ...&lt;/li&gt;
&lt;li&gt;配置文件打入镜像：不像命令行和环境变量传参，直接传递较为简单的kv类型的配置信息，可以传递整个文件&lt;/li&gt;
&lt;li&gt;借助普通存储卷挂在节点上预先放置的配置文件：可传递整个文件，但考虑到pod的动态性，需要集群中每个节点都放置一份配置文件显然不够灵活&lt;/li&gt;
&lt;li&gt;k8s的特殊卷：configmap和secret：借助这2种存储卷，可以将配置文件，证书，密钥等敏感信息都创建为标准k8s资源，从而在pod中引用，以存储卷方式引用，或envFrom字段以环境变量方式引入&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;命令行参数配置应用&#34;&gt;命令行参数配置应用&lt;/h1&gt;
&lt;h2 id=&#34;dockerentrypoint和cmd&#34;&gt;docker：entrypoint和cmd&lt;/h2&gt;
&lt;p&gt;​	制作docker镜像时，entrypoint分别代表，启动为容器时要运行的程序和其参数；&lt;/p&gt;
&lt;h2 id=&#34;k8scommand和args&#34;&gt;k8s：command和args&lt;/h2&gt;
&lt;p&gt;​	定义pod中containers字段时，其中command和args分别代表，传递给容器的，要其运行的程序和其参数；可覆盖镜像中写好的程序和程序参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖关系图示：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pod中的command和args都定义时，分别覆盖镜像中的entrypoint和cmd&lt;/li&gt;
&lt;li&gt;pod中只定义了commnd时，覆盖镜像中的entrypoint和cmd，只运行定义的command&lt;/li&gt;
&lt;li&gt;pod中只定义了args时，将覆盖镜像中的cmd参数，args作为entrypoint的参数&lt;/li&gt;
&lt;li&gt;pod中的command和args都未定义时，采用镜像中默认的entrypoint和cmd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201119154855731.png&#34; alt=&#34;image-20201119154855731&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;pod中定义了command和args&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
 name: pod1
spec:
 containers:
 - name: b1
   image: busybox
   command: 
   - httpd
   args: 
   - -f

httpd -f 覆盖了busybox镜像中定义的/bin/sh -c 

[root@client pod]# kubectl exec pod1 -c b1 -i -t -- /bin/sh -il
/ # ps -ef
PID   USER     TIME  COMMAND
    1 root      0:00 httpd -f
   35 root      0:00 /bin/sh -il
   39 root      0:00 ps -ef

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;pod中定义了args&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
 name: pod1
spec:
 containers:
 - name: b1
   image: busybox
   args: 
   - httpd
   - -f

传递的args，作为busybox镜像的entrypoint程序的参数 /bin/sh -c httpd -f
相当于在shell窗口，执行了httpd -f命令，效果和上面的pod相当

[root@client pod]# kubectl exec pod2 -i -t -- /bin/sh -il
/ # ps -ef
PID   USER     TIME  COMMAND
    1 root      0:00 httpd -f
    5 root      0:00 /bin/sh -il
    9 root      0:00 ps -ef
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;环境变量配置应用&#34;&gt;环境变量配置应用&lt;/h1&gt;
&lt;p&gt;​	定义pod中容器时，可以通过env字段，向其中传递环境变量，&lt;strong&gt;环境变量可以被直接引用，也可以通过entrypoint脚本，将其传递到应用的配置文件中，尤其适合云原生应用在容器中执行；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client pod]# kubectl explain pods.spec.containers.env.
KIND:     Pod
VERSION:  v1

   name	&amp;lt;string&amp;gt; -required-
     Name of the environment variable. Must be a C_IDENTIFIER.

   value	&amp;lt;string&amp;gt;
     Variable references $(VAR_NAME) are expanded using the previous defined
     environment variables in the container and any service environment
     variables. If a variable cannot be resolved, the reference in the input
     string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
     double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
     regardless of whether the variable exists or not. Defaults to &amp;quot;&amp;quot;.

   valueFrom	&amp;lt;Object&amp;gt;
     Source for the environment variable&#39;s value. Cannot be used if value is not
     empty.

env的值，是对象，列表；
变量名，必选
value valuefrom，二选一
value 直接给定变量值，
valuefrom是选择从别处引如变量，共四类：configmap，secret，或pod的属性信息，或资源配额的上限和下限，见下方
---
[root@client pod]# kubectl explain pods.spec.containers.env.valueFrom.

FIELDS:
   configMapKeyRef	&amp;lt;Object&amp;gt;
     Selects a key of a ConfigMap.

   fieldRef	&amp;lt;Object&amp;gt;
     Selects a field of the pod: supports metadata.name, metadata.namespace,
     metadata.labels, metadata.annotations, spec.nodeName,
     spec.serviceAccountName, status.hostIP, status.podIP.

   resourceFieldRef	&amp;lt;Object&amp;gt;
     Selects a resource of the container: only resources limits and requests
     (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu,
     requests.memory and requests.ephemeral-storage) are currently supported.

   secretKeyRef	&amp;lt;Object&amp;gt;
     Selects a key of a secret in the pod&#39;s namespace

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、定义pod文件&lt;/p&gt;
&lt;p&gt;​	采用直接给定变量值，和引用元数据信息变量2种方式；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client pod]# cat pod-env.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: pod-env
spec:
 containers:
 - name: busybox
   image: busybox
   command: 
   - httpd
   args:
   - -f
   env:
   - name: k1
     value: v1
   - name: node_name
     valueFrom:
      fieldRef:
       fieldPath: spec.nodeName
   - name: node_ip
     valueFrom:
      fieldRef:
       fieldPath: status.hostIP
   - name: node_ns
     valueFrom:
      fieldRef:
       fieldPath: metadata.namespace

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、打印pod中容器中的环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client pod]# kubectl exec pod-env printenv
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=pod-env
k1=v1
node_name=node2
node_ip=192.168.80.107
node_ns=default
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、环境变量传参的缺陷：&lt;/p&gt;
&lt;p&gt;​	是在运行为pod后，根据yaml中定义，将环境变量注入到容器中，即，容器运行中，环境变量无法动态修改；但configmap可以；&lt;/p&gt;
&lt;h1 id=&#34;configmap配置应用&#34;&gt;configmap配置应用&lt;/h1&gt;
&lt;h2 id=&#34;configmap优势&#34;&gt;configmap优势&lt;/h2&gt;
&lt;p&gt;​	对于微服务化的分布式应用，大量的应用模块需要频繁的配置，传统的配置文件方式不适用，&lt;strong&gt;配置和应用代码耦合度高，改配置有时会修改代码，例如；多套环境下，就需要修改代码引用不同的配置文件，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	configmap和secret解耦了配置和应用代码，&lt;strong&gt;允许在多套环境中，定义同名的configmap资源，但其内部内容不同，从而pod应用中利用configmap名称调用的configmap，无需做任何修改；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	configmap对象，把配置数据，以键值对方式存储其中，pod或其他k8s组件，可以以&lt;strong&gt;环境变量、存储卷挂载&lt;/strong&gt;，2种方式引用；&lt;/p&gt;
&lt;h2 id=&#34;configmap创建&#34;&gt;configmap创建&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl create confimap CONFIG_NAME DADA_SOURCE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;data_source是指将要存储到configmap中的数据源，存储形式为键值对，类型有：1、命令行给定kv对，2、指定包含数据的文件，3、指定包含数据文件的目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl create configmap -h
Create a configmap based on a file, directory, or specified literal value. 

A single configmap may package one or more key/value pairs. 

When creating a configmap based on a file, the key will default to the basename of the file, and the value will default
to the file content.  If the basename is an invalid key, you may specify an alternate key. 

When creating a configmap based on a directory, each file whose basename is a valid key in the directory will be
packaged into the configmap.  Any directory entries except regular files are ignored (e.g. subdirectories, symlinks,
devices, pipes, etc).

Aliases:
configmap, cm
...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;基于命令创建&#34;&gt;基于命令创建&lt;/h3&gt;
&lt;p&gt;命令行方式，适合量比较少的kv数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Create a new configmap named my-config with key1=config1 and key2=config2
  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1，创建&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2&lt;/span&gt;
configmap/my-config created

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2，查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get cm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NAME        DATA   AGE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-config   2      6s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get cm -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-11-20T02:31:04Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;428496&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/api/v1/namespaces/default/configmaps/my-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;6fea902e-2ad8-11eb-8f71-000c292d5d7c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;基于文件创建&#34;&gt;基于文件创建&lt;/h3&gt;
&lt;p&gt;基于文件创建的方式，configmap中的key默认为文件路径的basename，也可以手动指定其他的值做key，其值就是整个文件的内容，使用于整个配置文件，如nginx.conf&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # Create a new configmap named my-config from the key=value pairs in the file
  kubectl create configmap my-config --from-file=path/to/bar

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl create configmap cm1 --from-file=/etc/fstab 
configmap/cm1 created

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get cm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NAME        DATA   AGE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm1         1      8s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-config   2      15m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get cm cm1 -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fstab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;|2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# /etc/fstab&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Created by anaconda on Sat Aug  8 11:58:02 2020&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Accessible filesystems, by reference, are maintained under &amp;#39;/dev/disk&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;UUID=046ebf1d-861c-42bb-a48f-9641dfc9afec /                       xfs     defaults        0 0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;UUID=686c38ff-6d1b-40cd-9baa-9860097e81ec /boot                   xfs     defaults        0 0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-11-20T02:46:50Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;429926&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/api/v1/namespaces/default/configmaps/cm1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;a4091ae0-2ada-11eb-8f71-000c292d5d7c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;基于目录创建&#34;&gt;基于目录创建&lt;/h3&gt;
&lt;p&gt;​	将所有配置文件放在一个目录，configmap还可以通过--from-file=/path/to/dir来指定一整个目录，一下子为其下包含所有文件，都创建为一个键值对；&lt;/p&gt;
&lt;p&gt;​	实际中，方便一次用一个configmap包含一批配置文件&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; # Create a new configmap named my-config based on folder bar
  kubectl create configmap my-config --from-file=path/to/bar

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、创建&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# mkdir /cmdir/&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# echo 1.txt &amp;gt;&amp;gt; /cmdir/1.txt&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# echo 3.txt &amp;gt;&amp;gt; /cmdir/3.txt&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# echo 2.txt &amp;gt;&amp;gt; /cmdir/2.txt&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# ll /cmdir/&lt;/span&gt;
total &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; 10:54 1.txt
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; 10:55 2.txt
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; 10:55 3.txt


&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@client ~&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#   kubectl create configmap cm2 --from-file=/cmdir/&lt;/span&gt;
configmap/cm2 created
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get cm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NAME        DATA   AGE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm1         1      9m39s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm2         3      2s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-config   2      25m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client ~]# kubectl get cm cm2 -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;1.txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;2.txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;3.txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3.&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;creationTimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ld&#34;&gt;2020-11-20T02:56:27Z&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;430797&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/api/v1/namespaces/default/configmaps/cm2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;fb9a18b2-2adb-11eb-8f71-000c292d5d7c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;使用清单创建&#34;&gt;使用清单创建&lt;/h3&gt;
&lt;p&gt;​	使用清单创建，使用简单的kv类型数据，若数据源来自文件，或目录，倒不如命令行来的直接，&lt;strong&gt;为方便保存，可用命令行创建后，用get cmName -o yaml 输出为yaml文件，保存待用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;code&gt;[root@client cm]# kubectl get cm cm1 -o yaml &amp;gt; cm1.yaml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# cat cm3.yaml 
apiVersion: v1
kind: ConfigMap
metadata:
 name: cm3
data:
 k3: v3
 k4: v4


[root@client cm]# kubectl get cm
NAME        DATA   AGE
cm1         1      30m
cm2         3      21m
cm3         2      3s
my-config   2      46m
[root@client cm]# kubectl get cm cm3 -o yaml
apiVersion: v1
data:
  k3: v3
  k4: v4
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {&amp;quot;apiVersion&amp;quot;:&amp;quot;v1&amp;quot;,&amp;quot;data&amp;quot;:{&amp;quot;k3&amp;quot;:&amp;quot;v3&amp;quot;,&amp;quot;k4&amp;quot;:&amp;quot;v4&amp;quot;},&amp;quot;kind&amp;quot;:&amp;quot;ConfigMap&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;cm3&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;default&amp;quot;}}
  creationTimestamp: 2020-11-20T03:17:33Z
  name: cm3
  namespace: default
  resourceVersion: &amp;quot;432712&amp;quot;
  selfLink: /api/v1/namespaces/default/configmaps/cm3
  uid: ee714da9-2ade-11eb-8f71-000c292d5d7c
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configmap使用&#34;&gt;configmap使用&lt;/h2&gt;
&lt;p&gt;​	configMpa在pod中使用方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;There are four different ways that you can use a ConfigMap to configure a container inside a Pod:

Inside a container command and args
Environment variables for a container
Add a file in read-only volume, for the application to read
Write code to run inside the Pod that uses the Kubernetes API to read a ConfigMap
	第4种方式，支持动态更新configmap和跨ns引用configmap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	configMap配置好后，被pod引用方式：1、通过环境变量&lt;code&gt;pods.spec.containers.env.valueFrom.configMapKeyRef&lt;/code&gt;引用；2、通过卷挂载的方式引用；&lt;/p&gt;
&lt;h3 id=&#34;向pod环境变量传递configmap键值对&#34;&gt;向pod环境变量传递configmap键值对&lt;/h3&gt;
&lt;p&gt;定义cm，和pod&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# cat pod-with-cm.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpd_port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpd_log_level&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-vv&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-with-cm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;b1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/bin/httpd&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;$(port)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;$(log_level)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMapKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpd_port&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;log_level&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;valueFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMapKeyRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpd_log_level&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;容器启动参数引用了环境变量；&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod中定义的环境变量，引用了cm-busybox这个cm中的key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-busybox中需事先定义好对应的key&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看，可以看到，变量已经被正常传递给pod的容器中进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# kubectl exec pod-with-cm -- ps -ef
PID   USER     TIME  COMMAND
    1 root      0:00 /bin/httpd -f -p 8080 -vv
    5 root      0:00 ps -ef

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;envfrom批量导入configmap中所有键&#34;&gt;envfrom批量导入configmap中所有键&lt;/h3&gt;
&lt;p&gt;​	采用configMapKeyRef一个个引用confimap中定义的键，针对大量键存在时，效率底下，因此可以用envFrom字段，在其中引用configmMapRef，一次导入configmap中所有的key，且可以导入多个configmap一次性，语法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# kubectl explain pods.spec.containers.envFrom.configMapRef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;KIND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;RESOURCE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;configMapRef &amp;lt;Object&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;The ConfigMap to select from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigMapEnvSource selects a ConfigMap to populate the environment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;variables with. The contents of the target ConfigMap&amp;#39;s Data field will&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;represent the key-value pairs as environment variables.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;1、编写yaml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@client cm]# cat pod-with-cm.yaml 
apiVersion: v1
kind: ConfigMap
metadata:
 name: cm-busybox
data:
 httpd_port: &amp;quot;8080&amp;quot;
 httpd_log_level: &amp;quot;-vv&amp;quot;
---
apiVersion: v1
kind: Pod
metadata:
 name: pod-with-cm
spec:
 containers:
 - name: b1
   image: busybox
   command: 
   - /bin/httpd
   args:
   - -f
   - -p
   - $(httpd_port)
   - $(httpd_log_level)
   envFrom:
   - configMapRef:
      name: cm-busybox
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看容器中环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^C[root@client cm]# kubectl exec pod-with-cm -- printenv
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=pod-with-cm
httpd_log_level=-vv
httpd_port=8080

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;configmap以挂载卷使用&#34;&gt;configmap以挂载卷使用&lt;/h3&gt;
&lt;p&gt;​	cm中不仅可以存储一般的kv类型的值，也可以存储整个文件的内容，适用于为pod中容器提供配置文件；&lt;strong&gt;其存储方式也是键值，键是文件名，值是整个文件内容；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义configmap，其中引用一个或多个配置文件，kubectl explain cm.data&lt;/li&gt;
&lt;li&gt;volumes字段引用上步定义好的cm名称， kubectl explain pods.spec.volumes&lt;/li&gt;
&lt;li&gt;容器中引用上步定义好的volumes名称，kubectl explain pods.spec.containers.volumeMounts&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1、挂载cm中所有文件&lt;/p&gt;
&lt;p&gt;​	创建3个文件，模拟3个nginx的虚拟主机的配置文件，默认情况下，引用的confimap中所有的文件都会被挂载到mountPath目录下；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# mkdir /tmp/nginx_conf_dir/

[root@client cm]# echo host1.conf &amp;gt; /tmp/nginx_conf_dir/host1.conf
[root@client cm]# echo host2.conf &amp;gt; /tmp/nginx_conf_dir/host2.conf
[root@client cm]# echo host3.conf &amp;gt; /tmp/nginx_conf_dir/host3.conf

[root@client cm]# ll /tmp/nginx_conf_dir/
total 12
-rw-r--r-- 1 root root 11 Nov 22 12:09 host1.conf
-rw-r--r-- 1 root root 11 Nov 22 12:09 host2.conf
-rw-r--r-- 1 root root 11 Nov 22 12:09 host3.conf

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例yaml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# cat ngx1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ngx1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ngx1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx:alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;查看容器中挂载的路径；&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# kubectl exec ngx1 -- ls /usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host1.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host2.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host3.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;2、指定挂载cm中部分文件&lt;/p&gt;
&lt;p&gt;​	可以利用pods.spec.volumes.configMap.item字段，只挂载cm中部分的文件到mountPath指定的路径下；&lt;/p&gt;
&lt;p&gt;示例yaml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# cat ngx1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ngx1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ngx1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx:alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host1.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0644&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host1.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host2.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;newhost2.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;key指定引用cm中哪个键，即文件名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mode设置了文件权限，可选字段&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;path设置了挂载到容器中后，文件名叫什么，可与cm中原文件名保持一致，也可不一致&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;查看容器中挂载的路径；&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# kubectl exec ngx1 -- ls /usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host1.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;newhost2.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;3、挂载cm文件时，不覆盖原镜像的文件路径下存在的文件&lt;/p&gt;
&lt;p&gt;​	有时需求会是，挂载cm中文件中时，不覆盖mountPath路径下原有文件，而是添加的方式&lt;/p&gt;
&lt;p&gt;示例yaml：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# cat ngx1.yaml &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ngx1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ngx1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx:alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/usr/share/nginx/html/newhost1.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host1.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/usr/share/nginx/html/newhost2.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;host2.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cm-nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mountPath指定，cm中的文件，挂载到容器中后的文件名，要唯一&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;subPath指明cm中要挂载的key，即文件名，就不会默认覆盖原有文件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;查看容器中挂载的路径；原有首页文件，和错误页面都还存在&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;root@client cm]# kubectl exec ngx1 -- ls  /usr/share/nginx/html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;50x.html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;index.html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;newhost1.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;newhost2.conf&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;configmap的动态更新&#34;&gt;configmap的动态更新&lt;/h3&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更新cm中数据&lt;/li&gt;
&lt;li&gt;容器中进程，重载配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更新cm：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# kubectl edit cm cm-nginx
configmap/cm-nginx edited
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更新了cm之后，还需要容器中进程，重装配置文件才可，如nginx需要&lt;code&gt;nginx -s reload&lt;/code&gt; ，容器中若是不支持热重载配置文件的进程仍需要重新启动pod才可更新cm中数据；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;采用subPath挂载的cm中文件不更新动态更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	也非2级软链接方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# kubectl exec ngx1 -- ls -lA  /usr/share/nginx/html/
total 16
-rw-r--r--    1 root     root           494 Oct 27 15:48 50x.html
-rw-r--r--    0 root     root            20 Nov 22 05:40 host1.conf
-rw-r--r--    0 root     root            11 Nov 22 05:40 host2.conf
-rw-r--r--    1 root     root           612 Oct 27 15:48 index.html

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;默认挂载方式为2级链接方式，支持动态更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	更新cm时，由..data指向一个新的时间点目录即实现了cm的更新，也即容器内文件更新；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# kubectl exec ngx1 -- ls -lA  /usr/share/nginx/html/
total 0
drwxr-xr-x    2 root     root            60 Nov 22 05:51 ..2020_11_22_05_51_33.789268335
lrwxrwxrwx    1 root     root            31 Nov 22 05:51 ..data -&amp;gt; ..2020_11_22_05_51_33.789268335
lrwxrwxrwx    1 root     root            17 Nov 22 05:51 host1.conf -&amp;gt; ..data/host1.conf
lrwxrwxrwx    1 root     root            17 Nov 22 05:51 host2.conf -&amp;gt; ..data/host2.conf
lrwxrwxrwx    1 root     root            17 Nov 22 05:51 host3.conf -&amp;gt; ..data/host3.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;configmap注意事项&#34;&gt;configmap注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cofigmap是名称空间级别资源，需要同一个ns内部的pod才可引用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以存储卷方式被引用的configmap需要先于pod被创建，同样被引用到的key都要事先创建；否则pod无法正常启动；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以环境变量方式被引用的configmap无需先于pod被创建，pod仍可正常启动；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;secret配置应用&#34;&gt;secret配置应用&lt;/h1&gt;
&lt;h2 id=&#34;secret概述&#34;&gt;secret概述&lt;/h2&gt;
&lt;p&gt;​	secret和configmap等同，只是secret是用来存储敏感数据，如密码，密钥，证书，令牌等；&lt;/p&gt;
&lt;p&gt;​	secret也是以键值形式，存储数据，且仅仅分发到调用了secret资源的pod所在的节点的内存中，以base64编码，&lt;/p&gt;
&lt;p&gt;用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供kubelet用于拉取私有仓库时的认证信息&lt;/li&gt;
&lt;li&gt;pod中容器使用的私密信息存储&lt;/li&gt;
&lt;li&gt;tls的证书和key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;secret类型：&lt;/p&gt;
&lt;p&gt;常用的3种：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# kubectl create secret -h
Create a secret using specified subcommand.

Available Commands:
  docker-registry Create a secret for use with a Docker registry
  用户私有仓库认证信息的
  generic         Create a secret from a local file, directory or literal value
  从命令行，文件，目录中导入数据
  tls             Create a TLS secret
  保存tls证书和key的

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整类型：https://kubernetes.io/docs/concepts/configuration/secret/&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Builtin Type&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Opaque&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;arbitrary user-defined data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/service-account-token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;service account token&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/dockercfg&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;serialized &lt;code&gt;~/.dockercfg&lt;/code&gt; file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/dockerconfigjson&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;serialized &lt;code&gt;~/.docker/config.json&lt;/code&gt; file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/basic-auth&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;credentials for basic authentication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/ssh-auth&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;credentials for SSH authentication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kubernetes.io/tls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;data for a TLS client or server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bootstrap.kubernetes.io/token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bootstrap token data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;创建secret&#34;&gt;创建secret&lt;/h2&gt;
&lt;h3 id=&#34;命令式创建&#34;&gt;命令式创建&lt;/h3&gt;
&lt;p&gt;1、命令行方式创建mysql用户密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# kubectl create secret generic auth-mysql --from-literal=user=root --from-literal=password=mysql
secret/auth-mysql created

[root@client cm]# kubectl get secrets
NAME                  TYPE                                  DATA   AGE
auth-mysql            Opaque                                2      23s
类型为generic/Opaque，编码为base64，

[root@client cm]# kubectl get secrets auth-mysql -o yaml
apiVersion: v1
data:
  password: bXlzcWw=
  user: cm9vdA==
kind: Secret
metadata:
  creationTimestamp: 2020-11-22T06:14:52Z
  name: auth-mysql
  namespace: default
  resourceVersion: &amp;quot;477205&amp;quot;
  selfLink: /api/v1/namespaces/default/secrets/auth-mysql
  uid: 0851f310-2c8a-11eb-9e9a-000c292d5d7c
type: Opaque

[root@client cm]# echo bX1zcWw= | base64 -d
m}sql[root@client cm]# 
其中base64编码不能起到加密效果；

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、命令行方式从文件导入数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# kubectl create secret generic fil1 --from-file=s1=/etc/hosts
secret/fil1 created
[root@client cm]# kubectl get secret fil1 -o yaml
apiVersion: v1
data:
  s1: MTI3LjAuMC4xICAgbG9jYWxob3N0IGxvY2FsaG9zdC5sb2NhbGRvbWFpbiBsb2NhbGhvc3Q0IGxvY2FsaG9zdDQubG9jYWxkb21haW40Cjo6MSAgICAgICAgIGxvY2FsaG9zdCBsb2NhbGhvc3QubG9jYWxkb21haW4gbG9jYWxob3N0NiBsb2NhbGhvc3Q2LmxvY2FsZG9tYWluNgoxOTIuMTY4LjgwLjEwMSBtYXN0ZXIKMTkyLjE2OC44MC4xMDYgbm9kZTEKMTkyLjE2OC44MC4xMDcgbm9kZTIKMTkyLjE2OC44MC4xMDggbm9kZTMKMTkyLjE2OC44MC4xMDIgY2xpZW50Cg==
kind: Secret
metadata:
  creationTimestamp: 2020-11-22T06:19:43Z
  name: fil1
  namespace: default
  resourceVersion: &amp;quot;477647&amp;quot;
  selfLink: /api/v1/namespaces/default/secrets/fil1
  uid: b5f59d68-2c8a-11eb-9e9a-000c292d5d7c
type: Opaqu
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、命令行方式，创建tls类型的secrets，存储key和证书&lt;/p&gt;
&lt;p&gt;​	生成证书，私钥&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cm]# (umask 077;openssl genrsa -out nginx.key 2048)
Generating RSA private key, 2048 bit long modulus
.........................................................................................+++
............................+++
e is 65537 (0x10001)

[root@client cm]# openssl req -new -x509 -key nginx.key -out nginx.crt -subj /C=CN/ST=Beijing/L=Beijing/O=DevOps/CN=www.ilinux.io

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	创建为tls类型的secrets&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Usage:
  kubectl create secret tls NAME --cert=path/to/cert/file --key=path/to/key/file
[--dry-run] [options]

Use &amp;quot;kubectl options&amp;quot; for a list of global command-line options (applies to all
commands).

[root@client cm]# kubectl create secret tls nginx-cert --cert=./nginx.crt --key=./nginx.key secret/nginx-cert created
[root@client cm]# kubectl get secret
NAME                  TYPE                                  DATA   AGE
auth-mysql            Opaque                                2      12m
default-token-q6vpk   kubernetes.io/service-account-token   3      11d
fil1                  Opaque                                1      7m18s
nginx-cert            kubernetes.io/tls                     2      6s

注意：key会统计转为tls.key 和 tls.cert
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;清单式创建&#34;&gt;清单式创建&lt;/h3&gt;
&lt;p&gt;​	同样secret的清单式创建反到不如命令行来的简便，可以用命令创建后再输出为yaml文件，用于留档使用；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client secret]# vim s1.yaml
[root@client secret]# cat s1.yaml 
apiVersion: v1
kind: Secret
metadata:
 name: s1
stringData:
 user: wang
 pass: linux
type: Opaque

stringdata和data不同的是，后者只能接收base64编码后的键值数据，用户还需手动编码一下；

[root@client secret]# kubectl apply -f s1.yaml 
secret/s1 created
[root@client secret]# kubectl get secret s1
NAME   TYPE     DATA   AGE
s1     Opaque   2      8s
[root@client secret]# kubectl get secret s1 -o yaml
apiVersion: v1
data:
  pass: bGludXg=
  user: d2FuZw==
kind: Secret
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {&amp;quot;apiVersion&amp;quot;:&amp;quot;v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;Secret&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;s1&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;default&amp;quot;},&amp;quot;stringData&amp;quot;:{&amp;quot;pass&amp;quot;:&amp;quot;linux&amp;quot;,&amp;quot;user&amp;quot;:&amp;quot;wang&amp;quot;},&amp;quot;type&amp;quot;:&amp;quot;Opaque&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;secret以存储卷使用&#34;&gt;secret以存储卷使用&lt;/h2&gt;
&lt;p&gt;​	secret可以以环境变量和存储卷方式注入到pod中，&lt;strong&gt;但环境变量方式存在安全隐患，如环境变量可能会打印到日志中，被子进程继承，因此推荐采用存储卷方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、定义pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client secret]# vim nginx-with-ssl.yaml
[root@client secret]# kubectl apply -f nginx-with-ssl.yaml 
pod/nginx-with-ssl created

[root@client secret]# cat nginx-with-ssl.yaml 
apiVersion: v1
kind: Pod
metadata: 
 name: nginx-with-ssl
spec:
 containers:
 - name: n1
   image: nginx:alpine
   volumeMounts:
   - name: cert
     mountPath: /etc/nginx/conf.d/ssl/
 volumes:
 - name: cert
   secret:
    secretName: nginx-cert
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client secret]# kubectl exec nginx-with-ssl -- ls /etc/nginx/conf.d/ssl
tls.crt
tls.key

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、之后，在configmap中引用该处的证书和私钥，即可完成nginx的https配置&lt;/p&gt;
&lt;h2 id=&#34;imagepullsecret&#34;&gt;imagePullSecret&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;提供私有仓库的认证信息方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建docker-registry类型的secret，在pod中引用；&lt;/li&gt;
&lt;li&gt;创建docker-registry类型的secret，然后在service-account引用，此后，所有以该service-account运行的pod都可通过私有仓库认证；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	imagePullsecret字段引用了docker-registry类型的secret，用于拉取私有镜像仓库的镜像时提供的认证信息；&lt;/p&gt;
&lt;p&gt;1、创建docker-registry类型的secret&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client secret]# kubectl create secret docker-registry reg1 --docker-username=wang --docker-password=linux --docker-email=wang@gmail.com
secret/reg1 created
[root@client secret]# kubectl get secret reg1 -o yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJ3YW5nIiwicGFzc3dvcmQiOiJsaW51eCIsImVtYWlsIjoid2FuZ0BnbWFpbC5jb20iLCJhdXRoIjoiZDJGdVp6cHNhVzUxZUE9PSJ9fX0=
kind: Secret
metadata:
  creationTimestamp: 2020-11-22T07:29:36Z
  name: reg1
  namespace: default
  resourceVersion: &amp;quot;483608&amp;quot;
  selfLink: /api/v1/namespaces/default/secrets/reg1
  uid: 78f26a73-2c94-11eb-9e9a-000c292d5d7c
type: kubernetes.io/dockerconfigjson
[root@client secret]# kubectl get secret reg1
NAME   TYPE                             DATA   AGE
reg1   kubernetes.io/dockerconfigjson   1      21s

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、在pod时引用即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client secret]# cat nginx-with-ssl.yaml 
apiVersion: v1
kind: Pod
metadata: 
 name: nginx-with-ssl
spec:
 imagePullSecrets:
 - name: reg1
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;小结&#34;&gt;小结：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;总结了配置容器应用的方式：
&lt;ul&gt;
&lt;li&gt;定义pod时，定义启动为容器时命令行传参，command和args字段&lt;/li&gt;
&lt;li&gt;定义pod时，定义env环境变量字段，可有entrypoint脚本注入到配置文件中&lt;/li&gt;
&lt;li&gt;配置文件打入镜像&lt;/li&gt;
&lt;li&gt;将节点预先放置的配置文件以普通存储卷挂载给pod&lt;/li&gt;
&lt;li&gt;configmap和secret&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/config%E5%92%8Csecret/" term="config和secret" label="config和secret" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之存储卷</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8B%E5%AD%98%E5%82%A8%E5%8D%B7/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8B%E5%AD%98%E5%82%A8%E5%8D%B7/</id>
            <updated>2020-12-02T09:45:21&#43;08:00</updated>
            <published>2020-11-11T14:33:32&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之存储卷</summary>
            
                <content type="html">&lt;h1 id=&#34;存储卷概述&#34;&gt;存储卷概述&lt;/h1&gt;
&lt;p&gt;​	对于有数据存储需求的容器应用来说，数据脱离容器生命周期，而持久化存储的需求是必需的，如mysql，redis等数据库应用。&lt;/p&gt;
&lt;p&gt;​	docker提供了容器主机级别和网络级的存储机制，使得容器可以使用节点上，或网络共享存储系统上的存储空间，使得数据可以脱离容器生命周期，节点，而存在，且网络存储系统一般是高可用的。&lt;/p&gt;
&lt;p&gt;​	kubernetes同样为pod提供了存储卷，实现数据持久存储的能力，同样支持节点级、网络存储级的存储卷，节点级如emptydir和hostpath只适合实验，生产中需要采用高可用的网络存储卷。&lt;/p&gt;
&lt;h2 id=&#34;k8s支持的存储卷类型&#34;&gt;k8s支持的存储卷类型&lt;/h2&gt;
&lt;p&gt;​	k8s支持节点本地存储、网络共享存储、云厂商存储产品等多种存储卷：还有特殊存储卷configmap、secret；分别用于提供非敏感、敏感的配置信息，实现配置与应用的解耦；&lt;/p&gt;
&lt;p&gt;​	此外：k8s还提供了pv和pvc，将存储抽象为k8s集群资源，使得存储卷使用更方便，存储集群可由专门的存储运维；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201118161525340.png&#34; alt=&#34;image-20201118161525340&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;存储卷定义使用格式&#34;&gt;存储卷定义使用格式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先用spec.volumes定义存储卷列表，每个存储卷都有唯一的名称
&lt;ol&gt;
&lt;li&gt;每个类型支持不同的配置参数，如nfs，cephfs都是不同的参数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在容器的volumesMounts字段引用上面定义的存储卷，
&lt;ol&gt;
&lt;li&gt;用名称引用&lt;/li&gt;
&lt;li&gt;可定义读写权限&lt;/li&gt;
&lt;li&gt;容器中的挂载点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl explain pods.spec.
...
   volumes	&amp;lt;[]Object&amp;gt;
     List of volumes that can be mounted by containers belonging to the pod.
     More info: https://kubernetes.io/docs/concepts/storage/volumes
     
# volumes下级，是各种类型的存储卷
[root@client k8s_yaml]# kubectl explain pods.spec.volumes.
KIND:     Pod
VERSION:  v1

RESOURCE: volumes &amp;lt;[]Object&amp;gt;

DESCRIPTION:
     List of volumes that can be mounted by containers belonging to the pod.
     More info: https://kubernetes.io/docs/concepts/storage/volumes

     Volume represents a named volume in a pod that may be accessed by any
     container in the pod.

FIELDS:
   awsElasticBlockStore	&amp;lt;Object&amp;gt;
     AWSElasticBlockStore represents an AWS Disk resource that is attached to a
     kubelet&#39;s host machine and then exposed to the pod. More info:
     https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

   azureDisk	&amp;lt;Object&amp;gt;
     AzureDisk represents an Azure Data Disk mount on the host and bind mount to
     the pod.

   azureFile	&amp;lt;Object&amp;gt;
     AzureFile represents an Azure File Service mount on the host and bind mount
     to the pod.

   cephfs	&amp;lt;Object&amp;gt;
     CephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime

   cinder	&amp;lt;Object&amp;gt;
...

[root@client k8s_yaml]# kubectl explain pods.spec.containers
...
   volumeMounts	&amp;lt;[]Object&amp;gt;
     Pod volumes to mount into the container&#39;s filesystem. Cannot be updated.

   workingDir	&amp;lt;string&amp;gt;
     Container&#39;s working directory. If not specified, the container runtime&#39;s
     default will be used, which might be configured in the container image.
     Cannot be updated.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;临时存储卷&#34;&gt;临时存储卷&lt;/h1&gt;
&lt;p&gt;​	emptydir和gitrepo属于临时存储卷&lt;/p&gt;
&lt;h2 id=&#34;emptydir&#34;&gt;emptydir&lt;/h2&gt;
&lt;p&gt;​	和pod的生命周期一致，适合做缓存数据的存储空间，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl explain pods.spec.volumes.emptyDir

2个字段：
medium 存储介质，memory或空字符串（表示和节点存储介质一样）
sizeLimit 存储空间的大小上限
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client volumes]# cat emptydir.yml 
apiVersion: v1
kind: Pod
metadata:
 name: pod-emptydir
spec:
 volumes:
 - name: html
   emptyDir: 
    medium: 
    sizeLimit: 10Mi
 containers:
 - name: nginx
   image: nginx:1.12-alpine
   volumeMounts:
   - name: html
     mountPath: /usr/share/html/nginx/
 - name: alpine
   image: alpine
   volumeMounts:
   - name: html
     mountPath: /root/
   command: [&amp;quot;/bin/sh&amp;quot;,&amp;quot;-c&amp;quot;]
   args:
   - while true; do
      echo $(hostname) $(date) &amp;gt;&amp;gt; /root/index.html;
      sleep 4;
     done
首先定义了名为html的存储卷
然后再pod中的2个容器中都引用挂载，
其中alpine向其中不停向主页文件追加内容，另一个nginx容器也可以看到，因为是相同的存储卷
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201118175204443.png&#34; alt=&#34;image-20201118175204443&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;gitrepo&#34;&gt;gitRepo&lt;/h2&gt;
&lt;p&gt;​	gitrepo基于emptydir，其工作逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pod运行的节点，具有git客户端，首先根据gitrepo中定义的仓库地址，将库中数据拉取到本地目录；&lt;/li&gt;
&lt;li&gt;然后将本地节点的目录作为挂载卷，挂载到容器当中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;gitrepo在k8s1.12后已经废弃，建议采用initcontainer将主容器需要的数据复制到主容器中，而不再用gitrepo&lt;/p&gt;
&lt;h1 id=&#34;节点存储卷hostpath&#34;&gt;节点存储卷hostPath&lt;/h1&gt;
&lt;p&gt;​	节点级别的存储卷是hostPath，将节点上的目录提供给pod做存储卷，适合的pod类型：每个节点都运行的系统级pod，即ds控制的pod，如收集日志、监控等类型的应用；&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
 name: pod-hostPath
spec:
 volumes:
 - name: log
   hostPath:
    path: /var/log
 - name: socket
   hostPath
    path: /var/run/docker.sock
    
 containers:
 - name: filebeat
   image: filebeat:5.8-alpine
   volumeMounts:
   - name: log
     mountPath:  /var/log
   - name: socket
     mountPath: /var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;网络存储卷&#34;&gt;网络存储卷&lt;/h1&gt;
&lt;p&gt;​	生产中，对于非ds的pod，更常用的还是网络存储卷，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;san或nas，如nfs，fc，iscsi&lt;/li&gt;
&lt;li&gt;分布式存储系统，如glusterfs，ceph&lt;/li&gt;
&lt;li&gt;云存储：aws，azure，gce的产品&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to使用不同的存储卷&#34;&gt;how-to使用不同的存储卷&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;spec.volumes字段定义不同类型的存储卷即可
&lt;ol&gt;
&lt;li&gt;不同类型的存储卷支持的参数不同
&lt;ol&gt;
&lt;li&gt;参数一般包含后端存储集群的连接、认证信息等&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;kubectl explain pods.spec.volumes.[nfs|ceph|glusterfs|...]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;spec.containres.volumesMount字段引用上步定义好的存储卷即可
&lt;ol&gt;
&lt;li&gt;用上步存储卷名引用&lt;/li&gt;
&lt;li&gt;mountPath定义挂到容器的那个目录即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;nfs存储卷&#34;&gt;nfs存储卷&lt;/h2&gt;
&lt;p&gt;​	nfs是类Unix系统内核级别提供的网络共享文件系统；使用nfs存储卷需要pod所在节点能够访问、并挂载nfs开放出的目录；&lt;/p&gt;
&lt;p&gt;1、配置nfs服务，允许集群所有节点可访问挂载，（因pod可能调度到任何一个节点）&lt;/p&gt;
&lt;p&gt;配置nfs服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# yum install -y nfs-utils


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、定义pod，容器采用pod，其中volums字段定义的是nfs类型的存储卷，并在volumeMounts引用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、应用pod文件，生成pod对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、连入容器，写入数据，然后删除pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、再次应用pod文件，连入容器，查看数据是否还在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rbd存储卷&#34;&gt;rbd存储卷&lt;/h2&gt;
&lt;p&gt;​	rbd是ceph存储系统提供的三大存储接口之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rbd块设备接口&lt;/li&gt;
&lt;li&gt;fs文件系统接口&lt;/li&gt;
&lt;li&gt;api接口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201118200308817.png&#34; alt=&#34;image-20201118200308817&#34;&gt;&lt;/p&gt;
&lt;p&gt;1、搭建并配置好一个ceph集群，启用rbd存储&lt;/p&gt;
&lt;p&gt;2、ceph集群中配置一个能供pod使用的存储映像image&lt;/p&gt;
&lt;p&gt;3、参照rbd存储卷定义语法，填充ceph集群访问相关的字段，主要是ceph集群的访问认证信息，敏感信息要定义为secret&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、将ceph集群访问认证信息定义为secret，在定义rbd存储卷中secretRef引用&lt;/p&gt;
&lt;p&gt;5、集群各个节点安装访问ceph集群的客户端包ceph-common&lt;/p&gt;
&lt;p&gt;6、应用pod定义文件，查看效果&lt;/p&gt;
&lt;p&gt;pod文件示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;glusterfs存储卷&#34;&gt;glusterfs存储卷&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;搭建可以用的glusterfs集群&lt;/li&gt;
&lt;li&gt;在glusterfs集群上创建供pod使用的卷&lt;/li&gt;
&lt;li&gt;集群各个node节点安装glusterfs客户端包:glusterfs和glusterfs-fuse&lt;/li&gt;
&lt;li&gt;根据语法，定义glusterfs类型的volumes
&lt;ol&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;定义访问glusterfs集群所需的endpoint资源
&lt;ol&gt;
&lt;li&gt;示例&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;先应用endpoints定义文件，再应用pod定义文件&lt;/li&gt;
&lt;li&gt;查看效果&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cinder存储卷&#34;&gt;cinder存储卷&lt;/h2&gt;
&lt;p&gt;​	cinder为openstack项目中为vm虚拟机提供持久存储的项目，但k8s也支持cinder提供的存储卷，尤其k8s部署与openstack的IAAS环境中时，可以直接使用openstack的cinder存储&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;持久存储卷&#34;&gt;持久存储卷&lt;/h1&gt;
&lt;h2 id=&#34;whats-pv-and-pvc&#34;&gt;what`s pv and pvc&lt;/h2&gt;
&lt;h2 id=&#34;创建pv&#34;&gt;创建pv&lt;/h2&gt;
&lt;h3 id=&#34;nfs类型pv&#34;&gt;nfs类型pv&lt;/h3&gt;
&lt;h3 id=&#34;rbd类型pv&#34;&gt;rbd类型pv&lt;/h3&gt;
&lt;h3 id=&#34;pv的状态&#34;&gt;pv的状态&lt;/h3&gt;
&lt;h2 id=&#34;创建pvc&#34;&gt;创建pvc&lt;/h2&gt;
&lt;h2 id=&#34;在pod中使用pvc&#34;&gt;在pod中使用pvc&lt;/h2&gt;
&lt;h2 id=&#34;storageclass存储类动态供给&#34;&gt;storageClass存储类动态供给&lt;/h2&gt;
&lt;p&gt;实现存储类动态供给pv的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要有支持动态供给pv的后端存储系统&lt;/li&gt;
&lt;li&gt;定义storageClass字段，其中指明了后端存储的参数，如连接、认证信息；本存储类的默认存储类型，回收策略等；&lt;/li&gt;
&lt;li&gt;用户在需要时，直接定义pvc，pvc指定调用哪个存储类接口&lt;/li&gt;
&lt;li&gt;创建为pvc对象后，pvc会调用存储类直接生成对应的pv对象，然后进行绑定&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;定义存储类-依据某一特定后端存储&#34;&gt;定义存储类-依据某一特定后端存储&lt;/h3&gt;
&lt;h3 id=&#34;动态pv供给&#34;&gt;动态pv供给&lt;/h3&gt;
&lt;p&gt;1、用户根据需求直接定义pvc即可，定义中指定使用哪个存储类动态创建，&lt;/p&gt;
&lt;p&gt;2、指定存储类的方式有2种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注解&lt;/li&gt;
&lt;li&gt;指定存储类的名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps：&lt;/p&gt;
&lt;p&gt;​	所有支持pv动态供给的存储系统，都可以定义为存储类之后，用户通过定义pvc来直接调用存储类动态的创建pv，生产中pv的数量，pv的空间大小无法事先预估，因此采用存储类动态供给更适合，但并非所有存储系统都支持动态供给pv；&lt;/p&gt;
&lt;h2 id=&#34;pv和pvc的生命周期&#34;&gt;pv和pvc的生命周期&lt;/h2&gt;
&lt;p&gt;​	pv和pvc是一对一的关系，其共有3个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储供给&lt;/li&gt;
&lt;li&gt;存储绑定&lt;/li&gt;
&lt;li&gt;存储回收&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;存储供给&#34;&gt;存储供给&lt;/h3&gt;
&lt;h3 id=&#34;存储绑定&#34;&gt;存储绑定&lt;/h3&gt;
&lt;h3 id=&#34;存储回收&#34;&gt;存储回收&lt;/h3&gt;
&lt;h3 id=&#34;存储卷扩容&#34;&gt;存储卷扩容&lt;/h3&gt;
&lt;h1 id=&#34;downwardapi存储卷&#34;&gt;downwardAPI存储卷&lt;/h1&gt;
&lt;h2 id=&#34;环境变量注入元数据&#34;&gt;环境变量注入元数据&lt;/h2&gt;
&lt;h2 id=&#34;存储卷注入元数据&#34;&gt;存储卷注入元数据&lt;/h2&gt;
&lt;p&gt;​	downwardAPI类型的存储卷，可以实现将外部的环境信息，注入到容器内部，&lt;strong&gt;适合非原生开发的应用程序，在不做代码改造的情况下，通过挂载downwardAPI卷注入其需要的配置信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义volumes字段时，定义downwardAPI类型的卷，其中：采用fieladref或resourcefileref从pod的属性信息中引入变量&lt;/li&gt;
&lt;li&gt;再在容器的volumeMounts字段引用downwardAPI存储卷的名称即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;小结&#34;&gt;小结：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;临时存储卷：emptydir和gitrepo类型存储卷，生命周期和pod相等，gitrepo可以通过引用外部git仓库数据实现数据持久性&lt;/li&gt;
&lt;li&gt;节点存储卷：hostpath，提供节点级数据持久能力，常用ds控制器类型的节点级pod应用&lt;/li&gt;
&lt;li&gt;网络存储卷：ceph，glusterfs，nfs可以提供分布式网络共享存储&lt;/li&gt;
&lt;li&gt;云存储：aws，gce云厂商可以提供云存储卷&lt;/li&gt;
&lt;li&gt;pv和pvc：将存储管理和存储使用，解耦为生产、消费模型，存储管理有专门的存储集群运维，开发只需定义pvc即可使用存储卷&lt;/li&gt;
&lt;li&gt;基于存储类Storageclass，可实现pv的动态供给，需要后端存储支持该特性，如：clusterfs，ceph的rbd，云存储产品等&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s%E5%AD%98%E5%82%A8%E5%8D%B7/" term="k8s存储卷" label="k8s存储卷" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/" term="未完成" label="未完成" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之service与ingress</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bservice%E4%B8%8Eingress/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bservice%E4%B8%8Eingress/</id>
            <updated>2020-11-18T15:19:19&#43;08:00</updated>
            <published>2020-11-11T14:33:10&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之service与ingress</summary>
            
                <content type="html">&lt;h1 id=&#34;service资源及模型&#34;&gt;service资源及模型&lt;/h1&gt;
&lt;p&gt;​	各类pod控制器只负责管理pod的运行，其生命周期，但运行的pod到底还是需要提供给客户端访问才有价值，如nginx，tomcat，httpd，因此需要引入service和ingress资源，做pod服务的暴露工做；&lt;/p&gt;
&lt;p&gt;​	单一节点的hostPort，可以借助pod共享节点的网络ns实现pod中服务的暴露，但不够灵活；&lt;/p&gt;
&lt;p&gt;​	集群内pod默认只能集群内其他pod，或集群内节点可达，&lt;strong&gt;集群外部根本没有到pod的相关路由，&lt;/strong&gt; 但service的nodeport和loadbalancer类型，ingress的七层调度，可将集群外部的流量引入pod，为（集群内部或外部都）提供稳定的、统一的访问入口，和负载均衡能力；&lt;/p&gt;
&lt;h2 id=&#34;service概述&#34;&gt;service概述&lt;/h2&gt;
&lt;p&gt;​	service是标准k8s资源，本质是节点上的iptable或ipvs规则，利用规则实现流量的转发到pod上，且也基于selector标签选择器选择、标识后端pod；&lt;/p&gt;
&lt;p&gt;​	pod的动态性和提供服务要求的固定入口是冲突的，因此引入service，可以做很好的中间层，隐藏了pod动态的地址，且可以提供负载均衡调度；&lt;/p&gt;
&lt;p&gt;service图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201116191643571.png&#34; alt=&#34;image-20201116191643571&#34;&gt;&lt;/p&gt;
&lt;p&gt;service与pod关系：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;service与pod关系为松耦合，先创建service并不会报错（生产中可实现，service由运维定义，pod由开发定义的解耦）&lt;/li&gt;
&lt;li&gt;service和pod中间层：还隔了一个endpoint资源，其是一个ip：port的列表，来自于后端颇多的ip：port，创建service后，其endpoint会自动创建&lt;/li&gt;
&lt;li&gt;service会通过api-server，借助watch机制，持续监测其selector所匹配到的pod，从创建、扩缩容，ip变化，删除；从而实时追踪，&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;service、控制器、pod图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201116192049803.png&#34; alt=&#34;image-20201116192049803&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;虚拟ip和代理模型&#34;&gt;虚拟ip和代理模型&lt;/h2&gt;
&lt;p&gt;​	向api-server提交创建service资源后，此时一直检测的每个节点上kube-proxy，监测到了service资源的创建，就会根据该service定义在其节点上，创建iptabls或ipvs规则，用于流量转发；&lt;/p&gt;
&lt;p&gt;​	service的ip称为clusterip，就是iptables规则中的前端ip而已，不存在任何设备上，&lt;strong&gt;因此也叫虚拟ip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	kube-proxy代理流量有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;userspace&lt;/li&gt;
&lt;li&gt;iptables&lt;/li&gt;
&lt;li&gt;ipvs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;userspace&#34;&gt;userspace&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;k8s1.1版本之前的默认转发模型&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;kube-proxy监测api-server上的service和endpoint资源变化，&lt;/li&gt;
&lt;li&gt;检测到后，会在本地节点创建对应iptables或ipvs规则，并监听一个宿主机节点上的端口，接收流量，然后调度，默认轮询&lt;/li&gt;
&lt;li&gt;流量流向：客户端-》节点的内核空间接收-》内存copy给节点上kube-proxy用户空间-》处理后再给节点的内核处理，根据规则转发，（2次内核与用户空间的复制，效率低下）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;iptables&#34;&gt;iptables&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;k8s1.2版本后默认转发模型&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个工作节点的kube-proxy监测着api-server上service和endpoint资源的变化，&lt;/li&gt;
&lt;li&gt;监测到变动后，创建对应规则，对于service：创建对外的iptables规则并捕获到达clusterip的流量。对于endpoint：创建向后的iptables规则并关联到具体的后端pod；&lt;/li&gt;
&lt;li&gt;无需在节点的用户空间和内核空间反复切换，挺高效率&lt;/li&gt;
&lt;li&gt;且后端pod无响应时，可以自动切换&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;ipvs&#34;&gt;ipvs&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;k8s1.11版本后默认转发模型&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个工作节点的kube-proxy监测着api-server上service和endpoint资源的变化，&lt;/li&gt;
&lt;li&gt;不同的是，监测到变化后，kube-proxy调用netlink接口创建的是ipvs规则，&lt;strong&gt;但ipvs规则只负责流量调度部分，剩余的nat等功能仍有iptables实现&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ipvs优点：ipvs专做流量调度，速度快，效率高，且支持多种调度算法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;图示&#34;&gt;图示&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201116202902842.png&#34; alt=&#34;image-20201116202902842&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5Cten%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201116202814171.png&#34; alt=&#34;image-20201116202814171&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;service基础应用&#34;&gt;service基础应用&lt;/h1&gt;
&lt;h2 id=&#34;创建service&#34;&gt;创建service&lt;/h2&gt;
&lt;p&gt;创建service资源2种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl expose命令行&lt;/li&gt;
&lt;li&gt;yaml文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、yaml文件示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;语法：重要字段是ports和selector
[root@client service]# kubectl explain svc.spec

示例：
[root@client service]# cat service-dep1.yaml 
apiVersion: v1
kind: Service
metadata: 
 name: dep1-svc
spec:
 selector: #和dep1控制器采用一样的标签选择器
  app: dep1-app
 ports:
  - protocol: TCP
    port: 80 # service对外暴露的端口
    targetPort: 80 #后端pod端口

[root@client service]# kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    &amp;lt;none&amp;gt;        443/TCP   7d1h
[root@client service]# kubectl apply -f service-dep1.yaml 
service/dep1-svc created
[root@client service]# kubectl get svc
NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE
dep1-svc     ClusterIP   10.99.38.23   &amp;lt;none&amp;gt;        80/TCP    3s
kubernetes   ClusterIP   10.96.0.1     &amp;lt;none&amp;gt;        443/TCP   7d1h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、service与endpoint查看&lt;/p&gt;
&lt;p&gt;​	创建service时，指定了selector，该selector关联到的pod对象，其套接字信息被抽取出来作为service的后端，endpoint资源，是一个ip+port的列表&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;service一般需结合deploment使用，也可以：定义service不指定selector，手动为其创建endpoints资源列表供service关联&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service：

[root@client service]# kubectl get svc -o wide
NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE    SELECTOR
dep1-svc     ClusterIP   10.99.38.23   &amp;lt;none&amp;gt;        80/TCP    11m    app=dep1-app
kubernetes   ClusterIP   10.96.0.1     &amp;lt;none&amp;gt;        443/TCP   7d1h   &amp;lt;none&amp;gt;


endpoint：
# 看到相关pod没创建时，创建service后，随机endpoint就会被创建，只是其中关联的endpoint列表为空而已；
[root@client service]# kubectl get endpoints
NAME         ENDPOINTS             AGE
dep1-svc     &amp;lt;none&amp;gt;                11m
kubernetes   192.168.80.101:6443   7d1h
[root@client service]# kubectl apply -f ../deployment/dep1.yaml 
deployment.apps/dep1 created
[root@client service]# kubectl get endpoints
NAME         ENDPOINTS                                       AGE
dep1-svc     10.244.1.71:80,10.244.2.103:80,10.244.4.47:80   11m
kubernetes   192.168.80.101:6443                             7d1h
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;向service请求服务&#34;&gt;向service请求服务&lt;/h2&gt;
&lt;p&gt;1、启动交互式容器cirros做客户端&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# kubectl run c1 -it --rm --image=cirros -- /bin/sh
kubectl run --generator=deployment/apps.v1beta1 is DEPRECATED and will be removed in a future version. Use kubectl create instead.
If you don&#39;t see a command prompt, try pressing enter.
/ # ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、访问clusterip，查看调度效果&lt;/p&gt;
&lt;p&gt;​	默认是随机调度&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-npjkj
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-npjkj
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-7bb5s
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-rv8nd
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-npjkj
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;service实现会话粘性&#34;&gt;service实现会话粘性&lt;/h2&gt;
&lt;p&gt;概念：&lt;/p&gt;
&lt;p&gt;​	service能够基于四层ip实现会话粘性的调度，默认的粘性保持时长为10800s，但对于同一个公网ip出口的访问来说，它们采用的都是同一个出口ip做源ip，此时基于客户端源ip调度粒度较粗糙，不建议使用&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl explain svc.spec.sessionAffinity
KIND:     Service
VERSION:  v1

FIELD:    sessionAffinity &amp;lt;string&amp;gt;

DESCRIPTION:
     Supports &amp;quot;ClientIP&amp;quot; and &amp;quot;None&amp;quot;. Used to maintain session affinity. Enable
     client IP based session affinity. Must be ClientIP or None. Defaults to
     None. More info:

默认none，即不采用会话粘性，clientIP表现根据客户端ip做粘性
[root@client k8s_yaml]# kubectl explain svc.spec.sessionAffinityConfig
KIND:     Service
VERSION:  v1

RESOURCE: sessionAffinityConfig &amp;lt;Object&amp;gt;
配置会话粘性时长的，默认10800
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# cat service-dep1.yaml 
apiVersion: v1
kind: Service
metadata: 
 name: dep1-svc
spec:
 selector:
  app: dep1-app
 ports:
  - protocol: TCP
    port: 80
    targetPort: 80
 sessionAffinity: ClientIP
 sessionAffinityConfig: 
  clientIP:
   timeoutSeconds: 5
[root@client service]# kubectl apply -f service-dep1.yaml

#可以看到，会话粘性效果
[root@client service]# kubectl run c1 -it --rm --image=cirros -- /bin/sh
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-7bb5s
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-7bb5s
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-7bb5s
/ # curl 10.99.38.23/hostname.html
dep1-7b96746498-7bb5s
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;服务发现&#34;&gt;服务发现&lt;/h1&gt;
&lt;h2 id=&#34;服务发现概述&#34;&gt;服务发现概述&lt;/h2&gt;
&lt;p&gt;​	pod的动态性决定了它ip的不固定性，虽然service为其提供了固定的访问入口ip，但是客户端仍需通过某种机制知道自己要访问的service的ip和port，&lt;strong&gt;因此引入 服务发现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	尤其对于微服务应用，被拆分后的大量的小服务之间通信，通过运维人员手动逐一配置要访问的应用地址显然是不现实的，因此需要服务发现&lt;/p&gt;
&lt;p&gt;服务发现的逻辑：&lt;/p&gt;
&lt;p&gt;​	借助一个&lt;strong&gt;服务总线&lt;/strong&gt;，服务发布方通过服务总线发布自己提供的服务，客户端需要访问时，通过服务总线查询自己需要的服务，进而得到服务方的地址信息，如ip，url等其他信息。&lt;/p&gt;
&lt;p&gt;服务发现的模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发现：客户端自己完成到服务总线的查询；需要实现服务查询的代码逻辑&lt;/li&gt;
&lt;li&gt;服务端发现；借助一个中间查询服务，代替客户端查询并返回客户端结果，客户端无需实现服务查询逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的服务总线实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zookeeper和etcd；传统的键值存储系统&lt;/li&gt;
&lt;li&gt;netfix的Eureka和HashiCorp的Consul：专用的服务发现系统&lt;/li&gt;
&lt;li&gt;kubedns和coredns：基于go，借助etcd做后端存储实现，coredns在k8s1.11后，代替kubedns成为k8s默认的服务发现的附件&lt;/li&gt;
&lt;li&gt;k8s也支持环境变化做服务发现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务发现方式环境变量&#34;&gt;服务发现方式：环境变量&lt;/h2&gt;
&lt;p&gt;​	创建pod时，k8s会自动把同一个名称空间，在该pod之前存在的service对象作为环境变量注入到pod的环境变量中，共有2种形式的变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k8s service环境变量&lt;/li&gt;
&lt;li&gt;docker link形式变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：pod之后创建的service变量无法注入到其中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# kubectl exec  dep1-7b96746498-7bb5s -it -- /bin/sh
# printenv |grep -i dep1_svc

DEP1_SVC_PORT_80_TCP_ADDR=10.99.38.23
DEP1_SVC_PORT_80_TCP_PORT=80
DEP1_SVC_PORT_80_TCP_PROTO=tcp
DEP1_SVC_PORT_80_TCP=tcp://10.99.38.23:80

DEP1_SVC_SERVICE_HOST=10.99.38.23
DEP1_SVC_SERVICE_PORT=80

DEP1_SVC_PORT=tcp://10.99.38.23:80

其中dep1_svc是service的名字，注意即便是定义service名字是用的是短横线，也会统一转为下划线
带有service字符串的是k8s service环境变量，不带的是docker link形式变量
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;服务发现与clusterdns&#34;&gt;服务发现与clusterDns&lt;/h2&gt;
&lt;p&gt;​	k8s集群的服务发现实现主要有kubedns，coredns，后者为前者的替换产品，&lt;strong&gt;是k8s众多功能依赖的基础服务，集群安装后应该立即部署，kubeadm初始化集群时，会自动部署为pod&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	以下为3种service类型，对应的资源记录resources record格式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、clusterip类型：常见的资源记录格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、headless类型：资源记录格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Externalname类型；资源记录格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201117175148583.png&#34; alt=&#34;image-20201117175148583&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务发现方式dns&#34;&gt;服务发现方式：dns&lt;/h2&gt;
&lt;p&gt;service资源的ip对应的dns名称格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;service-name&gt;.&lt;ns-name&gt;.cluster.local&lt;/li&gt;
&lt;li&gt;&lt;service-name&gt;.&lt;ns-name&gt;.svc.cluster.local&lt;/li&gt;
&lt;li&gt;依次是：service对象名.所在名称空间名.svc（可选）.cluster.local（为集群的域名，部署集群时由--cluster-domain参数指定）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;部署集群时，--cluster.dns用于指定dns的ip地址。&lt;/p&gt;
&lt;p&gt;启动pod时，会将该dns服务器的ip和默认搜索的域注入到容器的/etc/resolve.conf文件中。&lt;/p&gt;
&lt;p&gt;查看如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/ # cat /etc/resolv.conf 
nameserver 10.96.0.10
search default.svc.cluster.local svc.cluster.local cluster.local
options ndots:5

其中dns服务器的ip为10.96.0.10
搜索的域依次为: default.svc.cluster.local svc.cluster.local cluster.local

/ # nslookup dep1-svc
nslookup: can&#39;t resolve &#39;(null)&#39;: Name does not resolve

Name:      dep1-svc
Address 1: 10.99.38.23 dep1-svc.default.svc.cluster.local 《主机所在域名》
主机名也配置了某域的话，主机所在域名会加在最后一个
查询某service的名称时，根据给定的域名后缀，补全然后搜索，dep1-svc默认在default名称空间，第一个域名后缀就可以匹配搜到，进而解析出对应的ip
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;服务暴露&#34;&gt;服务暴露&lt;/h1&gt;
&lt;h2 id=&#34;service的类型&#34;&gt;service的类型&lt;/h2&gt;
&lt;p&gt;service共有四种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clusterip：默认类型。仅集群内部的pod或节点可达；&lt;/li&gt;
&lt;li&gt;nodeport：构建在clusterip之上，在每个节点监听一个端口，访问该端口的流量会被转到clusterip和其端口，集群外部客户端通过访问节点的该端口（nodeip：nodeport），进而转到clusterip，再到pod；&lt;/li&gt;
&lt;li&gt;loadbalancer：构建在nodeport之上，依赖于集群外部的负载均衡器，如lvs，haproxy等，或云平台的相关产品，如阿里的slb，该slb将所有集群节点的ip：nodeport作为后端列表，可以起到流量负载均衡转发之用，（相比nodeport，用于无需知道访问哪个节点的ip和nodeport，只需访问固定的负载均衡器即可，&lt;strong&gt;且负载均衡其可以将nodeport的非标准端口转为知名标准端口&lt;/strong&gt;且避免了访问nodeport时的节点故障，需手动切换其他节点的nodeport的问题）&lt;/li&gt;
&lt;li&gt;externalname：前三者是将集群内部服务暴露给集群外部客户端，而externalname是将集群外部的服务暴露给集群内部，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类型解释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# kubectl explain svc.spec.type
KIND:     Service
VERSION:  v1

FIELD:    type &amp;lt;string&amp;gt;

DESCRIPTION:
     type determines how the Service is exposed. Defaults to ClusterIP. Valid
     options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
     &amp;quot;ExternalName&amp;quot; maps to the specified externalName. &amp;quot;ClusterIP&amp;quot; allocates a
     cluster-internal IP address for load-balancing to endpoints. Endpoints are
     determined by the selector or if that is not specified, by manual
     construction of an Endpoints object. If clusterIP is &amp;quot;None&amp;quot;, no virtual IP
     is allocated and the endpoints are published as a set of endpoints rather
     than a stable IP. &amp;quot;NodePort&amp;quot; builds on ClusterIP and allocates a port on
     every node which routes to the clusterIP. &amp;quot;LoadBalancer&amp;quot; builds on NodePort
     and creates an external load-balancer (if supported in the current cloud)
     which routes to the clusterIP.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;clusterip&#34;&gt;clusterIP&lt;/h2&gt;
&lt;p&gt;​	默认的service类型即为clusterip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# curl 10.99.38.23

[root@node1 ~]# curl 10.99.38.23
Hello MyApp | Version: v1 | &amp;lt;a href=&amp;quot;hostname.html&amp;quot;&amp;gt;Pod Name&amp;lt;/a&amp;gt;
[root@node1 ~]#

[root@client service]# kubectl get svc -o wide
NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE    SELECTOR
dep1-svc     ClusterIP   10.99.38.23   &amp;lt;none&amp;gt;        80/TCP    173m   app=dep1-app

相比集群内节点，单独的客户端节点对于clusterip是路由不可达的
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nodeport&#34;&gt;Nodeport&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# vim service-dep1.yaml 
[root@client service]# grep type -C 3 service-dep1.yaml 
metadata: 
 name: dep1-svc
spec:
 type: NodePort
 selector:
  app: dep1-app
 ports:

类型设置为nodeport即可，在节点开放的端口范围是30000到32767，可以手动指定，但不建议，防止人为指定造成的冲突

[root@client service]# kubectl apply -f service-dep1.yaml 
service/dep1-svc configured
[root@client service]# kubectl get svc
NAME         TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
dep1-svc     NodePort    10.99.38.23   &amp;lt;none&amp;gt;        80:31029/TCP   176m
kubernetes   ClusterIP   10.96.0.1     &amp;lt;none&amp;gt;        443/TCP        7d4h

[root@client service]# curl 192.168.80.106:31029
Hello MyApp | Version: v1 | &amp;lt;a href=&amp;quot;hostname.html&amp;quot;&amp;gt;Pod Name&amp;lt;/a&amp;gt;
此时集群外部节点，就可以通过 节点ip+nodeport 访问pod中服务
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;loadbalancer&#34;&gt;Loadbalancer&lt;/h2&gt;
&lt;p&gt;​	nodeport类型的service的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端需要知道，一个节点的ip和其开放的不规则随机端口&lt;/li&gt;
&lt;li&gt;节点发生故障时，客户端需要手动切换到另一个节点ip&lt;/li&gt;
&lt;li&gt;k8s集群物理是在公有云还是机房，节点肯定都是私有地址，对于互联网客户端是不可达的&lt;/li&gt;
&lt;li&gt;因此：需要配置一个具有公网ip的loadbalancer，后端挂所有集群的私有ip，客户端只需访问负载均衡器的公网ip，即可被其将流量均匀的调度到各个节点的nodeport，再到clusterip，再到pod&lt;/li&gt;
&lt;li&gt;流量流向：公网客户端-》有公网ip的loadbalancer-》各个节点的nodeport-》集群的clusterip-》具体的pod&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	测试：修改type为loadbalancer即可，可以看到externalip为pending状态，因为集群外部并未配置相应的外部ip，实践中：外部负载均衡器可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用云厂商接口生产的软均衡器，如阿里云的slb；&lt;/li&gt;
&lt;li&gt;机房中，自己搭建的高可用均衡器，如lvs，haproxy，nginx；&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# vim service-dep1.yaml 
[root@client service]# kubectl apply -f service-dep1.yaml 
service/dep1-svc configured
[root@client service]# kubectl get svc
NAME         TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
dep1-svc     LoadBalancer   10.99.38.23   &amp;lt;pending&amp;gt;     80:31029/TCP   3h6m

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;externalname&#34;&gt;Externalname&lt;/h2&gt;
&lt;p&gt;​	externalname类型的service用于将集群外部的服务，暴露给集群内部的pod使用，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;类型改为externalname，并在externalname字段定义一个cname别名，用于解析外部的服务ip地址
注意：该类型，不能有selector关联到任何pod


[root@client service]# kubectl apply -f service-dep1.yaml 
service/external created
[root@client service]# cat service-dep1.yaml 
apiVersion: v1
kind: Service
metadata: 
 name: external
spec:
 type: ExternalName
 externalName: somehost.bo.io
 ports:
  - protocol: TCP
    port: 80
    targetPort: 80

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;headless类型service&#34;&gt;headless类型service&lt;/h1&gt;
&lt;p&gt;​	需求：有时客户端需要直接访问后端的pod的ip，而不是经由clusterip做一层转发，此时客户端解析service名称时，获得的是所有后端ip组成的列表；&lt;/p&gt;
&lt;p&gt;​	所有pod的ip由endpoint controller管理，生成后作为service名称解析的A记录；此时service没有clusterip这一ip地址；&lt;/p&gt;
&lt;h2 id=&#34;创建headless型service&#34;&gt;创建headless型service&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;有问题？正常的定义后，查看svc详细，应该发现没有clusterip地址，只有被关联到的所有pod的ip，客户端pod方式测试，用nslookup解析该svc名称，得到的应该是一个pod的ip的列表；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	headless的service，通过其名称解析，会被dns服务器轮询的方式返回一个个pod的ip，然后客户端直接通过pod的ip进行访问，不再经由service转发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client service]# kubectl apply -f service-dep1.yaml 
The Service &amp;quot;my-service&amp;quot; is invalid: spec.clusterIP: Invalid value: &amp;quot;None&amp;quot;: field is immutable
[root@client service]# cat service-dep1.yaml 
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  clusterIP: None
  selector:
    app: dep1-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;ingress资源&#34;&gt;ingress资源&lt;/h1&gt;
&lt;p&gt;​	service用于在四层引入外部流量，而ingress则实现了在七层引入外部流量，其具有的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tls会话加密，卸载&lt;/li&gt;
&lt;li&gt;基于七层url等做流量调度分发&lt;/li&gt;
&lt;li&gt;后端基于url的健康监测等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ingress与ingress-controller&#34;&gt;ingress与ingress controller&lt;/h2&gt;
&lt;p&gt;ingress：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;是k8s资源的一种，是一组规则的集合，定义了如何做流量分发，如何做健康检测，配置tls信息等，是概念性的东西；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ingress-controller：&lt;/p&gt;
&lt;p&gt;​	**解析并实现ingress所定义规则的软件实现，是软件实体，**具有七层调度功能的软件都可以做ingress-controller，如nginx，haproxy，envoy，虽说叫控制器，但不是controller-manager的一部分，而是作为运行在k8s集群上的pod存在，由于本质还是pod！就可以由deployment控制器控制，&lt;/p&gt;
&lt;p&gt;​	ingress-controller依赖service的标签选择器标识后端pod，但可以不经由service转发流量，&lt;strong&gt;而类似headless service一样，直接访问到后端的pod端点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201117195920948.png&#34; alt=&#34;image-20201117195920948&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建ingress&#34;&gt;创建ingress&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;https://kubernetes.io/docs/concepts/services-networking/ingress/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl explain ingress.spec
KIND:     Ingress
VERSION:  extensions/v1beta1

RESOURCE: spec &amp;lt;Object&amp;gt;

DESCRIPTION:
     Spec is the desired state of the Ingress. More info:
     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

     IngressSpec describes the Ingress the user wishes to exist.

FIELDS:
   backend	&amp;lt;Object&amp;gt;
     A default backend capable of servicing requests that don&#39;t match any rule.
     At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is
     optional to allow the loadbalancer controller or defaulting logic to
     specify a global default.

   rules	&amp;lt;[]Object&amp;gt;
     A list of host rules used to configure the Ingress. If unspecified, or no
     rule matches, all traffic is sent to the default backend.

   tls	&amp;lt;[]Object&amp;gt;
     TLS configuration. Currently the Ingress only supports a single TLS port,
     443. If multiple members of this list specify different hosts, they will be
     multiplexed on the same port according to the hostname specified through
     the SNI TLS extension, if the ingress controller fulfilling the ingress
backend定义默认后端
rules定义转发规则，类比nginx的location，
tls配置https时需要
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: my-ingress
  annotations:
   kubernetes.io/ingress.class: &amp;quot;nginx&amp;quot;
spec:
 rules:
  - host: www.ilinux.io
    http:
     paths:
      - backend:
         serviceName: my-svc
         servicePort: 80
annotations描述了nginx-controller是由nginx实现
rules定义了转发规则
定义了请求www.ilinux.io的http流量，对/的访问，都转到my-svc的80端口
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ingress的类型&#34;&gt;ingress的类型&lt;/h2&gt;
&lt;p&gt;​	基于http暴露的每个service资源，可以发布在一个独立的域名上，如www.ilinux.io，也可以是一个域名加uri后缀，如www.ilinux.io/wordpress。&lt;/p&gt;
&lt;p&gt;​	定义ingress规则时的定义方式共4种，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于一个完整的fqdn域名分发&lt;/li&gt;
&lt;li&gt;基于url路径做流量分发&lt;/li&gt;
&lt;li&gt;基于主机名的虚拟主机&lt;/li&gt;
&lt;li&gt;tls类型的ingress资源，用于https&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于完整域名&#34;&gt;基于完整域名&lt;/h3&gt;
&lt;p&gt;​	此种情况，一个完整的fqdn的转发，对应的后端是一个service资源，&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: my-ingress
spec:
 backend:
  serviceName: my-svc
  esrvicePort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;基于url&#34;&gt;基于url&lt;/h3&gt;
&lt;p&gt;​	此时，各个应用会聚集在域名下，以第一层的uri路径做区分，如www.bo.com/pc，www.bo.com/mobile&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: my-ingress
spec:
 rules:
  - host: www.ilinux.io
    http:
     paths:
      - path: /pc
        backend: 
         serviceName: pc
         servicePort: 80
      - path: /mobile
        backend:
         serviceName: mobile
         servicePort: 80
         
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;基于虚拟主机主机名&#34;&gt;基于虚拟主机主机名&lt;/h3&gt;
&lt;p&gt;​	多个应用可采用不同的域名，但解析到同一个ip，如具有公网ip的external LB，类似nginx的虚拟主机，&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: my-ingress
spec:
 rules:
  - host: pc.bo.io
    http:
     paths:
      - backend:
         serviceName: pc
         servicePort: 80
  - host: mobile.bo.io
    http:
     paths:
      - backend:
         serviceName: mobile
         servicePort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tls加密&#34;&gt;tls加密&lt;/h3&gt;
&lt;p&gt;​	在ingress定义中，引用事先定义好的secret资源，其中包括了私钥和证书，用于https的，之后ingress-controller在解析ingress规则同时，也会引入其中证书和私钥，配置https会话&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpsecret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;my-https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;管理ingress控制器&#34;&gt;管理ingress控制器&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ingress-controller工作过程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pod中进程，如nginx，haproxy，时刻监测着api-server上，ingress资源的变化&lt;/li&gt;
&lt;li&gt;监测到后，将ingress定义的规则集合，翻译成进程的配置文件，如nginx.conf，haproxy.cfg&lt;/li&gt;
&lt;li&gt;然后，nginx等进程根据配置文件进行流量的调度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	&lt;strong&gt;ingress-controller说到底，就是跑在k8s集群上的pod应用，其中就是nginx、haproxy、envoy这种具有七层调度能力的进程，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	因其还是pod，那么自然默认只有私有的pod地址，因此外部客户端向通过ingress-controller调度七层流量，&lt;strong&gt;就还需为ingress-controller所在pod，定义service资源：nodeport类型或loadbalancer类型，来帮助ingress-controller引入外部流量，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	因其还是pod，就可用控制器来管理运行，有两种控制器常用于ingress-controller的pod&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deployment&lt;/li&gt;
&lt;li&gt;daemonset&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deployment控制&#34;&gt;deployment控制&lt;/h3&gt;
&lt;p&gt;​	用deploment控制器控制ingress-controller的pod的运行，此时ingress-controller是私有pod的ip，为引入外部流量：需要为其创建nodeport或loadbanlancer类型的service资源；&lt;/p&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201118124544054.png&#34; alt=&#34;image-20201118124544054&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;daemoset控制&#34;&gt;daemoset控制&lt;/h3&gt;
&lt;p&gt;​	采用ds控制器，使得每个节点都运行一个ingress-controller的pod，并采用hostport或共享host net nameSpace的方式，为其引入外部流量，此种方式，无需再为其定义service资源&lt;/p&gt;
&lt;p&gt;图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201118124607045.png&#34; alt=&#34;image-20201118124607045&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;部署nginx版的ingress-controller&#34;&gt;部署nginx版的ingress-controller&lt;/h3&gt;
&lt;p&gt;问题？应该是版本不匹配导致，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应用官方定义了ingress-controller的yaml文件（默认deployment方式管理）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.41.2/deploy/static/provider/baremetal/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看生成的pod，在ingress-nginx名称空间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ingress]# kubectl get pods -n ingress-nginx
NAME                                        READY   STATUS             RESTARTS   AGE
ingress-nginx-admission-create-g6xg9        0/1     Completed          0          3m3s
ingress-nginx-admission-patch-p5rs4         0/1     CrashLoopBackOff   3          3m3s
ingress-nginx-controller-58975c55bc-nxvzn   0/1     Pending            0          3m3s
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为pod定义nodePort类型的service资源，引入外部流量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集群外客户端访问，某节点的nodeport，进而访问到ingress-controller的pod&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;排错：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;apply时，报了一个不支持的字段，应该是版本问题，&lt;/li&gt;
&lt;li&gt;还有ingress-controller的pod一直pending状态，排查过程：
&lt;ol&gt;
&lt;li&gt;describe查看pod的event事件为，没有可用节点，调度阶段就失败&lt;/li&gt;
&lt;li&gt;然后看到该pod定义了一个nodeselecter，标签是：kubernetes.io/os=linux&lt;/li&gt;
&lt;li&gt;再查看节点标签时，发现无该标签，给节点补全后，pod可以正常调度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可以调度后，pod一直显示重启失败，问题？&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;示例ingress发布tomcat&#34;&gt;示例：ingress发布tomcat&lt;/h1&gt;
&lt;h2 id=&#34;实验拓扑&#34;&gt;实验拓扑&lt;/h2&gt;
&lt;p&gt;客户端访问流量流向：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集群外部客户端通过nodePort或loadbalancer访问到集群内某节点的nodePort；&lt;/li&gt;
&lt;li&gt;nodePort收到后，将其转发给关联的service的clusterIp，该service是ingress-controller pod的引流口；&lt;/li&gt;
&lt;li&gt;通过service，ingress-controller所在pod收到流量，由内部的nginx进程分析处理；&lt;/li&gt;
&lt;li&gt;再经由tomcat pod的service识别过滤出后端的tomcat所在pod；（只靠tomcat的service识别，不经由它转发）&lt;/li&gt;
&lt;li&gt;然后直接与tomcat所在pod通信；（ingress-controller和tomcat所在pod，属于集群内pod间通信，都是pod）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201118125710211.png&#34; alt=&#34;image-20201118125710211&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;准备名称空间&#34;&gt;准备名称空间&lt;/h2&gt;
&lt;p&gt;将后续pod，都部署在此test名称空间中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ingress-demo]# kubectl apply -f ns-test.yaml 
namespace/test created
[root@client ingress-demo]# kubectl get ns
NAME            STATUS   AGE
default         Active   7d23h
ingress-nginx   Active   8m
kube-public     Active   7d23h
kube-system     Active   7d23h
test            Active   2s
[root@client ingress-demo]# cat ns-test.yaml 
apiVersion: v1
kind: Namespace
metadata:
 name: test
 labels:
  env: test

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;部署tomcat&#34;&gt;部署tomcat&lt;/h2&gt;
&lt;p&gt;运行tomcat镜像为pod，生产中，应该包含了开发打包进程序war包的tomcat镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ingress-demo]# cat dep-tomcat.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
 name: dep-tomcat
 namespace: test
spec:
 replicas: 2
 selector: 
  matchLabels:
   app: tomcat
 template:
  metadata:
   labels:
    app: tomcat
  spec:
   containers:
    - name: tomcat
      image: tomcat:8.0.50-jre8-alpine
      ports:
      - containerPort: 8080
        name: httpport
      - containerPort: 8009
        name: ajpport
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建service-1&#34;&gt;创建service&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@client ingress-demo]# vim svc-tomcat.yaml
[root@client ingress-demo]# kubectl apply -f svc-tomcat.yaml 
service/svc-tomcat created
[root@client ingress-demo]# cat svc-tomcat.yaml 
apiVersion: v1
kind: Service
metadata:
 name: svc-tomcat
 namespace: test
spec:
 selector:
  app: tomcat
 ports:
  - name: http
    port: 80
    targetPort: 8080

[root@client ingress-demo]# kubectl get svc -n test
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
svc-tomcat   ClusterIP   10.99.79.167   &amp;lt;none&amp;gt;        80/TCP    17s
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建ingress-1&#34;&gt;创建ingress&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@client ingress-demo]# vim ingress-for-tomcat.yaml
[root@client ingress-demo]# cat ingress-for-tomcat.yaml 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
 name: ingress-tomcat
 namespace: test
 annotations:
  kubernetes.io/ingress.class: &amp;quot;nginx&amp;quot;
spec:
 rules:
 - host: tomcat.ilinux.io
   http:
    paths:
    - path:
      backend:
       serviceName: svc-tomcat
       servicePort: 80
[root@client ingress-demo]# kubectl apply -f ingress-for-tomcat.yaml 
ingress.extensions/ingress-tomcat created
[root@client ingress-demo]# kubectl get ingress -n test
NAME             HOSTS              ADDRESS   PORTS   AGE
ingress-tomcat   tomcat.ilinux.io             80      10s
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置tls加密的ingress&#34;&gt;配置tls加密的ingress&lt;/h2&gt;
&lt;p&gt;tls加密可以在外部的loadbalancer实现，若外部的loadbalancer是在四层，则可以在ingress配置，即配置tls加密类型的ingress&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成key和证书&lt;/li&gt;
&lt;li&gt;用key和证书，生成secret&lt;/li&gt;
&lt;li&gt;将secret配置到ingress的tls字段中，重新apply即可&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;小结&#34;&gt;小结：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;service资源通过标签选择器，选择识别一组pod，并为其创建一个访问入口，将客户端请求代理到pod&lt;/li&gt;
&lt;li&gt;service是四层调度，默认为随机调度算法
&lt;ul&gt;
&lt;li&gt;本质是节点上的iptables或ipvs规则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;service实现模型三种：userspace，iptables，ipvs&lt;/li&gt;
&lt;li&gt;service共分4种类型：
&lt;ul&gt;
&lt;li&gt;clusterip&lt;/li&gt;
&lt;li&gt;nodeport&lt;/li&gt;
&lt;li&gt;loadbalancer&lt;/li&gt;
&lt;li&gt;externalname&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;headless service为一种特殊的service，用于pod发现，解析service的名称，得到的是一组后端pod的ip列表，而不是一个固定的clusterip&lt;/li&gt;
&lt;li&gt;ingress资源是发布service资源的另一种方式，需结合ingress控制器工作&lt;/li&gt;
&lt;li&gt;ingress控制器的实现有：
&lt;ul&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;haproxy&lt;/li&gt;
&lt;li&gt;envoy&lt;/li&gt;
&lt;li&gt;traefik&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/service%E5%92%8Cingress/" term="service和ingress" label="service和ingress" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之pod控制器</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bpod%E6%8E%A7%E5%88%B6%E5%99%A8/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bpod%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
            <updated>2020-11-18T15:19:08&#43;08:00</updated>
            <published>2020-11-11T14:32:59&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之pod控制器</summary>
            
                <content type="html">&lt;h1 id=&#34;pod控制器概述&#34;&gt;pod控制器概述&lt;/h1&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;​	pod是由其所在节点的kubelet组件进行创建、运行、监控、销毁，但是一旦节点宕机，kubelet也就无法监控其上所在pod，因此引入了主节点上运行的组件controller-manager，&lt;strong&gt;controller-manager本身可部署为高可用&lt;/strong&gt;，其内部集成了很多控制器组件，分别控制不同类型的pod，常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replicationcontroller&lt;/li&gt;
&lt;li&gt;replicaset&lt;/li&gt;
&lt;li&gt;deployment&lt;/li&gt;
&lt;li&gt;daemonset&lt;/li&gt;
&lt;li&gt;job&lt;/li&gt;
&lt;li&gt;cronjob&lt;/li&gt;
&lt;li&gt;statusfulset&lt;/li&gt;
&lt;li&gt;node lifecycle controller&lt;/li&gt;
&lt;li&gt;namespace controller&lt;/li&gt;
&lt;li&gt;service controller&lt;/li&gt;
&lt;li&gt;csrsigning controller集群证书签名控制器&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	各类控制器通过内部的和解循环（使得资源对象的期待状态spec和实际状态status达成“和解”，即趋于一致），持续监控其所属的pod，发现异常会不断调整，还可以用于pod的升级，回滚，支持升级时不同策略，金丝雀发布，灰度发布等&lt;/p&gt;
&lt;h2 id=&#34;pod与控制器&#34;&gt;pod与控制器&lt;/h2&gt;
&lt;p&gt;​	deploment，rs，statuefulset等控制运行任务的pod的控制器为工作负载型pod——workload，工作负载型pod控制器的组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;label selector：标识过滤其控制容器&lt;/li&gt;
&lt;li&gt;期望副本数：运行多少个副本&lt;/li&gt;
&lt;li&gt;pod模版：运行的容器镜像以及版本，参数等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod模版&#34;&gt;pod模版&lt;/h2&gt;
&lt;p&gt;​	定义控制器时，pod的定义是嵌入到控制器的spec.template字段&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: rs1
spec:
 replicas: 2
 selector: 
  matchLabels:
   app: rs-demo
 template:
  metadata:
   labels:
    app: rs-demo
  spec:
   containers:
    - name: app
      image: ikubernetes/myapp:v1
      ports:
       - name: http
         containerPort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;replicaset&#34;&gt;replicaset&lt;/h1&gt;
&lt;h2 id=&#34;rs循环示意&#34;&gt;rs循环示意&lt;/h2&gt;
&lt;p&gt;​	rs控制器是rc：replicationcontroller的升级版，可以精确控制pod的副本数，可结合hpa实现自动的pod伸缩&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201115112151121.png&#34; alt=&#34;image-20201115112151121&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建rs控制器&#34;&gt;创建rs控制器&lt;/h2&gt;
&lt;p&gt;1、编辑yaml文件，并创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl apply -f rs-myapp 
replicaset.apps/rs-myapp created
[root@client rs]# kubectl get pods -w
NAME             READY   STATUS              RESTARTS   AGE
rs-myapp-r2mqb   1/1     Running             0          8s
rs-myapp-tktg7   0/1     ContainerCreating   0          8s

[root@client rs]# kubectl get rs -o wide
NAME       DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES                 SELECTOR
rs-myapp   2         2         2       25m   myapp        ikubernetes/myapp:v1   app=rs-demo

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	rs会向api-server注册一个监听事件，通过watch机制持续监测，并根据标签和定义的副本，rs会通过持续检测api-server对应的变化，保证通过标签过滤出的pod，最终和定义的副本数一致，多删少补；&lt;strong&gt;更改pod的标签后，该pod就不被rs监控，且有可能被其他控制器的标签控制器捕获，列入管控；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、以下为删除pod后，rs自动补全的过程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl delete pods/rs-myapp-tktg7
pod &amp;quot;rs-myapp-tktg7&amp;quot; deleted


[root@client rs]# kubectl get pods -o wide -w
NAME             READY   STATUS    RESTARTS   AGE   IP           NODE    NOMINATED NODE
rs-myapp-r2mqb   1/1     Running   0          38m   10.244.2.7   node1   &amp;lt;none&amp;gt;
rs-myapp-tktg7   1/1     Running   0          38m   10.244.1.4   node2   &amp;lt;none&amp;gt;
rs-myapp-tktg7   1/1   Terminating   0     38m   10.244.1.4   node2   &amp;lt;none&amp;gt;
rs-myapp-wclqm   0/1   Pending   0     0s    &amp;lt;none&amp;gt;   &amp;lt;none&amp;gt;   &amp;lt;none&amp;gt;
rs-myapp-wclqm   0/1   Pending   0     0s    &amp;lt;none&amp;gt;   node3   &amp;lt;none&amp;gt;
rs-myapp-wclqm   0/1   ContainerCreating   0     0s    &amp;lt;none&amp;gt;   node3   &amp;lt;none&amp;gt;
rs-myapp-tktg7   0/1   Terminating   0     38m   10.244.1.4   node2   &amp;lt;none&amp;gt;
rs-myapp-wclqm   1/1   Running   0     2s    10.244.4.6   node3   &amp;lt;none&amp;gt;
rs-myapp-tktg7   0/1   Terminating   0     38m   10.244.1.4   node2   &amp;lt;none&amp;gt;
rs-myapp-tktg7   0/1   Terminating   0     38m   10.244.1.4   node2   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;更新&#34;&gt;更新&lt;/h2&gt;
&lt;h3 id=&#34;变更版本&#34;&gt;变更版本&lt;/h3&gt;
&lt;p&gt;1、修改镜像版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl get rs -o wide
NAME       DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES                 SELECTOR
rs-myapp   2         2         2       47m   myapp        ikubernetes/myapp:v1   app=rs-demo
[root@client rs]# vim rs-myapp 
[root@client rs]# kubectl replace -f rs-myapp 
replicaset.apps/rs-myapp replaced
[root@client rs]# kubectl get rs -o wide
NAME       DESIRED   CURRENT   READY   AGE   CONTAINERS   IMAGES                 SELECTOR
rs-myapp   2         2         2       48m   myapp        ikubernetes/myapp:v2   app=rs-demo
# 修改镜像版本为v2，此时rs虽然显示信息变成v2，但是实际pod并未更新，需要手动删除后，rs补足副本时，随之采用新版本的镜像


# 如下-w监控pod变化过程，即可发现，原版本pod删除后，才会更新，但若是deployment控制器，则会随即更新
[root@client rs]# kubectl get pods
NAME             READY   STATUS    RESTARTS   AGE
rs-myapp-r2mqb   1/1     Running   1          48m
rs-myapp-wclqm   1/1     Running   0          9m56s
[root@client rs]# kubectl get pods -w
NAME             READY   STATUS    RESTARTS   AGE
rs-myapp-r2mqb   1/1     Running   1          48m
rs-myapp-wclqm   1/1     Running   0          10m
rs-myapp-r2mqb   1/1   Terminating   1     49m
rs-myapp-ckhh4   0/1   Pending   0     0s
rs-myapp-ckhh4   0/1   Pending   0     0s
rs-myapp-ckhh4   0/1   ContainerCreating   0     0s
rs-myapp-r2mqb   0/1   Terminating   1     49m
rs-myapp-r2mqb   0/1   Terminating   1     49m
rs-myapp-r2mqb   0/1   Terminating   1     49m
rs-myapp-ckhh4   1/1   Running   0     13s
rs-myapp-wclqm   1/1   Terminating   0     10m
rs-myapp-b2bnm   0/1   Pending   0     0s
rs-myapp-b2bnm   0/1   Pending   0     0s
rs-myapp-b2bnm   0/1   ContainerCreating   0     0s
rs-myapp-wclqm   0/1   Terminating   0     10m
rs-myapp-wclqm   0/1   Terminating   0     11m
rs-myapp-wclqm   0/1   Terminating   0     11m
rs-myapp-b2bnm   1/1   Running   0     9s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、删除现有pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl delete pods/rs-myapp-r2mqb
pod &amp;quot;rs-myapp-r2mqb&amp;quot; deleted
[root@client rs]# kubectl delete pods/rs-myapp-wclqm
pod &amp;quot;rs-myapp-wclqm&amp;quot; deleted

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看更新后pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;^C[root@client rs]# kubectl get pods -w
NAME             READY   STATUS    RESTARTS   AGE
rs-myapp-b2bnm   1/1     Running   0          34s
rs-myapp-ckhh4   1/1     Running   0          49s
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;扩缩容&#34;&gt;扩缩容&lt;/h3&gt;
&lt;p&gt;扩缩容方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改yaml文件中，副本数，然后再次apply&lt;/li&gt;
&lt;li&gt;使用scale子命令，直接命令行指定扩缩容后的副本数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、scale命令扩容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl scale --replicas=3  rs/rs-myapp
replicaset.extensions/rs-myapp scaled
[root@client rs]# kubectl get pods
NAME             READY   STATUS              RESTARTS   AGE
rs-myapp-b2bnm   1/1     Running             0          4h34m
rs-myapp-ckhh4   1/1     Running             0          4h34m
rs-myapp-xdtqv   0/1     ContainerCreating   0          5s
[root@client rs]# kubectl get rs
NAME       DESIRED   CURRENT   READY   AGE
rs-myapp   3         3         2       5h24m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、scale命令缩容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl scale --replicas=1  rs/rs-myapp
replicaset.extensions/rs-myapp scaled
[root@client rs]# kubectl get rs
NAME       DESIRED   CURRENT   READY   AGE
rs-myapp   1         1         1       5h24m
[root@client rs]# kubectl get pods
NAME             READY   STATUS    RESTARTS   AGE
rs-myapp-ckhh4   1/1     Running   0          4h35m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、非级联删除pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl delete --cascade=false rs/rs-myapp 
replicaset.extensions &amp;quot;rs-myapp&amp;quot; deleted
[root@client rs]# kubectl get pods
NAME             READY   STATUS    RESTARTS   AGE
rs-myapp-9swpf   1/1     Running   0          63s
rs-myapp-pqt7f   1/1     Running   0          63s
[root@client rs]# kubectl get rs
No resources found.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	删除rs控制器对象时，默认会删除其所管理的pod资源，使用--cascade=false选项，可以避免删除pod对象，使其成为自主式pod，被用户手动直接管理；&lt;/p&gt;
&lt;p&gt;​	rs不常用，一般采用其更上一层，封装了rs的deployment控制器；deployment管理多个版本的rs，更方便的实现版本的变更；&lt;/p&gt;
&lt;h2 id=&#34;删除&#34;&gt;删除&lt;/h2&gt;
&lt;p&gt;​	直接删除rs后，其所控制的pod也会随之被删除；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client rs]# kubectl delete -f rs-myapp 
replicaset.apps &amp;quot;rs-myapp&amp;quot; deleted
[root@client rs]# kubectl get pods
NAME             READY   STATUS        RESTARTS   AGE
rs-myapp-ckhh4   0/1     Terminating   0          4h35m
[root@client rs]# kubectl get pods
No resources found.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;deployment&#34;&gt;deployment&lt;/h1&gt;
&lt;p&gt;​	deployment控制器是比rs更高一层，它通过控制rs进而控制pod，通过多版本rs的控制实现pod的版本变更，不同更新策略等特性；&lt;/p&gt;
&lt;h2 id=&#34;创建deployment&#34;&gt;创建deployment&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# cat dep1.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
 name: dep1
spec:
 replicas: 2
 selector:
  matchLabels: 
   app: dep1-app
 template:
  metadata:
   labels:
    app: dep1-app
  spec:
   containers:
    - name: myapp
      image: ikubernetes/myapp:v1
      ports:
       - name: http
         containerPort: 80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	可以看到，创建deploy会依次创建，deploy，rs和pod，层层递进；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl apply -f dep1.yaml 
deployment.apps/dep1 created
[root@client deployment]# kubectl get pods
NAME                    READY   STATUS    RESTARTS   AGE
dep1-7b96746498-ggwmk   1/1     Running   0          5s
dep1-7b96746498-kbb86   1/1     Running   0          5s

[root@client deployment]# kubectl get rs
NAME              DESIRED   CURRENT   READY   AGE
dep1-7b96746498   2         2         2       83s

[root@client deployment]# kubectl get deploy
NAME   DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
dep1   2         2         2            2           18s
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;更新策略&#34;&gt;更新策略&lt;/h2&gt;
&lt;p&gt;​	默认是rollingUpdate更新策略，即逐步更新，其中下层参数maxsurge和maxunavailable参数绝对了rollingUpdate的过程，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl explain deployment.spec.strategy
KIND:     Deployment
VERSION:  extensions/v1beta1

RESOURCE: strategy &amp;lt;Object&amp;gt;

DESCRIPTION:
     The deployment strategy to use to replace existing pods with new ones.

     DeploymentStrategy describes how to replace existing pods with new ones.

FIELDS:
   rollingUpdate	&amp;lt;Object&amp;gt;
     Rolling update config params. Present only if DeploymentStrategyType =
     RollingUpdate.

   type	&amp;lt;string&amp;gt;
     Type of deployment. Can be &amp;quot;Recreate&amp;quot; or &amp;quot;RollingUpdate&amp;quot;. Default is
     RollingUpdate.
     
[root@client deployment]# kubectl explain deployment.spec.strategy.rollingUpdate     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	deployment的更新策略有2种，分别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;recreate：原有pod删除，然后重新删除，会造成一段时间服务不可用&lt;/li&gt;
&lt;li&gt;rolling update：逐步升级，先删除部分旧的，然后启动新版本pod补充，反复多次，直到全部更新完闭
&lt;ul&gt;
&lt;li&gt;maxsurge：指定变更版本期间，pod数量最多能超出spec定义的副本数几个，&lt;/li&gt;
&lt;li&gt;maxunavailable：指定变更版本期间，删除pod时，一次删除的pod数不能高于该值，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;升级deployment&#34;&gt;升级deployment&lt;/h2&gt;
&lt;p&gt;1、使用set image升级&lt;/p&gt;
&lt;p&gt;​	除此之外，直接修改yaml文件后重新apply，或使用patch命令以命令行方式修改镜像的版本定义都可以实现容器版本的变更；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl set image deploy/dep1 myapp=ikubernetes/myapp:v2
deployment.extensions/dep1 image updated
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看&lt;/p&gt;
&lt;p&gt;​	升级后可以看到rs有2个对象，旧的rs只是没有控制的pod在运行，但保留下来可以实现回滚操作，pod已经变为了新版本的容器镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl get rs -o wide
NAME              DESIRED   CURRENT   READY   AGE    CONTAINERS   IMAGES                 SELECTOR
dep1-7b96746498   2         2         2       169m   myapp        ikubernetes/myapp:v1   app=dep1-app,pod-template-hash=7b96746498
[root@client deployment]# kubectl get rs -o wide -w
...
# 使用-w可以监控rs的变化过程


[root@client deployment]# kubectl get rs -o wide 
NAME              DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES                 SELECTOR
dep1-5f9fd5b957   2         2         2       2m25s   myapp        ikubernetes/myapp:v2   app=dep1-app,pod-template-hash=5f9fd5b957
dep1-7b96746498   0         0         0       173m    myapp        ikubernetes/myapp:v1   app=dep1-app,pod-template-hash=7b96746498
[root@client deployment]# kubectl get pods -o wide
NAME                    READY   STATUS    RESTARTS   AGE     IP            NODE    NOMINATED NODE
dep1-5f9fd5b957-2xx2n   1/1     Running   0          2m28s   10.244.2.12   node1   &amp;lt;none&amp;gt;
dep1-5f9fd5b957-txvdj   1/1     Running   0          2m30s   10.244.1.7    node2   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;金丝雀发布&#34;&gt;金丝雀发布&lt;/h2&gt;
&lt;p&gt;概念：&lt;/p&gt;
&lt;p&gt;​	deployment升级容器镜像版本时，默认行为是：逐步升级所有的pod，但实际生产中，采用“金丝雀发布”更为稳妥，即先升级部分，然后通过service或ingress，引流，将部分用户流量引入到新升级的pod提供服务；&lt;strong&gt;之后，根据一段时间观察，若新版本持续稳定，则升级剩余版本，若新版本出现故障，则回滚到旧版本，对新版debug；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实验：&lt;/p&gt;
&lt;p&gt;1、变更镜像版本，并立即暂定更新，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl set image deploy/dep1 myapp=ikubernetes/myapp:v3 \
&amp;gt; &amp;amp;&amp;amp; kubectl rollout pause deploy/dep1
deployment.extensions/dep1 image updated
deployment.extensions/dep1 paused
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、继续更新&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl rollout resume deploy/dep1
deployment.extensions/dep1 resumed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、期间监控状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl rollout status deploy/dep1
Waiting for deployment &amp;quot;dep1&amp;quot; rollout to finish: 1 old replicas are pending termination...
^C[root@client deployment]# kubectl rollout status deploy/dep1
Waiting for deployment &amp;quot;dep1&amp;quot; rollout to finish: 1 old replicas are pending termination...


Waiting for deployment spec update to be observed...
Waiting for deployment spec update to be observed...
Waiting for deployment &amp;quot;dep1&amp;quot; rollout to finish: 1 old replicas are pending termination...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;回滚deployment&#34;&gt;回滚deployment&lt;/h2&gt;
&lt;p&gt;1、直接回滚&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl rollout undo deploy/dep1
deployment.extensions/dep1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、借助版本历史回滚&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl rollout history deploy/dep1
deployment.extensions/dep1 
REVISION  CHANGE-CAUSE
2         &amp;lt;none&amp;gt;
4         &amp;lt;none&amp;gt;
5         &amp;lt;none&amp;gt;

[root@client deployment]# kubectl rollout undo deploy/dep1 --to-revision=5
deployment.extensions/dep1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;扩容缩容&#34;&gt;扩容缩容&lt;/h2&gt;
&lt;p&gt;1、直接修改yaml文件中的replicas字段的数值即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client deployment]# kubectl get pods
NAME                    READY   STATUS    RESTARTS   AGE
dep1-7b96746498-nr2lm   1/1     Running   0          3m58s
dep1-7b96746498-sdlb6   1/1     Running   0          3h59m
[root@client deployment]# vim dep1.yaml 
[root@client deployment]# kubectl apply -f dep1.yaml 
deployment.apps/dep1 configured
[root@client deployment]# kubectl get pods
NAME                    READY   STATUS    RESTARTS   AGE
dep1-7b96746498-lzsn6   1/1     Running   0          4s
dep1-7b96746498-nr2lm   1/1     Running   0          4m15s
dep1-7b96746498-sdlb6   1/1     Running   0          4h
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;daemonset&#34;&gt;daemonset&lt;/h1&gt;
&lt;p&gt;​	daemonset控制器简称ds，其控制的pod特点是每个节点都运行，且只运行一个，也可通过节点选择标签选特定标签的节点运行，常用于节点级别的守护进程，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志收集，fluentd，logstash&lt;/li&gt;
&lt;li&gt;集群存储，ceph，glusterfsd&lt;/li&gt;
&lt;li&gt;监控代理，promethus node exporter，collectd，datadog agent&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建&#34;&gt;创建&lt;/h2&gt;
&lt;p&gt;1、编写yaml文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client daemonset]# cat ds1.yaml 
apiVersion: apps/v1
kind: DaemonSet
metadata:
 name: filebeat-ds
 labels: 
  app: filebeat
spec:
 selector:
  matchLabels:
   app: filebeat
 template:
  metadata:
   labels:
    app: filebeat
   name: filebeat
  spec:
   containers:
    - name: filebeat
      image: ikubernetes/filebeat:5.6.5-alpine
      env:
       - name: REDIS_HOST
         value: db.redis.io:6379
       - name: LOG_LEVEL
         value: info

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client daemonset]# kubectl apply -f ds1.yaml 
daemonset.apps/filebeat-ds created
[root@client daemonset]# kubectl get ds
NAME          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
filebeat-ds   3         3         0       3            0           &amp;lt;none&amp;gt;          5s

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client daemonset]# kubectl describe ds/filebeat-ds
Name:           filebeat-ds
Selector:       app=filebeat
Node-Selector:  &amp;lt;none&amp;gt;
Labels:         app=filebeat
Annotations:    kubectl.kubernetes.io/last-applied-configuration:
                  {&amp;quot;apiVersion&amp;quot;:&amp;quot;apps/v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;DaemonSet&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;labels&amp;quot;:{&amp;quot;app&amp;quot;:&amp;quot;filebeat&amp;quot;},&amp;quot;name&amp;quot;:&amp;quot;filebeat-ds&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;defa...
Desired Number of Nodes Scheduled: 3
Current Number of Nodes Scheduled: 3
Number of Nodes Scheduled with Up-to-date Pods: 3
Number of Nodes Scheduled with Available Pods: 0
Number of Nodes Misscheduled: 0
Pods Status:  0 Running / 3 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  app=filebeat
  Containers:
   filebeat:
    Image:      ikubernetes/filebeat:5.6.5-alpine
    Port:       &amp;lt;none&amp;gt;
    Host Port:  &amp;lt;none&amp;gt;
    Environment:
      REDIS_HOST:  db.redis.io:6379
      LOG_LEVEL:   info
    Mounts:        &amp;lt;none&amp;gt;
  Volumes:         &amp;lt;none&amp;gt;
Events:
  Type    Reason            Age   From                  Message
  ----    ------            ----  ----                  -------
  Normal  SuccessfulCreate  12m   daemonset-controller  Created pod: filebeat-ds-tj2b5
  Normal  SuccessfulCreate  12m   daemonset-controller  Created pod: filebeat-ds-5q4sc
  Normal  SuccessfulCreate  12m   daemonset-controller  Created pod: filebeat-ds-t6l2g
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;更新-1&#34;&gt;更新&lt;/h2&gt;
&lt;p&gt;​	类似deployment的更新，ds也有自己的更新策略，支持rollingupdate和ondelete；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client daemonset]# kubectl explain ds.spec.updateStrategy

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;job&#34;&gt;job&lt;/h1&gt;
&lt;p&gt;​	job运用一次性运行，达到任务目录，运行完成后即退出的工作pod，完成后状态后是completed，例如备份、计算；job分为2类：串行job，并行job，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;串行job，多个job依次执行；前一个job执行完成退出后才执行后续job，如备份过程；&lt;/li&gt;
&lt;li&gt;并行job，job分为多个队列，每个队列job执行相同任务，且同时执行，如计算过程；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建job&#34;&gt;创建job&lt;/h2&gt;
&lt;p&gt;1、语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client daemonset]# kubectl explain job.spec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client job]# vim job1.yaml 
[root@client job]# cat job1.yaml 
apiVersion: batch/v1
kind: Job
metadata:
 name: job1
spec:
 template:
  spec:
   containers:
    - name: alpine
      image: alpine
      command: [&amp;quot;/bin/sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;sleep 20&amp;quot;]
   restartPolicy: OnFailure
# 默认策略是always重启，但job型pod不适用，应明确指定为never或onfailure，后者更合适；

[root@client job]# kubectl apply -f job1.yaml 
job.batch/job1 created
[root@client job]# kubectl get jobs
NAME   COMPLETIONS   DURATION   AGE
job1   0/1           3s         3s
# 运行后，其complations状态为1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建并行job&#34;&gt;创建并行job&lt;/h2&gt;
&lt;p&gt;1、定义并行数字段&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client job]# kubectl explain job.spec.parallelism
KIND:     Job
VERSION:  batch/v1

FIELD:    parallelism &amp;lt;integer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;job扩容&#34;&gt;job扩容&lt;/h2&gt;
&lt;p&gt;1、job执行时扩容方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl scale jobs/job1 --replicas=N
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;删除job&#34;&gt;删除job&lt;/h2&gt;
&lt;p&gt;1、job型pod无法正常完成，但又定义了一直重启的策略时，为避免pod一直重启占用资源，控制job的工作pod不会一直重启的参数，在job.spec下面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FIELDS:
   activeDeadlineSeconds	&amp;lt;integer&amp;gt;# pod的最大活动时间，超过即被杀死
     Specifies the duration in seconds relative to the startTime that the job
     may be active before the system tries to terminate it; value must be
     positive integer

   backoffLimit	&amp;lt;integer&amp;gt;# pod的重启尝试次数
     Specifies the number of retries before marking this job failed. Defaults to
     6
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;cronjob&#34;&gt;cronjob&lt;/h1&gt;
&lt;p&gt;​	类似linux的crontab，crontab控制周期性的计划任务，或一次性的计划任务；&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client job]# kubectl explain cronjob.spec
# 2个必需字段
jobTemplate	&amp;lt;Object&amp;gt; -required-
     Specifies the job that will be created when executing a CronJob.

   schedule	&amp;lt;string&amp;gt; -required-
     The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;1、yaml文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cronjob]# cat cronjob.yaml 
apiVersion: batch/v1beta1
kind: CronJob
metadata:
 name: cronjob-1
 labels:
  app: cronjob-1
spec:
 schedule: &amp;quot; */2 * * * * &amp;quot;
 jobTemplate:
  metadata:
   labels:
    app: mycronjob
  spec:
   parallelism: 2
   template:
    spec:
     containers:
      - name: myjob
        image: alpine
        command:
         - /bin/sh
         - -c
         - data;echo hello k8s;sleep 10
     restartPolicy: OnFailure
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cronjob]# kubectl apply -f cronjob.yaml 
cronjob.batch/cronjob-1 created
[root@client cronjob]# kubectl get cronjob
NAME        SCHEDULE        SUSPEND   ACTIVE   LAST SCHEDULE   AGE
cronjob-1    */2 * * * *    False     0        &amp;lt;none&amp;gt;          5s

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看cronjob创建的job&lt;/p&gt;
&lt;p&gt;​	类比deployment管理rs，cronjob通过管理job实现，创建cronjob时，其会创建job，job名为定义cronjob的标签加上hash值后缀；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client cronjob]# kubectl get jobs
NAME                   COMPLETIONS   DURATION   AGE
cronjob-1-1605520680   2/1 of 2      30s        2m30s
cronjob-1-1605520800   2/1 of 2      29s        30s

---
[root@client cronjob]# cat cronjob.yaml 
apiVersion: batch/v1beta1
kind: CronJob
metadata:
 name: cronjob-1
 labels:
  app: cronjob-1
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;replicationcontroller&#34;&gt;replicationcontroller&lt;/h1&gt;
&lt;p&gt;​	早期的pod控制器，replicaset是其升级版&lt;/p&gt;
&lt;h1 id=&#34;pod中断预算&#34;&gt;pod中断预算&lt;/h1&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/configure-pdb/&#34;&gt;官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自愿中断：&lt;/p&gt;
&lt;p&gt;​	可预期的变化，如pod版本变更，节点迁移等&lt;/p&gt;
&lt;p&gt;非自愿中断：&lt;/p&gt;
&lt;p&gt;​	不可预期变化，如硬件，系统突然故障，磁盘故障等，&lt;/p&gt;
&lt;p&gt;中断预算：&lt;/p&gt;
&lt;p&gt;​	podDisruptionBudget，简称PDB，意思是在自愿中断的情况下，发生变更时，仍然要保证的pod的数量在预算内，从而保证服务的可用性，&lt;/p&gt;
&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;
&lt;p&gt;​	值得注意的是，做中断预算时，selector部分要和其要“预算”的控制器保持一致，&lt;strong&gt;即采用相同的控制器能过滤出同一组的pod；&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client pdb]# kubectl explain pdb
KIND:     PodDisruptionBudget
VERSION:  policy/v1beta1

DESCRIPTION:
     PodDisruptionBudget is an object to define the max disruption that can be
     caused to a collection of pods

FIELDS:
   apiVersion	&amp;lt;string&amp;gt;
     APIVersion defines the versioned schema of this representation of an
     object. Servers should convert recognized schemas to the latest internal
     value, and may reject unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/api-conventions.md#resources

   kind	&amp;lt;string&amp;gt;
     Kind is a string value representing the REST resource this object
     represents. Servers may infer this from the endpoint the client submits
     requests to. Cannot be updated. In CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds

   metadata	&amp;lt;Object&amp;gt;

   spec	&amp;lt;Object&amp;gt;
     Specification of the desired behavior of the PodDisruptionBudget.

   status	&amp;lt;Object&amp;gt;
     Most recently observed status of the PodDisruptionBudget.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;示例-1&#34;&gt;示例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@client pdb]# cat pdb.yaml 
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
 name: dep1-pdb
spec:
 minAvailable: 2
 selector:
  matchLabels:
   app: dep1-app

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/pod%E6%8E%A7%E5%88%B6%E5%99%A8/" term="pod控制器" label="pod控制器" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">k8s之pod管理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/k8s%E4%B9%8Bpod%E7%AE%A1%E7%90%86/" />
            <id>https://latteStudio.github.io/posts/k8s%E4%B9%8Bpod%E7%AE%A1%E7%90%86/</id>
            <updated>2020-11-18T15:19:01&#43;08:00</updated>
            <published>2020-11-11T14:30:01&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">k8s之pod管理</summary>
            
                <content type="html">&lt;h1 id=&#34;容器与pod&#34;&gt;容器与pod&lt;/h1&gt;
&lt;h2 id=&#34;pod简介&#34;&gt;pod简介&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;pod是一组相关容器的集合：借助基础容器pause组成而成，pod中容器共享UTS、IPC、PID，但在mount、user、pid上又是隔离的，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	pod是k8s集群管理的最小调度单元，&lt;strong&gt;也是k8s集群的核心资源，围绕其延伸出其他一系列资源，都为其提供服务：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	deployment、replicatset、replicatcontroller用来管理无状态如web容器的运行；statufulset和operator管理有状态如db容器的运行；service和ingress为其暴露容器中提供的应用；configmap和secret为其提供一般配置和敏感配置功能；pv和pvc为pod提供可靠的持久数据存储；&lt;/p&gt;
&lt;h2 id=&#34;pod架构&#34;&gt;pod架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201111150215013.png&#34; alt=&#34;image-20201111150215013&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pod中容器组合模型&#34;&gt;pod中容器组合模型&lt;/h2&gt;
&lt;h3 id=&#34;边车模型&#34;&gt;边车模型&lt;/h3&gt;
&lt;p&gt;​	即pod中一个主应用容器，其他容器为其提供辅助功能，如为web主容器的提供的日志收集，为db主容器启用本地缓存；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201111152657967.png&#34; alt=&#34;image-20201111152657967&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;大使模型&#34;&gt;大使模型&lt;/h3&gt;
&lt;p&gt;​	即为远程服务创建一个本地代理，例如：主容器需要访问远程的redis应用，只需为其创建一个辅助容器在本地，访问时通过localhost访问辅助容器，间接访问到远程的redis服务；&lt;/p&gt;
&lt;p&gt;​	远程redis服务发生变更时，只需修改辅助容器即可，主容器无需变更；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201111152929753.png&#34; alt=&#34;image-20201111152929753&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;适配器模型&#34;&gt;适配器模型&lt;/h3&gt;
&lt;p&gt;​	此种模型中，辅助容器起到了一个中间者标准化的作用，例如不管主容器输出日志格式如何，辅助容器都可以将其统一为一种格式输出，方便日志收集器收集，&lt;strong&gt;避免了日志收集器和主容器做任何变更；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201111153211044.png&#34; alt=&#34;image-20201111153211044&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;管理pod中容器&#34;&gt;管理pod中容器&lt;/h1&gt;
&lt;h2 id=&#34;定义pod常用字段&#34;&gt;定义pod常用字段&lt;/h2&gt;
&lt;p&gt;​	利用yaml文件定义pod资源时，常用的字段有：资源名，镜像的版本名，要暴露的端口，容器的入口程序，环境变量，pod需要的最低资源配置和最高上限，存储卷、运行身份serviceaccount、等；&lt;/p&gt;
&lt;h2 id=&#34;镜像拉取策略&#34;&gt;镜像拉取策略&lt;/h2&gt;
&lt;p&gt;​	k8s集群的每个节点都需要为其容器引擎如docker配置合适的镜像仓库地址，如dockerhub（默认）或私有仓库；&lt;/p&gt;
&lt;p&gt;​	imagepullPolicy定义了镜像的拉取策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;always：总是去拉取最新的即lateset标签的镜像&lt;/li&gt;
&lt;li&gt;ifnotpresent：本地不存在的镜像再去拉取&lt;/li&gt;
&lt;li&gt;never：只使用本地镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	带有认证的私有仓库，都需要登陆，1：每个节点docker login先登陆一次；2、将认证信息定义为secret资源，在imagepullSecrets中调用；&lt;/p&gt;
&lt;h2 id=&#34;端口暴露&#34;&gt;端口暴露&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ports:
 - name: http # 给端口起个名字，
   containerPort: 80 # 要暴露的容器端口
    protocol: TCP # 协议，默认tcp，也可udp 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	对应pod的ip和开放端口，只有同一个集群内主机节点，和集群内其他pod可以访问，&lt;strong&gt;集群外部主机是无法访问，因此需要借助service或ingress资源来向集群外部暴露；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hostport字段：&lt;/p&gt;
&lt;p&gt;​	该字段可以将pod的端口映射到指定的节点的某端口上，从而可以通过访问节点某端口进而访问到pod；&lt;/p&gt;
&lt;p&gt;nodeport字段：&lt;/p&gt;
&lt;p&gt;​	属于service中定义，与hostport不同的时，该定义会再集群每个节点多映射一该端口，而hostport只在pod运行的节点上映射；&lt;/p&gt;
&lt;h2 id=&#34;修改容器中的运行程序&#34;&gt;修改容器中的运行程序&lt;/h2&gt;
&lt;p&gt;​	在docker镜像中，dockerfile通过entrypoint指定容器中运行程序，cmd指定传递给运行程序的参数；或采用cmd直接一起传递运行程序和其参数；&lt;/p&gt;
&lt;p&gt;​	在定义pod的清单时：&lt;/p&gt;
&lt;p&gt;​	command字段可以指定容器中运行的程序，会覆盖镜像中默认定义，args字段可以给要运行的程序传递参数；&lt;strong&gt;若只定义了args字段，将作为参数传递给镜像中默认运行程序，若只定义了command字段，将覆盖镜像原有程序，并以无参数方式运行；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;环境变量&#34;&gt;环境变量&lt;/h2&gt;
&lt;p&gt;​	args可以向容器中应用传递配置信息，环境变量也可以实现；将配置信息定义成环境变量，在启动容器时，将清单中定义的环境传递给容器，实现容器的配置；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;该方式需要容器中应该支持环境变量的配置方式，如程序主程序文件可以接收一些命令行参数做配置，不支持应用的解决方法，通过entrypoint脚本，脚本中将args传入的环境变量，依次替换到程序的配置文件中，实现配置；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向pod中容器传递环境变量方法：env和envFrom，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;env：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;env字段，是环境变量组成的列表；
name和value组成的kv数据

eg;

spec:
 containers:
  - name: filebeat
    image: ikubernetes/filebeat:5.6.5-alpine
    env:
     - name: REDIE_HOST
       value: myredis.io:6379
     - name: LOG_LEVEL
       value: info
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	环境变量会直接注入到容器的shell环境变量中，printenv可以看出；&lt;/p&gt;
&lt;h2 id=&#34;共享主机网络hostnetwork&#34;&gt;共享主机网络hostNetwork&lt;/h2&gt;
&lt;p&gt;​	有些pod会需要能访问宿主节点的网络名称空间，如kubeadm部署的k8s组件：api-server、sechduler、kube-proxy等；在yaml文件中，定义字段&lt;code&gt;hostNetwork: true&lt;/code&gt;即可；pod监听的端口，也是监听在宿主节点上；&lt;/p&gt;
&lt;p&gt;eg：以api-server为例，就设定了hostnetwork选项；其监听的6443端口，也监听到了节点上；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# vim /etc/kubernetes/manifests/kube-apiserver.yaml 
[root@master ~]# grep hostNetwork !$
grep hostNetwork /etc/kubernetes/manifests/kube-apiserver.yaml
  hostNetwork: true
[root@master ~]# ss -nlt |grep 6443
LISTEN     0      128         :::6443                    :::*         
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	另外，hostPID，hostIPC还可以共享节点的pid和ipc名称空间；&lt;/p&gt;
&lt;h2 id=&#34;pod安全上下文&#34;&gt;pod安全上下文&lt;/h2&gt;
&lt;p&gt;​	可以设置pod或容器的权限，访问控制功能；常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于用户id的访问权限&lt;/li&gt;
&lt;li&gt;基于selinux的安全标签&lt;/li&gt;
&lt;li&gt;是否能权限升级&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl explain pods.spec.containers.securityContext

[root@client ~]# kubectl explain pods.spec.securityContext

#可分别在pod和containers级别设置；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;标签与标签选择器&#34;&gt;标签与标签选择器&lt;/h1&gt;
&lt;h2 id=&#34;标签示例&#34;&gt;标签示例&lt;/h2&gt;
&lt;p&gt;​	一个集群中，会有各种不同种类的资源，此时借助标签，可以将不同的资源归类，&lt;strong&gt;定义资源时添加，或随时动态添加标签都可以，然后利用标签选择器过滤出特定标签的资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	资源常用的分类维度举例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签种类&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;环境标签&lt;/td&gt;
&lt;td&gt;env:dev  env:test  env:production&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;版本标签&lt;/td&gt;
&lt;td&gt;release:stable  release:beta  release:cannary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用&lt;/td&gt;
&lt;td&gt;app:ui  app:pc  app:mobile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;架构层级&lt;/td&gt;
&lt;td&gt;tier: frontend  tier:backend  tier:middlerware&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分区&lt;/td&gt;
&lt;td&gt;partion:partA  partion:partB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;品控级别&lt;/td&gt;
&lt;td&gt;track:daily  track:weekly&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201112104411882.png&#34; alt=&#34;image-20201112104411882&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;标签规范&#34;&gt;标签规范&lt;/h2&gt;
&lt;p&gt;格式：key_prefix/key_value&lt;/p&gt;
&lt;p&gt;其中，key最多63字符，prefix可省略，一般k8s官方组件或第三方组件会填相应前缀，如KEY.kubernetes.io/VALUE&lt;/p&gt;
&lt;p&gt;prefix为dns域名形式，以.隔开，最大253字符&lt;/p&gt;
&lt;h2 id=&#34;管理标签&#34;&gt;管理标签&lt;/h2&gt;
&lt;h3 id=&#34;添加标签给pod&#34;&gt;添加标签给pod&lt;/h3&gt;
&lt;p&gt;1、添加标签给pod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# cat pod-with-label.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: pod-with-label
 labels:
  env: dev
  tier: fronted
spec:
 containers:
  - name: myapp
    image: ikubernetes/myapp:v1
    
[root@client k8s_yaml]# kubectl apply -f pod-with-label.yaml 
pod/pod-with-label created    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看标签&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 根据具体的标签键值过滤出pod
[root@client k8s_yaml]# kubectl get pods -L env=production
NAME             READY   STATUS    RESTARTS   AGE    ENV=PRODUCTION
pod-with-label   1/1     Running   0          116s   

# 过滤出具有tier标签的pod
[root@client k8s_yaml]# kubectl get pods -L tier
NAME             READY   STATUS    RESTARTS   AGE     TIER
pod-with-label   1/1     Running   0          2m10s   fronted

# 添加新标签
[root@client k8s_yaml]# kubectl label pods/pod-with-label release=stable
pod/pod-with-label labeled
[root@client k8s_yaml]# kubectl get pods --show-labels
NAME             READY   STATUS    RESTARTS   AGE   LABELS
pod-with-label   1/1     Running   0          13m   env=dev,release=stable,tier=fronted
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;定义标签选择器&#34;&gt;定义标签选择器&lt;/h3&gt;
&lt;p&gt;​	pod资源定义时添加的标签，在replicaset、deployment、service中，就需要定义相应的标签选择器来匹配相应的pod对象；&lt;strong&gt;定义字段为selector，selector中定义时有matchlabels和matchExpressssions两种，1是等值匹配确定的标签、2是范围匹配一类标签&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;selector:
 matchLabels:
  env: test
  app: db
 matchExpressions:
  - {key: tier, operator: In, values: {cache}}
  - {key: env, operator: Exists, values: }

# matchLabels是等值
# matchExpressions是范围 
多个条件之间是与的关系，需要同时满足；
matchExpressions的语法格式：
- {key: 某个key, operator: 动作in、notin、exists等, values: 比对的值，可以为空}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;节点选择器&#34;&gt;节点选择器&lt;/h2&gt;
&lt;p&gt;​	pod对象定义的spec.nodeselector可以选择pod运行时所选择的节点，如架构类型，os类型，硬件是否ssd，是否有gpu等，定义后，scheduler在调度pod时就会根据pod中定义的节点选择要求，选择与之匹配的节点进行运行pod；&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;当然节点上要事先定义好相应的标签，来标识节点的某些特性，如硬盘类型；节点本身自带一些标签：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl get nodes --show-labels
NAME     STATUS   ROLES    AGE   VERSION   LABELS
master   Ready    master   2d    v1.12.9   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=master,node-role.kubernetes.io/master=
node1    Ready    &amp;lt;none&amp;gt;   28h   v1.12.9   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=node1
node2    Ready    &amp;lt;none&amp;gt;   45h   v1.12.9   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=node2
node3    Ready    &amp;lt;none&amp;gt;   27h   v1.12.9   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=node3

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、给pod定义nodeselector&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# cat pod-with-label.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: pod-with-label
 labels:
  env: dev
  tier: fronted
spec:
 nodeSelector:
  disktype: ssd
 containers:
  - name: myapp
    image: ikubernetes/myapp:v1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、给节点打对应标签&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl label nodes/node3 disktype=ssd
node/node3 labeled

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看调度效果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl apply -f pod-with-label.yaml 
pod/pod-with-label created
[root@client k8s_yaml]# kubectl get pods -o wide
NAME             READY   STATUS              RESTARTS   AGE   IP       NODE    NOMINATED NODE
pod-with-label   0/1     ContainerCreating   0          2s    &amp;lt;none&amp;gt;   node3   &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;资源注解&#34;&gt;资源注解&lt;/h1&gt;
&lt;p&gt;​	资源注解：annotation，是类似标签&lt;strong&gt;的键值数据&lt;/strong&gt;，用于标识某对象的元数据信息，只是不能像标签 一样用来过对象的过滤，长度不受限制，可是结构化或非结构化数据；&lt;/p&gt;
&lt;p&gt;​	常用示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像相关信息：时间戳，git分支，哈希值等&lt;/li&gt;
&lt;li&gt;人员联系方式：&lt;/li&gt;
&lt;li&gt;指向日志、监控、分析或审计仓库的指针&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看注解&#34;&gt;查看注解&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl get pods -o yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {&amp;quot;apiVersion&amp;quot;:&amp;quot;v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;Pod&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;labels&amp;quot;:{&amp;quot;env&amp;quot;:&amp;quot;dev&amp;quot;,&amp;quot;tier&amp;quot;:&amp;quot;fronted&amp;quot;},&amp;quot;name&amp;quot;:&amp;quot;pod-with-label&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;default&amp;quot;},&amp;quot;spec&amp;quot;:{&amp;quot;containers&amp;quot;:[{&amp;quot;image&amp;quot;:&amp;quot;ikubernetes/myapp:v1&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;myapp&amp;quot;}],&amp;quot;nodeSelector&amp;quot;:{&amp;quot;disktype&amp;quot;:&amp;quot;ssd&amp;quot;}}}
# 注意：在annotation中保存了pod在yaml中定义的信息，用于下次定义变动时做比对；


[root@client k8s_yaml]# kubectl describe pods/pod-with-label
Name:               pod-with-label
Namespace:          default
Priority:           0
PriorityClassName:  &amp;lt;none&amp;gt;
Node:               node3/192.168.80.108
Start Time:         Thu, 12 Nov 2020 15:19:41 +0800
Labels:             env=dev
                    tier=fronted
Annotations:        kubectl.kubernetes.io/last-applied-configuration:
                      {&amp;quot;apiVersion&amp;quot;:&amp;quot;v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;Pod&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;labels&amp;quot;:{&amp;quot;env&amp;quot;:&amp;quot;dev&amp;quot;,&amp;quot;tier&amp;quot;:&amp;quot;fronted&amp;quot;},&amp;quot;name&amp;quot;:&amp;quot;pod-with-label&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;管理注解&#34;&gt;管理注解&lt;/h2&gt;
&lt;p&gt;​	可以在命令行或yaml文件中定义；&lt;/p&gt;
&lt;p&gt;命令行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl annotate pods POD-NAME ilinux.io/created-by=&amp;quot;cluster admin&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;yaml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# cat pod-with-label.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: pod-with-label
 labels:
  env: dev
  tier: fronted
 annotations:
  ilinux.io/created-by: cluster-admin
spec:
 nodeSelector:
  disktype: ssd
 containers:
  - name: myapp
    image: ikubernetes/myapp:v1
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;pod生命周期&#34;&gt;pod生命周期&lt;/h1&gt;
&lt;p&gt;​	pod在其创建开始，到，结束退出，会经过若干的阶段，pod处于不同的状态，大致有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main container：创建主容器，（必须）&lt;/li&gt;
&lt;li&gt;init container: 运行初始化容器，（如帮主容器挂载个配置文件之类的）&lt;/li&gt;
&lt;li&gt;post start hook: 容器启动后钩子函数&lt;/li&gt;
&lt;li&gt;liveness probe: 存活性探测&lt;/li&gt;
&lt;li&gt;readinesss probe: 就绪性探测&lt;/li&gt;
&lt;li&gt;pre stop hook: 容器停止前hook函数&lt;/li&gt;
&lt;li&gt;除了第一个，其余皆为非必须阶段，依据yaml文件定义而来；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod的几种状态&#34;&gt;pod的几种状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pending：api-server已经创建了pod对象，并存入etcd中，&lt;strong&gt;尚未完成调度，如镜像下载中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Running：pod完成调度，其中所有容器创建完成&lt;/li&gt;
&lt;li&gt;Succeded：pod中所有容器成功终止，不会被重启，如一次性的job容器&lt;/li&gt;
&lt;li&gt;Failed：至少一个容器终止失败；&lt;/li&gt;
&lt;li&gt;Unknown: 一般是api-server无法和节点的kubelet通信导致&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201112160652151.png&#34; alt=&#34;image-20201112160652151&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pod的创建过程9步&#34;&gt;pod的创建过程（9步）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过kubectl或其他客户端，提交一个创建pod的请求给api-server&lt;/li&gt;
&lt;li&gt;api-server接收后，先将spec写入etcd，并返回给客户端&lt;/li&gt;
&lt;li&gt;接收到刚刚的pod的spec定义后，此时api-server就发生了变化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;（其他组件都通过watch机制持续监测api-server的变化，其实是etcd的变化，api-server本身无状态）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;检测到后，schduler先发现一个新的pod定义，但没被调度，会先为其选择一个节点，返回给api-server&lt;/li&gt;
&lt;li&gt;api-server将选中的节点信息写入etcd&lt;/li&gt;
&lt;li&gt;被选中的节点上的kubelet监测到了这一结果，知道自己被选中了yep，然后kubelet调用容器引擎如docker，拉取镜像或利用本地镜像开始启动pod中所有容器，并将容器的状态信息结果返回给api-server&lt;/li&gt;
&lt;li&gt;api-server将接受到的pod的状态，写入etcd，即写入该pod的status属性&lt;/li&gt;
&lt;li&gt;etcd写入成功后，api-server发送确认给相关的kubelet，给个确认；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201112161348704.png&#34; alt=&#34;image-20201112161348704&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pod生命周期重点阶段&#34;&gt;pod生命周期重点阶段&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;pod中主要的就是主容器，和辅助容器，除此之外，还可以根据需求定义init-container，存活探测，就绪探测等；&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;init-container&#34;&gt;init-container&lt;/h3&gt;
&lt;p&gt;1、作用&lt;/p&gt;
&lt;p&gt;​	初始化容器的作用：通常是为主容器准备其所需要的环境，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探测其所依赖的服务是否可用&lt;/li&gt;
&lt;li&gt;根据环境变化、模版文件，修改注入配置文件&lt;/li&gt;
&lt;li&gt;挂载卷等&lt;/li&gt;
&lt;li&gt;从配置中心获取配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根据定义顺序依次执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必须全部执行成功，否则一直重启，除非restartPolicy定义了never&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供主容器独立性，变更尽量在init-container镜像，使得主容器镜像较少变更&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始容器和主容器，独立的mount、pid、user，使得可以分别使用自己的secret等敏感资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl explain pods.spec.initContainers
KIND:     Pod
VERSION:  v1

RESOURCE: initContainers &amp;lt;[]Object&amp;gt;
# 是一个容器定义的对象列表
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Pod
metadata:
 name: test-init-pod
 labels:
  app: myapp
spec:
 containers:
  - name: app1
   image: ikubernetes/myapp:v1
 initContaiers:
  - name: init-test
    image: busybox
    command: [&#39;sh&#39;,&#39;-c&#39;,&#39;sleep 10&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;hook函数&#34;&gt;hook函数&lt;/h3&gt;
&lt;p&gt;1、&lt;strong&gt;hook函数分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;poststart&lt;/strong&gt;：容器创建后运行的操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;prestop&lt;/strong&gt;：容器停止前运行的操作，完成后，容器才可删除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、&lt;strong&gt;hook函数定义的方式2种：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exec：进入容器，执行命令&lt;/li&gt;
&lt;li&gt;http：进入容器，向某url发起请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	定义在lifecycle中，也是个对象列表，在container下一层，定义在某个容器下一层，有poststart，和prestop两个字段，这俩也是列表，即可以定义多个hook行为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl explain pods.spec.containers.lifecycle
KIND:     Pod
VERSION:  v1

RESOURCE: lifecycle &amp;lt;Object&amp;gt;

DESCRIPTION:
     Actions that the management system should take in response to container
     lifecycle events. Cannot be updated.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVerson: v1
kind: Pod
metadata:
 name: test-pod
spec:
 containers:
  - name: app1
    image: some-image
    lifecycle:
     poststart:
      exec:
       command: [&amp;quot;/bin/sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;echo &#39;hello&#39; &amp;gt; /index.html&amp;quot;]  
     
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;容器探测&#34;&gt;容器探测&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;探测的种类：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存活性探测：容器running状态就通过，否则杀死重启，（依据restartPolicy）&lt;/li&gt;
&lt;li&gt;就绪性探测：容器内服务是否准备好，如nginx服务， 未好就从service后端端点移除，直到就绪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;探测的方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exec：根据容器中执行命令，命令返回状态0为正常&lt;/li&gt;
&lt;li&gt;tcpsocket：探测端口是否可以访问&lt;/li&gt;
&lt;li&gt;httpget：探测某url，2xx或3xx状态码正常&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器的重启策略&#34;&gt;容器的重启策略&lt;/h2&gt;
&lt;p&gt;三种重启策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alway，默认的，pod终止就尝试重启&lt;/li&gt;
&lt;li&gt;never，绝不重启&lt;/li&gt;
&lt;li&gt;onfailure：pod出错就重启&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反复重启时，时间间隔依次加长，直到最大300s，pod被绑定到某节点后，重启时就在该节点重启，除非节点故障重新调度，否则就在这个节点&lt;/p&gt;
&lt;h2 id=&#34;pod的终止过程５步&#34;&gt;pod的终止过程（５步）&lt;/h2&gt;
&lt;p&gt;​	pod的组成为多个容器，容器在节点内核看来，就是进程树上一个个进程，**因此停止pod就是停止节点上的容器的进程，通过发送信号实现，**过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户通过客户端发送删除指令，如kubectl delete&lt;/li&gt;
&lt;li&gt;api-server接受到后，更新该pod在etcd的状态，为terminating状态，（启动计数器默认30s，给容器从容退出的时间）&lt;/li&gt;
&lt;li&gt;其他组件：通过watch机制发现（同时）
&lt;ol&gt;
&lt;li&gt;该pod所在节点的kubelet监测到该pod变为terninating状态，即发送term信号给docker引擎，进而停止pod中容器&lt;/li&gt;
&lt;li&gt;若容器中定义了prestop操作会在接收term信号后先执行prestop，完毕后，再退出容器进程；&lt;/li&gt;
&lt;li&gt;端点endpoint控制器检测到pod的状态变化，会更新其所属service，将其移除service的可用列表中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;pod中所有容器停止后，kubelet会返回信息给api-server&lt;/li&gt;
&lt;li&gt;api-server会更新etcd中该pod的状态，计数器归0，删除该pod所有信息&lt;/li&gt;
&lt;li&gt;注：容器停止过程超过默认30s时，kubelet会发送sigkill信号，直接杀死相关容器进程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;图示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201113103126624.png&#34; alt=&#34;image-20201113103126624&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;pod存活性探测&#34;&gt;pod存活性探测&lt;/h1&gt;
&lt;p&gt;​	在pod的容器级别的下一层可以定义存活性探测字段：livenessprobe，其中有3种探测方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exec：在容器中执行命令，命令结果返回0则表示健康，否则不健康&lt;/li&gt;
&lt;li&gt;httpget：http请求访问容器某url，状态码2xx或3xx表示健康，否则异常&lt;/li&gt;
&lt;li&gt;tcpsocket：向目标容器建立tcp连接，成功建立正常，否则异常&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl explain pods.spec.containers.livenessProbe
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;exec探针&#34;&gt;exec探针&lt;/h2&gt;
&lt;p&gt;1、示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# cat pod-liveness.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: pod-liveness
spec:
 containers:
  - name: busybox
    image: busybox
    args: [&#39;/bin/sh&#39;, &#39;-c&#39;, &#39;touch /tmp/yes; sleep 30 ;rm -rf /tmp/yes&#39;]
    livenessProbe:
     exec:
      command: [&#39;test&#39;, &#39;-e&#39;, &#39;/tmp/yes&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看pod状态&lt;/p&gt;
&lt;p&gt;可以看到pod会不断重启，因为每30s后，探测/tmp/yes文件就会失败&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl get pods -o wide
NAME             READY   STATUS             RESTARTS   AGE   IP           NODE    NOMINATED NODE
pod-liveness     0/1     CrashLoopBackOff   8          25m   10.244.2.3   node1   &amp;lt;none&amp;gt;
pod-with-label   1/1     Running            1          19h   10.244.4.4   node3   &amp;lt;none&amp;gt;
[root@client k8s_yaml]# kubectl describe pods/pod-liveness
Events:
  Type     Reason     Age                 From               Message
  ----     ------     ----                ----               -------
  Normal   Scheduled  25m                 default-scheduler  Successfully assigned default/pod-liveness to node1
  Normal   Created    21m (x4 over 25m)   kubelet, node1     Created container
  Normal   Started    21m (x4 over 25m)   kubelet, node1     Started container
  Normal   Pulling    20m (x5 over 25m)   kubelet, node1     pulling image &amp;quot;busybox&amp;quot;
  Normal   Pulled     20m (x5 over 25m)   kubelet, node1     Successfully pulled image &amp;quot;busybox&amp;quot;
  Warning  BackOff    39s (x89 over 23m)  kubelet, node1     Back-off restarting failed container
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;http探针&#34;&gt;http探针&lt;/h2&gt;
&lt;p&gt;livenessProbe下级的httpGet方法定义了http探针的方式：&lt;/p&gt;
&lt;p&gt;1、语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# kubectl explain pods.spec.containers.livenessProbe.httpGet
KIND:     Pod
VERSION:  v1

RESOURCE: httpGet &amp;lt;Object&amp;gt;

DESCRIPTION:
     HTTPGet specifies the http request to perform.

     HTTPGetAction describes an action based on HTTP Get requests.

FIELDS:
   host	&amp;lt;string&amp;gt;
     Host name to connect to, defaults to the pod IP. You probably want to set
     &amp;quot;Host&amp;quot; in httpHeaders instead.

   httpHeaders	&amp;lt;[]Object&amp;gt;
     Custom headers to set in the request. HTTP allows repeated headers.

   path	&amp;lt;string&amp;gt;
     Path to access on the HTTP server.

   port	&amp;lt;string&amp;gt; -required-
     Name or number of the port to access on the container. Number must be in
     the range 1 to 65535. Name must be an IANA_SVC_NAME.

   scheme	&amp;lt;string&amp;gt;
     Scheme to use for connecting to the host. Defaults to HTTP.

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、示例yaml&lt;/p&gt;
&lt;p&gt;​	其中，lifecycle中postStart中利用exec向容器中nginx的网页文件目录写入一个健康页面，用于探测，livenessProbe中的httpGet指定端口、协议、检查页面来检查刚定义的健康页面；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# cat httpget-liveness.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: liveness-httpget
spec:
 containers:
  - name: nginx
    image: nginx:1.12-alpine
    ports:
     - name: http
       containerPort: 80
    lifecycle:
     postStart:
      exec:
       command: [&#39;/bin/sh&#39;, &#39;-c&#39;, &#39;echo healthy &amp;gt; /usr/share/nginx/html/healthy&#39;]
    livenessProbe:
     httpGet:
      path: /healthy
      port: http
      scheme: HTTP


# 刚运行后正常
[root@client k8s_yaml]# kubectl describe pods/liveness-httpget
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 连入容器，删除健康页面
[root@client k8s_yaml]# kubectl exec liveness-httpget rm  /usr/share/nginx/html/healthy


# 再次查看状态,从事件中可以看出探测失败，进行重启
Events:
  Type     Reason     Age                 From               Message
  ----     ------     ----                ----               -------
  Normal   Scheduled  9m19s               default-scheduler  Successfully assigned default/liveness-httpget to node2
  Normal   Pulling    9m18s               kubelet, node2     pulling image &amp;quot;nginx:1.12-alpine&amp;quot;
  Normal   Pulled     8m20s               kubelet, node2     Successfully pulled image &amp;quot;nginx:1.12-alpine&amp;quot;
  Normal   Created    6s (x2 over 8m20s)  kubelet, node2     Created container
  Normal   Started    6s (x2 over 8m20s)  kubelet, node2     Started container
  Warning  Unhealthy  6s (x3 over 26s)    kubelet, node2     Liveness probe failed: HTTP probe failed with statuscode: 404
  Normal   Killing    6s                  kubelet, node2     Killing container with id docker://nginx:Container failed liveness probe.. Container will be killed and recreated.
  Normal   Pulled     6s                  kubelet, node2     Container image &amp;quot;nginx:1.12-alpine&amp;quot; already present on machine
[root@client k8s_yaml]# kubectl describe pods/liveness-httpget

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tcp探针&#34;&gt;tcp探针&lt;/h2&gt;
&lt;p&gt;1、语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl explain pods.spec.containers.livenessProbe.tcpSocket
KIND:     Pod
VERSION:  v1

RESOURCE: tcpSocket &amp;lt;Object&amp;gt;

DESCRIPTION:
     TCPSocket specifies an action involving a TCP port. TCP hooks not yet
     supported

     TCPSocketAction describes an action based on opening a socket

FIELDS:
   host	&amp;lt;string&amp;gt;
     Optional: Host name to connect to, defaults to the pod IP.

   port	&amp;lt;string&amp;gt; -required-
     Number or name of the port to access on the container. Number must be in
     the range 1 to 65535. Name must be an IANA_SVC_NAME.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# cat tcpsocket.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: liveness-httpget
spec:
 containers:
  - name: nginx
    image: nginx:1.12-alpine
    ports:
     - name: http
       containerPort: 80
    lifecycle:
     postStart:
      exec:
       command: [&#39;/bin/sh&#39;, &#39;-c&#39;, &#39;echo healthy &amp;gt; /usr/share/nginx/html/healthy&#39;]
    livenessProbe:
     tcpSocket:
      port: http
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、测试：创建pod后，连入容器，将80端口禁掉，然后查看pod状态即可&lt;/p&gt;
&lt;h2 id=&#34;探测行为参数&#34;&gt;探测行为参数&lt;/h2&gt;
&lt;p&gt;常用属性值：第一次探测延时、超时时间、多少次探测失败认为失败等；&lt;/p&gt;
&lt;p&gt;默认参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Liveness:       http-get http://:http/healthy delay=0s timeout=1s period=10s #success=1 #failure=3

查看pod信息时，定义了livenessprobe，会有默认的相关参数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官方文档说明：可自定义覆盖默认属性值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl explain pods.spec.containers.livenessProbe.

FIELDS:
   exec	&amp;lt;Object&amp;gt;
     One and only one of the following should be specified. Exec specifies the
     action to take.

   failureThreshold	&amp;lt;integer&amp;gt;
     Minimum consecutive failures for the probe to be considered failed after
     having succeeded. Defaults to 3. Minimum value is 1.

   httpGet	&amp;lt;Object&amp;gt;
     HTTPGet specifies the http request to perform.

   initialDelaySeconds	&amp;lt;integer&amp;gt;
     Number of seconds after the container has started before liveness probes
     are initiated. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

   periodSeconds	&amp;lt;integer&amp;gt;
     How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
     value is 1.

   successThreshold	&amp;lt;integer&amp;gt;
     Minimum consecutive successes for the probe to be considered successful
     after having failed. Defaults to 1. Must be 1 for liveness. Minimum value
     is 1.

   tcpSocket	&amp;lt;Object&amp;gt;
     TCPSocket specifies an action involving a TCP port. TCP hooks not yet
     supported

   timeoutSeconds	&amp;lt;integer&amp;gt;
     Number of seconds after which the probe times out. Defaults to 1 second.
     Minimum value is 1. More info:
     https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;pod就绪性探测&#34;&gt;pod就绪性探测&lt;/h1&gt;
&lt;p&gt;​	存活性探测只能判断容器正常存活与否，但容器正常不代表其中进程提供的服务正常，可以提供对外服务，因为需要有就绪性探测；&lt;strong&gt;生产中一般需要定义合理的就绪性探测，不仅可以探测定义了就绪性探测的pod本身，其依赖的其他pod也都可以通过就绪性探测探测；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	和livenessProbe一样，探测方法有三种：tcpsocket、httpget、exec，以及可自定义的一些参数值&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl explain pods.spec.containers.readinessProbe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	可以探测的方面有：页面是否准备，数据是否加载，某依赖pod是否可访问&lt;/p&gt;
&lt;h1 id=&#34;资源需求与资源限制&#34;&gt;资源需求与资源限制&lt;/h1&gt;
&lt;p&gt;资源需求：&lt;/p&gt;
&lt;p&gt;​	分配pod时，其包含容器所需的最小资源量，（cpu和内存），必须找到满足这个下限的节点，pod才能分配成功，cpu可压缩，内存不可压缩，&lt;strong&gt;pod的资源需求实际作用实体是docker容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;资源限制：&lt;/p&gt;
&lt;p&gt;​	pod中容器在运行中，可以申请使用的最大的资源量，即上限&lt;/p&gt;
&lt;p&gt;资源单位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpu：毫核，1000毫核为1个虚拟cpu（虚拟机vcpu）或一个物理机核的超线程（一个逻辑cpu）如：500m为半个cpu&lt;/li&gt;
&lt;li&gt;内存：M K G&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;资源需求&#34;&gt;资源需求&lt;/h2&gt;
&lt;p&gt;1、语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl explain pods.spec.containers.resources
KIND:     Pod
VERSION:  v1

RESOURCE: resources &amp;lt;Object&amp;gt;

DESCRIPTION:
     Compute Resources required by this container. Cannot be updated. More info:
     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/

     ResourceRequirements describes the compute resource requirements.

FIELDS:
   limits	&amp;lt;map[string]string&amp;gt;
     Limits describes the maximum amount of compute resources allowed. More
     info:
     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/

   requests	&amp;lt;map[string]string&amp;gt;
     Requests describes the minimum amount of compute resources required. If
     Requests is omitted for a container, it defaults to Limits if that is
     explicitly specified, otherwise to an implementation-defined value. More
     info:
     https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、示例：&lt;/p&gt;
&lt;p&gt;​	该pod在调度时，schduler组件在选择node节点调度时，低于该requests的节点会被过滤掉；pod被调度节点后，节点会为其预留其request中定义的内存量，（因为内存不可压缩）但cpu过度压缩可能会导致pod几乎分不到cpu时间而异常；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spec:
 containers:
  - name: busybox
    image: busybox
    args: [&#39;/bin/sh&#39;, &#39;-c&#39;, &#39;touch /tmp/yes; sleep 30 ;rm -rf /tmp/yes&#39;]
    livenessProbe:
     exec:
      command: [&#39;test&#39;, &#39;-e&#39;, &#39;/tmp/yes&#39;]
    resources:
     requests:
      cpu: &amp;quot;500m&amp;quot;
      memory: &amp;quot;64Mi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;资源限制&#34;&gt;资源限制&lt;/h2&gt;
&lt;p&gt;​	**资源需求定义了pod运行的最小资源需求量，资源限制则定义了其运行中能够申请使用的最大资源量。**尤其可以避免容器中bug导致的不断占用cpu和内存资源，影响其他容器的现象；&lt;/p&gt;
&lt;p&gt;​	某节点所有运行pod的limit之和可以超过节点的总资源，即允许资源超配，分配pod时只看requests下限，不看limit上限；&lt;strong&gt;k8s确保pod的所需cpu的下限资源，但再多的就看节点空余，以及其他pod对资源的占用能力而定；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@master ~]# kubectl explain pods.spec.containers.resources.limits
KIND:     Pod
VERSION:  v1

FIELD:    limits &amp;lt;map[string]string&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# cat pod-limit.yaml 
apiVersion: v1
kind: Pod
metadata:
 name: pod-limit
spec:
 containers:
  - name: memleak-pod
    image: saadali/simmemlead
    resources:
     requests:
      memory: &amp;quot;64Mi&amp;quot;
      cpu: &amp;quot;1&amp;quot;
     limits:
      memory: &amp;quot;64Mi&amp;quot;
      cpu: &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;容器可见资源&#34;&gt;容器可见资源&lt;/h2&gt;
&lt;p&gt;​	在容器中可见到的资源其实是所在节点的资源量，示例如下：容器中看到的内存总量和节点的内存总量一致；&lt;strong&gt;可能带来的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pod中运行的java应用，未指定-Xmx指定确定的内存总量时，默认申请可见内存的30%，即节点的30%，显然有可能会超过limit限制而被OOMkilled&lt;/li&gt;
&lt;li&gt;pod中运行的nginx应用，worker_processer配置为auto，那么即可见所有cpu数，即主机的cpu核数个的工作线程，而容器限制的cpu一般小于节点cpu总数，则会产生大量上下文切换，消耗更多资源；&lt;/li&gt;
&lt;li&gt;解决方法：通过downward api将limits的定义上限暴露给容器，使得容器只看到limit限制的资源量，而非节点的；&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@client k8s_yaml]# kubectl exec pod-with-label -- cat /proc/meminfo |grep -i memtotal
MemTotal:         997980 kB
[root@client k8s_yaml]# free 
              total        used        free      shared  buff/cache   available
Mem:         997980      145180      504692        7840      348108      661876

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;pod服务质量qos&#34;&gt;pod服务质量QOS&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;节点上所有pod的limit之和可以大于节点资源总量，意味着：所有pod满载运行时，将有pod会被杀死，那么pod被杀的优先级由pod的（quality of service）决定；k8s给pod定义了三种级别的qos：由上到下，重要性依次降低&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;guaranteed：pod中所有容器都定义了相同值的requests和limits&lt;/li&gt;
&lt;li&gt;burstable：至少一个容器定义了request和limits值，但非全部&lt;/li&gt;
&lt;li&gt;besteffort：没有容器定义了requests和limits值，（出现资源紧张时会被最先杀死）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小结&#34;&gt;小结：&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;pod就是一组联系紧密的容器，共享network、uts、ipc和存储卷，通过pause容器结合一起&lt;/li&gt;
&lt;li&gt;分布式系统pod总容器组织方式：边车、本地代理、适配器&lt;/li&gt;
&lt;li&gt;k8s一切皆资源，基本都支持增删改查，支持陈述式命令、陈述式配置文件、声明式配置文件&lt;/li&gt;
&lt;li&gt;pod中容器常见的定制为暴露端口，传递环境变量，挂载卷&lt;/li&gt;
&lt;li&gt;标签和注解都为键值对数据，用于描述容器的元数据信息，标签可以被标签选择器选择过滤各种资源对象&lt;/li&gt;
&lt;li&gt;pod启动与停止过程&lt;/li&gt;
&lt;li&gt;存活和就绪性探测用于判定容器的状态&lt;/li&gt;
&lt;li&gt;资源limit和requests用于定义容器运行所需资源的上下限&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/k8s/" term="k8s" label="k8s" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/pod/" term="pod" label="pod" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">docker单机编排docker-compose</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/docker%E5%8D%95%E6%9C%BA%E7%BC%96%E6%8E%92docker-compose/" />
            <id>https://latteStudio.github.io/posts/docker%E5%8D%95%E6%9C%BA%E7%BC%96%E6%8E%92docker-compose/</id>
            <updated>2020-11-05T18:26:19&#43;08:00</updated>
            <published>2020-10-25T15:55:04&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docker单机编排docker-compose</summary>
            
                <content type="html">&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;官方文档介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	docker-compose为单机版的容器编排工具。&lt;/p&gt;
&lt;p&gt;​	在容器较多的情况下，手动一个个docker run就比较繁琐，且命令行方式无法复用，此时就需要用docker-compse这种编排工具管理多个容器，&lt;/p&gt;
&lt;p&gt;​	docker-compse为单机版管理，即只能管理一台docker host上的容器，跨主机即集群级别的编排容器，就需要用到docker-swarm，或kubernetes；&lt;/p&gt;
&lt;p&gt;​	docker-compse采用yml文件定义容器的状态，然后dokcer-compose解析文件，并依据其定义运行容器，相比于命令行，可重用性好；&lt;/p&gt;
&lt;p&gt;​	habor的组件容器，就是通过docker-compose以及一个yml文件定义的；&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;https://docs.docker.com/compose/install/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;yum安装&#34;&gt;yum安装&lt;/h2&gt;
&lt;p&gt;​	配置epel源，yum直接安装即可；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# yum install -y docker-compose
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.aliyun.com
 * extras: mirrors.aliyun.com
 * updates: mirrors.aliyun.com
Package docker-compose-1.18.0-4.el7.noarch already installed and latest version
Nothing to do

[root@host2 ~]# rpm -ql docker-compose


[root@host2 ~]# 
[root@host2 ~]# docker-compose --version
docker-compose version 1.18.0, build 8dd22a9
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;docker-compose管理容器&#34;&gt;docker-compose管理容器&lt;/h1&gt;
&lt;h2 id=&#34;语法格式&#34;&gt;语法格式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# docker-compose --help
Define and run multi-container applications with Docker.

Usage:
  docker-compose [-f &amp;lt;arg&amp;gt;...] [options] [COMMAND] [ARGS...]
  docker-compose -h|--help

Options:
  -f, --file FILE             Specify an alternate compose file (default: docker-compose.yml)
  -p, --project-name NAME     Specify an alternate project name (default: directory name)
  --verbose                   Show more output
  --no-ansi                   Do not print ANSI control characters
  -v, --version               Print version and exit
  -H, --host HOST             Daemon socket to connect to
......

# 一般创建一个单独目录，docker-compose会寻找该目录下的docker-compose.yml进行解析处理；-f选项可以指定其他文件名
# 项目名，默认为目录名
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-compose管理单个容器&#34;&gt;docker-compose管理单个容器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义docker-compose文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# cat docker-compose.yml 
web1:
 image: nginx
 expose:
  - 80
  - 443
 ports:
  - &amp;quot;80:80&amp;quot;
  - &amp;quot;443:443&amp;quot;
   
web1为标识符，标识定义一个容器的配置段；
一个yml文件中，可以有多个；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前台运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose up
Pulling web1 (nginx:latest)...
latest: Pulling from library/nginx
bb79b6b2107f: Pulling fs layer
...
   
默认在前台运行
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后台运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose up -d
Creating composetest_web1_1 ... done
   
# -d选项，后台运行；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 80和443端口也被映射到宿主机
[root@host3 ~]# ss -nlt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:22                             *:*                  
LISTEN     0      100        127.0.0.1:25                             *:*                  
LISTEN     0      128               :::80                            :::*                  
LISTEN     0      128               :::22                            :::*                  
LISTEN     0      100              ::1:25                            :::*                  
LISTEN     0      128               :::443                           :::*    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201104160130881.png&#34; alt=&#34;image-20201104160130881&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看容器进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose ps
       Name                     Command               State               Ports             
--------------------------------------------------------------------------------------------
composetest_web1_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:443-&amp;gt;443/tcp,         
                                                              0.0.0.0:80-&amp;gt;80/tcp   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;docker-compose管理多个容器&#34;&gt;docker-compose管理多个容器&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编辑docker-compse文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# cat docker-compose.yml 
web1:
 image: nginx
 expose:
  - 80
  - 443
 ports:
  - &amp;quot;80:80&amp;quot;
  - &amp;quot;443:443&amp;quot;
   
web2:
 image: nginx
 expose:
  - 80
  - 443
 ports:
  - &amp;quot;81:80&amp;quot;
  - &amp;quot;8443:443&amp;quot;
# 再继续定义容器即可
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose up -d
Starting composetest_web1_1 ... 
Starting composetest_web2_1 ... done
[root@host3 compose-test]# docker-compose ps
       Name                     Command               State               Ports             
--------------------------------------------------------------------------------------------
composetest_web1_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:443-&amp;gt;443/tcp,         
                                                              0.0.0.0:80-&amp;gt;80/tcp            
composetest_web2_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:8443-&amp;gt;443/tcp,        
                                                              0.0.0.0:81-&amp;gt;80/tcp     
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;docker-compose定义存储卷&#34;&gt;docker-compose定义存储卷&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备本地存储卷目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# mkdir /data/nginx -pv
mkdir: created directory ‘/data’
mkdir: created directory ‘/data/nginx’
[root@host3 compose-test]# echo volume-test &amp;gt; /data/nginx/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑docker-compose文件，用volumes字段定义存储卷&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# cat docker-compose.yml 
web1:
 image: nginx
 expose:
  - 80
  - 443
 ports:
  - &amp;quot;80:80&amp;quot;
  - &amp;quot;443:443&amp;quot;
   
web2:
 image: nginx
 expose:
  - 80
  - 443
 volumes:
  - /data/nginx:/usr/share/nginx/html
 ports:
  - &amp;quot;81:80&amp;quot;
  - &amp;quot;8443:443&amp;quot;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   
   
[root@host3 compose-test]# curl 192.168.80.102:81
volume-test
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;docker-compose常用命令&#34;&gt;docker-compose常用命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;停止&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose stop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose start
# 必须是已经启动的容器，若是第一次需要用up
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重启&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定某个容器启停&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 命令行中，指定需要启停的容器名称即可，
不加，默认是docker-compose文件中所有容器
[root@host3 compose-test]# docker-compose ps
       Name                     Command               State               Ports             
--------------------------------------------------------------------------------------------
composetest_web1_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:443-&amp;gt;443/tcp,         
                                                              0.0.0.0:80-&amp;gt;80/tcp            
composetest_web2_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:8443-&amp;gt;443/tcp,        
                                                              0.0.0.0:81-&amp;gt;80/tcp            
[root@host3 compose-test]# docker-compose stop web2
Stopping composetest_web2_1 ... done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;up和down，start和stop的区别&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose-test]# docker-compose up -d
Creating composetest_web1_1 ... done
[root@host3 compose-test]# docker-compose ps
       Name                     Command               State               Ports             
--------------------------------------------------------------------------------------------
composetest_web1_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:443-&amp;gt;443/tcp,         
                                                              0.0.0.0:80-&amp;gt;80/tcp            
[root@host3 compose-test]# docker-compose stop
Stopping composetest_web1_1 ... done
[root@host3 compose-test]# docker-compose ps
       Name                     Command               State    Ports
--------------------------------------------------------------------
composetest_web1_1   /docker-entrypoint.sh ngin ...   Exit 0        
[root@host3 compose-test]# docker-compose start
Starting web1 ... done
[root@host3 compose-test]# docker-compose ps
       Name                     Command               State               Ports             
--------------------------------------------------------------------------------------------
composetest_web1_1   /docker-entrypoint.sh ngin ...   Up      0.0.0.0:443-&amp;gt;443/tcp,         
                                                              0.0.0.0:80-&amp;gt;80/tcp            
[root@host3 compose-test]# docker-compose down
Stopping composetest_web1_1 ... done
Removing composetest_web1_1 ... done
[root@host3 compose-test]# docker-compose ps
Name   Command   State   Ports
------------------------------
   
up会创建并运行容器，适合第一次运行的docker-compoes.yaml文件
down与up相反，停止容器，并彻底删除
   
start和stop只是启停已经创建好的容器；
start是启动处于exited状态的容器，尚未创建的容器无法start，必须先up
stop是停止正在运行中的容器；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;docker-compose实现单机hanginxtomcat&#34;&gt;docker-compose实现单机ha+nginx+tomcat&lt;/h1&gt;
&lt;h2 id=&#34;准备镜像&#34;&gt;准备镜像&lt;/h2&gt;
&lt;h3 id=&#34;haproxy镜像&#34;&gt;haproxy镜像&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;准备dockerfile工作目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑haproxy镜像的dokcerfile文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备haproxy.cfg，源码包，容器入口脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备dockerfile工作目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# mkdir /dockerfile/web -pv
mkdir: created directory ‘/dockerfile’
mkdir: created directory ‘/dockerfile/web’
[root@host3 ~]# cd /dockerfile/web/
[root@host3 web]# mkdir nginx
[root@host3 web]# mkdir tomcat
[root@host3 web]# mkdir haproxy
[root@host3 web]# ll
total 0
drwxr-xr-x 2 root root 6 Nov  5 10:47 haproxy
drwxr-xr-x 2 root root 6 Nov  5 10:47 nginx
drwxr-xr-x 2 root root 6 Nov  5 10:47 tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑haproxy镜像的dokcerfile文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 haproxy]# cat Dockerfile 
# haproxy image build
from centos:7.2.1511
maintainer wang@gmail.com
   
add haproxy-1.7.12.tar.gz /usr/local/src
run rm -rf /etc/yum.repos.d/*
run curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
run yum install -y gcc gcc++ pcre pcre-devel
   
run rpm --rebuilddb &amp;amp;&amp;amp; yum install -y systemd-devel zlib-devel openssl-devel
run rpm --rebuilddb &amp;amp;&amp;amp; yum install -y make
run cd /usr/local/src/haproxy-1.7.12/ &amp;amp;&amp;amp; make TARGET=linux2628 USE_PCRE=1 USE_ZLIB=1 USE_SYSTEMD=1 ARCh=x86_64 prefix=/usr/local/haproxy &amp;amp;&amp;amp; make install PREFIX=/usr/local/haproxy
   
add haproxy.cfg  /etc/haproxy/
run mkdir /var/lib/haproxy &amp;amp;&amp;amp; touch /var/lib/haproxy
copy run_ha.sh /etc/haproxy/
expose 80 9999
   
cmd /etc/haproxy/run_ha.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备haproxy.cfg，源码包，容器入口脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 haproxy]# wget https://www.haproxy.org/download/1.7/src/haproxy-1.7.12.tar.gz
   
[root@host3 haproxy]# pwd
/dockerfile/web/haproxy
[root@host3 haproxy]# ll
total 1732
-rw-r--r-- 1 root root     735 Nov  5 10:54 Dockerfile
-rw-r--r-- 1 root root 1760527 Oct 25  2019 haproxy-1.7.12.tar.gz
-rw-r--r-- 1 root root    1988 Nov  5 10:55 haproxy.cfg
-rw-r--r-- 1 root root      80 Nov  5 10:54 run_ha.sh
[root@host3 haproxy]# cat run_ha.sh 
   
/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg
tail -f /etc/hosts
[root@host3 haproxy]
   
---
[root@host3 haproxy]# cat haproxy.cfg 
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2
     
    chroot      /var/lib/haproxy
   
    pidfile     /var/run/haproxy.pid
   
    maxconn     4000
    
 uid 99
 gid 99
   
 daemon
    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
   
   
#---------------------------------------------------------------------
# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
   
   
listen stats
 mode http
 bind *:9999
 stats enable
 log global
 stats uri /ha-status
 stats auth admin:admin
   
listen web1
 bind *:80
 mode http
 log global
 balance roundrobin
 server web1 192.168.80.101:8080 check inter 3000 fall 2 rise 5
 server web2 192.168.80.101:8081 check inter 3000 fall 2 rise 5
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 haproxy]# docker build -t notechbb/haproxy:centos7.2 .
   
[root@host3 haproxy]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
notechbb/haproxy    centos7.2           3dd465ba4172        39 seconds ago      606MB
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;nginx镜像&#34;&gt;nginx镜像&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编辑nginx的dockerfile文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备nginx源码包，配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑nginx的dockerfile文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 nginx]# cat Dockerfile 
# 将编译安装nginx的步骤，写为dockerfile指令即可；
# Dockerfile需要D大写
# 创建目录，用于dockerfile的编写
   
   
# dockerfile compile nginx
From centos:7.2.1511
maintainer wang@qq.com
# 基础镜像为centos，作者信息；
   
   
run rm -rf /etc/yum.repos.d/*
run curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
   
run yum install -y lrzsz gcc gcc-c++ pcre-devel openssl-devel zlib-devel
# 配置yum源，安装基础包
   
run rpm --rebuilddb &amp;amp;&amp;amp;  yum install -y make
   
add nginx-1.14.2.tar.gz /usr/local/src
# run tar -xf /usr/local/src/nginx-1.14.2.tar.gz -C /usr/local/src
# 将源码包，复制到容器内的文件系统目录中，注意：不需要解压，会自动解压！
   
   
run useradd nginx
run cd /usr/local/src/nginx-1.14.2/ &amp;amp;&amp;amp; ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio --with-stream_realip_module --with-stream_ssl_module --with-stream --with-pcre --with-http_gzip_static_module --with-http_realip_module
# 添加用户，进入目录，configure
   
   
run cd /usr/local/src/nginx-1.14.2/ &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
# 根据实验中报错，再安装make包，编译，和安装
   
   
add nginx.conf /usr/local/nginx/conf
run ln -sv /usr/local/nginx/sbin/nginx /usr/sbin/nginx
run echo &amp;quot;dockerfile bianyi nginx&amp;quot; &amp;gt; /usr/local/nginx/html/index.html
# 复制配置文件、做主程序软链接，自定义主页文件
   
expose 80
cmd [&amp;quot;/usr/sbin/nginx&amp;quot;]
# 暴露80端口，定义运行为容器时，执行的命令
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备nginx源码包，配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 nginx]# wget http://nginx.org/download/nginx-1.14.2.tar.gz
   
[root@host3 nginx]# tar -xf nginx-1.14.2.tar.gz -C /root/
   
[root@host3 nginx]# cp /root/nginx-1.14.2/conf/nginx.conf .
[root@host3 nginx]# ll
total 1000
-rw-r--r-- 1 root root    1604 Nov  5 11:17 Dockerfile
-rw-r--r-- 1 root root 1015384 Dec  4  2018 nginx-1.14.2.tar.gz
-rw-r--r-- 1 root root    2656 Nov  5 11:19 nginx.conf
   
# 修改为前台运行
[root@host3 nginx]# vim nginx.conf 
   
[root@host3 nginx]# grep dae nginx.conf 
daemon off;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 nginx]# docker build -t notechbb/nginx:v1.14.2 .
   
[root@host3 nginx]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
notechbb/nginx      v1.14.2             6d3c38cfd4f1        10 minutes ago      555MB
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编辑docker-composeyml&#34;&gt;编辑docker-compose.yml&lt;/h2&gt;
&lt;p&gt;1、编写yml文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose]# cat docker-compose.yml 

nginx1:
 image: notechbb/nginx:v1.14.2
 container_name: n1
 expose:
  - 80
 volumes:
  - /data/n1.html:/usr/local/nginx/html/index.html
nginx2:
 image: notechbb/nginx:v1.14.2
 container_name: n2
 expose:
  - 80
 volumes:
  - /data/n2.html:/usr/local/nginx/html/index.html
haproxy:
 image: notechbb/haproxy:centos7.2
 ports:
  - &amp;quot;9999:9999&amp;quot;
  - &amp;quot;80:80&amp;quot;
 container_name: ha1
 links:
  - nginx1
  - nginx2
 volumes:
  - /data/haproxy.cfg:/etc/haproxy/haproxy.cfg

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、准备要挂载的数据卷文件；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose]# echo n1-index &amp;gt; /data/n1.html
[root@host3 compose]# echo n2-index &amp;gt; /data/n2.html

[root@host3 compose]# ll /data/
total 12
-rw-r--r-- 1 root root 1960 Nov  5 16:57 haproxy.cfg
-rw-r--r-- 1 root root    9 Nov  5 16:54 n1.html
-rw-r--r-- 1 root root    9 Nov  5 16:54 n2.html
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;启动并验证&#34;&gt;启动并验证&lt;/h2&gt;
&lt;p&gt;1、启动，查看容器进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 compose]# docker-compose up -d

[root@host3 compose]# docker-compose ps
Name              Command               State                     Ports                   
------------------------------------------------------------------------------------------
ha1    /bin/sh -c /etc/haproxy/ru ...   Up      0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:9999-&amp;gt;9999/tcp
n1     /usr/sbin/nginx                  Up      80/tcp                                    
n2     /usr/sbin/nginx                  Up      80/tcp   

---
[root@host3 compose]# ss -nlt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:22                             *:*                  
LISTEN     0      100        127.0.0.1:25                             *:*                  
LISTEN     0      128               :::9999                          :::*                  
LISTEN     0      128               :::80                            :::*                  
LISTEN     0      128               :::22                            :::*                  
LISTEN     0      100              ::1:25                            :::*   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、浏览器访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201105170406977.png&#34; alt=&#34;image-20201105170406977&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201105170356963.png&#34; alt=&#34;image-20201105170356963&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到的问题&#34;&gt;遇到的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;haproxy容器启动后即退出；原因：入口脚本，执行权限没加，docker-compose前台调试发现&lt;/li&gt;
&lt;li&gt;docker-compose.yml中定义顺序问题，haproxy用links引用了nginx的名称，因此nginx定义需要在前；&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker-compose/" term="docker-compose" label="docker-compose" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ansible之playbook与roles</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/ansible%E4%B9%8Bplaybook%E4%B8%8Eroles/" />
            <id>https://latteStudio.github.io/posts/ansible%E4%B9%8Bplaybook%E4%B8%8Eroles/</id>
            <updated>2021-03-09T12:29:15&#43;08:00</updated>
            <published>2020-10-25T15:54:32&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">ansible之playbook介绍与roles，yaml简介...</summary>
            
                <content type="html">&lt;h1 id=&#34;playbook基础&#34;&gt;playbook基础&lt;/h1&gt;
&lt;h2 id=&#34;playbook概念&#34;&gt;playbook概念&lt;/h2&gt;
&lt;p&gt;​	playbook是由一个或多个play组成的列表；play的作用：&lt;strong&gt;将预定义的一组主机，装扮成事先通过ansible中的task定义好的角色，task是调用ansible的module，将多个play组织在一个playbook中，让其按照编排的顺序执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	yaml语言编写&lt;/p&gt;
&lt;h2 id=&#34;playbook执行逻辑&#34;&gt;playbook执行逻辑&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201008173331897.png&#34; alt=&#34;image-20201008173331897&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;yaml概念&#34;&gt;yaml概念&lt;/h2&gt;
&lt;p&gt;yaml之于json&lt;/p&gt;
&lt;p&gt;类比：markdown之于html，都提高了后者的写的便捷性；&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://yaml.org/&#34;&gt;https://yaml.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	yaml是一种可读性强，用来表达资料序列的格式，作者clark evans&lt;/p&gt;
&lt;p&gt;​	yaml ain`t markup language&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;​	yet another markup language&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可读性好&lt;/li&gt;
&lt;li&gt;和脚本语言结合性好&lt;/li&gt;
&lt;li&gt;有一个一致的信息模型&lt;/li&gt;
&lt;li&gt;易于实现&lt;/li&gt;
&lt;li&gt;可基于流处理&lt;/li&gt;
&lt;li&gt;表达能力强，扩展性好&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yaml语法&#34;&gt;yaml语法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同一个yaml文件，用---区分多个档案&lt;/li&gt;
&lt;li&gt;#为注释&lt;/li&gt;
&lt;li&gt;缩进必须统一！空格和tab不能混用&lt;/li&gt;
&lt;li&gt;缩进级别需一致&lt;/li&gt;
&lt;li&gt;yaml区分大小写&lt;/li&gt;
&lt;li&gt;对应playbook，一个完整代码块至少包含name和task&lt;/li&gt;
&lt;li&gt;一个name只能有一个task&lt;/li&gt;
&lt;li&gt;文件扩展名.yml或.yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;yaml文件示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list列表

- apple
- mango
- orange

dictionary字典

name:wang
job:sre leader
字典的等同写法
(name:wang,job:sre leader)


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;yaml的playbook示例&#34;&gt;yaml的playbook示例&lt;/h2&gt;
&lt;p&gt;​	不仅有tasks还有pre_tasks和post_tasks&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
    - hosts: 192.168.100.59,192.168.100.65
      remote_user: root
      pre_tasks: 
        - name: set epel repo for Centos 7
          yum_repository: 
            name: epel7
            description: epel7 on CentOS 7
            baseurl: http://mirrors.aliyun.com/epel/7/$basearch/
            gpgcheck: no
            enabled: True

      tasks: 
# install nginx and run it
        - name: install nginx
          yum: name=nginx state=installed update_cache=yes
        - name: start nginx
          service: name=nginx state=started

      post_tasks: 
        - shell: echo &amp;quot;deploy nginx over&amp;quot;
          register: ok_var
        - debug: msg=&amp;quot;{{ ok_var.stdout }}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;常见数据交换格式&#34;&gt;常见数据交换格式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;li&gt;yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201008174605585.png&#34; alt=&#34;image-20201008174605585&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;playbook组成&#34;&gt;playbook组成&lt;/h1&gt;
&lt;h2 id=&#34;核心元素&#34;&gt;核心元素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hosts：远程主机列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tasks：任务集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;variables：内置变量和自定义变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;templates：模版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;handler结合notity：触发条件和对应操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tags：通过标签，用于跳过playbook中某些代码段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook -t tagsname useradd.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hosts&#34;&gt;hosts&lt;/h3&gt;
&lt;p&gt;​	hosts定义了在哪些远程主机上，以某个特定用户身份执行任务，需要在主机清单中实现定义；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.80.102
www.b.com
bbs.b.com

web:db 或
web:&amp;amp;db 且，取交集
web:!db 在web组，不在db组的

示例：
- hosts: websrvs:dbsrvs
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;remote_user&#34;&gt;remote_user&lt;/h3&gt;
&lt;p&gt;​	以远程主机上的哪个用户执行任务，用于host和task中，也可以用来执行sudo后的身份&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: web
 remote_user: root #指定全局的remoteuser为 root
 tasks:
  - name: test-ping
    ping: 
    remote_user: wang #该ping任务用wang用户，且使用sudo，sudo身份为root，且默认为root
    sudo: yes
    sudo_user: root
    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;tasks列表和actions&#34;&gt;tasks列表和actions&lt;/h3&gt;
&lt;p&gt;​	play的主体部分为task lists，任务列表中定义的任务，按照次序在各个hosts中顺序执行，在hosts中定义的所有主机上，&lt;/p&gt;
&lt;p&gt;​	task作用在于根据定义的参数、变量，调用并执行相应的模块，&lt;strong&gt;具有幂等性，因此多次执行是安全的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	每个task都应该设置合理，明确，见名知意的名字&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写task的2种格式：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;action: module arguments
modules: arguments （建议）
#shell和command模块后跟的arguments是命令，而非kv类型的键值对
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	&lt;strong&gt;某个任务执行后状态为changed，可以结合notify通知给handler做进一步处理，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;任务可以通过tags打标签，结合ansible-playbook的 -t参数进行调用或跳过调用&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tasks:
 - name: disable selinux
   command: /sbin/setenforce 0
# 任务名为关闭selinux，
# 调用command模块，执行的命令为/sbin/setfnforce 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	若命令或脚本的退出码不为0，可以采用以下方式忽略错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tasks:
 - name: test-ignore-error
   shell: /usr/bin/some-command || /bin/true
   
或者：

tasks:
 - name: test-ignore-error-2
   shell: /usr/bin/some-command
   ignore_errors: true
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook层级&#34;&gt;playbook层级&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;playbook可以包含多个play
&lt;ul&gt;
&lt;li&gt;一个play至少包含，一个hosts，一个tasks
&lt;ul&gt;
&lt;li&gt;一个tasks包含多个task，每个task基本都是调用的一个个ansible模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hosts-1&#34;&gt;hosts&lt;/h3&gt;
&lt;p&gt;​	定义要执行任务的主机，支持通配符，正则匹配，来表示一批相同特征的主机；&lt;/p&gt;
&lt;h3 id=&#34;remote_user-1&#34;&gt;remote_user&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;remote_user是ssh连接到各个节点的用户身份，不一定是执行任务的身份；become相关参数可以切换为别的身份来执行任务，没指定时默认是用remote_user执行任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	如：可以remote_user是ssh连接过去，用nginx的身份启动nginx进程，借助become-user=nginx实现&lt;/p&gt;
&lt;p&gt;​	remote_user的连接认证，可以通过ssh免密认证，指定密钥文件认证，指定密码认证，&lt;strong&gt;密码和密码文件一般可以写在主机清单的变量中，可以命令行传入！&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;tasks&#34;&gt;tasks&lt;/h3&gt;
&lt;p&gt;​	ps：shell和command模块的不具有幂等性的解决方法，&lt;strong&gt;以初始化mysql数据库为例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tasks:
 - name: init mysql datadir
   file: path=/data/mysql state=directory owner=mysql group=mysql mode=0755
   shell: &amp;quot;/usr/local/mysql/bin/mysql_install_db --datadir=/data/mysql --user=mysql creates=/mysql/data/ibdata1&amp;quot;

# 借助了creates参数实现；
# 第一次/mysql/data/ibdata1不存在，会支持初始化数据库目录的动作；之后再次执行，由于ibdata1文件已经存在，ansible不会再次执行该步动作；

# 介绍如下，shell和command参数，都可以通过该2个参数控制，实现类似的【幂等性】
[root@host2 ~]# ansible-doc -s shell
- name: Execute shell commands on targets
  shell:
      creates:               # A filename, when it already exists, this step will *not* be
                               run.

      removes:               # A filename, when it does not exist, this step will *not* be
                               run.

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;运行playbook&#34;&gt;运行playbook&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook filename.yaml ... [options]

常见options
--check -C
假装执行，列出如果执行会发生的变化，并不真正的在主机上执行
--list-hosts
列出要执行任务的主机
--list-tags
列出tag
--list-tasks
列出task
--limit 主机列表
只对主机列表里的主机执行
-v -vv -vvv
显示不同等级的执行过程信息
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook-vs-shellscripts&#34;&gt;playbook vs shellscripts&lt;/h2&gt;
&lt;p&gt;shell脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

yum install -y --quiet httpd

cp /tmp/httpd.conf /etc/httpd/conf/httpd.conf

cp /tmp/vhosts.conf /etc/httpd/conf.d/

service httpd start 
chkconfig httpd on
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;playbook&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- hosts: all
  remote_user: root
  tasks:
   - name: &amp;quot;安装httpd&amp;quot;
     yum: name=httpd
   - name: &amp;quot;复制配置文件&amp;quot;
     copy: src=/tmp/httpd.conf dest=/etc/httpd/conf/
    - name: &amp;quot;复制虚拟主机配置文件&amp;quot;
      copy: src=/tmp/vhosts/conf dest=/etc/httpd/conf.d/
     - name: &amp;quot;启动，设置开启启动&amp;quot;
       service: name=httpd state=started enabled=yes
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook示例&#34;&gt;playbook示例&lt;/h2&gt;
&lt;p&gt;1、创建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ansible-playbooks]# cat sysuser.yaml 
- hosts: all
  remote_user: root
  tasks:
   - name: create mysql user
     user: name=mysql system=yes uid=36
   - name: create a group
     group: name=httpd system=yes
# 创建yaml文件如上：

# 先检查执行结果
[root@host2 ansible-playbooks]# ansible-playbook -C sysuser.yaml 

PLAY [all] *********************************************************************************

TASK [Gathering Facts] *********************************************************************
ok: [192.168.80.102]
ok: [192.168.80.103]

TASK [create mysql user] *******************************************************************
changed: [192.168.80.103]
changed: [192.168.80.102]

TASK [create a group] **********************************************************************
changed: [192.168.80.103]
changed: [192.168.80.102]

PLAY RECAP *********************************************************************************
192.168.80.102             : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
192.168.80.103             : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

# 列出所有任务
[root@host2 ansible-playbooks]# ansible-playbook --list-tasks sysuser.yaml 

playbook: sysuser.yaml

  play #1 (all): all	TAGS: []
    tasks:
      create mysql user	TAGS: []
      create a group	TAGS: []
 
# 列出所有主机
[root@host2 ansible-playbooks]# ansible-playbook --list-hosts sysuser.yaml 

playbook: sysuser.yaml

  play #1 (all): all	TAGS: []
    pattern: [u&#39;all&#39;]
    hosts (2):
      192.168.80.102
      192.168.80.103

# 最终执行
[root@host2 ansible-playbooks]# ansible-playbook sysuser.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、安装httpd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ansible-playbooks]# cat httpd.yaml 
- hosts: all
  remote_user: root
  tasks:
   - name: install httpd
     yum: name=httpd state=present
   - name: copy conf file
     copy: src=/tmp/httpd.conf dest=/etc/httpd/conf/
   - name: start service
     service: name=httpd state=started enabled=yes

1，确定要执行的主机，为all
2，默认task，先收集信息，确认主机都可达
3，后续3个task，为用户定义任务，
4，最终，每个host的执行结果，4个task都ok，2个changed，0个失败，0个不可达，0个跳过，忽略等等
# 最终执行
[root@host2 ansible-playbooks]# ansible-playbook httpd.yaml 

PLAY [all] *********************************************************************************

TASK [Gathering Facts] *********************************************************************
ok: [192.168.80.103]
ok: [192.168.80.102]

TASK [install httpd] ***********************************************************************
changed: [192.168.80.102]
changed: [192.168.80.103]

TASK [copy conf file] **********************************************************************
ok: [192.168.80.103]
ok: [192.168.80.102]

TASK [start service] ***********************************************************************
changed: [192.168.80.103]
changed: [192.168.80.102]

PLAY RECAP *********************************************************************************
192.168.80.102             : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
192.168.80.103             : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;notify与handlers&#34;&gt;notify与handlers&lt;/h2&gt;
&lt;p&gt;​	根据幂等性，执行某task后，状态可能会changed或其他，当某个task执行后返回状态为changed，**即该步任务对目标主机造成了某些改变；**changed这个状态可以被notify捕捉，从而触发对应的handler动作；&lt;/p&gt;
&lt;p&gt;​	举例说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在template和copy2个task后，紧跟着定义的一个notify，&lt;strong&gt;意思是：这2个task执行后为changed的话，该notify会被触发，后执行其中的handlers进行后续操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;changed状态发生情况：第一次执行；或，要复制的2个文件hash值发送变化时，为changed，此时notify会触发；&lt;/li&gt;
&lt;li&gt;notify的执行为所有task执行完毕之后，&lt;strong&gt;才会根据自己的task状态决定是不是触发handlers，且有多次只执行一次&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;例如：2个文件都改变，template和copy的执行状态都为changed，2个notify都会被触发，但是其中相同的handler：restart-nginx只会被执行一次；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;tasks:
 - name: copy template conf file to remote_hosts
   template: src=/tmp/nginx.conf.j2 dest=/etc/nginx/nginx.conf
   notify:
    - restart-nginx
    - test-web
   copy=: src=/tmp/index.html dest=/usr/share/nginx/html/index.html
   notify: 
    - restart-nginx

handlers:
 - name: restart-nginx
   service: name=nginx stated=restarted
  - name: test-web
    shell: curl -I http:IP/index.html |grep 200 || /bin/false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	给某预期的情况定义notify，该notify发生时，触发handlers定义的操作，&lt;strong&gt;handler本质也还是tasks列表&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ansible-playbooks]# vim test-handlers.yaml 
[root@host2 ansible-playbooks]# cat !$
cat test-handlers.yaml
- hosts: 192.168.80.102
  remote_user: root
  tasks:
   - name: add group nginx
     group: name=nginx state=present
   - name: add user nginx
     user: name=nginx state=present group=nginx
   - name: install nginx
     yum: name=nginx state=present
   - name: config
     copy: src=/tmp/nginx.txt dest=/etc/nginx/nginx.conf
     notify:
      - restart-nginx
      - check-nginx-process
  handlers:
   - name: restart-nginx
     service: name=nginx state=restarted enabled=yes
   - name: check-nginx-process
     shell: killall -0 nginx &amp;gt; /tmp/nginx.log

handlers定义和tasks同等级，本质也是一个一个的task
notify定义在某个task的尾部，通过引用handlers名字调用handlers
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook与tags&#34;&gt;playbook与tags&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ansible-playbooks]# cat test-tag.yaml 
- hosts: 192.168.80.103
  remote_user: root
  tasks:
   - name: install nginx
     yum: name=nginx state=present
   - name: copy conf file
     copy: src=/tmp/nginx.txt dest=/root
     tags: conf
   - name: start nginx
     service: name=httpd state=started enabled=yes
     tags: service
# 给不同的task打上不同的tag，执行时，可以利用tag挑选出同类的任务执行

[root@host2 ansible-playbooks]# ansible-playbook -t conf -C  test-tag.yaml 

PLAY [192.168.80.103] **********************************************************************

TASK [Gathering Facts] *********************************************************************
ok: [192.168.80.103]

TASK [copy conf file] **********************************************************************
changed: [192.168.80.103]

PLAY RECAP *********************************************************************************
192.168.80.103             : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook传参3种方式&#34;&gt;playbook传参3种方式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---

- hosts: test
  tasks:
   - yum: name=httpd state=present
   - yum: 
      name: httpd
      state: installed
    - yum:
      args:
       name: httpd
       state: installed
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook执行过程&#34;&gt;playbook执行过程！&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先收集各个节点的信息，gather facts&lt;/li&gt;
&lt;li&gt;执行一个个play&lt;/li&gt;
&lt;li&gt;执行play中定义的一个个task&lt;/li&gt;
&lt;li&gt;根据幂等性，不需要任务的task会不执行&lt;/li&gt;
&lt;li&gt;最后有play recap，整体执行信息汇总输出&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认是同步阻塞，&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;playbook变量&#34;&gt;playbook变量&lt;/h1&gt;
&lt;h2 id=&#34;变量分类&#34;&gt;变量分类&lt;/h2&gt;
&lt;p&gt;​	大致分为七类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模块执行结果的输出，注册为变量&lt;/li&gt;
&lt;li&gt;在本地，直接定义字典类型的变量：/etc/ansible/facts.d/*.fact&lt;/li&gt;
&lt;li&gt;role中专门定义变量的文件var&lt;/li&gt;
&lt;li&gt;命令行传递变量&lt;/li&gt;
&lt;li&gt;借助with_items迭代，将多个task的结果赋值给一个变量&lt;/li&gt;
&lt;li&gt;inventory主机清单中，定义的主机变量、主机组变量，&lt;/li&gt;
&lt;li&gt;内置变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;变量定义注册&#34;&gt;变量定义、注册&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;命名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	字母、数字、下划线组成，&lt;strong&gt;必须&lt;/strong&gt;字母开头；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	k=v&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	通过{{ var_name }} 调用变量，**注意前后空格，**有时需要&amp;quot;{{ var_name }}&amp;quot;才生效&lt;/p&gt;
&lt;p&gt;​	ansible-playbook test.yaml -e &amp;quot;host=www user=wang&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、变量来源&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ansible setup facts 可以调用远程主机的所有变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在/etc/ansible/hosts定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;公共变量：针对主机组所有主机生效&lt;/li&gt;
&lt;li&gt;普通变量：对某主机组中主机单独定义&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过命令行指定变量，优先级最高&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ansible-playbook -e var=value&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;playbook中定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;vars:
 - var1: v1
 - var2: v2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在独立的变量yaml文件中定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在role中定义&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用setup中变量&#34;&gt;使用setup中变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 利用setup模块，可以收集，远程主机各种信息，如：地址，系统版本，内核版本，硬件架构等；
# 在执行playbook的默认第一步行为就是：gather facts，收集信息
# 这些信息，在后续的playbook，jinja2模块中，都可以直接引用；

[root@host2 ~]# ansible 192.168.80.102 -m setup |less
192.168.80.102 | SUCCESS =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;ansible_all_ipv4_addresses&amp;quot;: [
            &amp;quot;192.168.80.102&amp;quot;, 
            &amp;quot;192.168.10.102&amp;quot;
        ], 
        &amp;quot;ansible_all_ipv6_addresses&amp;quot;: [
            &amp;quot;fe80::eb02:a6b5:be84:952&amp;quot;, 
            &amp;quot;fe80::7822:f591:feb0:47ea&amp;quot;
        ], 
        &amp;quot;ansible_apparmor&amp;quot;: {
            &amp;quot;status&amp;quot;: &amp;quot;disabled&amp;quot;
        }, 
        &amp;quot;ansible_architecture&amp;quot;: &amp;quot;x86_64&amp;quot;, 
        &amp;quot;ansible_bios_date&amp;quot;: &amp;quot;07/29/2019&amp;quot;, 
        &amp;quot;ansible_bios_version&amp;quot;: &amp;quot;6.00&amp;quot;, 
        &amp;quot;ansible_cmdline&amp;quot;: {
            &amp;quot;BOOT_IMAGE&amp;quot;: &amp;quot;/vmlinuz-3.10.0-862.el7.x86_64&amp;quot;, 
            &amp;quot;biosdevname&amp;quot;: &amp;quot;0&amp;quot;, 
            &amp;quot;net.ifnames&amp;quot;: &amp;quot;0&amp;quot;, 
            &amp;quot;quiet&amp;quot;: true, 
            &amp;quot;rhgb&amp;quot;: true, 
            &amp;quot;ro&amp;quot;: true, 
            &amp;quot;root&amp;quot;: &amp;quot;UUID=046ebf1d-861c-42bb-a48f-9641dfc9afec&amp;quot;
        }, 
        
# 结合filter参数，可以过滤需要的变量
[root@host2 ~]# ansible 192.168.80.102 -m setup -a &amp;quot;filter=*arch*&amp;quot;
192.168.80.102 | SUCCESS =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;ansible_architecture&amp;quot;: &amp;quot;x86_64&amp;quot;, 
        &amp;quot;ansible_userspace_architecture&amp;quot;: &amp;quot;x86_64&amp;quot;, 
        &amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
    }, 
    &amp;quot;changed&amp;quot;: false
}
[root@host2 ~]# ansible 192.168.80.102 -m setup -a &amp;quot;filter=*bios*&amp;quot;
192.168.80.102 | SUCCESS =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;ansible_bios_date&amp;quot;: &amp;quot;07/29/2019&amp;quot;, 
        &amp;quot;ansible_bios_version&amp;quot;: &amp;quot;6.00&amp;quot;, 
        &amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
    }, 
    &amp;quot;changed&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	使用fqdn变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 vardir]# cat setup.yaml 
- hosts: all
  remote_user: root
  tasks:
   - name: create log file
     file: name=/var/log/{{ ansible_fqdn }} state=touch

# 通过调用setup中ansibl_fqdn变量，获取每个主机的主机名，并创建文件

[root@host2 vardir]# ansible-playbook setup.yaml 

[root@host3 ~]# ll /var/log/host3.b.com 
-rw-r--r-- 1 root root 0 Oct  9 16:45 /var/log/host3.b.com
[root@host4 ~]# ll /var/log/host4.b.com 
-rw-r--r-- 1 root root 0 Oct  9 16:45 /var/log/host4.b.com
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;命令行-e传变量值&#34;&gt;命令行-e传变量值&lt;/h3&gt;
&lt;p&gt;yaml中定义变量名，命令行中传值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 vardir]# cat var-pkname.yaml 
- hosts: all
  remote_user: root
  tasks:
   - name: install pk
     yum: name={{ pkname }} state=present

[root@host2 vardir]# ansible-playbook  -e pkname=libaio var-pkname.yaml 

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;vars批量定义变量&#34;&gt;vars批量定义变量&lt;/h3&gt;
&lt;p&gt;在playbook文件中，vars定义一批变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 vardir]# cat vars.yaml 
- hosts: all
  remote_user: root
  vars:
   - username: user1
   - groupname: group1
  tasks:
   - name: create-u
     user: name={{ username }} state=present
   - name: create-g
     group: name={{ groupname }} state=present

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;主机变量&#34;&gt;主机变量&lt;/h3&gt;
&lt;p&gt;​	在inventory主机清单中，定义主机时，给主机添加的变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;语法格式；
[websrvs] 
www1.magedu.com http_port=80 maxRequestsPerChild=808
www2.magedu.com http_port=8080 maxRequestsPerChild=909 

示例：
[root@host2 vardir]# vim /etc/ansible/hosts
[test]
192.168.80.102 http_port=80
192.168.80.103 http_port=8080

[root@host2 vardir]# cat var.yaml 
---
- hosts: test
  remote_user: root
  tasks:
   - name: test1
     debug: msg=&amp;quot;var is {{ http_port }}&amp;quot;


[root@host2 vardir]# ansible-playbook var.yaml 

PLAY [test] **********************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************
ok: [192.168.80.103]
ok: [192.168.80.102]

TASK [test1] *********************************************************************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;var is 80&amp;quot;
}
ok: [192.168.80.103] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;var is 8080&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;主机组变量&#34;&gt;主机组变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;语法格式：
[websrvs]
www1.magedu.com
www2.magedu.com 
 
[websrvs:vars] 
ntp_server=ntp.magedu.com 
nfs_server=nfs.magedu.com 

示例；
#定义的var变量，该test组内主机，都可以引用，为组内共享变量
[root@host2 vardir]# vim /etc/ansible/hosts 
[test]
192.168.80.102 http_port=80
192.168.80.103 http_port=8080

[test:vars]
var=hello-test

[root@host2 vardir]# cat var.yaml 
---
- hosts: test
  remote_user: root
  tasks:
   - name: test1
     debug: msg=&amp;quot;var is {{ http_port }}{{ var }}&amp;quot;


[root@host2 vardir]# ansible-playbook var.yaml 

PLAY [test] **********************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************
ok: [192.168.80.103]
ok: [192.168.80.102]

TASK [test1] *********************************************************************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;var is 80hello-test&amp;quot;
}
ok: [192.168.80.103] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;var is 8080hello-test&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;普通变量&#34;&gt;普通变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;语法格式：
[websrvs]
192.168.99.101 http_port=8080 hname=www1 
192.168.99.102 http_port=80    hname=www2 

示例：
定义的hname为每个主机独有的变量
[root@host2 vardir]# vim /etc/ansible/hosts 
[test]
192.168.80.102 http_port=80 hname=www1
192.168.80.103 http_port=8080 hname=www2

[root@host2 vardir]# cat var.yaml 
---
- hosts: test
  remote_user: root
  tasks:
   - name: test1
     debug: msg=&amp;quot;var is {{ http_port }}{{ var }}-{{ hname }}&amp;quot;


[root@host2 vardir]# ansible-playbook var.yaml 

PLAY [test] **********************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************
ok: [192.168.80.102]
ok: [192.168.80.103]

TASK [test1] *********************************************************************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;var is 80hello-test-www1&amp;quot;
}
ok: [192.168.80.103] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;var is 8080hello-test-www2&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;公共变量&#34;&gt;公共变量&lt;/h3&gt;
&lt;p&gt;​	同，组变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[websvrs:vars] 
http_port=808
mark=“_” 

[websrvs]
192.168.99.101 http_port=8080 hname=www1
192.168.99.102 http_port=80 hname=www2 

ansible  websvrs  –m hostname –a ‘name={{ hname }}{{ mark }}{{ http_port }}’ 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;命令行变量&#34;&gt;命令行变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;-e选项，传入变量，采用hostname模块修改主机名，因为变量一致，所以修改后主机名一致，一般还需要引入每个主机自己的独有变量，如可以在定义主机清单的时候定义
[root@host2 vardir]# ansible test -e role=www -m hostname -a &#39;name={{ role }}.host.com&#39;
192.168.80.103 | CHANGED =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;ansible_domain&amp;quot;: &amp;quot;host.com&amp;quot;, 
        &amp;quot;ansible_fqdn&amp;quot;: &amp;quot;www.host.com&amp;quot;, 
        &amp;quot;ansible_hostname&amp;quot;: &amp;quot;www&amp;quot;, 
        &amp;quot;ansible_nodename&amp;quot;: &amp;quot;www.host.com&amp;quot;, 
        &amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
    }, 
    &amp;quot;changed&amp;quot;: true, 
    &amp;quot;name&amp;quot;: &amp;quot;www.host.com&amp;quot;
}
192.168.80.102 | CHANGED =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;ansible_domain&amp;quot;: &amp;quot;host.com&amp;quot;, 
        &amp;quot;ansible_fqdn&amp;quot;: &amp;quot;www.host.com&amp;quot;, 
        &amp;quot;ansible_hostname&amp;quot;: &amp;quot;www&amp;quot;, 
        &amp;quot;ansible_nodename&amp;quot;: &amp;quot;www.host.com&amp;quot;, 
        &amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
    }, 
    &amp;quot;changed&amp;quot;: true, 
    &amp;quot;name&amp;quot;: &amp;quot;www.host.com&amp;quot;
}

ansible test -e role=www -m hostname -a &#39;name={{ role }}.{{ host }}.com&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;变量文件&#34;&gt;变量文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 以yaml或json格式的文件，定义变量
 [root@host2 vardir]# cat vars.yaml 
---
var1: httpd
var2: nginx

# 在playbook中，用vars_files引用文件路径，然后就可以按需引用其中的变量，
# 文件路径，可以绝对，可以相对
[root@host2 vardir]# cat vars-use.yaml 
- hosts: all
  remote_user: root
  vars_files:
   - vars.yaml
  tasks:
   - name: create httpd log
     file: name=/root/{{ var1 }}.log state=touch
   - name: create nginx log
     file: name=/root/{{ var2 }}.log state=touch
   
 
 [root@host2 vardir]# ansible-playbook vars-use.yaml 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;定义本地facts&#34;&gt;定义本地facts&lt;/h3&gt;
&lt;p&gt;​	ansible会自动收集/etc/ansible/facts.d/*.fact文件中数据到facts中，**以ansible_local作为顶级key，**支持文件格式为ini，json&lt;/p&gt;
&lt;p&gt;​	eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 facts.d]# pwd
/etc/ansible/facts.d
[root@host2 facts.d]# cat my.fact 
{
	&amp;quot;family&amp;quot;: {
		&amp;quot;dad&amp;quot;: {
			&amp;quot;name&amp;quot;: &amp;quot;zhangsan&amp;quot;,
      			&amp;quot;age&amp;quot;: &amp;quot;666&amp;quot;
		},
     		&amp;quot;mom&amp;quot;: {
			&amp;quot;name&amp;quot;: &amp;quot;lisi&amp;quot;,
  			&amp;quot;age&amp;quot;: &amp;quot;233&amp;quot;
		}
	}
}
# 定义本地facts如上
# 过滤时发现，本地fact在ansibl_facts下一级，并以ansible_local作为次级key，
# 注意：my为本地fact的文件名，要加上
[root@host2 facts.d]# ansible localhost -m setup -a &#39;filter=ansible_local&#39;
localhost | SUCCESS =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;ansible_local&amp;quot;: {
            &amp;quot;my&amp;quot;: {
                &amp;quot;family&amp;quot;: {
                    &amp;quot;dad&amp;quot;: {
                        &amp;quot;age&amp;quot;: &amp;quot;666&amp;quot;, 
                        &amp;quot;name&amp;quot;: &amp;quot;zhangsan&amp;quot;
                    }, 
                    &amp;quot;mom&amp;quot;: {
                        &amp;quot;age&amp;quot;: &amp;quot;233&amp;quot;, 
                        &amp;quot;name&amp;quot;: &amp;quot;lisi&amp;quot;
                    }
                }
            }
        }
    }, 
    &amp;quot;changed&amp;quot;: false
}

# 引用路径：
[root@host2 facts.d]# cat /root/var_jason.yaml 
---
- hosts: localhost
  tasks:
   - shell: echo hello-world
     register: var1
   - debug: var=var1
   - debug: var=var1[&#39;stdout&#39;]
   - debug: var=var1.stdout_lines[0]
   - debug: var=ansible_eth1.ipv6[0].address
   - debug: var=ansible_local.my.family.dad.name
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;register注册变量&#34;&gt;register注册变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#register捕捉标准输出的信息，注册为变量var1
#再通过debug模块输出该变量

[root@host2 ~]# cat reg.yaml 
---
- hosts: localhost
  tasks:
   - shell: echo hello
     register: var1
   - debug: var=var1

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;set_fact注册变量&#34;&gt;set_fact注册变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat set.yaml 
---
- hosts: localhost
  tasks:
   - shell: echo hello
   - set_fact: var1=&amp;quot;my var&amp;quot;
   - debug: var=var1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;变量引用&#34;&gt;变量引用&lt;/h2&gt;
&lt;h3 id=&#34;变量过滤&#34;&gt;变量过滤&lt;/h3&gt;
&lt;p&gt;​	每个节点的收集的facts都是json格式数据，通过setup模块的filter参数可以过滤出特定key的fact，如下过滤ipv4相关的变量信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ansible 192.168.80.102 -m setup -a &#39;filter=*ipv4&#39;
192.168.80.102 | SUCCESS =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;ansible_default_ipv4&amp;quot;: {
            &amp;quot;address&amp;quot;: &amp;quot;192.168.80.102&amp;quot;, 
            &amp;quot;alias&amp;quot;: &amp;quot;eth0&amp;quot;, 
            &amp;quot;broadcast&amp;quot;: &amp;quot;192.168.80.255&amp;quot;, 
            &amp;quot;gateway&amp;quot;: &amp;quot;192.168.80.2&amp;quot;, 
            &amp;quot;interface&amp;quot;: &amp;quot;eth0&amp;quot;, 
            &amp;quot;macaddress&amp;quot;: &amp;quot;00:0c:29:1b:4e:70&amp;quot;, 
            &amp;quot;mtu&amp;quot;: 1500, 
            &amp;quot;netmask&amp;quot;: &amp;quot;255.255.255.0&amp;quot;, 
            &amp;quot;network&amp;quot;: &amp;quot;192.168.80.0&amp;quot;, 
            &amp;quot;type&amp;quot;: &amp;quot;ether&amp;quot;
        }
    }, 
    &amp;quot;changed&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;引用json字典&#34;&gt;引用json字典&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat var_jason.yaml 
---
- hosts: 192.168.80.102
  tasks:
   - shell: echo hello-world
     register: var1
   - debug: var=var1
   - debug: var=var1[&#39;stdout&#39;]

# shell这个task执行后结果，标准输出为hello-world，用register捕捉，注册为变量，变量名为var1，
# debug模块，输出该变量，输出为json数据，并附带了其他信息，组成了var1的一组字典信息；

# 第2个debug模块，通过调用该变量的key为stdout，输出其值，
TASK [debug] *******************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;var1&amp;quot;: {
        &amp;quot;changed&amp;quot;: true, 
        &amp;quot;cmd&amp;quot;: &amp;quot;echo hello-world&amp;quot;, 
        &amp;quot;delta&amp;quot;: &amp;quot;0:00:00.004388&amp;quot;, 
        &amp;quot;end&amp;quot;: &amp;quot;2020-10-15 10:33:01.317302&amp;quot;, 
        &amp;quot;failed&amp;quot;: false, 
        &amp;quot;rc&amp;quot;: 0, 
        &amp;quot;start&amp;quot;: &amp;quot;2020-10-15 10:33:01.312914&amp;quot;, 
        &amp;quot;stderr&amp;quot;: &amp;quot;&amp;quot;, 
        &amp;quot;stderr_lines&amp;quot;: [], 
        &amp;quot;stdout&amp;quot;: &amp;quot;hello-world&amp;quot;, 
        &amp;quot;stdout_lines&amp;quot;: [
            &amp;quot;hello-world&amp;quot;
        ]
    }
}

TASK [debug] *******************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;var1[&#39;stdout&#39;]&amp;quot;: &amp;quot;hello-world&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;引用json数组&#34;&gt;引用json数组&lt;/h3&gt;
&lt;p&gt;​	以上面输出为例，stdout_line的值部分又是一个数组列表；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat var_jason.yaml 
---
- hosts: 192.168.80.102
  tasks:
   - shell: echo hello-world
     register: var1
   - debug: var=var1
   - debug: var=var1[&#39;stdout&#39;]
   - debug: var=var1.stdout_lines[0]
# 数据用数字的数组下标引用


TASK [debug] *******************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;var1[&#39;stdout&#39;]&amp;quot;: &amp;quot;hello-world&amp;quot;
}

TASK [debug] *******************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;var1.stdout_lines[0]&amp;quot;: &amp;quot;hello-world&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;eg2：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipv6&amp;quot;: [
                {
                    &amp;quot;address&amp;quot;: &amp;quot;fe80::eb02:a6b5:be84:952&amp;quot;, 
                    &amp;quot;prefix&amp;quot;: &amp;quot;64&amp;quot;, 
                    &amp;quot;scope&amp;quot;: &amp;quot;link&amp;quot;
                }
            ], 



# facts输出中，ansible_eth1的ipv6字典项值为数组，每个数组值又为一组字典
# 引用方式如下
cat var_jason.yaml 
---
- hosts: 192.168.80.102
  tasks:
   - shell: echo hello-world
     register: var1
   - debug: var=var1
   - debug: var=var1[&#39;stdout&#39;]
   - debug: var=var1.stdout_lines[0]
   - debug: var=ansible_eth1.ipv6[0].address
   
TASK [debug] *******************************************************************************
ok: [192.168.80.102] =&amp;gt; {
    &amp;quot;ansible_eth1.ipv6[0].address&amp;quot;: &amp;quot;fe80::7822:f591:feb0:47ea&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;引用facts变量&#34;&gt;引用facts变量&lt;/h3&gt;
&lt;p&gt;​	收集后数据为json数组，顶级有2个key，一个是ansible_facts，一个是changed，节点信息都在ansible_facts中，引用时，ansible_facts可以省略，可以直接从其下一级的key开始引用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如：ansible_eth0，&amp;quot;ansible_architecture&amp;quot;: &amp;quot;x86_64&amp;quot;, 
    &amp;quot;ansible_bios_date&amp;quot;: &amp;quot;07/29/2019&amp;quot;, 
    &amp;quot;ansible_bios_version&amp;quot;: &amp;quot;6.00&amp;quot;, 
    &amp;quot;ansible_cmdline&amp;quot;: {
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;变量输出&#34;&gt;变量输出&lt;/h3&gt;
&lt;p&gt;​	采用debug模块的var或msg参数可以输出，变量，做调试之用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat var_jason.yaml 
---
- hosts: localhost
  tasks:
   - debug: &#39;msg=&amp;quot;ip-value is: {{ ansible_eth0.ipv4.address }}&amp;quot;&#39;
   - debug: var=ansible_eth0.ipv4.address
# 注意，msg外部要加上单引号
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ansible-playbook var_jason.yaml 

PLAY [localhost] ***************************************************************************

TASK [Gathering Facts] *********************************************************************
ok: [localhost]

TASK [debug] *******************************************************************************
ok: [localhost] =&amp;gt; {
    &amp;quot;msg&amp;quot;: &amp;quot;ip-value is: 192.168.80.101&amp;quot;
}

TASK [debug] *******************************************************************************
ok: [localhost] =&amp;gt; {
    &amp;quot;ansible_eth0.ipv4.address&amp;quot;: &amp;quot;192.168.80.101&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;模板template&#34;&gt;模板template&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html&#34;&gt;https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;template功能：根据模块文件，动态生成对应的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;templa文件必须放在templates目录下，以.j2结尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yaml或yml文件需和templates目录平级，目录结构如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;./
temnginx.yaml
templates
    nginx.conf.j2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	文本文件；嵌套有脚本（使用模版编程语言编写），jinja2语言，有如下形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串：单引号或双引号&lt;/li&gt;
&lt;li&gt;数字：整数、浮点数&lt;/li&gt;
&lt;li&gt;列表：[item1,item2,...]&lt;/li&gt;
&lt;li&gt;元组：(item1,item2)&lt;/li&gt;
&lt;li&gt;字典：[k1:v1,k2:v2]&lt;/li&gt;
&lt;li&gt;布尔型：true，false&lt;/li&gt;
&lt;li&gt;算术运算： + - * / // % **&lt;/li&gt;
&lt;li&gt;比较运算：== != &amp;gt; &amp;gt;= &amp;lt; &amp;lt;=&lt;/li&gt;
&lt;li&gt;逻辑运算：and or not&lt;/li&gt;
&lt;li&gt;流表达式： for if when&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例算术运算&#34;&gt;示例算术运算&lt;/h2&gt;
&lt;p&gt;​	如下为，根据每个主机的cpu核数不同，利用templates模版文件，生成不同work_processor配置选项的示例&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;采用了算术运算&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 template]# ansible test -m setup |grep processor
        &amp;quot;ansible_processor&amp;quot;: [
        &amp;quot;ansible_processor_cores&amp;quot;: 2, 
        &amp;quot;ansible_processor_count&amp;quot;: 2, 
        &amp;quot;ansible_processor_threads_per_core&amp;quot;: 1, 
        &amp;quot;ansible_processor_vcpus&amp;quot;: 4, 
        &amp;quot;ansible_processor&amp;quot;: [
        &amp;quot;ansible_processor_cores&amp;quot;: 1, 
        &amp;quot;ansible_processor_count&amp;quot;: 2, 
        &amp;quot;ansible_processor_threads_per_core&amp;quot;: 1, 
        &amp;quot;ansible_processor_vcpus&amp;quot;: 2, 
# 2个主机，一个为4核，一个为2核        
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# 根据如下目录结构，编写对应文件
[root@host2 template]# tree
.
├── temnginx.yaml
└── templates
    └── nginx.conf.j2

# yaml文件，为playbook，其中利用templates模块调用了nginx.conf的模版文件    
[root@host2 template]# cat temnginx.yaml 
- hosts: test
  remote_user: root
  tasks:
   - name: template config to remote-hosts
     template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf

# 模版文件如下，为原有nginx.conf修改而来，修改了其中worker_processes，利用了setup变量每个主机的cpu核数，的平方做为参数值
[root@host2 template]# head templates/nginx.conf.j2 
user nginx;
worker_processes {{ ansible_processor_vcpus**2 }};

# 成功执行
[root@host2 template]# ansible-playbook temnginx.yaml 

PLAY [test] **********************************************************************************************************************************

TASK [Gathering Facts] ***********************************************************************************************************************
ok: [192.168.80.102]
ok: [192.168.80.103]

TASK [template config to remote-hosts] *******************************************************************************************************
changed: [192.168.80.103]
changed: [192.168.80.102]

PLAY RECAP ***********************************************************************************************************************************
192.168.80.102             : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
192.168.80.103             : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# 查看2台主机，生成的配置文件，分别为4，和16，为2和4的平方
[root@host4 ~]# head /etc/nginx/nginx.conf 

user nginx;
worker_processes 4;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;


[root@host3 ~]# head /etc/nginx/nginx.conf

user nginx;
worker_processes 16;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;示例条件判断&#34;&gt;示例条件判断&lt;/h2&gt;
&lt;p&gt;​	根据变量，facts，或此前任务的执行结果来做某task执行的前提时，需要用when实现，&lt;strong&gt;直接在某task后添加when子句+条件即可&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	jinja2语法示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tasks:
 - name: &amp;quot;shutdown redhat flavored systems&amp;quot;
   command: /sbin/shudown -h now
   when: ansible_os_family == &amp;quot;redhat&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;通过os版本做判断条件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 template]# cat when.yaml 
- hosts: test
  remote_user: root
  tasks:
   - name: add group nginx
     tags: user
     group: name=nginx state=present
   - name: add user nginx
     user: name=nginx state=present group=nginx
   - name: install nginx
     yum: name=nginx state=present
   - name: stop nginx
     service: name=nginx state=stoped
     when: ansible_distribution_major_version == &amp;quot;7&amp;quot;
     
# 在执行stop nginx时，加了when条件，只有版本是7的centos上的nginx会被停止     
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;示例迭代with_items&#34;&gt;示例迭代with_items&lt;/h2&gt;
&lt;p&gt;​	有需要重复执行的任务，可以采用迭代机制；&lt;strong&gt;迭代的引用固定变量名为item，task中使用with_items给定要迭代的元素列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	列表格式：字符串，字典&lt;/p&gt;
&lt;p&gt;1、迭代创建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在task中用with_items定义列表，用item变量引用，然后创建2个用户

[root@host2 template]# cat items.yaml 
- hosts: 192.168.80.102
  remote_user: root
  tasks:
   - name: add serveral users;
     user: name={{ item }} state=present groups=wheel
     with_items:
      - testuser1
      - testuser2

testuser1:x:1003:1004::/home/testuser1:/bin/bash
testuser2:x:1004:1005::/home/testuser2:/bin/bash
[root@host3 ~]# cat /etc/passwd

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、迭代copy多个文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 template]# touch /etc/file1

[root@host2 template]# touch /etc/file2

[root@host2 template]# cat !$
cat /root/copy-multi.yaml
---
- hosts: test
  remote_user: root
  tasks:
   - name: create two file and copy
     copy: src={{ item }} dest=/tmp
     with_items:
      - /etc/file1
      - /etc/file2


[root@host3 ~]# ll /tmp/file*
-rw-r--r-- 1 root root 0 Oct 10 15:57 /tmp/file1
-rw-r--r-- 1 root root 0 Oct 10 15:57 /tmp/file2

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、迭代安装rpm包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 template]# cat rpm-install.yaml 
- hosts: test
  remote_user: root
  tasks:
   - name: install rpms
     yum: name={{ item }} state=present
     with_items:
      - memcached
      - php-fpm

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、迭代-嵌套-子变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# item元素为字典形式，通过其key再引用每个key的值；

[root@host2 template]# cat !$
cat diedai.yaml
- hosts: test
  remote_user: root
  tasks:
   - name: add groups
     group: name={{ item }} state=present
     with_items:
      - group1
      - group2
      - group3
   - name: add users
     user: name={{ item.name }} group={{ item.group }} state=present
     with_items:
      - { name: &#39;user1&#39;, group: &#39;group1&#39; }
      - { name: &#39;user2&#39;, group: &#39;group2&#39; }
      - { name: &#39;user3&#39;, group: &#39;group3&#39; }


[root@host2 template]# ansible-playbook diedai.yaml 

PLAY [test] ********************************************************************************

TASK [Gathering Facts] *********************************************************************
ok: [192.168.80.103]
ok: [192.168.80.102]

TASK [add groups] **************************************************************************
ok: [192.168.80.102] =&amp;gt; (item=group1)
ok: [192.168.80.103] =&amp;gt; (item=group1)
changed: [192.168.80.103] =&amp;gt; (item=group2)
changed: [192.168.80.102] =&amp;gt; (item=group2)
changed: [192.168.80.103] =&amp;gt; (item=group3)
changed: [192.168.80.102] =&amp;gt; (item=group3)

TASK [add users] ***************************************************************************
changed: [192.168.80.103] =&amp;gt; (item={u&#39;group&#39;: u&#39;group1&#39;, u&#39;name&#39;: u&#39;user1&#39;})
changed: [192.168.80.102] =&amp;gt; (item={u&#39;group&#39;: u&#39;group1&#39;, u&#39;name&#39;: u&#39;user1&#39;})
changed: [192.168.80.102] =&amp;gt; (item={u&#39;group&#39;: u&#39;group2&#39;, u&#39;name&#39;: u&#39;user2&#39;})
changed: [192.168.80.103] =&amp;gt; (item={u&#39;group&#39;: u&#39;group2&#39;, u&#39;name&#39;: u&#39;user2&#39;})
changed: [192.168.80.102] =&amp;gt; (item={u&#39;group&#39;: u&#39;group3&#39;, u&#39;name&#39;: u&#39;user3&#39;})
changed: [192.168.80.103] =&amp;gt; (item={u&#39;group&#39;: u&#39;group3&#39;, u&#39;name&#39;: u&#39;user3&#39;})



[root@host3 ~]# id user1
uid=1002(user1) gid=1003(group1) groups=1003(group1)
[root@host3 ~]# id user2
uid=1005(user2) gid=1006(group2) groups=1006(group2)
[root@host3 ~]# id user3
uid=1006(user3) gid=1007(group3) groups=1007(group3)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;template的for循环-if判断&#34;&gt;template的for循环 if判断&lt;/h2&gt;
&lt;p&gt;template文件中的if判断语法，&lt;/p&gt;
&lt;p&gt;​	示例格式：for遍历vhost，if做条件判断，根据其模版生成不同的server虚拟主机配置段&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% for vhost in nginx_vhosts %}

server {

listen {{ vhost.listen | default(&#39;80 default_server&#39;)}};

{% if vhost.server_name if defined %}
server_name {{ vhost.server_name }}
{% endif %}

{% if vhost.root is defined %}
root {{ vhost.root }};
{% endif %}

}

{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;示例template-for和if&#34;&gt;示例template for和if&lt;/h2&gt;
&lt;p&gt;yaml文件和对应j2模版如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx-web]# tree 
.
├── temnginx.yaml
└── templates
    └── nginx.conf.j2

[root@host2 nginx-web]# cat temnginx.yaml 
- hosts: all 
  remote_user: root
  vars:
   nginx_vhosts:
    - web1:
      listen: 8080
      server_name: &amp;quot;web1.b.com&amp;quot;
      root: &amp;quot;/data/web1&amp;quot;
    - web2:
      listen: 8080
      server_name: &amp;quot;web2.b.com&amp;quot;
      root: &amp;quot;/data/web2&amp;quot;
    - web3:
      listen: 80
      server_name: &amp;quot;web3.b.com&amp;quot;
      root: &amp;quot;/data/web3&amp;quot;
  tasks:
   - name: copy template conf file
     template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf

# 用了for循环，生成3个server虚拟主机配置段
# 用了if判断
# 用了默认值设置
[root@host2 nginx-web]# cat templates/nginx.conf.j2 
{% for vhost in nginx_vhosts %}

server {
{% if vhost.listen is defined %}
listen {{ vhost.listen }};
{% endif %}

server_name {{ vhost.server_name }};
root {{ vhost.root | default(&#39;/data&#39;) }};
}
{% endfor  %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看，生成的配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx-web]# ansible-playbook temnginx.yaml 
# 执行；
[root@host3 ~]# cat /etc/nginx/nginx.conf

server {
listen 8080;

server_name web1.b.com;
root /data/web1;
}

server {
listen 8080;

server_name web2.b.com;
root /data/web2;
}

server {
listen 80;

server_name web3.b.com;
root /data/web3;
}
# 和yaml中，定义的vars变量一一对应；
# 模版的好处：只修改变量部分，可以很高效的生成别的配置文件，
# var可以采用其他方法定义，如单独的var文件
[root@host2 nginx-web]# cat temnginx.yaml 
- hosts: all 
  remote_user: root
  vars:
   nginx_vhosts:
    - web1:
      listen: 8080
      server_name: &amp;quot;web1.b.com&amp;quot;
      root: &amp;quot;/data/web1&amp;quot;
    - web2:
      listen: 8080
      server_name: &amp;quot;web2.b.com&amp;quot;
      root: &amp;quot;/data/web2&amp;quot;
    - web3:
      listen: 80
      server_name: &amp;quot;web3.b.com&amp;quot;
      root: &amp;quot;/data/web3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;采用默认值情况；web3的root变量没定义；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx-web]# cat temnginx.yaml 
- hosts: all 
  remote_user: root
  vars:
   nginx_vhosts:
    - web1:
      listen: 8080
      server_name: &amp;quot;web1.b.com&amp;quot;
      root: &amp;quot;/data/web1&amp;quot;
    - web2:
      listen: 8080
      server_name: &amp;quot;web2.b.com&amp;quot;
      root: &amp;quot;/data/web2&amp;quot;
    - web3:
      listen: 80
      server_name: &amp;quot;web3.b.com&amp;quot;
  tasks:
   - name: copy template conf file
     template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
     
# web3的root采用默认字段，为/data     
[root@host3 ~]# cat /etc/nginx/nginx.conf

server {
listen 8080;

server_name web1.b.com;
root /data/web1;
}

server {
listen 8080;

server_name web2.b.com;
root /data/web2;
}

server {
listen 80;

server_name web3.b.com;
root /data;
}     
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;roles&#34;&gt;roles&lt;/h1&gt;
&lt;h2 id=&#34;概念-1&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;​	ansible自1.2后引入的特性；&lt;strong&gt;用于层次化，结构化，组成playboo，roles能够根据层次型结构自动加载变量文件，task，handler等；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	使用roles时需要在playbook中用include导入即可，&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;roles就是将变量、文件、任务、模版、处理器按照一定组织结构放在单独目录中，并 用include导入的一种机制，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;一般用于构建，基于主机构建服务的场景中，也可以构建守护进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	复杂场景，适合使用roles，代码复用度高&lt;/p&gt;
&lt;p&gt;简单说：role就是拆解大的playbook的一种方式，以一定规则组成目录结构，可以复用其中的小的task或play，通过include导入即可；&lt;/p&gt;
&lt;h2 id=&#34;roles目录结构&#34;&gt;roles目录结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201010181654569.png&#34; alt=&#34;image-20201010181654569&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;playbook.yaml
roles/
	project/
		tasks/
		files/
		vars/
		templates/
		handlers/
		default/
		meta/
		后2者不常用
files：存放由copy，或script模块，调用的文件
templates:template模块查找模版文件的目录
tasks:定义task，role的基本元素，至少应包括一个名为main.yaml的文件；其他的文件通过include包含

handlers:至少包含一个main.yaml，其他文件用include导入

vars:定义变量，至少有一个main.yaml，其他用include导入

meta:定义当前角色的特殊设定，和其依赖，至少一个main.yaml，其他文件include导入

default:设定默认变量时，用此目录的main.yaml文件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建role步骤&#34;&gt;创建role步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建以roles命令的目录；&lt;/li&gt;
&lt;li&gt;在roles目录中分别创建以各个角色名称命名的目录，如webservers等&lt;/li&gt;
&lt;li&gt;在每个角色的目录中分别创建：files、handlers、meta、taskstemplates、vars等目录，没有用到的目录可以创建为空，也可以不创建&lt;/li&gt;
&lt;li&gt;在playbook中，调用各个角色；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;#示例目录结构如下，
playbook为nginx-role.yaml
roles目录下有一个role目录，为nginx
nginx目录下，有一系列固定结构的目录
[root@host2 workspace]# tree .
.
├── nginx-role.yaml
└── roles
    └── nginx
        ├── files
        │   └── main.yaml
        ├── tasks
        │   ├── groupadd.yaml
        │   ├── install.yaml
        │   ├── main.yaml
        │   ├── restart.yaml
        │   └── useradd.yaml
        └── vars
            └── main.yaml

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook调用roles&#34;&gt;playbook调用roles&lt;/h2&gt;
&lt;p&gt;方法1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: webservers
  remote_user: root
  roles:
   - mysql
   - memcached
   - nginx
   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法2：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts:
  remote_user:
  roles;
   - mysql
   - { role: nginx,username: nginx }
   键role指定调用nginx这个role
   后续是给username这个变量传值为nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方法3：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;roles:
 - { role: nginx,username: nginx,when: ansible_distribution_major_version == &#39;7&#39; }
 #加入了when条件判断
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;完整roles架构示例&#34;&gt;完整roles架构示例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 顶层的playbook中，定义了调用了2个role
[root@host2 workspace]# cat nginx-role.yaml 
- hosts: test
  remote_user: root
  roles:
   - nginx
   - httpd


# 以nginx的role为例，task的main.yaml调用了一个个小的task文件
[root@host2 workspace]# cat roles/nginx/tasks/main.yaml 
- include: groupadd.yaml
- include: useradd.yaml
- include: install.yaml
- include: restart.yaml
- include: filecp.yaml

# tasks中其他yaml文件，将是将原来的task拆分，写到一个个文件中而已
[root@host2 workspace]# cat roles/nginx/tasks/groupadd.yaml 
- name: add group nginx
  group: name=nginx state=present

[root@host2 workspace]# cat roles/nginx/tasks/filecp.yaml 
- name: file copy
  copy: src=tom.conf dest=/tmp/tom.conf
  
# task中copy或scripts调用的文件，都放在files目录下  
[root@host2 workspace]# cat roles/nginx/files/tom.conf 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;playbook中-tags使用&#34;&gt;playbook中 tags使用&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ansible-playbook --tags=&amp;quot;nginx.httpd,mysql&amp;quot; nginx-role.yaml
#只调用带有对应标签的role

# nginx-role.yaml中
- hosts: test
  remote_user: root
  roles:
   - { role: nginx,tags: [ &#39;nginx&#39;,&#39;web&#39; ],when: ansible_distribution_major_version == &#39;6&#39; }
   - { role: httpd,tags: [ &#39;httpd&#39;,&#39;web&#39; ] }
   - { role: mysql,tags: [ &#39;mysql&#39;,&#39;db&#39; ] }
   - { role: mariadb,tags: [ &#39;mysql&#39;,&#39;db&#39; ] }
   - { role: php }
# tags是列表形式，注意括号前后的空格   
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;实验playbook编译安装httpd&#34;&gt;实验：playbook编译安装httpd&lt;/h1&gt;
&lt;h2 id=&#34;tasks各个步骤&#34;&gt;tasks各个步骤&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;get_url模块：下载源码包：apr apr-util httpd&lt;/li&gt;
&lt;li&gt;yum模块：下载依赖包和编译工具：gcc gcc++ zlib-devel openssl-devel等&lt;/li&gt;
&lt;li&gt;unarchive模块，解压源码包&lt;/li&gt;
&lt;li&gt;shell模块，依次编译apr apr-util httpd&lt;/li&gt;
&lt;li&gt;user模块，创建apache用户&lt;/li&gt;
&lt;li&gt;copy模块或template，准备配置文件，服务管理脚本等，&lt;/li&gt;
&lt;li&gt;shell模块，path变量配置，配置文件语法检测，服务启动等&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考yaml&#34;&gt;参考yaml&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 httpd]# cat httpd.yaml 
- hosts: 192.168.80.102
  remote_user: root
  tasks:
   - name: down source tar
     get_url: url=&amp;quot;{{ item }}&amp;quot; dest=/root/pkg
     with_items:
      - https://mirrors.aliyun.com/apache/apr/apr-1.6.5.tar.gz
      - https://mirrors.aliyun.com/apache/apr/apr-util-1.6.1.tar.gz
      - https://mirrors.aliyun.com/apache/httpd/httpd-2.4.46.tar.gz
     run_once: True
   - name: unarchive
     unarchive: src=&amp;quot;/root/pkg/{{ item }}&amp;quot; dest=/root
     with_items:
      - httpd-2.4.46.tar.gz
      - apr-1.6.5.tar.gz
      - apr-util-1.6.1.tar.gz

   - name: install pcre prce-devel
     yum: name=&amp;quot;{{ item }}&amp;quot; state=present
     with_items:
      - pcre
      - pcre-devel
      - expat-devel
   - name: compile apr 
     shell: cd /root/apr-1.6.5 &amp;amp;&amp;amp; ./configure --prefix=/usr/local/apr &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
   - name: compile apr-util
     shell: cd /root/apr-util-1.6.1 &amp;amp;&amp;amp; ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
   - name: complie httpd
     shell: |
            cd /root/httpd-2.4.46
            ./configure --prefix=/usr/local/apache --sysconfig=/etc/apache \
            --enable-mpms-shared=all \
            --with-z --with-pcre \
            --with-apr=/usr/local/apr \
            --with-apr-util=/usr/local/apr-util \
            --with-mpm-event
             make &amp;amp;&amp;amp; make install
           

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;ansible执行过程&#34;&gt;ansible执行过程&lt;/h1&gt;
&lt;h2 id=&#34;执行过程总结&#34;&gt;执行过程总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;读取配置文件，默认/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;li&gt;加载inventory文件，包括主机变量，主机组变量&lt;/li&gt;
&lt;li&gt;执行默认，第一个任务，收集各个节点的信息
&lt;ol&gt;
&lt;li&gt;建立连接，获取家目录信息&lt;/li&gt;
&lt;li&gt;将要执行的收集任务，放在临时文件&lt;/li&gt;
&lt;li&gt;将临时文件传输到被控节点的临时目录&lt;/li&gt;
&lt;li&gt;ssh连接到远端执行收集任务&lt;/li&gt;
&lt;li&gt;删除任务文件&lt;/li&gt;
&lt;li&gt;收集信息返回给ansible端，&lt;strong&gt;此处各种变量可以被之后各步骤引用！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;第二个任务，此处开始，为用户定义的任务
&lt;ol&gt;
&lt;li&gt;建立连接，获取家目录信息&lt;/li&gt;
&lt;li&gt;将要执行的任务放到临时文件中&lt;/li&gt;
&lt;li&gt;将临时文件，sftp传输到远端节点&lt;/li&gt;
&lt;li&gt;ssh连接到远端执行任务&lt;/li&gt;
&lt;li&gt;删除任务文件&lt;/li&gt;
&lt;li&gt;执行结果返回给ansible端，ansible输出到屏幕&lt;/li&gt;
&lt;li&gt;关闭连接&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;后续任务...，遵从同样的步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;假设有10个任务，主机数量较多的时候，ansible会将主机分批次执行第一个任务，直到所有主机都执行完第一个任务后，再开始第二个任务，也是分批次执行，以此类推；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;直到所有节点，执行完所有任务，ansible才会释放当前shell，此乃ansible默认的同步模式；并发默认为5 ，-f可以指定并发数&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ansible优化速度&#34;&gt;ansible优化速度&lt;/h2&gt;
&lt;h3 id=&#34;配置开启ssh长连接&#34;&gt;配置开启ssh长连接&lt;/h3&gt;
&lt;p&gt;​	为避免需要长时间执行的任务，中途断开，可以配置长连接时间久一点；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ssh_connection]

# ssh arguments to use
# Leaving off ControlPersist will result in poor performance, so use
# paramiko on older platforms rather than removing it, -C controls compression use
#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;开启pipline&#34;&gt;开启pipline&lt;/h3&gt;
&lt;p&gt;​	ansible在执行一个任务期间，将任务文件放到临时文件中后，会sftp复制传输到远端，然后ssh连接到远端执行该任务文件，共2次ssh连接，pipline为openssh支持的特性，&lt;strong&gt;可以在一次ssh连接中完成上述2步，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	配置文件：/etc/ansible/ansible.cfg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Enabling pipelining reduces the number of SSH operations required to
# execute a module on the remote server. This can result in a significant
# performance improvement when enabled, however when using &amp;quot;sudo:&amp;quot; you must
# first disable &#39;requiretty&#39; in /etc/sudoers
#
# By default, this option is disabled to preserve compatibility with
# sudoers configurations that have requiretty (the default on many distros).
#
#pipelining = False

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改ansible执行策略&#34;&gt;修改ansible执行策略&lt;/h3&gt;
&lt;p&gt;​	ansible默认fork为5，假设共20台，一次5台执行任务，假设其中一台主机性能好，早早完成，该空出的并发名额会等待，其他四个小伙伴一起结束，再一起分配下一个5台主机执行任务，造成浪费&lt;/p&gt;
&lt;p&gt;​	ansible 2.0后，通过strategy设置为free，默认值是linear，使得空出来的名额，可以立即分配给后面的主机开始执行，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: all
  strategy: free
  tasks:
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;设置facts缓存&#34;&gt;设置facts缓存&lt;/h3&gt;
&lt;p&gt;​	收集各个节点的facts为默认行为，主机数量多时，收集facts会消耗一定时间；虽然可以禁止改行为，但其中变量一般很有用，所以，设置facst缓存很有必要：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# plays will gather facts by default, which contain information about
# the remote system.
#
# smart - gather by default, but don&#39;t regather if already gathered
# implicit - gather by default, turn off with gather_facts: False
# explicit - do not gather by default, must say gather_facts: True
#gathering = implicit
默认行为收集，在playbook中，可以通过gather_facts改变默认行为
设置为smart为启用缓存，在空闲时收集，并缓存；

缓存有redis和jsonfile两种形式；

## jsonfile示例
gathering=smart
fact_caching_timeout =86400
fact_caching=jsonfile
fact_caching_connection= /path/to/factdir
## 缓存1天，位置在/path/to/factdir目录下

## 
[root@host2 httpd]# ll /tmp/factdir/
total 48
-rw-r--r-- 1 root root 24549 Oct 14 16:26 192.168.80.102
-rw-r--r-- 1 root root 24365 Oct 14 16:26 192.168.80.103
[root@host2 httpd]# cat /tmp/factdir/192.168.80.102 | python -m json.tool
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看ansible执行过程示例&#34;&gt;查看ansible执行过程示例&lt;/h2&gt;
&lt;p&gt;​	ansible或ansible-playbook的执行中，加入-vvv参数可以显示不同详细等级的执行信息，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 httpd]# ansible-playbook -vvv  httpd.yaml 

# 先确认ansible读取的配置文件，插件路径，python解释器路径，可执行程序路径等

ansible-playbook 2.9.13
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u&#39;/root/.ansible/plugins/modules&#39;, u&#39;/usr/share/ansible/plugins/modules&#39;]
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible-playbook
  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]
Using /etc/ansible/ansible.cfg as config file
host_list declined parsing /etc/ansible/hosts as it did not pass its verify_file() method
script declined parsing /etc/ansible/hosts as it did not pass its verify_file() method
auto declined parsing /etc/ansible/hosts as it did not pass its verify_file() method
Parsed /etc/ansible/hosts inventory source with ini plugin

# 找出有几个play，
PLAYBOOK: httpd.yaml *************************************************************************************************************************
1 plays in httpd.yaml

PLAY [192.168.80.102] ************************************************************************************************************************
# 默认行为，收集节点信息，
TASK [Gathering Facts] ***********************************************************************************************************************
task path: /root/httpd/httpd.yaml:1
&amp;lt;192.168.80.102&amp;gt; ESTABLISH SSH CONNECTION FOR USER: root

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;参考链接&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/f-ck-need-u/p/7604386.html&#34;&gt;https://www.cnblogs.com/f-ck-need-u/p/7604386.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/f-ck-need-u/p/7580170.html#1-4-4-facts-&#34;&gt;https://www.cnblogs.com/f-ck-need-u/p/7580170.html#1-4-4-facts-&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/" term="自动化部署" label="自动化部署" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ansible/" term="ansible" label="ansible" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">docker存储管理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/docker%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/" />
            <id>https://latteStudio.github.io/posts/docker%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</id>
            <updated>2020-11-01T19:13:04&#43;08:00</updated>
            <published>2020-10-25T15:54:32&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docker存储管理</summary>
            
                <content type="html">&lt;h1 id=&#34;docker存储卷&#34;&gt;docker存储卷&lt;/h1&gt;
&lt;h2 id=&#34;容器可写层数据生命周期&#34;&gt;容器可写层数据生命周期&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker stop app1
app1
[root@host2 ~]# docker ps -a
CONTAINER ID        IMAGE                      COMMAND                  CREATED             STATUS                       PORTS                                        NAMES
77498e80db24        notechbb/haproxy:v1.7.12   &amp;quot;/bin/sh -c /etc/hap…&amp;quot;   3 hours ago         Up 3 hours                   0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:9999-&amp;gt;9999/tcp   ha1
e62ae92f39b4        notechbb/app2:v1           &amp;quot;/bin/sh -c &#39;/usr/lo…&amp;quot;   4 hours ago         Up 4 hours                   8009/tcp, 0.0.0.0:8081-&amp;gt;8080/tcp             app2
9f09c0ddf426        notechbb/app1:v1           &amp;quot;/bin/sh -c &#39;/usr/lo…&amp;quot;   4 hours ago         Exited (143) 2 seconds ago                                                app1
[root@host2 ~]# ll /var/lib/docker/containers/
total 0
drwx------ 4 root root 237 Oct 29 16:22 77498e80db24220aeae6d1075109834b50161297dc41ee1c699dc7f1934ae4e7
drwx------ 4 root root 237 Oct 29 19:50 9f09c0ddf426c26aacc4f116cca24ccbeb46cb951cf918d11906c9d39500ed15
drwx------ 4 root root 237 Oct 29 16:05 e62ae92f39b4703ae1c583ee6538f6035941296f430e183753692104cd50b625
[root@host2 ~]# docker rm -f app1
app1
[root@host2 ~]# ll /var/lib/docker/containers/
total 0
drwx------ 4 root root 237 Oct 29 16:22 77498e80db24220aeae6d1075109834b50161297dc41ee1c699dc7f1934ae4e7
drwx------ 4 root root 237 Oct 29 16:05 e62ae92f39b4703ae1c583ee6538f6035941296f430e183753692104cd50b625


# 在/var/lib/docker/containers目录下，是各个容器运行时可写层数据的存放目录；
# 由上可以看出，每个容器在目录下，都由一个专属数据目录，命名为容器的长id；
# 在容器停止时，数据目录不会被删除，
# 只有容器被删除后，数据目录会随之删除，期间数据变更也不复存在；
# 为了容器数据的持久化，引入2个方法：

	1、存储卷：即挂载宿主机或网络存储的目录，开放给容器使用：	又分为：
		docker管理的卷：docker分配宿主机目录给容器
		手动指定的卷：手动指定宿主机目录给容器
	2、数据容器：将数据存储于容器中；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker的数据保存机制&#34;&gt;docker的数据保存机制&lt;/h2&gt;
&lt;h3 id=&#34;数据容器&#34;&gt;数据容器&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;启动一个容器a，做server端，其提供数据给其他容器如b，c，也起到了在b和c之间共享数据的作用；b和c是容器a的客户端；&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;存储卷&#34;&gt;存储卷&lt;/h3&gt;
&lt;p&gt;​	运行中的docker容器，所有发生的数据修改都会保存在镜像文件最上面的一层：可写层；并且，随之容器的停止而消失，&lt;strong&gt;因此，为了持久化保存容器运行中产生的数据，往往需要引入存储卷：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	ps：可写层数据永久化的方法之一：将容器提交为新镜像；&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;即将容器的某个目录挂载到宿主机的某个目录，或者远程网络存储提供的目录，容器停止后，其运行期间所有的数据变更仍会永久的保持在存储卷上，从而实现了数据的持久化；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存储卷示意图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201029193826017.png&#34; alt=&#34;image-20201029193826017&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;存储卷管理操作&#34;&gt;存储卷管理操作&lt;/h1&gt;
&lt;h2 id=&#34;手动指定宿主机存储卷目录&#34;&gt;手动指定宿主机存储卷目录&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建容器时，-v手动指定宿主机某目录，挂载到容器某目录（ro选项，可设置只读，如web容器挂载宿主机只读的静态文件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向宿主机挂载目录写入数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连入容器，查看数据是否存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建容器时，-v手动指定宿主机某目录，挂载到容器某目录（ro选项，可设置只读，如web容器挂载宿主机只读的静态文件）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -d --name app1 -v /data/app1/:/usr/local/tomcat/webapps/app1 -p 800:8080 notechbb/app1:v1
e9a318704d7c9bc45a596e26f25beccb96f4f029f61420f07736b6c46132fb7e
   
# 运行容器，-v选项挂载宿主机目录
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向宿主机挂载目录写入数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mkdir /data        
[root@host2 ~]# mkdir /data/app1
[root@host2 ~]# echo &amp;quot;this is volume from host&amp;quot; &amp;gt; /data/app1/index.html
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连入容器，查看数据是否存在&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# /root/docker-in.sh app1
[root@e9a318704d7c /]# yum install -y iproute
   
# 连接入容器，可以看到数据
[root@e9a318704d7c webapps]# pwd
/usr/local/tomcat/webapps
[root@e9a318704d7c webapps]# cat app1/index.html 
this is volume from host
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器内修改数据，查看宿主机文件变化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@e9a318704d7c webapps]# echo some-change &amp;gt;&amp;gt; app1/index.html 
[root@e9a318704d7c webapps]# exit
logout
[root@host2 ~]# cat /data/app1/index.html 
this is volume from host
some-change
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挂载一个只读的卷&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -d -p 801:8080 -v /data/app1/:/usr/local/tomcat/webapps/app1:ro --name app2 notechbb/app2:v1
01c725aac42cd62b3c2fb81cea4f06a1ebb7ef3b87c11e045957bff8ee69b5cb
   
# -v选项，指定时，末尾加个ro选项即可；
# 可以看到，容器内不能对其做数据修改，（适合web服务容器，挂载只读的静态资源文件）
[root@01c725aac42c /]# cat /usr/local/tomcat/webapps/app1/index.html 
this is volume from host
some-change
[root@01c725aac42c /]# echo haha &amp;gt;&amp;gt; !$
echo haha &amp;gt;&amp;gt; /usr/local/tomcat/webapps/app1/index.html
-bash: /usr/local/tomcat/webapps/app1/index.html: Read-only file system
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据卷特点&#34;&gt;数据卷特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;数据卷是目录，或文件，可供多个容器同时使用，（如多个web容器挂载一个数据卷）&lt;/li&gt;
&lt;li&gt;对数据卷操作，容器内会立即更新&lt;/li&gt;
&lt;li&gt;数据卷是永久保存，不会随之容器删除而删除&lt;/li&gt;
&lt;li&gt;容器向里面写入数据，不会影响镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据卷使用场景&#34;&gt;数据卷使用场景&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;容器运行中日志输出；&lt;/li&gt;
&lt;li&gt;web服务挂载静态页面文件；&lt;/li&gt;
&lt;li&gt;应用配置文件；&lt;/li&gt;
&lt;li&gt;多容器间，目录或文件共享；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;手动文件挂载&#34;&gt;手动文件挂载&lt;/h2&gt;
&lt;p&gt;​	常用于nginx，tomcat等程序的配置文件；一般较少修改；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# echo 1.conf &amp;gt; /data/1.conf 

[root@host2 ~]# docker run -it --rm --name c1 -v /data/1.conf:/etc/1.conf:ro centos /bin/bash
[root@4f7e820c9e71 /]# cat /etc/1.conf 
1.conf

# 宿主机准备文件，然后利用-v挂载到需要的位置即可；
# 修改配置时，只需要修改宿主机上的文件即可；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;手动挂载多个目录&#34;&gt;手动挂载多个目录&lt;/h2&gt;
&lt;p&gt;​	使用多个-v选项即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# echo 2.conf &amp;gt; /data/2.conf
[root@host2 ~]# docker run -it --rm --name c2 -v /data/1.conf:/etc/1.conf:ro -v /data/2.conf:/etc/2.conf centos /bin/bash
[root@ec752c8c1c0b /]# cat /etc/1.conf 
1.conf
[root@ec752c8c1c0b /]# cat /etc/2.conf 
2.conf
[root@ec752c8c1c0b /]# echo change &amp;gt; /etc/1.conf 
bash: /etc/1.conf: Read-only file system
[root@ec752c8c1c0b /]# echo change &amp;gt; /etc/2.conf 
[root@ec752c8c1c0b /]# cat /etc/2.conf 
change
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;容器卷使用&#34;&gt;容器卷使用&lt;/h2&gt;
&lt;p&gt;【容器卷，实现了多容器间数据共享，尤其大批需要相同数据的容器时，简化了启动命令，只需一个数据卷容器作为模版，其他的容器采用--volumes-from即可挂载相同数据】&lt;/p&gt;
&lt;p&gt;采用了数据卷容器的，文件权限，取决于模版容器卷挂载时的权限；&lt;/p&gt;
&lt;p&gt;【常用于类nfs的文件共享】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run --name c1 -d -v /data/app1/:/data/app1 centos tail -f /etc/hosts
a8acb89d042fba57eaa96567ee528ae5d4229a0b565d23e7af9e739da5d8d034
# 启动一个容器c1


[root@host2 ~]# /root/docker-in.sh c1
[root@a8acb89d042f /]# ls /data/app1/
index.html
[root@a8acb89d042f /]# exit
logout
# 进入c1查看挂载目录/data/app1



[root@host2 ~]# docker run --name c2 -d --volumes-from c1 centos tail -f /etc/hosts
99c1ef9dca75b8c7b30ba720fa0b15f2463a9f0b3fd1f204406b9892dccb3b41
[root@host2 ~]# docker run --name c3 -d --volumes-from c1 centos tail -f /etc/hosts
0e32af6e03bc7141f148e4d9f0837677cb23701862a72e3799bdc8b452c710fe
# 再启动2容器，c2和c3，采用--volumes-from参数，即可实现和c1一样的目录挂载；



[root@host2 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
0e32af6e03bc        centos              &amp;quot;tail -f /etc/hosts&amp;quot;   2 seconds ago       Up 1 second                             c3
99c1ef9dca75        centos              &amp;quot;tail -f /etc/hosts&amp;quot;   10 seconds ago      Up 9 seconds                            c2
a8acb89d042f        centos              &amp;quot;tail -f /etc/hosts&amp;quot;   3 minutes ago       Up 3 minutes                            c1

[root@host2 ~]# /root/docker-in.sh c3
[root@0e32af6e03bc /]# ls /data/app1/
index.html
[root@0e32af6e03bc /]# touch /data/app1/c3.file
[root@0e32af6e03bc /]# ls /data/app1/
c3.file  index.html
[root@0e32af6e03bc /]# exit
logout


[root@host2 ~]# /root/docker-in.sh c2
[root@99c1ef9dca75 /]# ls /data/app1/
c3.file  index.html
[root@99c1ef9dca75 /]# touch /data/app1/c2.file
[root@99c1ef9dca75 /]# ls /data/app1/
c2.file  c3.file  index.html

# 可以看到，c2 c3的数据变更是一致的
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;什么状态的容器卷可以被使用&#34;&gt;什么状态的容器卷可以被使用&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;由实验测试得知：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建好容器卷后，其他容器可以用--volumes-from以其为模版挂载相同卷；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器卷停止后，其他已挂载容器正常使用、也可以用停止状态的容器卷继续创建容器；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器被rm -f删除后，其他已挂载容器正常使用、不可以其做模版继续创建容器；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;报错如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run --name c5 -d --volumes-from c1 centos tail -f /etc/hosts
docker: Error response from daemon: No such container: c1.
# 已经找不到c1这个容器了
      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将删除后的数据卷容器，再相同命令创建一遍，又可以继续以其做模块创建新容器，其他已经创建的容器仍正常使用；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">docker网络模型</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/" />
            <id>https://latteStudio.github.io/posts/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</id>
            <updated>2020-11-05T18:26:28&#43;08:00</updated>
            <published>2020-10-25T15:54:18&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docker网络模型</summary>
            
                <content type="html">&lt;h1 id=&#34;docker四种单机网络模型&#34;&gt;docker四种单机网络模型&lt;/h1&gt;
&lt;p&gt;​	docker共有4种网络模型：&lt;strong&gt;分别是：封闭式网络、桥接式网络、联邦式网络、开放式网络；网络安全性依次减弱，因为网络对外的开放性依次加强&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本地查看网络模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@reg harbor]# docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
c551b2c85d8b        bridge              bridge              local
ca84b629148b        host                host                local
cab24ad22074        none                null                local

# 安装docker后，默认具有3个网络，none，host，和bridge
# docker run --network ，运行容器时，可以指定其所运行的网络，默认是bridge，桥接到docker0上；

[root@reg harbor]# ifconfig docker0
docker0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:51:02:79:1c  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201103180136028.png&#34; alt=&#34;image-20201103180136028&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;封闭网络none-container&#34;&gt;封闭网络：none-container&lt;/h2&gt;
&lt;p&gt;​	该网络中容器，只有一个环回接口，不进行网络通信与外界；适合执行一次性job的容器；&lt;/p&gt;
&lt;h3 id=&#34;实验&#34;&gt;实验&lt;/h3&gt;
&lt;p&gt;1、运行一个none网络的容器；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@reg harbor]# docker run --name b1 --rm -it --network none busybox
/ # ifconfig 
lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

/ # route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface

# 可见，只有一个lo口，没有任何路由，无法网络通信；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;none模型图&#34;&gt;none模型图&lt;/h3&gt;
&lt;p&gt;​	none网络下的容器，只有一个lo口，无法和宿主机及其其他容器进行通信；适合无需网络通信的容器；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201103194913607.png&#34; alt=&#34;image-20201103194913607&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;桥接网络bridge-container&#34;&gt;桥接网络：bridge-container&lt;/h2&gt;
&lt;p&gt;参考：https://docs.docker.com/network/network-tutorial-standalone/&lt;/p&gt;
&lt;p&gt;​	该网络中容器，桥接到宿主机上docker0网络，默认是172.17.0.0.0/16网段，容器通过nat形式借助宿主机网络与外面网络通信；&lt;/p&gt;
&lt;h3 id=&#34;实验-1&#34;&gt;实验&lt;/h3&gt;
&lt;p&gt;1、运行一个bridge网络的busybox镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 默认即为bridge网络，可不加--network bridge

[root@reg harbor]# docker run --name b1 -it --network bridge busybox
/ # ifconfig 
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:12 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:1016 (1016.0 B)  TX bytes:0 (0.0 B)

# 默认2条路由，一是同连在docker0上的其他容器同172.17网段的路由；
# 二是以docker0为默认网关，借助docker0，eth0出去；

/ # route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0

# 可以访问宿主机，以及宿主机同网段的其他ip；

/ # ping 192.168.80.101
PING 192.168.80.101 (192.168.80.101): 56 data bytes
64 bytes from 192.168.80.101: seq=0 ttl=64 time=0.174 ms
^C
--- 192.168.80.101 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 0.174/0.174/0.174 ms
/ # ping 192.168.80.102
PING 192.168.80.102 (192.168.80.102): 56 data bytes
64 bytes from 192.168.80.102: seq=0 ttl=63 time=0.890 ms
64 bytes from 192.168.80.102: seq=1 ttl=63 time=0.662 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看生成一个一对网卡&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@reg harbor]# yum install -y bridge-utils

[root@reg harbor]# brctl show
bridge name	bridge id		STP enabled	interfaces
br-97c0b3d84ade		8000.0242418a7b64	no		
# 该网卡即为容器b1的eth0的另一半，接在了docker0上；

docker0		8000.02425102791c	no	
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;bridge模型图&#34;&gt;bridge模型图&lt;/h3&gt;
&lt;p&gt;描述：&lt;/p&gt;
&lt;p&gt;​	docker的桥接模型下，每创建一个容器，都会生成一对网卡，&lt;strong&gt;一头接在容器上，为容器的eth0；一头接在docker0上，为vethxx开头的网卡，docker的行为类似交换机，与外界通信时，借助docker和宿主机的eth0网卡，经过nat通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201103190536782.png&#34; alt=&#34;image-20201103190536782&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;user-defined-network&#34;&gt;user-defined-network&lt;/h3&gt;
&lt;p&gt;​	在单机桥接网络的基础之上，可以定义用户需要的网络，即再定义另外网段的桥接网络，&lt;a href=&#34;https://docs.docker.com/network/network-tutorial-standalone/#use-user-defined-bridge-networks&#34;&gt;官方介绍&lt;/a&gt;，如默认是172.17.0.0/16网段，用户可以自定义172.18.0.0/16网段，构成2个局域网，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 创建一个名为alpine-net的网络；
docker network create --driver bridge alpine-net
# 自动被分配为172.18网段；
docker network inspect alpine-net

[
    {
        &amp;quot;Name&amp;quot;: &amp;quot;alpine-net&amp;quot;,
        &amp;quot;Id&amp;quot;: &amp;quot;e9261a8c9a19eabf2bf1488bf5f208b99b1608f330cff585c273d39481c9b0ec&amp;quot;,
        &amp;quot;Created&amp;quot;: &amp;quot;2017-09-25T21:38:12.620046142Z&amp;quot;,
        &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Driver&amp;quot;: &amp;quot;bridge&amp;quot;,
        &amp;quot;EnableIPv6&amp;quot;: false,
        &amp;quot;IPAM&amp;quot;: {
            &amp;quot;Driver&amp;quot;: &amp;quot;default&amp;quot;,
            &amp;quot;Options&amp;quot;: {},
            &amp;quot;Config&amp;quot;: [
                {
                    &amp;quot;Subnet&amp;quot;: &amp;quot;172.18.0.0/16&amp;quot;,
                    &amp;quot;Gateway&amp;quot;: &amp;quot;172.18.0.1&amp;quot;
                }
            ]
        },
        &amp;quot;Internal&amp;quot;: false,
        &amp;quot;Attachable&amp;quot;: false,
        &amp;quot;Containers&amp;quot;: {},
        &amp;quot;Options&amp;quot;: {},
        &amp;quot;Labels&amp;quot;: {}
    }
]
# 创建容器时通过alpine-net加入该自定义网络
docker run -dit --name alpine1 --network alpine-net alpine ash
$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
e9261a8c9a19        alpine-net          bridge              local
17e324f45964        bridge              bridge              local
6ed54d316334        host                host                local
7092879f2cc8        none                null                local
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;联邦网络joined-container&#34;&gt;联邦网络：joined-container&lt;/h2&gt;
&lt;p&gt;​	该网络中容器，多个容器共享一个tcp/ip协议栈，一般适用于边车模式捆绑一起运行的容器，其主容器和辅助容器公用一套协议栈；&lt;strong&gt;联盟网络是基于bridge网络；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	也叫container模型，创建容器时，通过container：一个已经运行的容器名或id来加入其网络；&lt;/p&gt;
&lt;h3 id=&#34;实验-2&#34;&gt;实验&lt;/h3&gt;
&lt;p&gt;1、创建第一个容器b1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@reg harbor]# docker run --name b1 --rm -it busybox

/ # echo joined-containers &amp;gt; /tmp/index.html

/ # httpd -h /tmp/
/ # netstat -nlt
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       
tcp        0      0 :::80                   :::*                    LISTEN      

/ # wget -O - -q 127.0.0.1
joined-containers
/ # ifconfig -a
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、创建容器b2，指明公用b1的网络&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 新开一个窗口，利用参数--network container:b1 指明公用b1的网络；
# 可以看到，b2和b1的网卡一样，监听的服务和端口一样，因为是同一个net namespace

[root@reg ~]# docker run --name b2 --rm -it --network container:b1 busybox
/ # netstat -nlt
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       
tcp        0      0 :::80                   :::*                    LISTEN      

/ # wget -O - -q 127.0.0.1
joined-containers
/ # ifconfig -a
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  
          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:648 (648.0 B)  TX bytes:0 (0.0 B)

# 看到，文件系统不共享；只是服务共享；
/ # ls /tmp/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;joined模型图&#34;&gt;joined模型图&lt;/h3&gt;
&lt;p&gt;​	联邦网络模式其实还是bridge模型；联邦网络模型之下，2个以及以上的容器公用一个net namespace，但文件系统，user，等仍为隔离的；&lt;strong&gt;创建方法：先创建一个容器，然后在此容器基础之上，再创建容器时，指明网络为公用第一个容器的网络即可；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201103193734153.png&#34; alt=&#34;image-20201103193734153&#34;&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;主机网络host-container&#34;&gt;主机网络：host-container&lt;/h2&gt;
&lt;p&gt;​	该网络中容器，容器借用宿主机的网络，和宿主机公用一个tcp/ip协议栈；&lt;/p&gt;
&lt;h3 id=&#34;实验-3&#34;&gt;实验&lt;/h3&gt;
&lt;p&gt;1、运行一个host网络的容器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 从容器中看，可以发现监听的端口，网卡都是和宿主机一模一样；
# host网络的容器，不需要-p映射其中的服务，但是注意，和宿主机端口不能冲突；

[root@reg harbor]# docker run --name b1 --rm -it --network host busybox
/ # ifconfig 
br-97c0b3d84ade Link encap:Ethernet  HWaddr 02:42:41:8A:7B:64  
          inet addr:172.18.0.1  Bcast:172.18.255.255  Mask:255.255.0.0
          inet6 addr: fe80::42:41ff:fe8a:7b64/64 Scope:Link
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:79 errors:0 dropped:0 overruns:0 frame:0
          TX packets:94 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:3980 (3.8 KiB)  TX bytes:19082 (18.6 KiB)

docker0   Link encap:Ethernet  HWaddr 02:42:51:02:79:1C  
          inet addr:172.17.0.1  Bcast:172.17.255.255  Mask:255.255.0.0
          inet6 addr: fe80::42:51ff:fe02:791c/64 Scope:Link
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:5 errors:0 dropped:0 overruns:0 frame:0
          TX packets:13 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:308 (308.0 B)  TX bytes:1026 (1.0 KiB)

eth0      Link encap:Ethernet  HWaddr 00:0C:29:2D:5D:7C  
          inet addr:192.168.80.101  Bcast:192.168.80.255  Mask:255.255.255.0
          inet6 addr: fe80::eb02:a6b5:be84:952/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:2382 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1278 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1054246 (1.0 MiB)  TX bytes:155717 (152.0 KiB)

eth1      Link encap:Ethernet  HWaddr 00:0C:29:2D:5D:86  
          inet addr:192.168.10.101  Bcast:192.168.10.255  Mask:255.255.255.0
          inet6 addr: fe80::7822:f591:feb0:47ea/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:48 errors:0 dropped:0 overruns:0 frame:0
          TX packets:14 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:4338 (4.2 KiB)  TX bytes:1040 (1.0 KiB)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:352 errors:0 dropped:0 overruns:0 frame:0
          TX packets:352 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:34827 (34.0 KiB)  TX bytes:34827 (34.0 KiB)


/ # netstat -nlt
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      
tcp        0      0 :::22                   :::*                    LISTEN      
tcp        0      0 ::1:25                  :::*                    LISTEN   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、host模式运行一个nginx容器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;host模型图&#34;&gt;host模型图&lt;/h3&gt;
&lt;p&gt;​	host网络模型下，所有运行在该模式的容器，都不会获得单独的net namespace，而是公用宿主机的tcp/ip协议栈；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201103191838447.png&#34; alt=&#34;image-20201103191838447&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;docker两种跨主机网络模型&#34;&gt;docker两种跨主机网络模型&lt;/h1&gt;
&lt;p&gt;​	以上四种网络模型，均为单机情况下，docker提供的网络模型；且生产主机不可能只有单主机；&lt;/p&gt;
&lt;p&gt;​	在多宿主机互联的情况下，docker另外提供了2种网络模型，分别是macvlan和overlay网络，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macvlan&lt;/li&gt;
&lt;li&gt;overlay&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实验跨主机容器间通信overlay&#34;&gt;实验：跨主机容器间通信（overlay）&lt;/h2&gt;
&lt;p&gt;实验环境：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;host2:192.168.80.101
	docker0为172.17.10.1/24
host3:192.168.80.102
	docker0为172.17.20.1/24

防火墙和selinux全部关闭
2个宿主机的桥接网段不能在同一个网段，所以需要对默认的172.17.0.0/16做修改
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改2台宿主机的docker0网段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2台宿主机分别启动一个桥接网络的容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2台宿主机分别添加一条静态路由，指向对方的物理网卡的ip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其中一台宿主机的物理网卡开启抓包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2容器间互ping测试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改2台宿主机的docker0网段&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# vim /usr/lib/systemd/system/docker.service 
[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
ExecStart=/usr/bin/dockerd --bip=172.17.10.1/24
   
# 在末尾加了--bip=172.17.10.1/24，指定了docker0上网卡地址，以及其网段；
   
[root@host2 ~]# systemctl daemon-reload
[root@host2 ~]# systemctl restart docker
   
[root@host2 ~]# ifconfig docker0
docker0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 172.17.10.1  netmask 255.255.255.0  broadcast 172.17.10.255
   
   
---
同理，host2也对应修改
[root@host3 ~]# grep bip !$ 
grep bip /usr/lib/systemd/system/docker.service 
ExecStart=/usr/bin/dockerd  --bip=172.17.20.1/24
   
[root@host3 ~]# systemctl daemon-reload
[root@host3 ~]# systemctl restart docker
   
[root@host3 ~]# ifconfig docker0
docker0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 172.17.20.1  netmask 255.255.255.0  broadcast 172.17.20.255
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2台宿主机分别启动一个桥接网络的容器&lt;/p&gt;
&lt;p&gt;host2：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run --name b1 -it busybox
/ # ifconfig 
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:0A:02  
          inet addr:172.17.10.2  Bcast:172.17.10.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:10 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:836 (836.0 B)  TX bytes:0 (0.0 B)
   
# 此时还无法ping通host3上的启停容器
/ # ping 172.17.20.2
PING 172.17.20.2 (172.17.20.2): 56 data bytes
^C
--- 172.17.20.2 ping statistics ---
2 packets transmitted, 0 packets received, 100% packet loss
/ # route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.17.10.1     0.0.0.0         UG    0      0        0 eth0
172.17.10.0     0.0.0.0         255.255.255.0   U     0      0        0 eth0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;host3：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# docker run --name b2 -it busybox
/ # ifconfig 
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:14:02  
          inet addr:172.17.20.2  Bcast:172.17.20.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:12 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:1016 (1016.0 B)  TX bytes:0 (0.0 B)
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2台宿主机分别添加一条静态路由，指向对方的物理网卡的ip&lt;/p&gt;
&lt;p&gt;host2：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# route add -net 172.17.20.0/24 gw 192.168.80.102
[root@host2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
172.17.20.0     192.168.80.102  255.255.255.0   UG    0      0        0 eth0
   
[root@host2 ~]# iptables -A FORWARD -s 192.168.80.0/24 -j ACCEPT
   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;host3：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# route add -net 172.17.10.0/24 gw 192.168.80.101
[root@host3 ~]# route -n
Kernel IP routing table
172.17.10.0     192.168.80.101  255.255.255.0   UG    0      0        0 eth0
   
   
[root@host3 ~]# iptables -A FORWARD -s 192.168.80.0/24 -j ACCEPT
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其中一台宿主机的物理网卡开启抓包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# tcpdump -i eth0 -vnn icmp
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
14:30:14.550012 IP (tos 0x0, ttl 63, id 6477, offset 0, flags [DF], proto ICMP (1), length 84)
    192.168.80.101 &amp;gt; 172.17.20.2: ICMP echo request, id 2816, seq 0, length 64
14:30:14.550099 IP (tos 0x0, ttl 63, id 50101, offset 0, flags [none], proto ICMP (1), length 84)
    172.17.20.2 &amp;gt; 192.168.80.101: ICMP echo reply, id 2816, seq 0, length 64
14:30:15.551182 IP (tos 0x0, ttl 63, id 6764, offset 0, flags [DF], proto ICMP (1), length 84)
   
# 2台宿主机没配置上面接受来源是192.168.80.0/24的iptable规则时，是无法ping通，ping包有去无回，因为被宿主机过滤掉了
# 添加后正常ping通，可以看出在host3的eth0上来看，来源ip是host2的物理网卡80.101，访问的是容器的桥接网段，反之亦然，因为是overlay叠加网络，数据包封装了2层ip头部，对于数据包的接收方来说，宿主机接收到之后，进到容器网段之前，看到的只是发送方容器所在宿主机的物理网卡的ip，即外层ip；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2容器间互ping测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/ # ping 172.17.20.2
PING 172.17.20.2 (172.17.20.2): 56 data bytes
64 bytes from 172.17.20.2: seq=0 ttl=62 time=0.571 ms
64 bytes from 172.17.20.2: seq=1 ttl=62 time=2.233 ms
   
可以ping通；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;dokcer网络模型总结&#34;&gt;dokcer网络模型总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;none无网络&lt;/li&gt;
&lt;li&gt;host共享主机网络&lt;/li&gt;
&lt;li&gt;bridge，也叫standlone网络，（默认网络）
&lt;ul&gt;
&lt;li&gt;延伸1：joined-container联盟网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;overlay&lt;/li&gt;
&lt;li&gt;macvlan&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;利用容器名通信&#34;&gt;利用容器名通信&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;启动2个容器，正常启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run --name b1 --rm -it busybox
/ # ifconfig 
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:0A:02  
          inet addr:172.17.10.2  Bcast:172.17.10.255  Mask:255.255.255.0
   
   
/ # cat /etc/hosts
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.10.2	397b8c9382f4
   
[root@host2 ~]# docker run --name b2 --rm -it busybox
/ # ifconfig 
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:0A:03  
          inet addr:172.17.10.3  Bcast:172.17.10.255  Mask:255.255.255.0
   
   
/ # cat /etc/hosts
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.10.3	50e37004077e
/ # ping 172.17.10.2
PING 172.17.10.2 (172.17.10.2): 56 data bytes
64 bytes from 172.17.10.2: seq=0 ttl=64 time=0.210 ms
   
# 启动的2个容器，可以通过ip互相ping通，但是无法通过主机名，容器名，容器id实现互通，
# 因为一hosts文件没有对应记录，二没有dns服务
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动第3个容器，加入--link参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run --name b3 --rm -it --link b1 --link b2 busybox
/ # cat /etc/hosts 
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.10.2	b1 397b8c9382f4
172.17.10.3	b2 50e37004077e
172.17.10.4	b629dc90c558
# --link后跟，已经存在的容器名，可以在hosts文件中加入一条记录，从而实现利用主机名通信；
   
   
/ # ping b1
PING b1 (172.17.10.2): 56 data bytes
64 bytes from 172.17.10.2: seq=0 ttl=64 time=0.123 ms
^C
--- b1 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 0.123/0.123/0.123 ms
/ # ping b2
PING b2 (172.17.10.3): 56 data bytes
64 bytes from 172.17.10.3: seq=0 ttl=64 time=0.107 ms
^C
--- b2 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 0.107/0.107/0.107 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;reference&#34;&gt;reference&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://success.docker.com/Datacenter/Apply/Docker_Reference_Architecture%3A_Designing_Scalable%2C_Portable_Docker_Container_Networks&#34;&gt;Docker Network Reference Architecture.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://success.mirantis.com/article/docker-enterprise-best-practices&#34;&gt;https://success.mirantis.com/article/docker-enterprise-best-practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker%E7%BD%91%E7%BB%9C/" term="docker网络" label="docker网络" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">docker镜像与dockerfile</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/docker%E9%95%9C%E5%83%8F%E4%B8%8Edockerfile/" />
            <id>https://latteStudio.github.io/posts/docker%E9%95%9C%E5%83%8F%E4%B8%8Edockerfile/</id>
            <updated>2020-10-29T19:32:08&#43;08:00</updated>
            <published>2020-10-25T15:53:44&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docker镜像与dockerfile</summary>
            
                <content type="html">&lt;h1 id=&#34;docker镜像&#34;&gt;docker镜像&lt;/h1&gt;
&lt;h2 id=&#34;docker镜像介绍&#34;&gt;docker镜像介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://jfrog.com/knowledge-base/a-beginners-guide-to-understanding-and-building-docker-images/&#34;&gt;https://jfrog.com/knowledge-base/a-beginners-guide-to-understanding-and-building-docker-images/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	一个典型的linux文件系统，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bootfs（kernel+bootloader）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rootfs（/bin /dev /proc等目录）&lt;/p&gt;
&lt;p&gt;而docker镜像不包含bootfs，只是利用宿主机的bootfs，只包含最基本的rootfs，一些常用命令等，所有docker镜像都比较小；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	docker镜像类比文件系统上的程序文件，如/bin/ls，其动态表现为容器，特点为只读，仅在运行时会加入一个可写层，从而保证了镜像的不变性，通过同一个docker镜像启动的若干个容器，初始一定是完全一致的状态；&lt;/p&gt;
&lt;h2 id=&#34;docker镜像特点&#34;&gt;docker镜像特点&lt;/h2&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;​	宿主机的内核+层层叠加形成了镜像提供的rootfs，构成了容器的运行环境，镜像文件系统是一层一层往上堆，上层会覆盖下层，如每一层都由相同的文件1.txt，那么最后看到的只会是最上层的文件1.txt内容，镜像运行为容器时，会再加一层可写层，在最上面，只有该层可写，容器运行中所有的数据修改都发生在这里，可写层生命周期和容器一致，即停止容器后，所有数据修改会丢失，（数据持久化需要采用挂载卷方式）&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;docker的优势很大程度上依赖于：docker镜像的特性：分层构建、联合挂载、多层只读层+一层可写层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;镜像包含了运行其中软件必要的文件系统结构，包含rootfs，但是没有内核，所有容器都是共用宿主机的内核；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@e50fe34d3cf5 /]# ls
bin  etc   lib	  lost+found  mnt  proc  run   srv  tmp  var
dev  home  lib64  media       opt  root  sbin  sys  usr
# 没有/boot目录

[root@e50fe34d3cf5 /]# uname -r
3.10.0-862.el7.x86_64
[root@e50fe34d3cf5 /]# cat /etc/redhat-release 
CentOS Linux release 8.2.2004 (Core) 
# 发行版为8.2，但内核是宿主机7版本的的3.10

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201028101235868.png&#34; alt=&#34;image-20201028101235868&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;镜像构建方式&#34;&gt;镜像构建方式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;docker镜像构建的方式有2种：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于官方的基础镜像，如各个发行版，层层叠加，构建自己的镜像
&lt;ol&gt;
&lt;li&gt;基于基础镜像运行容器，然后登陆容器，&lt;/li&gt;
&lt;li&gt;执行想要的操作，如编译安装一个nginx&lt;/li&gt;
&lt;li&gt;退出容器，docker commit提交为一个新的镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;利用dockerfile编写镜像的构建构成，然后利用解析dockerfile来构建镜像；
&lt;ol&gt;
&lt;li&gt;编写dockerfile，里面指令描述了如何构建一个新的镜像，如编译安装nginx的过程&lt;/li&gt;
&lt;li&gt;docker程序解释执行dockerfile，最终生成一个新的镜像&lt;/li&gt;
&lt;li&gt;执行dockerfile过程中，针对每个指令，都会启动一个容器进行指令操作，（制作一个镜像，会看到中间过程运行的容器，docker ps -a命令）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;docker镜像管理&#34;&gt;docker镜像管理&lt;/h2&gt;
&lt;p&gt;1、搜索官方镜像&lt;/p&gt;
&lt;p&gt;​	第一个往往是官方镜像，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
centos                             The official build of CentOS.                   6255                [OK]                
ansible/centos7-ansible            Ansible on Centos7                              132                                     [OK]

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、下载镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker pull busybox
Using default tag: latest
latest: Pulling from library/busybox
9758c28807f2: Pull complete 
Digest: sha256:a9286defaba7b3a519d585ba0e37d0b2cbee74ebfe590960b0b1d6a5e97d1e1d
Status: Downloaded newer image for busybox:latest

语法格式：
docker pull 仓库服务器:端口/仓库名/镜像名:标签

例如：
docker pull localdocker.com:/prodution/nginx:1.14

对于dockerhub的公共仓库
docker pull 用户名/镜像名:标签
若是官方在dockerhub上的仓库，即可省略用户名，标签默认是lateset

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看本地镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
notechbb/test       v1                  945619f86ac0        16 hours ago        277MB
ubuntu              latest              d70eaf7277ea        4 days ago          72.9MB
busybox             latest              f0b02e9d092d        13 days ago         1.23MB

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、镜像导出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 opt]# docker save busybox -o /opt/busybox.tar.gz
[root@host2 opt]# ll
total 1428
-rw------- 1 root root 1459200 Oct 28 10:37 busybox.tar.gz
[root@host2 opt]# docker save nginx &amp;gt; /opt/nginx.tar.gz
[root@host2 opt]# ll
total 135280
-rw------- 1 root root   1459200 Oct 28 10:37 busybox.tar.gz
-rw-r--r-- 1 root root 137064448 Oct 28 10:37 nginx.tar.gz

# docker save命令，指明镜像，用-o或&amp;gt; 导出为镜像文件

# 查看导出镜像内容
解压后，可以查看元数据信息
[root@host2 opt]# cat manifest.json 
[{&amp;quot;Config&amp;quot;:&amp;quot;f0b02e9d092d905d0d87a8455a1ae3e9bb47b4aa3dc125125ca5cd10d6441c9f.json&amp;quot;,&amp;quot;RepoTags&amp;quot;:[&amp;quot;busybox:latest&amp;quot;],&amp;quot;Layers&amp;quot;:[&amp;quot;50670a188f4d6a8bfbe56cd21b56524e458de56637142b18933beda1acad863c/layer.tar&amp;quot;]}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、镜像删除、导入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 当有该镜像启动的容器运行时，不能删除；

[root@host2 opt]# docker rmi busybox
Untagged: busybox:latest
Untagged: busybox@sha256:a9286defaba7b3a519d585ba0e37d0b2cbee74ebfe590960b0b1d6a5e97d1e1d
Deleted: sha256:f0b02e9d092d905d0d87a8455a1ae3e9bb47b4aa3dc125125ca5cd10d6441c9f
Deleted: sha256:d2421964bad195c959ba147ad21626ccddc73a4f2638664ad1c07bd9df48a675

[root@host2 opt]# docker load &amp;lt; /opt/busybox.tar.gz 
d2421964bad1: Loading layer   1.45MB/1.45MB
Loaded image: busybox:latest

或:
docker load -i 镜像压缩包
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;dockerfile&#34;&gt;dockerfile&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;​	dockerfile为文件文件、由一条条指令组成，由docker程序解释执行，&lt;strong&gt;执行过程：每个dockerfile的指令，docker都会启动一个容器，执行该指令，以此类推，由dockerfile制作镜像的过程中，会启动若干个容器，docker ps -a可以查看&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法与指令&#34;&gt;语法与指令&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://docs.docker.com/engine/reference/builder/#usage

#官方介绍：
#常用指令：
run 执行命令，如yum wget等
add 将host的文件复制到镜像内部
expose 开放的端口
cmd 镜像运行为容器时，启动的命令
env 设置环境变量
maintainer 作者信息
from 基于哪个基础镜像，一般是发行版的官方镜像，centos，ubuntu等
volume 定义存储挂载卷
workdir 进入容器后的默认目录
arg 
entrypoint

#注意entrypoint、cmd、arg的区别与联系
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;镜像制作&#34;&gt;镜像制作&lt;/h1&gt;
&lt;h2 id=&#34;手动yum版nginx镜像&#34;&gt;手动yum版nginx镜像&lt;/h2&gt;
&lt;p&gt;​	总结步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载一个基础镜像，如centos&lt;/li&gt;
&lt;li&gt;将其运行为容器，并连入&lt;/li&gt;
&lt;li&gt;配置基础仓库、nginx仓库&lt;/li&gt;
&lt;li&gt;yum安装nginx，修改配置文件，改为前台运行：daemon off;&lt;/li&gt;
&lt;li&gt;自定义web主页&lt;/li&gt;
&lt;li&gt;ctrl p q退出容器交互窗口，docker commit提交为新镜像&lt;/li&gt;
&lt;li&gt;docker push推送镜像到docker hub或私有仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# 下载一个centos的基础镜像，没指定版本，默认安装latest标签的，即centos8版本
[root@host2 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              d70eaf7277ea        3 days ago          72.9MB
nginx               latest              f35646e83998        2 weeks ago         133MB
centos              latest              0d120b6ccaa8        2 months ago        215MB
hello-world         latest              bf756fb1ae65        9 months ago        13.3kB

# 运行为容器
[root@host2 ~]# docker run -it --name c1 centos /bin/bash

# 修改仓库文件
[root@e50fe34d3cf5 /]# cd /etc/yum.repos.d/
[root@e50fe34d3cf5 yum.repos.d]# yum repolist
Failed to set locale, defaulting to C.UTF-8
repo id                       repo name
base                          CentOS-8 - Base - mirrors.aliyun.com
extras                        CentOS-8 - Extras - mirrors.aliyun.com
updates                       CentOS-8 - Updates - mirrors.aliyun.com


# 配置时区
[root@e50fe34d3cf5 yum.repos.d]# rm -rf /etc/localtime 
[root@e50fe34d3cf5 yum.repos.d]# ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  
[root@e50fe34d3cf5 yum.repos.d]# echo &amp;quot;Asia/Shanghai&amp;quot; &amp;gt; /etc/timezone

# 下载阿里的仓库文件，nginx的仓库文件，注意是对应版本，一开始centos8下成了7的仓库，死活下不了包
[root@e50fe34d3cf5 yum.repos.d]# ls
CentOS-Base.repo  nginx.repo

# 安装nginx；
# 修改配置文件，改为前台运行，（因docker容器需要一个前台运行的容器，才可以保持运行状态）
# 定义主页文件
[root@e50fe34d3cf5 yum.repos.d]# yum install nginx
[root@e50fe34d3cf5 yum.repos.d]# vim /etc/nginx/nginx.conf 
	daemon off;
[root@e50fe34d3cf5 yum.repos.d]# echo docker yum nginx &amp;gt; /usr/share/nginx/html/index.html

# ctrl p q退出容器交互创建
# 采用docker commit提交，-m为注释、采用容器的id、
# 名字格式为dockerhub用户名/仓库名:标签，采用标准格式，方便直接推送到dockerhub账户
[root@host2 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e50fe34d3cf5        centos              &amp;quot;/bin/bash&amp;quot;         28 minutes ago      Up 28 minutes                           c1
[root@host2 ~]# docker commit -m &amp;quot;base-centos-yum-nginx-image&amp;quot; e50fe34d3cf5 notechbb/test:v1sha256:945619f86ac0dd6f9ae1ef4cdada83e41970a5c63d9bdc35e883565ad31e26f0
[root@host2 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
notechbb/test       v1                  945619f86ac0        4 seconds ago       277MB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、运行为容器，访问测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 opt]# docker run -d -p 80:80 --name n2 notechbb/test:v1 /usr/sbin/nginx
90b7f3ae32d72abbc01526d346c59be2e06c9b91f09230d745fd7fed5f48d18b
[root@host2 opt]# ss -lnt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:22                             *:*                  
LISTEN     0      100        127.0.0.1:25                             *:*                  
LISTEN     0      128               :::80                            :::*                  
LISTEN     0      128               :::22                            :::*                  
LISTEN     0      100              ::1:25                            :::*                  
[root@host2 opt]# curl 192.168.80.101
docker yum nginx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dockerfile作源码安装nginx镜像&#34;&gt;dockerfile作源码安装nginx镜像&lt;/h2&gt;
&lt;p&gt;​	dockerfile就是把运行容器，手动一步步的操作，写为了dockerfile中指令，&lt;strong&gt;然后由docker解释执行dockerfile，过程中，每执行一条指令，就是运行为一个容器然后做指令中操作，提交为镜像，依次类推，层层叠加，直到dockerfile最后一条指令，生成最后的镜像&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;步骤总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编写dockerfile
&lt;ol&gt;
&lt;li&gt;创建单独存放dockerfile的目录；&lt;/li&gt;
&lt;li&gt;编写dockerfile，注意Dockerfile，的D要大写&lt;/li&gt;
&lt;li&gt;将其中需要的文件，如源码包，配置文件等，放在dockerfile文件所在的目录&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;利用docker build进行构建镜像&lt;/li&gt;
&lt;li&gt;运行构建后的镜像，测试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1、编写dockerfile如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 将编译安装nginx的步骤，写为dockerfile指令即可；
# Dockerfile需要D大写
# 创建目录，用于dockerfile的编写


[root@host2 nginx]# cat Dockerfile 
# dockerfile yum nginx
From centos
maintainer wang@qq.com
# 基础镜像为centos，作者信息；


run rm -rf /etc/yum.repos.d/*
run curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo
run yum install -y lrzsz gcc gcc-c++ pcre-devel openssl-devel zlib-devel
# 配置yum源，安装基础包


add nginx-1.14.2.tar.gz /usr/local/src
# run tar -xf /usr/local/src/nginx-1.14.2.tar.gz -C /usr/local/src
# 将源码包，复制到容器内的文件系统目录中，注意：不需要解压，会自动解压！


run useradd nginx
run cd /usr/local/src/nginx-1.14.2/ &amp;amp;&amp;amp; ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio --with-stream_realip_module --with-stream_ssl_module --with-stream --with-pcre --with-http_gzip_static_module --with-http_realip_module
# 添加用户，进入目录，configure


run yum install -y make
run cd /usr/local/src/nginx-1.14.2/ &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
# 根据实验中报错，再安装make包，编译，和安装


add nginx.conf /usr/local/nginx/conf
run ln -sv /usr/local/nginx/sbin/nginx /usr/sbin/nginx
run echo &amp;quot;dockerfile bianyi nginx&amp;quot; &amp;gt; /usr/local/nginx/html/index.html
# 复制配置文件、做主程序软链接，自定义主页文件

expose 80
cmd [&amp;quot;/usr/sbin/nginx&amp;quot;]
# 暴露80端口，定义运行为容器时，执行的命令
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、执行过程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# docker built -t 标签信息   dockerfile所在目录

# 执行步骤如下；每一步都是一个新容器进行操作
[root@host2 nginx]# docker build -t notechbb/test:v2 /opt/dockerfile/nginx/
Sending build context to Docker daemon  1.023MB
Step 1/15 : From centos
 ---&amp;gt; 0d120b6ccaa8
Step 2/15 : maintainer wang@qq.com
 ---&amp;gt; Using cache
 ---&amp;gt; 8245a3e504d2
Step 3/15 : run rm -rf /etc/yum.repos.d/*
 ---&amp;gt; Using cache
 ---&amp;gt; c83f1085fc98
Step 4/15 : run curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo
 ---&amp;gt; Using cache
 ---&amp;gt; 1016539aae88
Step 5/15 : run yum install -y lrzsz gcc gcc-c++ pcre-devel openssl-devel zlib-devel
 ---&amp;gt; Using cache
 ---&amp;gt; 6f740d6ef49a
Step 6/15 : add nginx-1.14.2.tar.gz /usr/local/src
 ---&amp;gt; Using cache
 ---&amp;gt; ef56b197b9b4
Step 7/15 : run useradd nginx
 ---&amp;gt; Using cache
 ---&amp;gt; e4892f8bcb65
Step 8/15 : run cd /usr/local/src/nginx-1.14.2/ &amp;amp;&amp;amp; ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio --with-stream_realip_module --with-stream_ssl_module --with-stream --with-pcre --with-http_gzip_static_module --with-http_realip_module
 ---&amp;gt; Using cache
 ---&amp;gt; 19fc0a0f4e38
Step 9/15 : run yum install -y make
 ---&amp;gt; Using cache
 ---&amp;gt; 6c663d1dd0cf
Step 10/15 : run cd /usr/local/src/nginx-1.14.2/ &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
 ---&amp;gt; Using cache
 ---&amp;gt; 9e1548f2adad
Step 11/15 : add nginx.conf /usr/local/nginx/conf
 ---&amp;gt; Using cache
 ---&amp;gt; 7a28d47ccee7
Step 12/15 : run ln -sv /usr/local/nginx/sbin/nginx /usr/sbin/nginx
 ---&amp;gt; Using cache
 ---&amp;gt; b3f4eec5c2d2
Step 13/15 : run echo &amp;quot;dockerfile bianyi nginx&amp;quot; &amp;gt; /usr/local/nginx/html/index.html
 ---&amp;gt; Running in ffa27a922d14
Removing intermediate container ffa27a922d14
 ---&amp;gt; 424a349b646c
Step 14/15 : expose 80
 ---&amp;gt; Running in 861171cb77ee
Removing intermediate container 861171cb77ee
 ---&amp;gt; 72f0cfe401e4
Step 15/15 : cmd [&amp;quot;/usr/sbin/nginx&amp;quot;]
 ---&amp;gt; Running in 5021e9274d18
Removing intermediate container 5021e9274d18
 ---&amp;gt; ec692265596a
Successfully built ec692265596a
Successfully tagged notechbb/test:v2

# 查看构建过程中，利用的容器；
[root@host2 nginx]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                   CREATED             STATUS                           PORTS                NAMES
bc4b7a3a7692        notechbb/test:v2    &amp;quot;/usr/sbin/nginx&amp;quot;         2 minutes ago       Up 2 minutes                     0.0.0.0:80-&amp;gt;80/tcp   ng1
8e96fd8ae793        b3f4eec5c2d2        &amp;quot;/bin/sh -c &#39;echo \&amp;quot;d…&amp;quot;   44 minutes ago      Exited (1) 44 minutes ago                             sad_easley
7002d12d0465        19fc0a0f4e38        &amp;quot;/bin/sh -c &#39;cd /usr…&amp;quot;    About an hour ago   Exited (127) About an hour ago                        heuristic_mcnulty
73186b8d4bc1        19fc0a0f4e38        &amp;quot;/bin/sh -c &#39;make &amp;amp;&amp;amp;…&amp;quot;    About an hour ago   Exited (127) About an hour ago                        mystifying_chaplygin
09d7a659b739        1ac49f6dd08b        &amp;quot;/bin/sh -c &#39;./confi…&amp;quot;    About an hour ago   Exited (127) About an hour ago                        eloquent_archimedes
16c590a6c9fe        ef56b197b9b4        &amp;quot;/bin/sh -c &#39;tar -xf…&amp;quot;    About an hour ago   Exited (2) About an hour ago                          silly_shaw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、查看制作后镜像，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
notechbb/test       v2                  64784e5f6806        4 seconds ago       468MB

# 运行为容器，测试正常；
[root@host2 nginx]# docker run -d -p 80:80 --name ng1 notechbb/test:v2
bc4b7a3a7692d894b3321389b9ede0afe69fb26d3639f1a0c342bbe8459332cb
[root@host2 nginx]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                NAMES
bc4b7a3a7692        notechbb/test:v2    &amp;quot;/usr/sbin/nginx&amp;quot;   2 seconds ago       Up 2 seconds        0.0.0.0:80-&amp;gt;80/tcp   ng1


[root@host2 nginx]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:22                                                                             *:*                  
LISTEN     0      100                                                        127.0.0.1:25                                                                             *:*                  
LISTEN     0      128                                                               :::80                                                                            :::*  


[root@host2 nginx]# curl 192.168.80.101
dockerfile bianyi nginx
# 访问正常；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tomcat镜像&#34;&gt;tomcat镜像&lt;/h2&gt;
&lt;h3 id=&#34;下载centos官方base镜像&#34;&gt;下载centos官方base镜像&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx]# docker pull centos:centos7.2.1511

# 采用7.2 1511版本；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;构建jdk镜像&#34;&gt;构建jdk镜像&lt;/h3&gt;
&lt;p&gt;1、创建dockerfile目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 dockerfile]# mkdir jdk
[root@host2 dockerfile]# mkdir tomcat
[root@host2 dockerfile]# ll
total 0
drwxr-xr-x 2 root root  6 Oct 28 15:57 jdk
drwxr-xr-x 2 root root  6 Oct 28 15:57 tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、编写dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 jdk]# cat Dockerfile 
# base centos7.2 jdk image

from centos:centos7.2.1511

maintainer wang@qq.com

add  jdk-8u261-linux-x64.rpm  /root
run yum localinstall -y /root/jdk-8u261-linux-x64.rpm 
env JAVA_HOME=/usr/java/latest
env PATH=$JAVA_HOME/bin/:$PATH

# 上传jdk包
[root@host2 jdk]# ll
total 124452
-rw-r--r-- 1 root root       233 Oct 28 16:04 Dockerfile
-rw-r--r-- 1 root root 127431820 Sep  2 14:39 jdk-8u261-linux-x64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、构建，运行，验证，查看到变量信息，都已经配置正确；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 jdk]# docker build -t notechbb/jdk:8.261 .

[root@host2 jdk]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
notechbb/jdk        8.261               1731b1640bee        6 seconds ago       666MB

[root@host2 jdk]# docker run -it --rm --name jdk1 notechbb/jdk:8.261 
[root@4d5b8e3c7992 /]# pwd
/
[root@4d5b8e3c7992 /]# ss -nlt
bash: ss: command not found
[root@4d5b8e3c7992 /]# echo $JAVA_HOME
/usr/java/latest
[root@4d5b8e3c7992 /]# echo $PATH     
/usr/java/latest/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;构建tomcat镜像&#34;&gt;构建tomcat镜像&lt;/h3&gt;
&lt;p&gt;1、编写dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# cat Dockerfile 
# tomcat image

from notechbb/jdk:8.261
maintainer wang@qq.com

add apache-tomcat-8.5.57.tar.gz /usr/local/
run ln -sv /usr/local/apache-tomcat-8.5.57/ /usr/local/tomcat


env CATALINA_HOME=/usr/local/tomcat
env PATH=$CATALINA_HOME/bin:$PATH

expose 8080

cmd /usr/local/tomcat/bin/catalina.sh run


# 注意：实验中，cmd 采用了 [&amp;quot;/usr/local/tomcat/bin/catalina.sh run&amp;quot;]
# 运行为容器时，会报错，命令路径找不到no such file ，去掉引号和括号后即可；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、构建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# ll
total 10144
-rw-r--r-- 1 root root 10379806 Sep  2 14:36 apache-tomcat-8.5.57.tar.gz
-rw-r--r-- 1 root root      269 Oct 28 16:19 Dockerfile
[root@host2 tomcat]# docker build -t notechbb/tomcat:8.5.57 .

# 准备tomcat二进制包；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、运行、测试；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# docker run  --rm -d -p 8080:8080 --name tomcat1 notechbb/tomcat:8.5.57
e2fe770a1fc3e0811272328e79473f49ef6f9ba06b34e99dfc9d5120d97cd541
[root@host2 tomcat]# docker ps -a
CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                    NAMES
e2fe770a1fc3        notechbb/tomcat:8.5.57   &amp;quot;/usr/local/tomcat/b…&amp;quot;   6 seconds ago       Up 5 seconds        0.0.0.0:8080-&amp;gt;8080/tcp   tomcat1

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基于tomcat镜像构建业务镜像&#34;&gt;基于tomcat镜像构建业务镜像&lt;/h2&gt;
&lt;p&gt;1、编写dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 app1]# cat Dockerfile 
# app1 base tomcat

from notechbb/tomcat:8.5.57
maintainer wang@qq.com

add app1/* /usr/local/tomcat/webapps/app1/


expose 8080 8009

cmd /usr/local/tomcat/bin/catalina.sh run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;准备业务文件，即webapp下的文件，也可以打成war包；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 app1]# mkdir app1
[root@host2 app1]# echo 1.html &amp;gt; app1/1.html
[root@host2 app1]# echo index.html &amp;gt; app1/index.html

[root@host2 app1]# ll
total 4
drwxr-xr-x 2 root root  38 Oct 28 16:56 app1
-rw-r--r-- 1 root root 177 Oct 28 17:00 Dockerfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、构建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 app1]# docker build -t notechbb/app1:v1 .


Step 3/5 : add app1/* /usr/local/tomcat/webapps/app1
When using ADD with more than one source file, the destination must be a directory and end with a /


注意：根据提示，add添加的是目录时，目标地址要以/结尾；修改后，重新构建成功；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、运行测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 app1]# docker run -d -p 8080:8080 -p 8009:8009 --name app1 notechbb/app1:v1 
4a428a12a2f52bf717cf36bad9deea0dfbc4a33dc9104deb087c708c859fd050
[root@host2 app1]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                            NAMES
4a428a12a2f5        notechbb/app1:v1    &amp;quot;/bin/sh -c &#39;/usr/lo…&amp;quot;   3 seconds ago       Up 1 second         0.0.0.0:8009-&amp;gt;8009/tcp, 0.0.0.0:8080-&amp;gt;8080/tcp   app1
[root@host2 app1]# ss -nlt
State      Recv-Q Send-Q                          Local Address:Port                                         Peer Address:Port              
                                                     
LISTEN     0      128                                        :::8009                                                   :::*                  
LISTEN     0      128                                        :::8080                    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201028170158976.png&#34; alt=&#34;image-20201028170158976&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;haproxy镜像&#34;&gt;haproxy镜像&lt;/h2&gt;
&lt;h3 id=&#34;先构建2个业务镜像&#34;&gt;先构建2个业务镜像&lt;/h3&gt;
&lt;p&gt;​	根据上步业务镜像构建过程，构建2个业务应用，分别为app1，app2，就是改了不同的首页文件而已；用于稍候haproxy做负载均衡时的效果查看；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 参考app1步骤，再构建一个app2，并都运行为容器；

[root@host2 app2]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                            NAMES
5c5a2c1cba2d        notechbb/app2:v1    &amp;quot;/bin/sh -c &#39;/usr/lo…&amp;quot;   5 seconds ago       Up 4 seconds        8009/tcp, 0.0.0.0:8081-&amp;gt;8080/tcp                 app2
4a428a12a2f5        notechbb/app1:v1    &amp;quot;/bin/sh -c &#39;/usr/lo…&amp;quot;   11 minutes ago      Up 11 minutes       0.0.0.0:8009-&amp;gt;8009/tcp, 0.0.0.0:8080-&amp;gt;8080/tcp   app1


# 2个app的8080分别映射宿主机的8080和8081
[root@host2 app2]# ss -nlt |grep 808
LISTEN     0      128         :::8080                    :::*                  
LISTEN     0      128         :::8081                    :::*    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;构建haproxy镜像&#34;&gt;构建haproxy镜像&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编写haproxy编译安装的dockerfile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备haproxy的源码包，配置文件、容器入口脚本 到dockerfile同级别目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写haproxy编译安装的dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 haproxy]# cat Dockerfile 
# haproxy image base centos7.2
   
from centos:centos7.2.1511
maintainer wang@qq.com
   
add haproxy-1.7.12.tar.gz /usr/local/src
run rm -rf /etc/yum.repos.d/*
run curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
run yum install -y gcc gcc++ pcre pcre-devel
   
run rpm --rebuilddb &amp;amp;&amp;amp; yum install -y systemd-devel zlib-devel openssl-devel
run rpm --rebuilddb &amp;amp;&amp;amp; yum install -y make
run cd /usr/local/src/haproxy-1.7.12/ &amp;amp;&amp;amp; make TARGET=linux2628 USE_PCRE=1 USE_ZLIB=1 USE_SYSTEMD=1 ARCh=x86_64 prefix=/usr/local/haproxy &amp;amp;&amp;amp; make install PREFIX=/usr/local/haproxy
   
add haproxy.cfg  /etc/haproxy/
run mkdir /var/lib/haproxy &amp;amp;&amp;amp; touch /var/lib/haproxy
copy run_ha.sh /etc/haproxy/
expose 80 9999
   
cmd /etc/haproxy/run_ha.sh
   
# dockerfile中遇到的问题：
1、缺包，根据提示补全即可
2、编译选项缺失问题，补全即可
3、进入容器查看时，端口没监听问题，因配置文件中sock文件无法bind问题，添加一行即可；
 还要注意进程属主问题，改为uid 99
 run mkdir /var/lib/haproxy &amp;amp;&amp;amp; touch /var/lib/haproxy
4、容器启动时，什么作为容器的启动入口；采用了run_ha.sh脚本；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备haproxy的源码包、容器启动时运行脚本、配置文件到dockerfile同级别目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 haproxy]# ll
total 1732
-rw-r--r-- 1 root root     746 Oct 29 16:21 Dockerfile
-rw-r--r-- 1 root root 1760527 Oct 25  2019 haproxy-1.7.12.tar.gz
-rw-r--r-- 1 root root    1989 Oct 29 16:20 haproxy.cfg
-rwxr-xr-x 1 root root      80 Oct 29 15:52 run_ha.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构建镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 haproxy]#  docker build -t notechbb/haproxy:v1.7.12 .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置文件、和启动脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   
# run_ha.sh内容
[root@host2 haproxy]# cat run_ha.sh 
   
/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg
tail -f /etc/hosts
   
# 配置文件中，haproxy配置为后台运行，但是在启动脚本中，又加了个tail -f查看一个小文件，使得容器有一个占据终端的应用，保持容器的持续运行；查看的文件，不要是持久增长的日志文件，避免不必要的io消耗；
   
   
[root@host2 haproxy]# cat haproxy.cfg 
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2
     
    chroot      /var/lib/haproxy
   
    pidfile     /var/run/haproxy.pid
   
    maxconn     4000
    
 uid 99
 gid 99
   
 daemon
    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
   
   
#---------------------------------------------------------------------
# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
   
   
listen stats
 mode http
 bind *:9999
 stats enable
 log global
 stats uri /ha-status
 stats auth admin:admin
   
listen web1
 bind *:80
 mode http
 log global
 balance roundrobin
 server web1 192.168.80.101:8080 check inter 3000 fall 2 rise 5
 server web2 192.168.80.101:8081 check inter 3000 fall 2 rise 5
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;启动haproxy和2个tomcat镜像&#34;&gt;启动haproxy和2个tomcat镜像&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 haproxy]# docker run -d -p 80:80 -p 9999:9999 --name ha1 notechbb/haproxy:v1.7.12 
aa34230dabb8d598ab13d990cbf10781d5762b23029142946b905e42378c7d56
# 启动haproxy镜像，映射宿主机的80和9999端口；

[root@host2 haproxy]# docker run -d -p 8080:8080  --name app1 notechbb/app1:v1 
026a7a77e0489c558b45c6ba9e7033da51030a3942124b2e0984fa4a9a8b9e1e
[root@host2 haproxy]# docker run -d -p 8081:8080  --name app2 notechbb/app2:v1 
89ca67992c245f5c985dfc24417e256627e0e2fd882c852da7ad203b8a4229b5
# 启动2个tomcat容器


[root@host2 haproxy]# docker ps
CONTAINER ID        IMAGE                      COMMAND                  CREATED              STATUS              PORTS                                        NAMES
89ca67992c24        notechbb/app2:v1           &amp;quot;/bin/sh -c &#39;/usr/lo…&amp;quot;   5 seconds ago        Up 4 seconds        8009/tcp, 0.0.0.0:8081-&amp;gt;8080/tcp             app2
026a7a77e048        notechbb/app1:v1           &amp;quot;/bin/sh -c &#39;/usr/lo…&amp;quot;   25 seconds ago       Up 24 seconds       8009/tcp, 0.0.0.0:8080-&amp;gt;8080/tcp             app1
aa34230dabb8        notechbb/haproxy:v1.7.12   &amp;quot;/bin/sh -c /etc/hap…&amp;quot;   About a minute ago   Up About a minute   0.0.0.0:80-&amp;gt;80/tcp, 0.0.0.0:9999-&amp;gt;9999/tcp   ha1
[root@host2 haproxy]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:22                                                                             *:*                  
LISTEN     0      100                                                        127.0.0.1:25                                                                             *:*                  
LISTEN     0      128                                                               :::9999                                                                          :::*                  
LISTEN     0      128                                                               :::8080                                                                          :::*                  
LISTEN     0      128                                                               :::80                                                                            :::*                  
LISTEN     0      128                                                               :::8081                                                                          :::* 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201029162414092.png&#34; alt=&#34;image-20201029162414092&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201029162346389.png&#34; alt=&#34;image-20201029162346389&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201029170308647.png&#34; alt=&#34;image-20201029170308647&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;上传镜像到docker-hub&#34;&gt;上传镜像到docker hub&lt;/h2&gt;
&lt;p&gt;​	本地制作的镜像，可以上传到docker官方的docker仓库保存，步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;注册dockerhub账户；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地登陆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看登陆后，本地的验证信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给镜像打上合适的标签，上传&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登陆dockerhub查看镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在另一台docker host下载并启动，验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注册dockerhub账户；&lt;/p&gt;
&lt;p&gt;略...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地登陆&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https://hub.docker.com to create one.
Username: 你的用户名
Password: 你的密码
WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store
   
Login Succeeded
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看登陆后，本地的验证信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat /root/.docker/config.json 
{
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给镜像打上合适的标签，上传&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker tag notechbb/test:v1 notechbb/test:good
[root@host2 ~]# docker image ls
notechbb/test       good                945619f86ac0        2 days ago          277MB
notechbb/test       v1                  945619f86ac0        2 days ago          277MB
# 一个镜像，可以具有多个标签；
   
[root@host2 ~]# docker push notechbb/test:good
The push refers to repository [docker.io/notechbb/test]
58485fd67300: Pushed 
291f6e44771a: Mounted from library/centos 
good: digest: sha256:7ec627bf2ce412b9b0424775d530e56cf832e3c7be7d3b634cbe55d2ffa79108 size: 741
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登陆dockerhub查看镜像&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201029192631012.png&#34; alt=&#34;image-20201029192631012&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在另一台docker host下载并启动，验证&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# docker pull notechbb/test:good
good: Pulling from notechbb/test
3c72a8ed6814: Pull complete 
ffbfc0499962: Pull complete 
Digest: sha256:7ec627bf2ce412b9b0424775d530e56cf832e3c7be7d3b634cbe55d2ffa79108
Status: Downloaded newer image for notechbb/test:good
[root@host3 ~]# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
notechbb/test       good                945619f86ac0        2 days ago          277MB
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker%E9%95%9C%E5%83%8F/" term="docker镜像" label="docker镜像" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">docker基础命令使用</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/" />
            <id>https://latteStudio.github.io/posts/docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</id>
            <updated>2020-10-27T17:51:07&#43;08:00</updated>
            <published>2020-10-25T15:53:25&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docker基础命令使用</summary>
            
                <content type="html">&lt;h1 id=&#34;docker进程管理&#34;&gt;docker进程管理&lt;/h1&gt;
&lt;h2 id=&#34;docker进程&#34;&gt;docker进程&lt;/h2&gt;
&lt;p&gt;​	docker-ce-1809后的主要进程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dockerd：被docker客户端访问
&lt;ul&gt;
&lt;li&gt;docker-proxy：容器间通信&lt;/li&gt;
&lt;li&gt;containerd：被dockerd调用，
&lt;ul&gt;
&lt;li&gt;containerd-shim：被containerd调用
&lt;ul&gt;
&lt;li&gt;runc：被container-shim调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器创建过程&#34;&gt;容器创建过程&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;容器创建流程描述：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dockerd复制接收客户端的命令，如docker的命令行；&lt;/li&gt;
&lt;li&gt;dockerd处理客户端指令，借助libcontainer，通过grpc调用和containerd通信&lt;/li&gt;
&lt;li&gt;containerd结束dockerd来的grpc请求，调用container-shim进程；&lt;/li&gt;
&lt;li&gt;container-shim再调用runc，runc负责提供容器运行环境&lt;/li&gt;
&lt;li&gt;再层次返回：runc-&amp;gt;container-shim-&amp;gt;containerd-&amp;gt;dockerd-docker客户端输出信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	&lt;strong&gt;容器创建流程图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201026153238782.png&#34; alt=&#34;image-20201026153238782&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;grpc简介：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	google开源的远程过程调用框架，google remote procedure call&lt;/p&gt;
&lt;h1 id=&#34;docker常用命令&#34;&gt;docker常用命令&lt;/h1&gt;
&lt;h2 id=&#34;查看帮助&#34;&gt;查看帮助&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker --help

Usage:	docker [OPTIONS] COMMAND

Run &#39;docker COMMAND --help&#39; for more information on a command.

#docker的管理命令可以分为几大类，每类都可以进一步用--help查看更详细的帮助
如：
docker image
docker container
docker network
分别为管理镜像、容器、网络，每类里，都包含基础操作子命令，如查看、删除、创建；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-run&#34;&gt;docker run&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run --help

Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

Run a command in a new container

# 启动centos镜像，进入交互式窗口，执行bash命令
[root@host2 ~]# docker run -it centos bash
[root@3d7ace123eb6 /]# pwd
/

ctrl p q 退出窗口，但不终止容器

# 利用exec命令指定容器id再次进入
[root@host2 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
3d7ace123eb6        centos              &amp;quot;bash&amp;quot;                   3 minutes ago       Up 3 minutes                            heuristic_bohr
69aec747f923        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   32 minutes ago      Up 32 minutes       80/tcp              tender_clarke
[root@host2 ~]# docker exec -it 3d7ace123eb6 bash
[root@3d7ace123eb6 /]# cat /etc/redhat-release 
CentOS Linux release 8.2.2004 (Core) 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-ps&#34;&gt;docker ps&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
69aec747f923        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   27 minutes ago      Up 27 minutes       80/tcp              tender_clarke

查看运行中容器，
等同于docker container ls

[root@host2 ~]# docker ps -a
#查看，所有容器，包括已经退出的
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-rm&#34;&gt;docker rm&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
3d7ace123eb6        centos              &amp;quot;bash&amp;quot;                   34 minutes ago      Up 34 minutes                           heuristic_bohr
69aec747f923        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   About an hour ago   Up About an hour    80/tcp              tender_clarke

[root@host2 ~]# docker rm -f 3d7ace123eb6
3d7ace123eb6
[root@host2 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
69aec747f923        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   About an hour ago   Up About an hour    80/tcp              tender_clarke

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker端口映射&#34;&gt;docker端口映射&lt;/h2&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;-P随机映射&lt;/p&gt;
&lt;p&gt;-p手动指定映射端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run --help |grep publish
  -p, --publish list                   Publish a container&#39;s port(s) to the host
  -P, --publish-all                    Publish all exposed ports to random ports
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;0、随机指定端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# P选项随机映射一个宿主机端口给容器，从而使得可以通过该映射端口访问容器内服务

[root@host2 ~]# docker run -d -P --name ng2 nginx
5af682a72e9c3db95d6efeefc21535ea7d40915ce52b081adb26e807956e151b
[root@host2 ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES
5af682a72e9c        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   6 seconds ago       Up 5 seconds        0.0.0.0:32772-&amp;gt;80/tcp   ng2
7f0e166b3b04        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   2 minutes ago       Up 2 minutes        0.0.0.0:81-&amp;gt;80/tcp      ng1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、手动指定端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -d -p 81:80 --name ng1 nginx
7f0e166b3b04cbc9871d245d519508a43e9a77e096350e7976d78f7031044031
[root@host2 ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES
7f0e166b3b04        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   2 seconds ago       Up 1 second         0.0.0.0:81-&amp;gt;80/tcp   ng1

# 指定映射本地ip
[root@host2 ~]# docker run -d -p 192.168.80.101:82:80 --name ng3 nginx
8ac02c1fd17bedc1cde8b8315def27636fbda3feaa3cd7d666cfda77388358d2

# 本地端口随机
[root@host2 ~]# docker run -d -p 192.168.80.101::80 --name ng4 nginx
edcdbe7c747b53bf9e695cdc797c0a8e437d16b0a69909a95dfc24da62df79f1

# 指定协议，默认tcp
[root@host2 ~]# docker run -d -p 192.168.80.101:83:80/udp --name ng5 nginx
b23954c0209317b2b5e857a10e70001a5690080a4dc45110a54414fd50da1a1b


# 同时映射多个端口
[root@host2 ~]# docker run -d -p 443:443 -p 8080:80/udp --name ng8 nginx
6ed9115f3c11ac9f90021d5a28150f6e4f708ca34767493428f2ca871e86dad9
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-port&#34;&gt;docker port&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker port ng1
80/tcp -&amp;gt; 0.0.0.0:8080
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-log&#34;&gt;docker log&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -d -p 8080:80 --name ng1 nginx
74821b97914e4ff7425d558ca63cffc0546a6831eaeabf6ae01cce2bf214b853
[root@host2 ~]# docker logs ng1
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Configuration complete; ready for start up
[root@host2 ~]# docker logs -f  ng1
/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
10-listen-on-ipv6-by-default.sh: Getting the checksum of /etc/nginx/conf.d/default.conf
10-listen-on-ipv6-by-default.sh: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
/docker-entrypoint.sh: Configuration complete; ready for start up

# docker log可以查看容器日志
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;自定义容器名&#34;&gt;自定义容器名&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -d -p 8080:80 --name ng1 nginx

--name NAME自定义容器名称
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;后台启动容器&#34;&gt;后台启动容器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -d -p 8080:80 --name ng1 nginx
74821b97914e4ff7425d558ca63cffc0546a6831eaeabf6ae01cce2bf214b853

-d后台运行容器，不占用命令行，返回一个容器长id
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;进入容器命令行&#34;&gt;进入容器命令行&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -it --name ng2 nginx /bin/bash
root@9ca5172549f8:/# pwd
/

# -it选项，搭配进入后要执行的命令，一般是bash命令行
# exit退出，且容器也退出
# ctrl p q，只退出命令行，容器不退出
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;单次运行&#34;&gt;单次运行&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -it --rm --name ng1 nginx /bin/bash
root@12aaeebd9eea:/# exit
exit
[root@host2 ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[root@host2 ~]# docker run -it  --name ng1 nginx /bin/bash
root@efbc905bd87f:/# exit
exit
[root@host2 ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS               NAMES
efbc905bd87f        nginx               &amp;quot;/docker-entrypoint.…&amp;quot;   5 seconds ago       Exited (0) 3 seconds ago                       ng1

# 加了--rm，退出时，容器会自动删除的干净，ps -a看不到
# 没有--rm，退出时，docker ps -a仍然能看到exited状态的容器
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;传递运行命令&#34;&gt;传递运行命令&lt;/h2&gt;
&lt;p&gt;​	docker容器能一直运行的前提是，容器内的的执行命令一直在前台执行，占据shell窗口；&lt;strong&gt;前台指的是进入容器后的前台，非docker host的前台和shell；&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -d centos --name c1 /usr/bin/tail -f &#39;/etc/hosts&#39;
54965d492d2b9fd9aba780ac63c0d4e7a9ceac2805ceaba17975be91a939b4e0
[root@host2 ~]# docker ps 
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
ae02ad68a6fd        centos              &amp;quot;/usr/bin/tail -f /e…&amp;quot;   5 seconds ago       Up 4 seconds
# tail -f 会一直占据容器内 的 命令行，所以容器放在后台执行，状态也是一直，在运行；
# 这里的容器后台执行，是指相对与docker host的后台；


[root@host2 ~]# docker run -d  --name c2 centos /usr/bin/tail  &#39;/etc/hosts&#39;
28d5548d63d83c42e8c7a8ec0918f38e360c45be3860b0b0353a932290fe270b
[root@host2 ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                      PORTS               NAMES
28d5548d63d8        centos              &amp;quot;/usr/bin/tail /etc/…&amp;quot;   7 seconds ago        Exited (0) 7 seconds ago                        c2
# tail 没有-f只是一个执行后立即退出的命令，不会占据容器内的命令行
# 所以docker放在后台执行时，也会立即转为exited状态；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;容器启停&#34;&gt;容器启停&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker stop c1
[root@host2 ~]# docker start c1
# 直接用容器的名称，或id，即可完成容器的启停；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;进入正在运行的容器&#34;&gt;进入正在运行的容器&lt;/h2&gt;
&lt;h3 id=&#34;attach&#34;&gt;attach&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -it --name c3 centos /bin/bash
ctrl p q 退出

[root@host2 ~]# docker attach c3
[root@a7c4a756ce54 /]# pwd
/
exit时，退出，容器会停止
ctrl p q 退出，容器不会停止
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;exec&#34;&gt;exec&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -it --name c4 centos /bin/bash

[root@host2 ~]# docker exec -it c4 /bin/bash
[root@d3322bcf78b8 /]# ps -aux
USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root          1  0.0  0.1  12008  1980 pts/0    Ss+  10:01   0:00 /bin/bash
root         14  0.7  0.2  12008  2164 pts/1    Ss   10:01   0:00 /bin/bash
root         27  0.0  0.2  47496  2068 pts/1    R+   10:01   0:00 ps -aux
# exec进入用exit退出时，容器不会停止；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;nsenter&#34;&gt;nsenter&lt;/h3&gt;
&lt;p&gt;​	推荐方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、下载工具包；
[root@host2 ~]# yum install -y util-linux
[root@host2 ~]# nsenter --help
Usage:
 nsenter [options] &amp;lt;program&amp;gt; [&amp;lt;argument&amp;gt;...]

# Run a program with namespaces of other processes.
# 安装包含nsenter命令的rpm包；


# docker inspect 容器名，可以输出容器的详细信息；json格式；
# docker inspect -f 可以过滤特定字段的信息
# 如下，过滤出c4这个容器的pid，然后利用nsenter命令进入容器；
# nsenter各个选项如下：
Options:
 -t, --target &amp;lt;pid&amp;gt;     target process to get namespaces from
 -m, --mount[=&amp;lt;file&amp;gt;]   enter mount namespace
 -u, --uts[=&amp;lt;file&amp;gt;]     enter UTS namespace (hostname etc)
 -i, --ipc[=&amp;lt;file&amp;gt;]     enter System V IPC namespace
 -n, --net[=&amp;lt;file&amp;gt;]     enter network namespace
 -p, --pid[=&amp;lt;file&amp;gt;]     enter pid namespace

2、过滤出目标容器的pid
[root@host2 ~]# docker inspect -f &amp;quot;{{.State.Pid}}&amp;quot; c4
8056

3、用nsenter进入容器
[root@host2 ~]# nsenter -t 8056 -m -u -i -n -p
[root@d3322bcf78b8 /]# pwd
/
[root@d3322bcf78b8 /]# ls
bin  etc   lib	  lost+found  mnt  proc  run   srv  tmp  var
dev  home  lib64  media       opt  root  sbin  sys  usr

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;脚本&#34;&gt;脚本&lt;/h3&gt;
&lt;p&gt;​	将nsenter命令封装为shell脚本，通过传入容器的名称，或id，即可进入容器内部；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 编写脚本如下：
[root@host2 ~]# vim docker-in.sh
[root@host2 ~]# cat docker-in.sh 
#!/bin/bash

docker_in ()
{
	pid=$(docker inspect -f {{.State.Pid}} $1)
	nsenter -t $pid -m -u -i -n -p
}

docker_in $1

# 检查语法，执行权限
[root@host2 ~]# sh -n docker-in.sh 
[root@host2 ~]# chmod +x docker-in.sh 

# 调用，传入容器名，或容器id都行
[root@host2 ~]# ./docker-in.sh c1
[root@ae02ad68a6fd /]# 

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看容器内hosts文件&#34;&gt;查看容器内hosts文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 默认会把自己的主机名加入hosts文件；

[root@ae02ad68a6fd /]# cat /etc/hosts
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.0.2	ae02ad68a6fd

[root@ae02ad68a6fd /]# hostname
ae02ad68a6fd

[root@ae02ad68a6fd /]# ip a
61: eth0@if62: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;批量关闭运行中容器&#34;&gt;批量关闭运行中容器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker stop $(docker ps -a -q)

[root@host2 ~]# docker kill $(docker ps -a -q)
# 批量关闭、强制关闭所有容器；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;批量删除已经退出容器&#34;&gt;批量删除已经退出容器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker rm -f $(docker ps -a -q -f status=exited)

# 通过status=exited过滤出退出状态的容器，然后删除
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;批量删除所有容器&#34;&gt;批量删除所有容器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker rm -f $(docker ps -a -q)
630df903f078
63acaa793dce
bfc10919be02
d1c4b7e8d131
7fc5f49f46ef
0e39ad7cbc87
1cf45dea0499
43118146035a
8d86b6ab5514
7ed2af9cb4c1
[root@host2 ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

# docker ps -a -q列出所有容器的id，然后利用rm -f删除；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;指定容器dns&#34;&gt;指定容器dns&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker run -it --name c1 centos /bin/bash
[root@418ae275981a /]# pwd
/
[root@418ae275981a /]# cat /etc/resolv.conf 
# Generated by NetworkManager
search b.com
nameserver 192.168.80.2

[root@host2 ~]# cat /etc/resolv.conf 
# Generated by NetworkManager
search b.com
nameserver 192.168.80.2

# 由上可知，容器会默认继承宿主机的dns配置；
# 给容器配置dns有2种方式：
1、将dns配置在宿主机上，由容器继承；
2、启动容器时，将dns作为参数传递给容器

# 传递dns参数；可以看到，传递的dns参数，覆盖了从宿主机的dns配置；
[root@host2 ~]# docker run -it --name c6  --dns 8.8.8.8  centos /bin/bash
[root@56a7d66d3df5 /]# pwd
/
[root@56a7d66d3df5 /]# cat /etc/resolv.conf 
search b.com
nameserver 8.8.8.8
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">docker介绍与安装</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/docker%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/" />
            <id>https://latteStudio.github.io/posts/docker%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
            <updated>2020-10-29T19:25:45&#43;08:00</updated>
            <published>2020-10-25T15:53:13&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">docker介绍与安装</summary>
            
                <content type="html">&lt;h1 id=&#34;docker简介&#34;&gt;docker简介&lt;/h1&gt;
&lt;h2 id=&#34;容器技术&#34;&gt;容器技术&lt;/h2&gt;
&lt;p&gt;​	容器：顾名思义，像杯子、集装箱都是容器，类比水杯，无论外面或里面怎么变，都不会影响到里面或外面，&lt;strong&gt;即起到隔离的作用，避免了相同影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	在it领域，容器技术即为靠软件逻辑实现不同软件之间的隔离，包括资源隔离、运行环境隔离等，避免相互影响，变动只影响自己，避免牵一发而动全身，&lt;/p&gt;
&lt;p&gt;​	最早的容器是freebsd中出现的jail；linux内核也实现了容器为lxc（linux container）docker最早就是对lxc的进一步封装，使之更易用；后来docker采用runc替换了lxc&lt;/p&gt;
&lt;p&gt;lxc官网：https://linuxcontainers.org/&lt;/p&gt;
&lt;h2 id=&#34;docker是什么&#34;&gt;docker是什么&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Docker_(software)&#34;&gt;docker维基页面&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers.[6] Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.[7] All containers are run by a single operating system kernel and therefore use fewer resources than virtual machines.[8]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	摘自wikipedia，docker是一种容器技术，将软件和其所依赖的所有库，配置文件等都打包在一起的时候，&lt;strong&gt;方便了软件在各个不同环境的迁移运行，避免了像无容器时还需要根据不同的运行环境做不同的调试的情况；从一定程度上说，降低了运维的复杂性&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker组成&#34;&gt;docker组成&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/get-started/overview/&#34;&gt;https://docs.docker.com/get-started/overview/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker host，物理机或虚拟机，运行docker后台进程和一个个的docker容器&lt;/li&gt;
&lt;li&gt;docker server，docker的后台进程，管理和运行docker容器&lt;/li&gt;
&lt;li&gt;docker client，docker命令行或通过docker api的调用&lt;/li&gt;
&lt;li&gt;docker registry，保存镜像的参考&lt;/li&gt;
&lt;li&gt;docker image，软件及其依赖的静态组成文件，类比/bin/ls程序文件&lt;/li&gt;
&lt;li&gt;docker container，由镜像运行起来的进程实例，类比运行的ls程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201025172539093.png&#34; alt=&#34;image-20201025172539093&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker依赖技术8项&#34;&gt;docker依赖技术8项&lt;/h2&gt;
&lt;p&gt;​	docker实际上是对容器进行管理的服务，容器的底层实现依赖linux内核完成，&lt;strong&gt;即docker是对容器的管理工具；&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cgroups，资源配额&lt;/li&gt;
&lt;li&gt;chroot，切根&lt;/li&gt;
&lt;li&gt;linux内核实现的6个namespaces
&lt;ul&gt;
&lt;li&gt;mnt、根文件系统&lt;/li&gt;
&lt;li&gt;pid、进程树&lt;/li&gt;
&lt;li&gt;net、网络&lt;/li&gt;
&lt;li&gt;user、用户&lt;/li&gt;
&lt;li&gt;ipc、进程间通信隔离&lt;/li&gt;
&lt;li&gt;uts、主机名隔离&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;cgroup技术：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、查看内核支持cgroup选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# uname -r
3.10.0-862.el7.x86_64

[root@host2 ~]# cat /boot/config-3.10.0-862.el7.x86_64 |grep -i cgroup
CONFIG_CGROUPS=y
# CONFIG_CGROUP_DEBUG is not set
CONFIG_CGROUP_FREEZER=y
CONFIG_CGROUP_PIDS=y
CONFIG_CGROUP_DEVICE=y
CONFIG_CGROUP_CPUACCT=y
CONFIG_CGROUP_HUGETLB=y
CONFIG_CGROUP_PERF=y
CONFIG_CGROUP_SCHED=y
CONFIG_BLK_CGROUP=y
# CONFIG_DEBUG_BLK_CGROUP is not set
CONFIG_NETFILTER_XT_MATCH_CGROUP=m
CONFIG_NET_CLS_CGROUP=y
CONFIG_NETPRIO_CGROUP=y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看系统cgroups&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ll /sys/fs/cgroup/
total 0
drwxr-xr-x 2 root root  0 Oct 25 14:59 blkio
lrwxrwxrwx 1 root root 11 Oct 25 14:59 cpu -&amp;gt; cpu,cpuacct
lrwxrwxrwx 1 root root 11 Oct 25 14:59 cpuacct -&amp;gt; cpu,cpuacct
drwxr-xr-x 2 root root  0 Oct 25 14:59 cpu,cpuacct
drwxr-xr-x 2 root root  0 Oct 25 14:59 cpuset
drwxr-xr-x 3 root root  0 Oct 25 15:01 devices
drwxr-xr-x 2 root root  0 Oct 25 14:59 freezer
drwxr-xr-x 2 root root  0 Oct 25 14:59 hugetlb
drwxr-xr-x 2 root root  0 Oct 25 14:59 memory
lrwxrwxrwx 1 root root 16 Oct 25 14:59 net_cls -&amp;gt; net_cls,net_prio
drwxr-xr-x 2 root root  0 Oct 25 14:59 net_cls,net_prio
lrwxrwxrwx 1 root root 16 Oct 25 14:59 net_prio -&amp;gt; net_cls,net_prio
drwxr-xr-x 2 root root  0 Oct 25 14:59 perf_event
drwxr-xr-x 2 root root  0 Oct 25 14:59 pids
drwxr-xr-x 4 root root  0 Oct 25 14:59 systemd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、cgroup组成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blkio 块设备io限制
cpu cpu限制
cpuacct cpu资源使用报告
cpuset
devices
freezer
memory
net_cls
ns
perf_event
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker核心技术&#34;&gt;docker核心技术&lt;/h2&gt;
&lt;h3 id=&#34;容器规范&#34;&gt;容器规范&lt;/h3&gt;
&lt;p&gt;​	由oci组织制定的容器规范，共2个，runtime运行时、image镜像规范，确保了基于同一规范研发的不同容器技术可以兼容；如docker、coreos的rkt、阿里的pouch；&lt;/p&gt;
&lt;h3 id=&#34;容器运行时&#34;&gt;容器运行时&lt;/h3&gt;
&lt;p&gt;​	负责运行容器的支撑环境，常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linux内核的lxc，早期docker采用&lt;/li&gt;
&lt;li&gt;runc，目前docker采用&lt;/li&gt;
&lt;li&gt;rkt，coreos研发&lt;/li&gt;
&lt;li&gt;同一个oci规范，因此可兼容，可互操作；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器管理工具&#34;&gt;容器管理工具&lt;/h3&gt;
&lt;p&gt;​	对runtime的进一步封装，提供更易用的cli或gui接口给用户使用：如，docker engine就是runc的管理工具，docker engine包含docker daemon和docker cli两个部分；&lt;/p&gt;
&lt;p&gt;​	rkt cli是rkt的管理工具；&lt;/p&gt;
&lt;h3 id=&#34;容器定义工具&#34;&gt;容器定义工具&lt;/h3&gt;
&lt;p&gt;​	定义容器的属性，内容和如何构建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker image：是docker容器的模块&lt;/li&gt;
&lt;li&gt;dockerfile：文件文件，通过dockerfile的指令来构建docker image&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;registry&#34;&gt;registry&lt;/h3&gt;
&lt;p&gt;​	存储docker image的地方为镜像仓库，多个镜像仓库组成了registry&lt;/p&gt;
&lt;p&gt;docker hub：docker官方仓库，类比github，公共仓库&lt;/p&gt;
&lt;p&gt;harbor：vmvare提供的私有仓库搭建方案&lt;/p&gt;
&lt;h3 id=&#34;容器编排工具&#34;&gt;容器编排工具&lt;/h3&gt;
&lt;p&gt;​	容器一多，人为手动管理即不现实，因此需要容器编排工具，来统一管理容器，包括容器的运行节点选择、自动扩缩容、创建删除、调度、服务发现、集群定义等一系列操作。&lt;/p&gt;
&lt;p&gt;​	常用的编排工具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubernetes：事实上的容器编排工具标准！&lt;/li&gt;
&lt;li&gt;docker swarm：docker官方提供，docker compose也算，但只能编排单机的docker容器&lt;/li&gt;
&lt;li&gt;mesos+marathon&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker辅助技术&#34;&gt;docker辅助技术&lt;/h2&gt;
&lt;h3 id=&#34;跨主机网络&#34;&gt;跨主机网络&lt;/h3&gt;
&lt;p&gt;​	docker默认只支持单机的网络，跨docker host的网络互联需要第三方网络插件实现，常用有：calico、flannel、canal&lt;/p&gt;
&lt;h3 id=&#34;数据管理&#34;&gt;数据管理&lt;/h3&gt;
&lt;p&gt;​	docker默认只支持单机的存储卷管理，docker的动态迁移带来了数据的随之迁移的问题，跨docker host的网络存储管理需要借助kubernetes的pv和pvc实现，再借助分布式存储如ceph提供存储服务；&lt;/p&gt;
&lt;h3 id=&#34;日志管理&#34;&gt;日志管理&lt;/h3&gt;
&lt;p&gt;​	docker log工具可以查看容器的运行日志，但跨主机的日志管理，往往需要借助elk工具专门收集、处理、展示&lt;/p&gt;
&lt;h3 id=&#34;服务发现&#34;&gt;服务发现&lt;/h3&gt;
&lt;p&gt;​	docker容器的特点之一，为动态，因为ip会随之变化，需要引入自动的服务发现机制，如kubernetes的core-dns&lt;/p&gt;
&lt;h3 id=&#34;容器监控&#34;&gt;容器监控&lt;/h3&gt;
&lt;p&gt;​	docker ps/top可查看单机的容器进程，跨主机集群级别，需要专门工具，如heapster、promethus&lt;/p&gt;
&lt;h2 id=&#34;docker与虚拟机&#34;&gt;docker与虚拟机&lt;/h2&gt;
&lt;p&gt;​	docker属于应用进程级别的隔离，虚拟机是os内核级别的隔离&lt;/p&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动更快&lt;/li&gt;
&lt;li&gt;资源利用率更高，（公用一个宿主机内核）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;劣势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离性、安全性稍差&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker三大理念&#34;&gt;docker三大理念&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;build——构建&lt;/li&gt;
&lt;li&gt;ship——运输&lt;/li&gt;
&lt;li&gt;run——运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;docker安装&#34;&gt;docker安装&lt;/h1&gt;
&lt;p&gt;​	docker分为docker-ce和docker-ee；ce为社区版，&lt;/p&gt;
&lt;p&gt;​	安装方式有，yum仓库安装、离线rpm包安装；&lt;/p&gt;
&lt;p&gt;​	参考网址：https://docs.docker.com/engine/install/centos/&lt;/p&gt;
&lt;h2 id=&#34;rpm包安装&#34;&gt;rpm包安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1、下载rpm包到linux主机
https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/

2、直接yum安装本地rpm包
[root@host2 ~]# yum localinstall docker-ce-18.06.3.ce-3.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;yum源安装&#34;&gt;yum源安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1、安装yum-config工具
yum install -y yum-utils

2、配置docker-ce的源
yum-config-manager \
    --add-repo \
    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 
    
3、列出所有提供的docker-ce版本
yum list docker-ce --showduplicates | sort -r

4、指定docker-ce版本安装
[root@host2 ~]# yum install docker-ce-18.03.1.ce-1.el7.centos docker-ce-cli-18.03.1.ce-1.el7.centos containerd.io
    
5、默认安装，是安装当前库中最新版本
yum install docker-ce docker-ce-cli containerd.io

6、查看版本
[root@host2 ~]# docker --version
Docker version 18.03.1-ce, build 9ee9f40
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker启动并验证&#34;&gt;docker启动并验证&lt;/h2&gt;
&lt;p&gt;0、启动，查看网络信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# systemctl start docker
[root@host2 ~]# ifconfig -a
docker0: flags=4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:d2:d3:24:b1  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
# 默认生成172.17.0.1的docker0网卡，本地docker网络也为172.17.0.0/16网段；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、查看版本信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker version
Client:
 Version:      18.03.1-ce
 API version:  1.37
 Go version:   go1.9.5
 Git commit:   9ee9f40
 Built:        Thu Apr 26 07:20:16 2018
 OS/Arch:      linux/amd64
 Experimental: false
 Orchestrator: swarm

Server:
 Engine:
  Version:      18.03.1-ce
  API version:  1.37 (minimum version 1.12)
  Go version:   go1.9.5
  Git commit:   9ee9f40
  Built:        Thu Apr 26 07:23:58 2018
  OS/Arch:      linux/amd64
  Experimental: false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看更详细信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# docker info
Containers: 0
 Running: 0
 Paused: 0
 Stopped: 0
Images: 0
Server Version: 18.03.1-ce
Storage Driver: overlay2
...
# 包括，支持的网络模型、运行时环境、底层文件系统等信息；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker存储引擎&#34;&gt;docker存储引擎&lt;/h2&gt;
&lt;p&gt;​	docker支持overlay2和devicemapper文件系统，用于存储镜像、支撑分层构建、联合挂载的特性；&lt;strong&gt;默认是overlay2，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	当docker的数据目录/var/lib/docker是一块单独的磁盘分区，格式是xfs时，&lt;strong&gt;格式化时需要加上-n ftype=1选项，否则启动容器会报错without d_type support&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# xfs_info /
meta-data=/dev/sda2              isize=512    agcount=4, agsize=2555840 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=1        finobt=0 spinodes=0
data     =                       bsize=4096   blocks=10223360, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=1
log      =internal               bsize=4096   blocks=4991, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
# 采用的/分区，未单独分区，且有ftype=1选项，因此可以正常使用；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker镜像加速&#34;&gt;docker镜像加速&lt;/h2&gt;
&lt;p&gt;​	默认docker的镜像为docker官方，境外，所以速度较慢，一般需配置为国内镜像加速站点，如阿里，&lt;/p&gt;
&lt;p&gt;​	登陆阿里云官网，找到镜像加速器，会生成一个专用的加速器地址&lt;/p&gt;
&lt;p&gt;​	https://cr.console.aliyun.com/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 根据官方提示，将registry-mirrors替换为自己的地址即可；

sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&#39;EOF&#39;
{
  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://xxxx.mirror.aliyuncs.com&amp;quot;]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker

# 查看docker info中镜像信息，说明镜像生效；
[root@host2 ~]# docker info |grep -C 2 mirro
 127.0.0.0/8
Registry Mirrors:
 https://xxxxx.mirror.aliyuncs.com/
Live Restore Enabled: false
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E5%AE%B9%E5%99%A8%E4%BA%91%E7%B3%BB%E5%88%97/" term="容器云系列" label="容器云系列" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/docker/" term="docker" label="docker" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql压测与生产环境配置示例</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E5%8E%8B%E6%B5%8B%E4%B8%8E%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/" />
            <id>https://latteStudio.github.io/posts/mysql%E5%8E%8B%E6%B5%8B%E4%B8%8E%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</id>
            <updated>2020-10-23T16:58:11&#43;08:00</updated>
            <published>2020-10-23T14:33:36&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql压测与生产环境配置示例</summary>
            
                <content type="html">&lt;h1 id=&#34;mysql压测&#34;&gt;mysql压测&lt;/h1&gt;
&lt;h2 id=&#34;关系型数据库性能衡量指标&#34;&gt;关系型数据库性能衡量指标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;qps：query per second，每秒查询数&lt;/li&gt;
&lt;li&gt;tps：transaction per second，每秒事务数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用压测工具&#34;&gt;常用压测工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mysqlslap&lt;/li&gt;
&lt;li&gt;sysbench&lt;/li&gt;
&lt;li&gt;tpcc-mysql&lt;/li&gt;
&lt;li&gt;mysql benchmark suite&lt;/li&gt;
&lt;li&gt;mysql super-smack&lt;/li&gt;
&lt;li&gt;mybench&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysqlslap压测&#34;&gt;mysqlslap压测&lt;/h2&gt;
&lt;p&gt;1、安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# rpm -qf /usr/bin/mysqlslap 
mariadb-5.5.65-1.el7.x86_64
mariadb的rpm包中包含该工具

[root@host2 ~]# which mysqlslap 
/usr/local/mysql/bin/mysqlslap
# 通用二进制的mysql 5.7也带有该工具
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、使用语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# man mysqlslap
[root@host2 ~]# mysqlslap --help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、常用options&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--auto-generate-sql ,-a 
#mysqlslap自动生成测试的sql语句；

--auto-generate-sql-load-type=type
#生成的语句类型，读，写，或2者混合；

--auto-generate-sql-add-auto-increment 
#对生成的包，添加auto-increment列

--number-char-cols=N
# 自动生成的测试表，有N个字符类型的列

--numer-int-cols=N
# 自动生成的测试有，有n个整数列

--number-of-queries=n
# 总查询次数

--query=name ,-q
# name是脚本文件名，里面可以定义slq语句，进行测试

--create-schema
# 指定创建的测试库名

--concurrency=n,-c n
# 并发客户端数量

--engine=name,-e name
# 测试哪个存储引擎

--iterations=n,-i n
#  The number of times to run the tests.执行的测试次数，如50个并发执行4次，求平均

--only-print
# 不实际执行，只生成执行步骤信息；




&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、测试示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysqlslap -a -uroot
Benchmark
	Average number of seconds to run all queries: 0.003 seconds
	Minimum number of seconds to run all queries: 0.003 seconds
	Maximum number of seconds to run all queries: 0.003 seconds
	Number of clients running queries: 1
	Average number of queries per client: 0
#自动生成测试sql

[root@host2 ~]# mysqlslap -a -c 100 -uroot
Benchmark
	Average number of seconds to run all queries: 0.284 seconds
	Minimum number of seconds to run all queries: 0.284 seconds
	Maximum number of seconds to run all queries: 0.284 seconds
	Number of clients running queries: 100
	Average number of queries per client: 0
并发100，测试1次

[root@host2 ~]# mysqlslap -a -i 10 -uroot
Benchmark
	Average number of seconds to run all queries: 0.002 seconds
	Minimum number of seconds to run all queries: 0.002 seconds
	Maximum number of seconds to run all queries: 0.003 seconds
	Number of clients running queries: 1
	Average number of queries per client: 0
并发1，测试10次

[root@host2 ~]# mysqlslap -a -c 100 -i 10 -uroot
Benchmark
	Average number of seconds to run all queries: 0.178 seconds
	Minimum number of seconds to run all queries: 0.167 seconds
	Maximum number of seconds to run all queries: 0.211 seconds
	Number of clients running queries: 100
	Average number of queries per client: 0
并发100，测试10次

[root@host2 ~]# mysqlslap -a --auto-generate-sql-add-autoincrement -c 100 -i 10 -uroot
Benchmark
	Average number of seconds to run all queries: 0.096 seconds
	Minimum number of seconds to run all queries: 0.091 seconds
	Maximum number of seconds to run all queries: 0.113 seconds
	Number of clients running queries: 100
	Average number of queries per client: 0
并发100，测试10次，有自动增长字段


[root@host2 ~]# mysqlslap -a --auto-generate-sql-load-type=read -c 100 -i 10 -uroot
Benchmark
	Average number of seconds to run all queries: 0.112 seconds
	Minimum number of seconds to run all queries: 0.110 seconds
	Maximum number of seconds to run all queries: 0.117 seconds
	Number of clients running queries: 100
	Average number of queries per client: 0
并发100，测试10次，读类型sql测试

[root@host2 ~]# mysqlslap -a --auto-generate-sql-write-number=1000 -c 100 -i 10 -uroot
Benchmark
	Average number of seconds to run all queries: 0.401 seconds
	Minimum number of seconds to run all queries: 0.362 seconds
	Maximum number of seconds to run all queries: 0.610 seconds
	Number of clients running queries: 100
	Average number of queries per client: 0
并发100，测试10次，测试写类型sql共1000次
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;
[root@host2 ~]# mysqlslap -a -c 50,100,400 --number-of-queries 2000 --iterations=5 --debug-info -uroot
Benchmark
	Average number of seconds to run all queries: 0.390 seconds
	Minimum number of seconds to run all queries: 0.379 seconds
	Maximum number of seconds to run all queries: 0.399 seconds
	Number of clients running queries: 50
	Average number of queries per client: 40

Benchmark
	Average number of seconds to run all queries: 0.388 seconds
	Minimum number of seconds to run all queries: 0.384 seconds
	Maximum number of seconds to run all queries: 0.397 seconds
	Number of clients running queries: 100
	Average number of queries per client: 20

Benchmark
	Average number of seconds to run all queries: 0.473 seconds
	Minimum number of seconds to run all queries: 0.464 seconds
	Maximum number of seconds to run all queries: 0.493 seconds
	Number of clients running queries: 400
	Average number of queries per client: 5


User time 1.13, System time 2.05
Maximum resident set size 17240, Integral resident set size 0
Non-physical pagefaults 60033, Physical pagefaults 0, Swaps 0
Blocks in 0 out 0, Messages in 0 out 0, Signals 0
Voluntary context switches 77541, Involuntary context switches 1
# 50,100,400个并发情况，分别测试，
每种情况测试5次， 
每种情况的查询总次数是200
所以并发小的，每个客户端发起的查询就多一些


[root@host2 ~]# mysqlslap -a -c 50,100,400 --number-of-queries 2000 --iterations=1 --debug-info -uroot
Benchmark
	Average number of seconds to run all queries: 0.400 seconds
	Minimum number of seconds to run all queries: 0.400 seconds
	Maximum number of seconds to run all queries: 0.400 seconds
	Number of clients running queries: 50
	Average number of queries per client: 40

Benchmark
	Average number of seconds to run all queries: 0.399 seconds
	Minimum number of seconds to run all queries: 0.399 seconds
	Maximum number of seconds to run all queries: 0.399 seconds
	Number of clients running queries: 100
	Average number of queries per client: 20

Benchmark
	Average number of seconds to run all queries: 0.487 seconds
	Minimum number of seconds to run all queries: 0.487 seconds
	Maximum number of seconds to run all queries: 0.487 seconds
	Number of clients running queries: 400
	Average number of queries per client: 5

# iterations表示的是每种并发场景下，测试几次，可以看到只测一次的情况下，平均，最大，最小都相同，因为只有测试了一次，
一般测试次数越多，求平均值，越能体现该并发场景下的真实性能；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;mysql最佳实践思路&#34;&gt;mysql最佳实践思路&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;思路：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;尽可能解放数据库，将计算逻辑向前转移到业务服务层，mysql的函数，存储过程可以实现的功能尽可能的转移到业务层，大并发情况下，通过业务层扩容可以较为容易实现水平扩展；数据库专注存储和索引逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;58&lt;strong&gt;到家数据库使用规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.51cto.com/art/201702/531364.htm&#34;&gt;https://zhuanlan.51cto.com/art/201702/531364.htm&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须使用innodb引擎&lt;/li&gt;
&lt;li&gt;必须使用utf8编码&lt;/li&gt;
&lt;li&gt;不使用存储过程，函数，触发器，将这些计算移动到业务层&lt;/li&gt;
&lt;li&gt;.........&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mycnf生产配置示例&#34;&gt;my.cnf生产配置示例&lt;/h1&gt;
&lt;p&gt;硬件：内存32G&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;innodb_file_per_table=1
# 每表一个单独表文件

max_connections=8000
# 最大并发连接

back_log=300
# 内核级别监听队列排队队列长度

max_connect_erros=1000
#每个客户端允许的最大错误数，超过后，该客户端会被禁止连接，直到mysql重启，或flush hosts清空记录

open_files_limit=10240
# 所有线程打开的表总数量

max_allowed_packet=32m
# 每个连接传输数据大小

wait_timeout=10
# 指定一个请求的最大连接时间

sort_buffer_size=16m
# order by，group by时用到的缓存大小；

join_buffer_size=16m
#不带索引的全表扫描使用的buffer大小

query_cache_limit=4m
# 单个查询能使用的缓冲大小

query_cache_size=128m
# 查询缓存大小

transaction_isolation=repateable-read
# 事务隔离等级

thread_stack=512k
# 线程堆大小

log-bin
# 二进制日志文件前缀

binlog_format=row|mixed|statement
#binlog记录格式

innodb_buffer_pool_size=24G
#innodb使用的缓冲池保存数据和索引，可设置为物理内存的80%

innodb_file_io_threads = 4
#用来同步IO操作的IO线程的数量 

innodb_thread_concurrency = 16 
#在InnoDb核心内的允许线程数量，建议的设置是CPU数量加上磁盘数量的两倍
innodb_log_buffer_size = 16M 
# 用来缓冲日志数据的缓冲区的大小 
innodb_log_file_size = 512M
在日志组中每个日志文件的大小 
innodb_log_files_in_group = 3 
# 在日志组中的文件总数 
innodb_lock_wait_timeout = 120 
# SQL语句在被回滚前,InnoDB事务等待InnoDB行锁的时间 
long_query_time = 2 
#慢查询时长 
log-queries-not-using-indexes
#将没有使用索引的查询也记录下来
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">haproxy监测脚本实现mysql反代</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/haproxy%E7%9B%91%E6%B5%8B%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0mysql%E5%8F%8D%E4%BB%A3/" />
            <id>https://latteStudio.github.io/posts/haproxy%E7%9B%91%E6%B5%8B%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0mysql%E5%8F%8D%E4%BB%A3/</id>
            <updated>2020-10-23T14:26:20&#43;08:00</updated>
            <published>2020-10-21T16:56:35&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">haproxy监测脚本实现mysql反代</summary>
            
                <content type="html">&lt;h1 id=&#34;haproxy代理mysql&#34;&gt;haproxy代理mysql&lt;/h1&gt;
&lt;h2 id=&#34;haproxy代理mysql的问题&#34;&gt;haproxy代理mysql的问题&lt;/h2&gt;
&lt;p&gt;​	haproxy可以在四层tcp代理mysql服务，但是要考虑2个主要问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;后端mysql节点的健康检测；&lt;/li&gt;
&lt;li&gt;事务的持久性；不想proxysql或mycat专用的mysql代理，haproxy不识别mysql协议，如何将一个事务内的所有sql路由到一个节点；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mysql健康检查&#34;&gt;mysql健康检查&lt;/h2&gt;
&lt;h3 id=&#34;连通性检查&#34;&gt;连通性检查&lt;/h3&gt;
&lt;p&gt;​	haproxy代理mysql时，支持mysql-check指令，该指令可以简单检查后端mysql的连通性；语法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;option mysql-check [user &amp;lt;username&amp;gt; [post-41] ]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;集群状态检查&#34;&gt;集群状态检查&lt;/h3&gt;
&lt;p&gt;​	mysql-check指令只能简单的检查mysql实例的连通性，对于更复杂一些的状态监测，如主从复制状态、集群状态、某库是否存在，从节点是否只读等，&lt;strong&gt;需要靠自定义脚本实现监测；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	脚本实现监测的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用自定义脚本监测需要的mysql指标；&lt;/li&gt;
&lt;li&gt;将脚本监测后的结果，转为http状态码供haproxy理解，（因haproxy原生支持http协议）&lt;/li&gt;
&lt;li&gt;健康用200，不健康用503&lt;/li&gt;
&lt;li&gt;haproxy根据状态码，判断后端mysql健康与否；&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mysql监测脚本示例&#34;&gt;mysql监测脚本示例&lt;/h3&gt;
&lt;p&gt;1、编写mysql监测脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# cat /usr/bin/mysqlchk.sh 
#!/bin/bash

host=localhost
port=3306
user=root
passwd=wang
db=mysql

/usr/bin/mysql -u$user -p$passwd -h$host -e &#39;show databases&#39; 2&amp;gt;/dev/null |grep $db

if [ $? -eq 0 ];then
	echo -en &amp;quot;HTTP/1.1 200 OK\r\n&amp;quot;
	echo -en &amp;quot;Content-Type: Content-Type: text/plain\r\n&amp;quot;
	echo -en &amp;quot;Connection: close\r\n&amp;quot;
	echo -en &amp;quot;\r\n&amp;quot;
	echo -en &amp;quot;Mysql is running and $db is exists.\r\n&amp;quot;
	echo -en &amp;quot;\r\n&amp;quot;
	sleep 0.5
	exit 0
else
	echo -en &amp;quot;HTTP/1.1 503 Service Unavailabel\r\n&amp;quot;
	echo -en &amp;quot;Content-Type: Content-Type: text/plain\r\n&amp;quot;
	echo -en &amp;quot;Connection: close\r\n&amp;quot;
	echo -en &amp;quot;\r\n&amp;quot;
	echo -en &amp;quot;Mysql is down or $db is not exists.\r\n&amp;quot;
	echo -en &amp;quot;\r\n&amp;quot;
	sleep 0.5
	exit 1

fi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、将监测脚本加入xinted管理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装xinetd包；
[root@host3 ~]# yum install -y 
xinetd

# 将mysqlchk.sh脚本，定义为xinetd管理的服务，端口为9200
[root@host3 ~]# cat /etc/xinetd.d/mysqlchk 
service mysqlchk
{
	disable = no
	flags	=	REUSE
	socket_type	=	stream
	type	=	UNLISTED
	port	=	9200
	wait	=	no
	user	=	nobody
	server	=	/usr/bin/mysqlchk.sh
	log_on_failuser	+=	USERID
	only_from	=	0.0.0.0/0
	per_source	=	UNLIMITED
}

# 添加服务和端口映射到/etc/service文件；
[root@host3 ~]# cat /etc/services |grep chk
mysqlchk	9200/tcp	#myqlchk
[root@host3 ~]# 


# 启动xinetd
[root@host3 ~]# service xinetd start
Redirecting to /bin/systemctl start xinetd.service
[root@host3 ~]# chkconfig --list
...

xinetd based services:
	chargen-dgram: 	off

	mysqlchk:      	on
	tcpmux-server: 	off
	time-dgram:    	off
	time-stream:   	off
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、脚本测试；可以根据mysql状态，输出对应的http状态码，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# mysqlchk.sh 
HTTP/1.1 503 Service Unavailabel
Content-Type: Content-Type: text/plain
Connection: close

Mysql is down or mysql is not exists.

[root@host3 ~]# systemctl start mariadb
[root@host3 ~]# mysqlchk.sh 
mysql
HTTP/1.1 200 OK
Content-Type: Content-Type: text/plain
Connection: close

Mysql is running and mysql is exists.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、配置haproxy代理mysql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;listen mysql 0.0.0.0:3306
        mode tcp
        balance roundrobin
        option httpchk
        server db1 192.168.80.102:3306  check port 9200 inter 12000 rise 3 fall 3

# 代理的是四层3306；
# 监测用的是httpchk，探测的是9200端口，用一层转换，实现了间接mysql的探测；
# 相同思路，haproxy可以监测其他四层服务，通过自定义脚本；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;reference&#34;&gt;reference&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/f-ck-need-u/p/9370579.html#11-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E9%97%AE%E9%A2%98&#34;&gt;https://www.cnblogs.com/f-ck-need-u/p/9370579.html#11-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E9%97%AE%E9%A2%98&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/g/codership-team/c/RO5ZyLnEWKo&#34;&gt;https://groups.google.com/g/codership-team/c/RO5ZyLnEWKo&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/haproxy/" term="haproxy" label="haproxy" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">haproxy会话保持实现</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/haproxy%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81%E5%AE%9E%E7%8E%B0/" />
            <id>https://latteStudio.github.io/posts/haproxy%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81%E5%AE%9E%E7%8E%B0/</id>
            <updated>2020-10-22T15:35:39&#43;08:00</updated>
            <published>2020-10-21T16:56:16&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">haproxy会话保持实现</summary>
            
                <content type="html">&lt;h1 id=&#34;haproxy会话保持方式&#34;&gt;haproxy会话保持方式&lt;/h1&gt;
&lt;p&gt;​	haproxy实现会话保持有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源ip hash，因后端节点扩展时，重新调度结果波动较大，一般不采用；(可采用一致性hash使得波动较小；)&lt;/li&gt;
&lt;li&gt;cookie，haproxy在发给客户端的响应报文头部加上一个键值对到cookie中，记录了第一次被分配的后端节点标识id，后续请求根据id分配到相同节点&lt;/li&gt;
&lt;li&gt;stick table，以请求的某些特征，如源ip，cookie，请求host做key，后端节点的标识id做value，组成一条k-v数据，多条数据组成stick table，再次请求时，相关请求的特性相同能关联到相同的后端节点id，进行保证相关请求分配到相同节点；（stick table是存于haproxy实例的内存中，haproxy作为调度器也应该考虑高可用，同时，stick-table要做各个haproxy之间的复制，做高可用）&lt;/li&gt;
&lt;li&gt;注意：此3种方式，都是实现将同一个客户端相关请求调度到相同的后端节点上，从而实现了请求的会话保持，&lt;strong&gt;前提是后端节点不挂掉，如果为了保证会话信息的高可用，解决方案：会话复制replication或做了高可用的会话服务器如redis&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;会话保持之cookie&#34;&gt;会话保持之cookie&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-cookie&#34;&gt;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-cookie&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cookie &amp;lt;name&amp;gt; [ rewrite | insert | prefix ] [ indirect ] [ nocache ]
              [ postonly ] [ preserve ] [ httponly ] [ secure ]
              [ domain &amp;lt;domain&amp;gt; ]* [ maxidle &amp;lt;idle&amp;gt; ] [ maxlife &amp;lt;life&amp;gt; ]

3种模式，
rewrite 在原有cookie的基础上覆盖写入
prefix 加在原有cookie头部
insert 添加一个cookie头部，放haproxy设置的cookie信息；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
backend group1
	cookie myapp insert nocache
	server app1 192.168.80.102:80 cookie server1
	server app2 192.168.80.103:80 cookie server2
	
在上面的配置中，设置了一个cookie，key是myapp
值分别是server1 server2，第一次请求时若被分到了app1这个节点，那么haproxy就给其响应报文，添加一个cookie为 myapp=server1
如下，在请求头部发现，再次请求已经携带了myapp=server1这个cookie，证明第一次请求被分配到了server1处理，并从响应报文中获得了这个cookie，存储于本地；PHPSESSID是php设置了应用的id，为每个客户端关联状态会话信息的；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917125006041.png&#34; alt=&#34;image-20200917125006041&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;insert&#34;&gt;insert&lt;/h2&gt;
&lt;p&gt;​	insert表示，在转交后端节点发来的响应报文头部，插入一个cookie，k-v都由haproxy设定，没配置preserve关键词时，后端若设置了和haproxy同名的cookie，那后端的cookie会被删除顶掉！&lt;/p&gt;
&lt;p&gt;​	haproxy设置的cookie没有maxAge属性，所以无法持久保持到客户端磁盘，只存在于客户端浏览器的内存缓存中；&lt;/p&gt;
&lt;p&gt;​	为避免缓存影响，建议配合nocache或postonly选项！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;haproxy和后端节点设置cookie名称一致时：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;backend dynamic_group
    cookie PHPSESSID insert nocache
...
将haproxy设置的cookie的名称改为PHPSESSID，和后端节点保持一致，此时，再次请求，发现后端节点的cookie被haproxy顶掉！
测试时，需要关闭浏览器，重新打开排除缓存影响；
一般haproxy和后端节点cookie名要不一致
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917145428629.png&#34; alt=&#34;image-20200917145428629&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前次服务的节点挂掉时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	将sever1 停掉服务，再次请求，发现2次请求的haproxy的cookie会变，即haproxy在节点挂掉时，会重新分配节点，也会重新修改cookie值为新节点的标识id，但应用设置的cookie保持不变，此时虽然能被调度新节点，但原来请求的会话就会丢失，除非会话设置了共享，或存在会话服务器&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917150746288.png&#34; alt=&#34;image-20200917150746288&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917150726893.png&#34; alt=&#34;image-20200917150726893&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;indirect指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	indirect指令是指不向后端转发haproxy添加的cookie信息，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、修改httpd日志如下，添加记录cookie的日志格式，重启httpd

&amp;lt;IfModule log_config_module&amp;gt;
    #
    # The following directives define some format nicknames for use with
    # a CustomLog directive (see below).
    #
    LogFormat &amp;quot; \&amp;quot;%{COOKIE}i \&amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined

2、查看日志，发现此时可以收到haproxy添加的cookie
[root@host4 ~]# tailf /var/log/httpd/access_log
...
&amp;quot;PHPSESSID=bo31ohofi6rrpars7kl1f83r20; ha_cook=server2 &amp;quot;

3、haproxy配置indirect指令：
backend dynamic_group
    cookie ha_cook insert nocache indirect
    balance roundrobin


4、再次查看日志，此时无法获取haproxy设置的cookie
[root@host4 ~]# tailf /var/log/httpd/access_log
...
 &amp;quot;PHPSESSID=bo31ohofi6rrpars7kl1f83r20 &amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;preserve指令&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;backend dynamic_group
    cookie PHPSESSID insert nocache indirect preserve
    balance roundrobin

将haproxy设置的cookie和后端节点保持一致，但使用了preserve选项，
此时访问2个重名的cookie，保留的是后端节点设置的cookie，
此时haproxy的cookie无效，因为没了cookie，调度效果变成了轮询
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917153936716.png&#34; alt=&#34;image-20200917153936716&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;prefix&#34;&gt;prefix&lt;/h2&gt;
&lt;p&gt;​	要求：haproxy设置的cookie名称和后端节点的cookie名称保持一致；haproxy添加的cookie值，即各个后端节点的标识id会被添加在后端节点设置的cookie值前面，在向后转发时，haproxy会拿掉自己的cookie值，后端节点看不到haproxy设置的cookie；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、haproxy配置和后端节点同名的cookie名，选项使用prefix

backend dynamic_group
    cookie PHPSESSID prefix nocache
    balance roundrobin
    option http-server-close
    option httpchk     GET /index.php
    http-check expect  status 200
    server appsrv1 192.168.80.102:80  check rise 1 maxconn 3000 cookie server1
    server appsrv2 192.168.80.103:80  check rise 1 maxconn 3000 cookie server2

2、后端节点的session设置

&amp;lt;h1&amp;gt;response from webapp 192.168.80.102&amp;lt;/h1&amp;gt;
&amp;lt;?php
    session_start();
    echo &amp;quot;Server IP: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_ADDR&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;Server Name: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_NAME&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONNAME: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_name().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONID: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_id().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
?&amp;gt;

3、查看后端日志，可以看到，haproxy添加的部分，并没转发给后端节点
[root@host4 ~]# tailf /var/log/httpd/access_log
 &amp;quot;PHPSESSID=8jkucobunbicfa05uul9pljrh6 &amp;quot;
 
 4、浏览器检查报文头部，看到haproxy添加部分加到了会话设置cookie值的前面，用~隔开
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917154910043.png&#34; alt=&#34;image-20200917154910043&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;rewrite&#34;&gt;rewrite&lt;/h2&gt;
&lt;p&gt;​	rewrite需要haproxy和后端节点cookie名称保持一致，但是haproxy会覆盖应用服务器设置的cookie值，此时客户端只能得到haproxy设置的cookie值，再次请求时，虽然能保证同一个节点的调度，但是因为客户端没有获取到应用服务器设置的cookie值，服务端也就无法将其和上一次请求关联起来；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1、haproxy选择rewrite选项，cookie名称和后端需保持一致；

backend dynamic_group
    cookie PHPSESSID rewrite nocache
    balance roundrobin
    option http-server-close
    option httpchk     GET /index.php
    http-check expect  status 200
    server appsrv1 192.168.80.102:80  check rise 1 maxconn 3000 cookie server1
    server appsrv2 192.168.80.103:80  check rise 1 maxconn 3000 cookie server2

2、后端节点的session设置

&amp;lt;h1&amp;gt;response from webapp 192.168.80.102&amp;lt;/h1&amp;gt;
&amp;lt;?php
    session_start();
    echo &amp;quot;Server IP: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_ADDR&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;Server Name: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_NAME&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONNAME: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_name().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONID: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_id().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
?&amp;gt;

3、后端节点日志，看到的只有haproxy设置的cookie
&amp;quot;PHPSESSID=server1&amp;quot; 

4、浏览器只能收到haproxy设置的cookie
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917155650011.png&#34; alt=&#34;image-20200917155650011&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;忽略cookie&#34;&gt;忽略cookie&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;acl url_static  path_beg         /static /images /img /css
acl url_static  path_end         .gif .png .jpg .css .js
ignore-persist  if url_static
对于静态资源的访问，应该不考虑cookie的会话保持
设置ignore-persist 可以忽略cookie的设置；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;会话保持之stick-table&#34;&gt;会话保持之stick table&lt;/h1&gt;
&lt;h2 id=&#34;stick-table简介&#34;&gt;stick table简介&lt;/h2&gt;
&lt;p&gt;​	除了源ip的hash，设置cookie，haproxy可以利用内存中的stick table，将客户端和上一次调度过的后端节点关联起来；**方法：截取客户端的特性信息，如ip，携带的独有cookie，某长度的报文string，做为key，后端节点的标识id作为value，组成k-v类型的数据 ；**相同客户端请求过来时由于特征信息的唯一性，可以通过查表得到上次调度的后端节点，从而实现调度时的会话保持&lt;/p&gt;
&lt;p&gt;​	特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多主模型之间复制效率高；&lt;/li&gt;
&lt;li&gt;占用内存小&lt;/li&gt;
&lt;li&gt;可以添加额外的统计信息，根据统计信息可以统计每个节点的接入请求，速率等；做一些统计、分析监控之用；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例-1&#34;&gt;示例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;stick-table type {ip | integer | string [len &amp;lt;length&amp;gt;] | binary [len &amp;lt;length&amp;gt;]}
            size &amp;lt;size&amp;gt; [expire &amp;lt;expire&amp;gt;] [nopurge] [peers &amp;lt;peersect&amp;gt;]
            [store &amp;lt;data_type&amp;gt;]*
type 选择客户端ip，某个整数，或从报文截取的某长度的字符串 作为key
size 表大小
expire 过期时间
peers 多主haproxy复制时，对端节点信息
store 指定要添加哪些额外信息

# 每个后端组，只能有一个stick table，表名和后端组名称相同；

如下，为一个源ip为key的stick table，表容量100w条记录，过期时间5m，无额外统计信息；
stick-table type ip size 1m expire 5m

stick-table type ip size 1m expire 5m store conn_cnt
添加了一项连接计数器，conn_cnt为haproxy内置变量；其余可查看官方doc


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看stick-talble&#34;&gt;查看stick talble&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1，给2个后端组，都创建一个stick table
[root@host2 ~]# vim /etc/haproxy/haproxy.cfg 
backend static_group
        stick-table type ip size 1m expire 5m
backend dynamic_group
        stick-table type ip size 1m expire 5m

[root@host2 ~]# systemctl restart haproxy

2，用socat工具查看新生成的2个table，表名自动和后端组保持一致；
[root@host2 ~]# echo &amp;quot;show table&amp;quot; | socat stdio /var/lib/haproxy/stats 
# table: static_group, type: ip, size:1048576, used:0
# table: dynamic_group, type: ip, size:1048576, used:0

和stick table相关的命令
[root@host2 ~]# echo &amp;quot;help&amp;quot; | socat stdio /var/lib/haproxy/stats 
  clear table    : remove an entry from a table
  set table [id] : update or create a table entry&#39;s data
  show table [id]: report table usage stats or dump this table&#39;s contents

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;客户端ip做key&#34;&gt;客户端ip做key&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# stick on src表示启用 type 为ip的记录
backend dynamic_group
        stick-table type ip size 1m expire 5m
        stick on src
    cookie ha_cook insert nocache
    balance roundrobin
    option http-server-close
    option httpchk     GET /index.php
    http-check expect  status 200
    server appsrv1 192.168.80.102:80  check rise 1 maxconn 3000 cookie server1
    server appsrv2 192.168.80.103:80  check rise 1 maxconn 3000 cookie server2


# 查看生成的表信息，分别记录了2个客户端的信息；
[root@host2 ~]# echo &amp;quot;show table dynamic_group&amp;quot; | socat stdio /var/lib/haproxy/stats 
# table: dynamic_group, type: ip, size:1048576, used:2
0x248a784: key=192.168.80.1 use=0 exp=265067 server_id=2
0x248a674: key=192.168.80.100 use=0 exp=259197 server_id=1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;应用服务器生成的cookie做key&#34;&gt;应用服务器生成的cookie做key&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1，定义采用cookie做key的stick-table
backend dynamic_group
    stick-table type string len 32 size 1m expire 5m
    stick on req.cook(PHPSESSID)
    stick store-response res.cook(PHPSESSID)
    cookie ha_cook insert nocache
    balance roundrobin
    option http-server-close
    option httpchk     GET /index.php
    http-check expect  status 200
    server appsrv1 192.168.80.102:80  check rise 1 maxconn 3000 cookie server1
    server appsrv2 192.168.80.103:80  check rise 1 maxconn 3000 cookie server2

 

 
 stick store-response res.cook(PHPSESSID)
先： 截取响应报文中的key为PHPSESSID的cookie，做为表的key，发出该响应报文的后端节点id做value
  stick on req.cook(PHPSESSID)
然后： 截取客户端请求中key为PHPSESSID的cookie，做对比，和表里的key做对比，key相同表示该请求在之前是由对应的节点所生成的session；实现了会话保持
  stick-table type string len 32 size 1m expire 5m
  截取cookie属于string 类型的一种；
    
 2，查看生成的表，key是应用服务器生成的session值，value是生成该session的服务器；   
[root@host2 ~]# echo &amp;quot;show table dynamic_group&amp;quot; | socat stdio /var/lib/haproxy/stats 
# table: dynamic_group, type: string, size:1048576, used:1
0x2575804: key=00302nbkngemu1n2317dofgff2 use=0 exp=288910 server_id=2

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200917174254770.png&#34; alt=&#34;image-20200917174254770&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;截取string做key&#34;&gt;截取string做key&lt;/h2&gt;
&lt;p&gt;string可以截取多种，下方截取了请求报文的host头部做key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 截取host做key
backend dynamic_group
    stick-table type string len 32 size 1m expire 5m
        stick on req.hdr(Host)

    cookie ha_cook insert nocache
    balance roundrobin
    option http-server-close
    option httpchk     GET /index.php
    http-check expect  status 200
    server appsrv1 192.168.80.102:80  check rise 1 maxconn 3000 cookie server1
    server appsrv2 192.168.80.103:80  check rise 1 maxconn 3000 cookie server2


# 客户端请求
[root@host1 ~]# curl 192.168.80.101

# 查看表数据，只要是请求80.101的都被匹配到发往server_id=1的后端节点
[root@host2 ~]# echo &amp;quot;show table dynamic_group&amp;quot; | socat stdio /var/lib/haproxy/stats 
# table: dynamic_group, type: string, size:1048576, used:0

[root@host2 ~]# echo &amp;quot;show table dynamic_group&amp;quot; | socat stdio /var/lib/haproxy/stats 
# table: dynamic_group, type: string, size:1048576, used:1
0x25ff734: key=192.168.80.101 use=0 exp=297121 server_id=1

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;stick-storematchon&#34;&gt;stick store、match、on&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先stick store从报文中截取信息做key，存入表中，&lt;/li&gt;
&lt;li&gt;客户端请求时，用stick match 和表中key匹配，匹配到的key，其value就是将要被分配的节点&lt;/li&gt;
&lt;li&gt;stick on，等于先stick store，后stick match的结合&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;stick-table统计信息&#34;&gt;stick table统计信息&lt;/h2&gt;
&lt;p&gt;官方介绍：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-stick-table&#34;&gt;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-stick-table&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;stick-table-复制&#34;&gt;stick table 复制&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/&#34;&gt;https://www.haproxy.com/blog/introduction-to-haproxy-stick-tables/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;节点间复制：stick table，可以高效的在各个haproxy节点之间复制，同步新增的stick-table信息；&lt;/p&gt;
&lt;p&gt;进程间复制：同节点之间，haproxy重启时，新老进程之间建立tcp连接，可以复制stick-table信息，使得信息不因重启而丢失；重启后的新进程可以，继续和其他haproxy节点进行stick table复制；&lt;/p&gt;
&lt;p&gt;一般来说，后端应用服务器实现了会话复制，或第三方会话服务器的情况下，&lt;strong&gt;haproxy根本不需要使用stick table或cookie，即便使用，也一般是为了实现统计数据，实现调度时的会话粘性，因为每个后端节点都可以读取相同的会话信息；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;1、下载haproxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y haproxy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、修改配置文件，添加haproxy的组信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# global段，利用peers指令，指定各个haproxy节点的信息，
# test_peer为组名
# ha1相当于别名
# 12138为stick table复制时的通信端口
        peers test_peer 
                peer ha1 192.168.80.101:12138
                peer ha2 192.168.80.102:12138

# 定义前端和后端信息
frontend test1 *:8080
        use_backend app

backend app
    stick-table type ip size 100k expire 5m peers test_peer
    # 定义stick table时，用peers 引用globa中定义的peer组；
    balance     roundrobin
    server  app2 192.168.80.102:80 check
    server  app1 192.168.80.101:80 check


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、启动haproxy进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 命令行方式启动haproxy，-D后台运行，-L执行自己在peer组中的别名，此处是ha2， -f指定配置文件；
# 同样的，将相同的启动参数（-L 自己的别名），写入服务启动文件中，效果一样，就可以用systemctl来启动haproxy
[root@host3 ~]# haproxy -D -L ha2 -f /etc/haproxy/haproxy.cfg 
[root@host3 ~]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:5000                                                                           *:*                  
LISTEN     0      6                                                     192.168.80.102:12138                                                                          *:*                  
LISTEN     0      128                                                                *:8080                                                                           *:*                  
LISTEN     0      128                                                                *:22                                                                             *:*                  
LISTEN     0      100                                                        127.0.0.1:25                                                                             *:*                  
LISTEN     0      128                                                               :::22                                                                            :::*                  
LISTEN     0      100                                                              ::1:25                                                                            :::*  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、查看stick table信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装socat包，查看其中的信息即可
yum install -y socat
echo &amp;quot;show table&amp;quot; | socat stdio /var/lib/haproxy/stats

# 分别向2个haproxy节点，进行请求，可以发现，向ha2，即host3请求，会加入一条stick table信息
# 向ha1的haproxy请求，ha2上仍能看到新加的stick table信息；可见，是节点间对stick table进行了复制，复制成功！
[root@host3 ~]#  echo &amp;quot;show table app &amp;quot; | socat stdio /var/lib/haproxy/stats
# table: app, type: ip, size:102400, used:1
0x55815f180fb4: key=192.168.80.102 use=0 exp=215037 server_id=1

[root@host3 ~]#  echo &amp;quot;show table app &amp;quot; | socat stdio /var/lib/haproxy/stats
# table: app, type: ip, size:102400, used:2
0x55815f181054: key=192.168.80.101 use=0 exp=297727 server_id=2
0x55815f180fb4: key=192.168.80.102 use=0 exp=185204 server_id=1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reference&#34;&gt;reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/f-ck-need-u/p/8565998.html#1-stick-table-&#34;&gt;https://www.cnblogs.com/f-ck-need-u/p/8565998.html#1-stick-table-&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/haproxy/" term="haproxy" label="haproxy" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">haproxy配置文件与常用指令</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/haproxy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/" />
            <id>https://latteStudio.github.io/posts/haproxy%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</id>
            <updated>2020-10-22T11:04:28&#43;08:00</updated>
            <published>2020-10-21T16:55:59&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">haproxy配置文件与常用指令</summary>
            
                <content type="html">&lt;h1 id=&#34;配置要点&#34;&gt;配置要点&lt;/h1&gt;
&lt;h2 id=&#34;配置时要考虑的问题&#34;&gt;配置时要考虑的问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;haproxy选择哪种http事务模型
&lt;ol&gt;
&lt;li&gt;静态web的适合长连接&lt;/li&gt;
&lt;li&gt;动态app的适合短连接&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;haproxy的对外最大连接数设置
&lt;ol&gt;
&lt;li&gt;综合考虑，各个后端节点并发之和，以及各个节点的可排队队列数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;haproxy的各类超时时间设置
&lt;ol&gt;
&lt;li&gt;连接超时&lt;/li&gt;
&lt;li&gt;请求超时&lt;/li&gt;
&lt;li&gt;传输超时&lt;/li&gt;
&lt;li&gt;超时重试&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;haproxy连接重用的选择
&lt;ol&gt;
&lt;li&gt;是否为了提供效率，对连接进行重用，牺牲部分安全性；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;haproxy调度算法的选择&lt;/li&gt;
&lt;li&gt;是否开启多进程，多实例
&lt;ol&gt;
&lt;li&gt;haproxy一般单实例即可；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;是否设置cookie和stick table
&lt;ol&gt;
&lt;li&gt;调度的粘性上，选择设置cookie，或stick table&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;haproxy的状态页，建议开启，设置合理权限&lt;/li&gt;
&lt;li&gt;客户端ip透传，建议开启，X-Forwarded-For&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1、事务模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	后端是静态web时，响应速度一般较快，建立连接的时间占比大，频繁建立释放连接浪费资源，因此采用keep-alive模型&lt;/p&gt;
&lt;p&gt;​	后端是动态应用服务器时，响应速度一般较慢，建立连接时间占比不大，反而空闲连接浪费资源，因此采用server-close模型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、并发设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	haproxy的对外提供的最大并发连接数，应该小于等于后端所有节点的并发连接之和，&lt;/p&gt;
&lt;p&gt;​	在考虑了每个后端节点都设置了等待队列的情况下，haproxy对外总的最大并发也要考虑到每个节点的等待队列大小&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、超时时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	haproxy连接两端，对外的客户端，对内的服务端，两端都有不同的超时时间，如：和后端建立连接的超时时间、健康探测时超时时间，客户端长连接超时时间等，都需要根据实际情况合理设置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、连接重用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	和后端节点的空闲tcp连接，是否设置重用，需要平衡安全性，效率，综合考虑进行设置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、调度算法的选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	根据后端节点的角色，处理能力等进行设置，静态web一般使用加权轮询，动态应用服务及mysql等长连接的应用一般用最小连接，&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;调度算法优先级低于cookie，在设置了cookie请求下，相关请求会根据cookie进行调度，只有新的不相关请求进来，或长连接失效时，会利用调度算法重新选择调度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、是否多进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	haproxy单进程，事件驱动，一般不需要开启多进程&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、cookie和stick table&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	都是为了解决会话绑定问题，将同一客户端的相关连的请求调度到同一个后端节点上，以便每次请求都能找到会话信息；&lt;strong&gt;当后端节点利用共享会话服务器的情况下，haproxy也就无须设置此2项&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;配置文件详解&#34;&gt;配置文件详解&lt;/h1&gt;
&lt;h2 id=&#34;配置文件结构&#34;&gt;配置文件结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;global：设置haproxy进程相关属性；&lt;/li&gt;
&lt;li&gt;default：设置可以被fronted，backend，listend继承的配置，&lt;/li&gt;
&lt;li&gt;listen：等效于一组fronted+backend配置&lt;/li&gt;
&lt;li&gt;fronted：对外开放端口，并发数等&lt;/li&gt;
&lt;li&gt;backend：后端节点信息，健康检测，调度算法，cookie 设置等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;global配置段示例&#34;&gt;global配置段示例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;global
    daemon
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    stats socket /var/lib/haproxy/stats
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;默认配置文件&#34;&gt;默认配置文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# vim /etc/haproxy/haproxy.cfg 
# 全局配置段，配置进程属性相关信息
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2
    # 日志记录到本机local2设置，需要在/etc/rsyslog.conf中配置local2对应的文件路径，如/var/log/haproxy

    chroot      /var/lib/haproxy
    # 限制haproxy的活动目录
    pidfile     /var/run/haproxy.pid
    # pid文件路径
    maxconn     4000
    # 前端对外的最大并发，默认4000较小
    user        haproxy
    group       haproxy
    daemon
    # 进行以daemon方式运行，用户和组为haproxy

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
    # 开启管理socket

# 默认配置段，会被listen和backend段继承的配置；

#---------------------------------------------------------------------
# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000
# 模式默认http代理
# 日志采用全局日志；
# 不记录空日志
# http事务模型是server-close
# 透传客户端ip，除了本机地址；
# cookie模式下，应被调度到的某节点down掉，重新选择节点调度；
# 重试次数3
# 各类超时时间；
# 最大并发连接数；

# 定义个前端；分别将动静请求转发给2个后端服务器组；
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend  main
        bind  *:5000
    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js

    use_backend static          if url_static
    default_backend             app


# 定义了2个后端服务器组，和调度算法，启用健康检测；
#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static
    balance     roundrobin
    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;示例配置&#34;&gt;示例配置&lt;/h2&gt;
&lt;p&gt;1、配置haproxy，注意：haproxy配置文件，中文注释会报错！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;global
    log         127.0.0.1 local2
    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     20000
    user        haproxy
    group       haproxy
    daemon
    stats socket /var/lib/haproxy/stats
    spread-checks 2
# 增大了并发数到20000
# spread-checks 后端节点多时，精确的每过几秒集中检测一下，会压力较大，因此采用在精确时间点的前后2%的时间端内进行检测；官网建议2%-5%

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    timeout http-request    2s
    timeout queue           3s
    timeout connect         1s
    timeout client          10s
    timeout server          2s
    timeout http-keep-alive 10s
    timeout check           2s
    maxconn                 18000 
# 修改了一些默认的超时时间

frontend http-in
    bind             *:80
    mode             http
    log              global
    capture request  header Host len 20
    capture request  header Referer len 60
    acl url_static   path_beg  -i /static /images /stylesheets
    acl url_static   path_end  -i .jpg .jpeg .gif .png .ico .bmp .css .js
    acl url_static   path_end  -i .html .htm .shtml .shtm .pdf .mp3 .mp4 .rm .rmvb .txt
    acl url_static   path_end  -i .zip .rar .gz .tgz .bz2 .tgz

    use_backend      static_group   if url_static
    default_backend  dynamic_group
# 对外开放一个80的http服务，
# 截取请求报文的host和referer头部字段
# 定义4个同名的acl，匹配静态资源的请求，之间是或关系；满足一个即可
# 根据acl定义，被匹配到是静态资源的转发给静态服务器组，其余的交给动态服务器组；

backend static_group
    balance            roundrobin
    option             http-keep-alive
    http-reuse         safe
    option httpchk     GET /index.html
    http-check expect  status 200
    server staticsrv1  192.168.100.62:80 check rise 1 maxconn 5000
    server staticsrv2  192.168.100.63:80 check rise 1 maxconn 5000
# 定义静态服务器组；采用长连接，连接重用用safe级别，检测页面是/index.html，依靠200状态码判断是否健康
定义了2个后端节点，每个节点最大连接5000，连续探测1次正常就可以重新标记为正常；

backend dynamic_group
    cookie appsrv insert nocache
    balance roundrobin
    option http-server-close
    option httpchk     GET /index.php
    http-check expect  status 200
    server appsrv1 192.168.100.60:80  check rise 1 maxconn 3000 cookie appsrv1
    server appsrv2 192.168.100.61:80  check rise 1 maxconn 3000 cookie appsrv2
# 定义后端组，设置cookie，cookie的变量名是appsrv，insert是在原有响应报文头部插入模式，此外还有prefix追加在头部，rewrite覆盖改写等2种模式；
# 调度算法轮询， http事务模式是server-close，探测页面/index.php，判断依据是200的状态码，
# 定义2个后端节点，每个节点最大并发3000，每个节点的标识符即cookie对应的值分别是appsrv1 appsrv2

listen report_stats
        bind *:8081
        stats enable
        stats hide-version
        stats uri    /hastats
        stats realm  &amp;quot;pls enter your name&amp;quot;
        stats auth   admin:admin
        stats admin  if TRUE
# listen是等效fronted和backend结合的写法
# 启用状态页，隐藏版本号，定义uri和提示符，用户名和密码，端口在8081
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、准备2个后端节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y httpd php php-fpm
systemctl start httpd;systemctl enable httpd
systemctl start php-fpm
# 安装httpd，php，php-fpm


vim /var/www/html/index.php
[root@host4 ~]# cat /var/www/html/index.php 
&amp;lt;h1&amp;gt;response from webapp 192.168.80.103&amp;lt;/h1&amp;gt;
&amp;lt;?php
    session_start();
    echo &amp;quot;Server IP: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_ADDR&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;Server Name: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_NAME&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONNAME: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_name().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONID: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_id().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
?&amp;gt;

[root@host3 ~]# cat /var/www/html/index.php 
&amp;lt;h1&amp;gt;response from webapp 192.168.80.102&amp;lt;/h1&amp;gt;
&amp;lt;?php
    session_start();
    echo &amp;quot;Server IP: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_ADDR&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;Server Name: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.$_SERVER[&#39;SERVER_NAME&#39;].&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONNAME: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_name().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
    echo &amp;quot;SESSIONID: &amp;quot;.&amp;quot;&amp;lt;font color=red&amp;gt;&amp;quot;.session_id().&amp;quot;&amp;lt;/font&amp;gt;&amp;quot;.&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;
?&amp;gt;
# 准备php文件，2个节点会生成不同的session值

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、直接访问后端节点时，检查cookie&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200916153651900.png&#34; alt=&#34;image-20200916153651900&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、重启haproxy配置生效，通过haproxy访问时&lt;/p&gt;
&lt;p&gt;​	可以看到多出一个appsrv字段，值是被调度到的appsrv1，第一个节点的标识符，通过这个cookie字段，客户端的后续请求，携带此cookie，haproxy就可以根据它一直将其调度到第一个节点；&lt;/p&gt;
&lt;p&gt;​	cookie与session简单理解：当客户端第一次请求服务时，服务端会为其生成一个sessionid，sessionid的值各不相同，这个sessionid关联了这个客户端的各种信息，如登陆状态，用户权限等，sessionid和其值保存在服务端，多个客户端的session共同存储在服务端端，相当于服务端的一个用户信息检索数据表；假设某客户端生成的sessionid值是xxx，那么服务器发回客户端时，就会发送一个键值对，sessionid=xxx，作为客户端的cookie；客户端收到后会存储在本地，再次请求时都会携带该cookie，服务端收到请求后根据sessionid=xxx就可以检索到其对应的状态信息，不同用户的sessionid不同，从而达到了区分客户端，并能记录每个客户端不同状态信息的效果；&lt;strong&gt;cookie就是一堆k-v类型的键值对，sessionid只是其中一种；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200916154138022.png&#34; alt=&#34;image-20200916154138022&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;配置文件指令&#34;&gt;配置文件指令&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1&#34;&gt;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网文档上：各个指令的语法和配置示例，&lt;/p&gt;
&lt;h2 id=&#34;balance&#34;&gt;balance&lt;/h2&gt;
&lt;p&gt;​	共9种调度算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;roundrobin 加权轮询，可动态修改权重&lt;/li&gt;
&lt;li&gt;static-rr 静态加权轮询，运行时不可修改权重&lt;/li&gt;
&lt;li&gt;leastconn&lt;/li&gt;
&lt;li&gt;source 源地址hash&lt;/li&gt;
&lt;li&gt;uri 适用缓存服务器&lt;/li&gt;
&lt;li&gt;url_param 基于用户id进行hash，然后调度&lt;/li&gt;
&lt;li&gt;hdr(name) 基于指定的请求头部调度，一般采用hdr(host)基于主机头调度&lt;/li&gt;
&lt;li&gt;rdp-cookie&lt;/li&gt;
&lt;li&gt;rdp-cookie(name)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hash-type&#34;&gt;hash-type&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;consistent：一致性hash&lt;/li&gt;
&lt;li&gt;map-based&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bind&#34;&gt;bind&lt;/h2&gt;
&lt;p&gt;​	fronted段，绑定到哪个端口；&lt;/p&gt;
&lt;h2 id=&#34;mode&#34;&gt;mode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;tcp&lt;/li&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;log&#34;&gt;log&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;log global
log &amp;lt;address&amp;gt; &amp;lt;facility&amp;gt; [&amp;lt;level&amp;gt; [&amp;lt;minlevel&amp;gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;capture-requestresponse-header&#34;&gt;capture request/response header&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;常用的捕获头部字段示例：

capture request header Host len 15
capture request header X-Forwarded-For len 15
capture request header Referer len 15
capture response header Content-length len 9
capture response header Location len 15
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;maxconn&#34;&gt;maxconn&lt;/h2&gt;
&lt;h2 id=&#34;use_backend&#34;&gt;use_backend&lt;/h2&gt;
&lt;h2 id=&#34;default_backend&#34;&gt;default_backend&lt;/h2&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;li&gt;default-server&lt;/li&gt;
&lt;li&gt;option httpchk&lt;/li&gt;
&lt;li&gt;stats&lt;/li&gt;
&lt;li&gt;option forwardfor&lt;/li&gt;
&lt;li&gt;errorfile 错误页面相关&lt;/li&gt;
&lt;li&gt;cookie 和option redispatch&lt;/li&gt;
&lt;li&gt;reqadd和 rspadd&lt;/li&gt;
&lt;li&gt;超时时间相关&lt;/li&gt;
&lt;li&gt;http过滤，http-request：https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-http-request&lt;/li&gt;
&lt;li&gt;tcp过滤 tcp-request tcp-response&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;acl&#34;&gt;acl&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#7&#34;&gt;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;acl常用于，匹配区分uri，如区分动态和静态请求，然后用use_backend指令，转发给不同的后端组；&lt;/p&gt;
&lt;p&gt;acl语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl &amp;lt;aclname&amp;gt; &amp;lt;criterion&amp;gt; [flags] [operator] [&amp;lt;value&amp;gt;] ...

aclname：指定acl的名称，在引用时区分大小写。可随意指定，且多个acl指令可以指定同一个aclname，这表示&amp;quot;或&amp;quot;的逻辑关系。
flags：可选项，表示标识位。一般会用到的标识位只有&amp;quot;-i&amp;quot;，表示不区分大小写。
operator：可选项，某些操作符，有&amp;quot;eq&amp;quot;、&amp;quot;ge&amp;quot;、&amp;quot;gt&amp;quot;、&amp;quot;le&amp;quot;、&amp;quot;lt&amp;quot;，表示数学上的等于、大于、小于。
&amp;lt;criterion&amp;gt;：指定检查标准，即检查方法。
value：根据criterion的不同，值的类型不同。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;四层常用检查项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src &amp;lt;ip&amp;gt;
src_port &amp;lt;port or port_ranges&amp;gt;
dst &amp;lt;ip&amp;gt;
dst_port &amp;lt;port or port_ranges&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;七层常用检查项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hdr(Host) www.b.com
hdr_reg(host) *\.b\.com
path_beg
path_end
path_reg
url_beg
url
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;acl实现动静分离示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl acl_static path_beg /static /image
acl acl_static path_end .gif .png
acl acl_dynamic path_end .php .jsp
acl acl_b hdr(host) -i www.b.com

use_backend static_group if acl_static
use_backend dynamic_group if acl_dynamic
use_backend b_group if acl_b

定义了三种acl，动态请求、静态请求、请求主机头是www.b.com的，分别将其转发到3个主机组，
之后，定义三个主机组即可
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/haproxy/" term="haproxy" label="haproxy" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">haproxy安装与功能特性介绍</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/haproxy%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D/" />
            <id>https://latteStudio.github.io/posts/haproxy%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7%E4%BB%8B%E7%BB%8D/</id>
            <updated>2020-10-21T17:16:56&#43;08:00</updated>
            <published>2020-10-21T16:55:44&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">haproxy安装与功能特性介绍</summary>
            
                <content type="html">&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;h2 id=&#34;yum&#34;&gt;yum&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# yum install -y haproxy
[root@host1 ~]# rpm -qi haproxy
Name        : haproxy
Version     : 1.5.18
# yum直接安装即可，base仓库就有，版本较低，一般都需要编译安装需要的版本

# yum安装目录结构
[root@host1 ~]# rpm -ql haproxy
/etc/haproxy
/etc/haproxy/haproxy.cfg 
# 配置文件
/etc/logrotate.d/haproxy
# 日志轮替配置
/etc/sysconfig/haproxy
# 服务脚本的参数文件
/usr/bin/halog
/usr/bin/iprange
# 程序文件
/usr/lib/systemd/system/haproxy.service
# 服务脚本
/usr/sbin/haproxy
# 主程序
/usr/sbin/haproxy-systemd-wrapper
/usr/share/doc/haproxy-1.5.18
...
# doc和man等帮助文档
/var/lib/haproxy
# 数据目录
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1、下载源码包，解压，进入解压后目录
wget https://www.haproxy.org/download/1.7/src/haproxy-1.7.12.tar.gz
tar -xf haproxy-1.7.12.tar.gz
cd haproxy-1.7.12

2、安装编译工具、依赖包
[root@host2 haproxy-1.7.12]# yum install -y gcc gcc++ pcre pcre-devel


3、
2步走
编译：
	[root@host2 haproxy-1.7.12]# make TARGET=linux2628 USE_PCRE=1 ARCh=x86_64 prefix=/usr/local/haproxy
	需要指明硬件架构、os平台、安装目录、辅助功能如pcre、openssl、zlib等

安装：
	[root@host2 haproxy-1.7.12]# make install PREFIX=/usr/local/haproxy
	安装也需要再次指定目录，且prefix要大写，不然不会安装到对应的目录下
	
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装后目录&#34;&gt;安装后目录&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 安装后目录结构：
[root@host2 haproxy-1.7.12]# ll /usr/local/haproxy/
total 0
drwxr-xr-x 3 root root 21 Sep 14 16:50 doc
drwxr-xr-x 2 root root 21 Sep 14 16:50 sbin
drwxr-xr-x 3 root root 17 Sep 14 16:50 share

# 不需要配置PATH和MANPATH，安装后即可找到haproxy的程序文件和man文件
# 程序文件，只有一个haproxy主程序
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;服务脚本参数文件&#34;&gt;服务脚本、参数文件&lt;/h3&gt;
&lt;p&gt;​	服务脚本，要修改2项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主程序路径&lt;/li&gt;
&lt;li&gt;主程序启动时，传入的参数，（不同版本不同）注意根据当前版本的主程序的命令参数然后调整&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# scp /usr/lib/systemd/system/haproxy.service 192.168.80.101:/usr/lib/systemd/system/
[root@host1 ~]# scp /etc/sysconfig/haproxy 192.168.80.101:/etc/sysconfig/

[root@host2 haproxy-1.7.12]# systemctl daemon-reload
[root@host2 haproxy-1.7.12]# systemctl status haproxy


# 从host1拷贝一份yum安装后的服务脚本，及其参数文件
# 对服务脚本进行修改，

[Unit]
Description=HAProxy Load Balancer
After=syslog.target network.target

[Service]
EnvironmentFile=/etc/sysconfig/haproxy
ExecStartPre=/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg   -c -q
ExecStart=/usr/local/haproxy/sbin/haproxy -Ds -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid
ExecReload=/bin/kill -USR2 $MAINPID
KillMode=mixed

[Install]
WantedBy=multi-user.target

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置文件&#34;&gt;配置文件&lt;/h3&gt;
&lt;p&gt;​	配置文件，注意不同版本的语法兼容问题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 haproxy-1.7.12]# mkdir /etc/haproxy
[root@host1 ~]# scp /etc/haproxy/haproxy.cfg 192.168.80.101:/etc/haproxy/
# 创建目录，从别的机器拷贝一份配置文件；
# 可以从examples目录下找，或者从yum安装的版本中复制一份配置文件并做修改，注意不同版本的配置文件兼容性问题；

# 如下：是编译安装1.7.12采用yum安装的1.5.18的配置文件的修改过程
# 创建了haproxy用户、修改了bind指令
# 再次语法检查，即通过
[root@host3 haproxy-1.7.12]# haproxy -c -f /etc/haproxy/haproxy.cfg 
[ALERT] 259/115328 (1567) : parsing [/etc/haproxy/haproxy.cfg:31] : cannot find user id for &#39;haproxy&#39; (0:Success)
[ALERT] 259/115328 (1567) : parsing [/etc/haproxy/haproxy.cfg:32] : cannot find group id for &#39;haproxy&#39; (0:Success)
[ALERT] 259/115328 (1567) : parsing [/etc/haproxy/haproxy.cfg:63] : &#39;frontend&#39; cannot handle unexpected argument &#39;*:5000&#39;.
[ALERT] 259/115328 (1567) : parsing [/etc/haproxy/haproxy.cfg:63] : please use the &#39;bind&#39; keyword for listening addresses.
[ALERT] 259/115328 (1567) : Error(s) found in configuration file : /etc/haproxy/haproxy.cfg
[ALERT] 259/115328 (1567) : Fatal errors found in configuration.

[root@host3 haproxy-1.7.12]# useradd haproxy
[root@host3 haproxy-1.7.12]# haproxy -c -f /etc/haproxy/haproxy.cfg 
[ALERT] 259/115346 (1573) : parsing [/etc/haproxy/haproxy.cfg:63] : &#39;frontend&#39; cannot handle unexpected argument &#39;*:5000&#39;.

[ALERT] 259/115346 (1573) : parsing [/etc/haproxy/haproxy.cfg:63] : please use the &#39;bind&#39; keyword for listening addresses.
[ALERT] 259/115346 (1573) : Error(s) found in configuration file : /etc/haproxy/haproxy.cfg
[ALERT] 259/115346 (1573) : Fatal errors found in configuration.
[root@host3 haproxy-1.7.12]# vim /etc/haproxy/haproxy.cfg 
[root@host3 haproxy-1.7.12]# haproxy -c -f /etc/haproxy/haproxy.cfg 
Configuration file is valid


# 启动时，报错，查看为目录不存在问题
# 创建/var/lib/haproxy目录后再启动即可
[root@host3 ~]# systemctl status haproxy
....
Sep 16 14:30:53 host3.b.com haproxy[1817]: [ALERT] 259/143053 (1817) : Starting frontend GLOBAL: cannot bind UNIX socket [/var/lib/haproxy/stats]
[root@host3 ~]# mkdir /var/lib/haproxy
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;haproxy主程序&#34;&gt;haproxy主程序&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 haproxy-1.7.12]# haproxy -h
HA-Proxy version 1.7.12 2019/10/25
Copyright 2000-2019 Willy Tarreau &amp;lt;willy@haproxy.org&amp;gt;

Usage : haproxy [-f &amp;lt;cfgfile|cfgdir&amp;gt;]* [ -vdVD ] [ -n &amp;lt;maxconn&amp;gt; ] [ -N &amp;lt;maxpconn&amp;gt; ]
        [ -p &amp;lt;pidfile&amp;gt; ] [ -m &amp;lt;max megs&amp;gt; ] [ -C &amp;lt;dir&amp;gt; ] [-- &amp;lt;cfgfile&amp;gt;*]
        -v displays version ; -vv shows known build options.
        -d enters debug mode ; -db only disables background mode.
        -dM[&amp;lt;byte&amp;gt;] poisons memory with &amp;lt;byte&amp;gt; (defaults to 0x50)
        -V enters verbose mode (disables quiet mode)
        -D goes daemon ; -C changes to &amp;lt;dir&amp;gt; before loading files.
        -q quiet mode : don&#39;t display messages
        -c check mode : only check config files and exit
        -n sets the maximum total # of connections (2000)
        -m limits the usable amount of memory (in MB)
        -N sets the default, per-proxy maximum # of connections (2000)
        -L set local peer name (default to hostname)
        -p writes pids of all children to this file
        -de disables epoll() usage even when available
        -dp disables poll() usage even when available
        -dS disables splice usage (broken on old kernels)
        -dR disables SO_REUSEPORT usage
        -dr ignores server address resolution failures
        -dV disables SSL verify on servers side
        -sf/-st [pid ]* finishes/terminates old pids.

haproxy -D -f /etc/haproxy/haproxy.cfg 
# 命令行启动haproxy，
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;haproxy不同版本时，配置文件的语法兼容问题&lt;/li&gt;
&lt;li&gt;haproxy不同版本时，主程序可接收参数不同，导致的服务脚本的参数文件要随之修改传入的启动参数；&lt;/li&gt;
&lt;li&gt;编译安装，修改服务脚本时，主程序路径问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;特性介绍&#34;&gt;特性介绍&lt;/h1&gt;
&lt;p&gt;​	haproxy一款开源的负载均衡软件，支持4层，7层的负载，支持会话保持，ssl加密，官网：http://www.haproxy.org/，类似于nginx，也有haproxy的商业版，具有一些高级特性&lt;/p&gt;
&lt;h2 id=&#34;官方文档&#34;&gt;官方文档&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cbonte.github.io/haproxy-dconv/&#34;&gt;https://cbonte.github.io/haproxy-dconv/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	haproxy每个版本都有三类文档：starter guide、configuration manual、management guide，不同版本的文档大体相同，&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html&#34;&gt;https://cbonte.github.io/haproxy-dconv/1.7/configuration.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	以1.7版本的配置文档为例，大致包含：http事务介绍，haproxy基础配置，全局参数，proxy代理参数（包含各类指令的语法汇总），acl配置，日志配置等；&lt;/p&gt;
&lt;h2 id=&#34;特性官方介绍&#34;&gt;特性官方介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cbonte.github.io/haproxy-dconv/1.7/intro.html#3&#34;&gt;https://cbonte.github.io/haproxy-dconv/1.7/intro.html#3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	在stater guide中介绍了haproxy的各类特性，基础特性、高级特性、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssl&lt;/li&gt;
&lt;li&gt;监控&lt;/li&gt;
&lt;li&gt;会话保持&lt;/li&gt;
&lt;li&gt;acl&lt;/li&gt;
&lt;li&gt;内置状态信息&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特性概述&#34;&gt;特性概述&lt;/h2&gt;
&lt;h3 id=&#34;连接保持连接关闭&#34;&gt;连接保持、连接关闭&lt;/h3&gt;
&lt;p&gt;​	http的事务模型，http协议是事务驱动型，每个request有且仅有个response，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;http-close模型：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	每个请求都要建立一次tcp连接，响应后随机关闭tcp连接，**一个tcp连接只能用于一次http请求和响应，这样会频繁的建立和释放tcp连接，消耗资源，**但仍有适用场景，后端是应用服务器的情况下，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;http-keep-alive&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	一个tcp连接用于多于http请求和响应的传输，server端通过响应头部的content-length字段告知客户端，还有多少数据没发完，直到数据发完后，才关闭连接，&lt;strong&gt;避免了频繁建立释放tcp连接的资源消耗&lt;/strong&gt;，适用后端是静态web服务器的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;haproxy支持的http连接模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep alive：适用后端是静态服务器&lt;/li&gt;
&lt;li&gt;server close：处理完一对请求和响应后，即关闭和后端服务器的tcp连接，适用后端是动态服务器&lt;/li&gt;
&lt;li&gt;tunnel：仅分析第一个请求和响应，后续内容不分析直接转发&lt;/li&gt;
&lt;li&gt;passive close&lt;/li&gt;
&lt;li&gt;forced close：传输完一对请求和响应后，关闭客户端和服务器的tcp连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;会话保持&#34;&gt;会话保持&lt;/h3&gt;
&lt;p&gt;​	作为反向代理软件，必须具备会话保持的功能，在选择某后端节点需要被调度时，不仅仅要考虑既定调度算法，也要考虑，请求与请求之间的相关性，即会话保持，&lt;strong&gt;举例：购物网站，添加购物车，刷新页面后，购物车信息不会丢失，是因为应用服务器将购物车等信息存储在了内存中，叫做上下文session，每次请求过来时都会找到对应的上下文，继续后续处理逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	静态web服务，是无状态的，每台服务器提供的服务都是完全一样，因此调度到不同的服务器上对结果并不会有什么影响；&lt;/p&gt;
&lt;p&gt;​	动态应用服务，是有状态的，其内存中会保存了客户端的会话信息，因此有关联的请求需要被调度后同一台动态应用服务器上，才能找到之前的会话信息，因此haproxy等代理软件在调度时，&lt;strong&gt;就必须考虑请求之间的相关性，将有关系的请求调度到同一台服务器上，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	会话共享：如果将多个应用服务器的会话，抽离出来防止一台会话服务器上，如redis，memcache，应用服务器本身不需要保存会话信息，需要会话信息时，直接到会话服务器上查找，此时应用服务器实现了状态的剥离，**成为了无状态应用，此时haproxy调度时，就不需要考虑请求之间的相关性，直接根据调度算法调度即可，**会话服务器本身需要高可用！&lt;/p&gt;
&lt;h4 id=&#34;haproxy会话保持方式&#34;&gt;haproxy会话保持方式&lt;/h4&gt;
&lt;p&gt;​	共有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源ip的hash：&lt;/li&gt;
&lt;li&gt;基于cookie&lt;/li&gt;
&lt;li&gt;基于stick table&lt;/li&gt;
&lt;li&gt;会话共享服务器（此时haproxy不需要实现会话保持了）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、&lt;strong&gt;源ip的hash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	同一个ip发来的请求会根据hash取模或一致性hash调度到同一台后端服务器，hash取模时，后端节点增减会导致算法结果的大幅度变化，造成大量请求的重新分配节点，所以一般采用一致性hash可以减少变化的节点数，&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;基于cookie&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;2类cookie，1、应用服务器产生的，用于程序逻辑的cookie，2、反代软件产生的，用于调度的cookie&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	在snat上网的情况下，一个源ip可能对应许多个私网ip的源ip，导致分布的不均衡，因为区分每个私网源ip的方法是采用cookie，哪怕是采用一个公网的源ip出口，但是每个客户端请求携带的cookie是不一样的，因此haproxy可以根据cookie进行调度，&lt;/p&gt;
&lt;p&gt;​	客户端和应用服务器中间隔了haproxy此类反代软件时，cookie分2类，一类是后端服务器添加的用于保存会话信息的cookie，一类是haproxy代理添加，用于保证同样客户端的请求被调度到相同的后端节点，cookie都会被添加到响应报文头部的set-cookie字段，set-cookie字段一般情况下可以有多个，如下为百度首页响应头的3个set-cookie字段！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200915171025325.png&#34; alt=&#34;image-20200915171025325&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	假设cli1第一次访问，根据调度算法，被调度到app server1上，app server1处理时会添加一些cookie信息到响应头，响应报文经由haproxy时，haproxy也会给响应头部加入一条，app=app1 ，app是可以自定义的cookie的名称，app1就是每个后端server的标识符，当cli1再次发请求时，携带了app=app1的信息，此时haproxy就知道上次该客户端是被app1处理的，然后会再次把它调度到app1上进行处理，自然，app1上也能找到cli1相关的会话信息，&lt;strong&gt;若此时app1 down掉，haproxy会将其调度到 app2上，haproxy设置的cooki会修改成app=app2，但此时cli1之前的会话就会丢失，除非各个app 之间设置了会话复制或、会话共享服务器、&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200915172120430.png&#34; alt=&#34;image-20200915172120430&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;基础stick table&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	haproxy的stick table，可以抽取客户端请求报文的信息，如源ip，请求头部的host，响应头部应用服务器添加的session作为key；后端服务器的标识id作为value，组成一条k-v数据，那么后续请求，分析出是相同key的请求都会查表，然后转发到相同的后端服务器上，实现了会话的保持；&lt;strong&gt;第一次响应头部，应用服务器设置的session，haproxy在转发给客户端前，可以把这个session抽离出来，作为key，应用服务器id作为value，客户再次请求时，带着应用服务器设置的session，haproxy根据此信息做key，查到对应的valus即之前的应用服务器id，再将请求转发给相同的后端服务器，实现了会话保持&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	stick table，占用内存较小，一条标准k-v数据占用大概50字节，且支持额外的统计信息，每加一项统计信息，占用内存自然就大些&lt;/p&gt;
&lt;p&gt;​	stick table，在haproxy的双主，多主架构时，多节点之间的复制效率极高，通过建立单独一条tcp连接实现复制，从而保证了haproxy上，会话信息的 高可用；&lt;/p&gt;
&lt;p&gt;​	stick table查看，可以通过socat工具，借助haproxy的管理socket可以查看&lt;/p&gt;
&lt;p&gt;4、&lt;strong&gt;基于cookie共享服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	此时后端节点状态外置，都成了无状态服务器，haproxy可以直接根据调度算法调度，&lt;strong&gt;前面三种：基于ip、基于haproxy设置的cookie，基于stick table实现的都是调度时的会话保持；保证了调度时能被调度到存有会话信息的同一台后端节点上，  cookie共享服务器实现的是会话信息的剥离于后端节点，在后端节点挂掉时，其他节点仍能读取会话信息继续提供服务，当然会话服务器要做高可用！此时haproxy调度时，无需考虑会话的保持调度了，也无需设置基于ip等调度算法了，因为每台节点都能读取会话信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200915180733526.png&#34; alt=&#34;image-20200915180733526&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;后端节点健康监测&#34;&gt;后端节点健康监测&lt;/h3&gt;
&lt;p&gt;​	haproxy作为反代服务，可以对后端节点做持续性的健康监测，动态的摘除，恢复后端节点；支持的监测方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcp四层监测，默认方法，探测的是tcp连接联通性&lt;/li&gt;
&lt;li&gt;http ，可以基于状态码，响应头，响应体内容判断健康状态&lt;/li&gt;
&lt;li&gt;ladp&lt;/li&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;pgsql&lt;/li&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;li&gt;spop&lt;/li&gt;
&lt;li&gt;smtp&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加工请求和响应报文&#34;&gt;加工请求和响应报文&lt;/h3&gt;
&lt;p&gt;​	nginx作为反代时，可以对客户端请求报文，和后端节点响应报文做一定修改，haproxy同样支持，如：添加真实客户端ip在给后端的请求报文中，删除后端服务器版本信息在给客户端的响应报文中，等...&lt;/p&gt;
&lt;p&gt;​	在2 和 4 步可以，对报文头部进行修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200915184746777.png&#34; alt=&#34;image-20200915184746777&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;状态查看&#34;&gt;状态查看&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;haproxy支持查看自身和后端节点的状态信息，通过启用管理用socket接口，socat包中命令可以实现调用该socket查看状态信息；
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	1、启用配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;global 
	log 127.0.0.1 local2
	chroot /var/lib/haproxy
	pidfile /var/run/haproxy.pid
	maxconn 20000
	user haproxy
	group haproxy
	daemon 
	
	stats socket /var/lib/haproxy/stats
	# 启用管理用socket
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	2、安装socat包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y socat
# epel 源

[root@host2 ~]# echo &amp;quot;help&amp;quot; | socat stdio /var/lib/haproxy/stats 
Unknown command. Please enter one of the following commands only :
  help           : this message
  prompt         : toggle interactive mode with prompt
  quit           : disconnect
  disable agent  : disable agent checks (use &#39;set server&#39; instead)
  disable health : disable health checks (use &#39;set server&#39; instead)
  disable server : disable a server for maintenance (use &#39;set server&#39; instead)
# 查看帮助

[root@host2 ~]# echo &amp;quot;show info&amp;quot; | socat stdio /var/lib/haproxy/stats 
Name: HAProxy
Version: 1.7.12
Release_date: 2019/10/25
Nbproc: 1
Process_num: 1
# 查看信息

[root@host2 ~]# echo &amp;quot;show backend&amp;quot; | socat stdio /var/lib/haproxy/stats 
# name
static
app
# 查看所有后端
# 此外，还可以动态上下线某后端节点、调整权重、设置acl等
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;acl&#34;&gt;acl&lt;/h3&gt;
&lt;p&gt;​	haproxy支持acl，访问控制列表，access controll list，基于acl可以对请求流量分组，如根据请求的uri的特征，进行正则匹配，分为动、静，从而转发给不同的后端节点组&lt;/p&gt;
&lt;h3 id=&#34;连接重用&#34;&gt;连接重用&lt;/h3&gt;
&lt;p&gt;​	haproxy在转发客户端请求时，选择调度到某个后端节点，之后haproxy会和该后端节点建立连接，该连接在完成一次请求和响应的传输后，如没有后续请求和响应，而该连接又不释放的情况下，空闲的tcp连接无疑是浪费，因此haproxy引入了连接重用，使得别的客户端的请求可以使用该空闲tcp连接进行传输&lt;/p&gt;
&lt;p&gt;​	http-reuse strategy_name指令可以设置连接重用的策略，默认策略为禁用连接重用&lt;/p&gt;
&lt;p&gt;​	strategy_name有4个值；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;never，默认，表示禁用连接重用，来源不同的请求不会共享同一个后端连接；&lt;/li&gt;
&lt;li&gt;safe，为客户端的第一个请求建立一个tcp连接，然后后续的请求会重用和后端节点空闲的tcp连接，&lt;/li&gt;
&lt;li&gt;aggressive，重用空闲tcp连接转发大多数客户端第一次请求&lt;/li&gt;
&lt;li&gt;always，总是为第一个请求重用空闲连接，&lt;/li&gt;
&lt;li&gt;建议：safe，搭配http-keep-alive的事务模型&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/haproxy/" term="haproxy" label="haproxy" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">keepalived通过vvrp脚本实现haproxy的高可用</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/keepalived%E9%80%9A%E8%BF%87vvrp%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0haproxy%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8/" />
            <id>https://latteStudio.github.io/posts/keepalived%E9%80%9A%E8%BF%87vvrp%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0haproxy%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8/</id>
            <updated>2020-10-21T16:21:11&#43;08:00</updated>
            <published>2020-10-20T17:50:18&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">keepalived通过vvrp脚本实现haproxy的高可用</summary>
            
                <content type="html">&lt;h1 id=&#34;vvrp_scripts介绍&#34;&gt;vvrp_scripts介绍&lt;/h1&gt;
&lt;p&gt;​	keepalived原生支持lvs的高可用，通过对lvs服务的监测结果的分析，实现vip的漂移与否，检测结果正常则vip保持，检测结果异常则进行vip的漂移，从而保持vip的高可用；&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;针对非lvs服务，如haproxy，nginx，也可以通过vvrp_scripts结合自定义检测脚本实现haproxy或nginx服务的持续监测，并根据监测结果，选择重启服务尝试、优先级调整、或vip漂移等操作；&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;执行逻辑&#34;&gt;执行逻辑&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;先自定义服务的监测脚本，如&lt;code&gt;killall -0 haproxy&lt;/code&gt; 探测haproxy服务的正常运行与否；&lt;/li&gt;
&lt;li&gt;在vvrp_script 配置段引用，上步定义的脚本，（也可以将监测命令写在这里，命令较短时）&lt;/li&gt;
&lt;li&gt;在在track_script 配置段，引用vvrp_script的命令，进而引用了探测脚本&lt;/li&gt;
&lt;li&gt;根据探测脚本的返回值，0或非0，可以做如下操作：
&lt;ol&gt;
&lt;li&gt;尝试重启服务，（可以定义在监测脚本中）&lt;/li&gt;
&lt;li&gt;vip漂移，（尝试重启服务一定次数，仍失败，可以停止keepalived，让vip漂移）&lt;/li&gt;
&lt;li&gt;优先级调整，（在vvrp_script中定义，可以减少优先级，进而达到vip漂移）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;
&lt;p&gt;1、自定义监控脚本&lt;/p&gt;
&lt;p&gt;2、定义vvrp_script，其中引用自定义监控脚本&lt;/p&gt;
&lt;p&gt;3、在需要监控的vvrp_instance中，引用定义的vvrp_script即可；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 定义vvrp_script，其中引用自定义监控脚本
# 此处，没有单独定义脚本，再引用，而是将脚本直接放在其中，监测脚本为一条命令，判断haproxy进程是否存在且正常
vvrp_script chk_haproxy {
        script &amp;quot;killall -0 haproxy&amp;quot;

		interval 2
        weight -30
        rise 2
        fall 2
# 每2s用定义的脚本探测一下，连续失败2次为失败，失败时，权重减少30，状态转为backup；
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.200/24 dev eth0 label eth0:1
    }


        notify_master &amp;quot;/etc/keepalived/notify.sh master&amp;quot;
        notify_backup &amp;quot;/etc/keepalived/notify.sh backup&amp;quot;
        notify_fault &amp;quot;/etc/keepalived/notify.sh fault&amp;quot;



track_script {
        chk_haproxy
}
# 在vvrp实例中引用，vvrp_script，

}

     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;脚本方式，当haproxy进程异常时，尝试重启，2次重启失败，就停止keepalived，使得vip进行漂移；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat /etc/keepalived/haproxy.sh 
#!/bin/bash

if ! killall -0 haproxy &amp;amp;&amp;gt;/dev/null;then
    serivce haproxy restart
    sleep 1
    if ! killall -0 haproxy &amp;amp;&amp;gt;/dev/null;then
        service keepalived stop
    fi
fi

vvrp_script chk_haproxy {
        script &amp;quot;/etc/keepalived/haproxy.sh&amp;quot;
        interval 2
        weight -30

}

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/keepalived/" term="keepalived" label="keepalived" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/haproxy/" term="haproxy" label="haproxy" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">keepalived配置实现lvs高可用</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/keepalived%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0lvs%E9%AB%98%E5%8F%AF%E7%94%A8/" />
            <id>https://latteStudio.github.io/posts/keepalived%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0lvs%E9%AB%98%E5%8F%AF%E7%94%A8/</id>
            <updated>2020-10-20T17:35:44&#43;08:00</updated>
            <published>2020-10-20T15:48:54&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">keepalived配置实现lvs高可用</summary>
            
                <content type="html">&lt;h1 id=&#34;keepalived配置lvs单实例&#34;&gt;keepalived配置lvs单实例&lt;/h1&gt;
&lt;h2 id=&#34;拓扑图&#34;&gt;拓扑图&lt;/h2&gt;
&lt;h2 id=&#34;实现lvs的dr网络拓扑&#34;&gt;实现lvs的dr网络拓扑&lt;/h2&gt;
&lt;p&gt;详见lvs dr模型配置...如下给出各个角色需要配置的步骤&lt;/p&gt;
&lt;p&gt;1、router&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启ip_forward&lt;/li&gt;
&lt;li&gt;有连接2个网段的路由&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、lvs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动配置出口路由&lt;/li&gt;
&lt;li&gt;ipvs规则，vip设置，都由keepalived配置文件来配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、2个rs上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置vip&lt;/li&gt;
&lt;li&gt;配置arp2个内核参数&lt;/li&gt;
&lt;li&gt;配置出口路由&lt;/li&gt;
&lt;li&gt;准备httpd页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、客户端&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认路由指向router一端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置keepalived实现ipvs规则&#34;&gt;配置keepalived实现ipvs规则&lt;/h2&gt;
&lt;p&gt;1、配置keepalived.conf如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# cat /etc/keepalived/keepalived.conf 
! Configuration File for keepalived

global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id lvs1
}
# 定义了报警邮件相关

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.200/32 dev eth0 label eth0:1
#        192.168.80.200/32 dev lo label lo:1

    }
}
# 定义了vvrp的一个实例， 以及一个vip，此vip会配置到eth0的别名接口eth0:1上，定义在lo接口vip不生效


virtual_server 192.168.80.200 80 {
    delay_loop 6
    lb_algo rr
    lb_kind DR
#    persistence_timeout 50
    protocol TCP

    real_server 192.168.80.102 80 {
        weight 1
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
    }
    real_server 192.168.80.103 80 {
        weight 1
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
}
}
# 在vip基础上，在80端口定义了一个集群服务，后端有个rs，对rs定义了tcpcheck监测

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、重启，查看是否生成了ipvs规则和，vip，&lt;/p&gt;
&lt;p&gt;lvs上dr模型时，出口路由仍需要手动配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# service  keepalived restart

[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 rr
  -&amp;gt; 192.168.80.102:80            Route   1      0          1         
  -&amp;gt; 192.168.80.103:80            Route   1      0          0      
  
  
[root@lvs ~]# ifconfig  -a
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.104  netmask 255.255.255.0  broadcast 192.168.80.255
        inet6 fe80::6247:1fa9:b7d7:84b9  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::4ce0:11e4:5740:290c  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::eb02:a6b5:be84:952  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 00:0c:29:55:b3:ea  txqueuelen 1000  (Ethernet)
        RX packets 8295  bytes 692665 (676.4 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 20337  bytes 1644898 (1.5 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth0:1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.200  netmask 255.255.255.255  broadcast 0.0.0.0
        ether 00:0c:29:55:b3:ea  txqueuelen 1000  (Ethernet)
# 可以看到，vs规则和vip都已经生效
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端访问测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# curl 192.168.80.200
rs2:192.168.80.103
[root@client ~]# curl 192.168.80.200
rs1:192.168.80.102
[root@client ~]# curl 192.168.80.200
rs2:192.168.80.103
[root@client ~]# curl 192.168.80.200
rs1:192.168.80.102
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;keepalived配置lvs高可用&#34;&gt;keepalived配置lvs高可用&lt;/h1&gt;
&lt;p&gt;​	再增加一台节点，yum安装keepalived，实现2个keepalived+lvs节点的高可用，centos7上keepalived默认版本是1.3.5，另外一台为编译安装的1.2.9，实验时配置上是兼容的，vvrp通信也正常，&lt;strong&gt;实际中，最好是完全一致版本！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	vip一定要配置在某个实际接口的别名接口上，如果vip配置在一个单独的接口上，该机器会始终获得vip，直到停机&lt;/p&gt;
&lt;h2 id=&#34;拓扑图-1&#34;&gt;拓扑图&lt;/h2&gt;
&lt;p&gt;​	同lvs的dr模型实验部分&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;配置&lt;/h2&gt;
&lt;p&gt;1、增加一台keepalived+lvs主机&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host6 ~]# yum install -y keepalived
[root@host6 ~]# yum install -y ipvsadm
[root@host6 ~]# cp /etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf.bak
# yum直接安装keepalived，和ipvsadm工具，将默认配置文件备份

[root@lvs ~]# scp /etc/keepalived/keepalived.conf 192.168.80.105:/etc/keepalived/
# 从上步的lvs+keepalived主机上，将配置好的keepalived配置文件复制到新的keepalived+lvs主机

[root@host6 ~]# vim /etc/keepalived/keepalived.conf
[root@host6 ~]# cat /etc/keepalived/keepalived.conf
# 编辑配置文件，做一定修改
! Configuration File for keepalived

global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id lvs2 # router_id要改成唯一的
}

vrrp_instance VI_1 { # vvrp实例名要一致，保持不变
    state BACKUP # 状态是backup
    interface eth0 
    virtual_router_id 51 # vrouter id同属于一个vrouter下的要一致
    priority 80 # 由于是backup角色，优先级调整为80，为另外一台100要低，如果是120，即便写了是backup角色，实际中仍会成为主
    
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    } # 认证密码要一致
    
# vip，vip之上某个端口的集群，集群下的rs都要保持一致，不用改变
    virtual_ipaddress {
        192.168.80.200/32 dev eth0 label eth0:1
#        192.168.80.200/32 dev lo label lo:1

    }
}

virtual_server 192.168.80.200 80 {
    delay_loop 6
    lb_algo rr
    lb_kind DR
#    persistence_timeout 50
    protocol TCP
.........
}



# 手动配置网关路由，否则切换到备节点时，因为没有回程路由，而导致无法访问
[root@host6 ~]# route add default gw 192.168.80.101
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、启动keepalived主机，启动后，ipvs规则自动生成，只是此时没有vip，所以不生效，同时2台节点会进行不断监测通信，以便主节点故障时，及时切换&lt;/p&gt;
&lt;p&gt;3、高可用测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;停止主keepalived节点
[root@lvs ~]# service keepalived stop

# 备节点日志，显示提升为主节点
Sep 11 14:09:55 host6 systemd: Reloading.
Sep 11 14:09:55 host6 yum[1181]: Installed: ipvsadm-1.27-8.el7.x86_64
Sep 11 14:11:36 host6 Keepalived_vrrp[1148]: VRRP_Instance(VI_1) Transition to MASTER STATE
Sep 11 14:11:37 host6 Keepalived_vrrp[1148]: VRRP_Instance(VI_1) Entering MASTER STATE
Sep 11 14:11:37 host6 Keepalived_vrrp[1148]: VRRP_Instance(VI_1) setting protocol VIPs.
Sep 11 14:11:37 host6 Keepalived_vrrp[1148]: Sending gratuitous ARP on eth0 for 192.168.80.200
Sep 11 14:11:37 host6 Keepalived_vrrp[1148]: VRRP_Instance(VI_1) Sending/queueing gratuitous ARPs on eth0 for 192.168.80.200

# 主节点日志显示，自己取掉了ip
Sep 11 14:11:36 lvs Keepalived[6251]: Stopping Keepalived v1.2.19 (09/10,2020)
Sep 11 14:11:36 lvs Keepalived_healthcheckers[6253]: Removing service [192.168.80.102]:80 from VS [192.168.80.200]:80
Sep 11 14:11:36 lvs Keepalived_healthcheckers[6253]: Removing service [192.168.80.103]:80 from VS [192.168.80.200]:80
Sep 11 14:11:36 lvs Keepalived_vrrp[6254]: VRRP_Instance(VI_1) sending 0 priority
Sep 11 14:11:36 lvs Keepalived_vrrp[6254]: VRRP_Instance(VI_1) removing protocol VIPs.


Sep 11 14:13:49 host6 Keepalived_vrrp[1148]: VRRP_Instance(VI_1) Received advert with higher priority 100, ours 80
Sep 11 14:13:49 host6 Keepalived_vrrp[1148]: VRRP_Instance(VI_1) Entering BACKUP STATE
Sep 11 14:13:49 host6 Keepalived_vrrp[1148]: VRRP_Instance(VI_1) removing protocol VIPs.


# 此时看备节点host6，规则在，又拿到了vip，客户端仍然可以访问，且切换速度极快
[root@host6 ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 rr
  -&amp;gt; 192.168.80.102:80            Route   1      0          0         
  -&amp;gt; 192.168.80.103:80            Route   1      0          0         
[root@host6 ~]# ifconfig  -a
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.105  netmask 255.255.255.0  broadcast 192.168.80.255
        inet6 fe80::6247:1fa9:b7d7:84b9  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::4ce0:11e4:5740:290c  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::eb02:a6b5:be84:952  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)
        RX packets 15842  bytes 11187512 (10.6 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 10949  bytes 2750770 (2.6 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth0:1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.200  netmask 255.255.255.255  broadcast 0.0.0.0
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、后端节点监测测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 客户端循环访问
# 然后再103上停止httpd服务
# 可以看到，无论此时角色是主，还是备，ipvs规则中，都会把103节点拿掉！
# 所以可以看出备节点，也会不断的监测后端节点状态


[root@host6 ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 rr
  -&amp;gt; 192.168.80.102:80            Route   1      0          0  
  

  [root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 rr
  -&amp;gt; 192.168.80.102:80            Route   1      0          57  
  
  
# 客户端访问，会有一刻中断，然后只被调度到现有正常的节点！
rs2:192.168.80.103
rs1:192.168.80.102
rs2:192.168.80.103
rs1:192.168.80.102
curl: (7) Failed connect to 192.168.80.200:80; Connection refused
rs1:192.168.80.102
rs1:192.168.80.102
rs1:192.168.80.102
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;keepalived配置lvs双主高可用&#34;&gt;keepalived配置lvs双主高可用&lt;/h1&gt;
&lt;p&gt;​	在keepalived.conf中，每个vvrp_instance配置段都可以配置vip，vvrp_instance配置段有多个，可以用2台keepalived节点，各配置2个vvrp_instance，组成2个vrouter ，分别做对方的主备，即互为主备！&lt;/p&gt;
&lt;h2 id=&#34;拓扑图-2&#34;&gt;拓扑图&lt;/h2&gt;
&lt;h2 id=&#34;配置过程&#34;&gt;配置过程&lt;/h2&gt;
&lt;p&gt;1、在上步实现了单个vip高可用的基础上，增加一个vvrp实例的配置，如下：&lt;/p&gt;
&lt;p&gt;lvs1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# cat !$
cat /etc/keepalived/keepalived.conf
! Configuration File for keepalived

global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id lvs1
}

# 原因80.200的vip配置不变
vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.200/32 dev eth0 label eth0:1
#        192.168.80.200/32 dev lo label lo:1

    }
}

# 增加一个vvrp_instance做80.210 vip的配置，
# 状态是backup，优先级80
# router id改成非51的整数，
# vip为80.210，配置在eth0的第二个别名接口

vrrp_instance VI_2 {
    state BACKUP
    interface eth0
    virtual_router_id 59
    priority 80
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.210/32 dev eth0 label eth0:2


    }
}
virtual_server 192.168.80.200 80 {
    delay_loop 6
    lb_algo rr
    lb_kind DR
#    persistence_timeout 50
    protocol TCP

    real_server 192.168.80.102 80 {
        weight 1
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
    }
    real_server 192.168.80.103 80 {
        weight 1
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
}
}
# 为80.210的vip配置2个后端rs节点，
# 因机器受限，其实是用相同的机器，在8080端口启用了nginx

virtual_server 192.168.80.210 8080 {
    delay_loop 6
    lb_algo rr
    lb_kind DR
#    persistence_timeout 50
    protocol TCP

    real_server 192.168.80.102 8080 {
        weight 1
	TCP_CHECK {

 		connect_port 8080
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
    }
    real_server 192.168.80.103 8080 {
        weight 1
	TCP_CHECK {

 		connect_port 8080
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
}
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;lvs2：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host6 ~]# cat !$
cat /etc/keepalived/keepalived.conf
! Configuration File for keepalived

global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id lvs2
}

vrrp_instance VI_1 {
    state BACKUP
    interface eth0
    virtual_router_id 51
    priority 80
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.200/32 dev eth0 label eth0:1
#        192.168.80.200/32 dev lo label lo:1

    }
}

# 第二个vvrp instance，状态是主，优先级100
# routerid 59，
# vip80.210，配置在eth0的第二个别名接口

vrrp_instance VI_2 {
    state MASTER
    interface eth0
    virtual_router_id 59
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.210/32 dev eth0 label eth0:2


    }
}


virtual_server 192.168.80.200 80 {
    delay_loop 6
    lb_algo rr
    lb_kind DR
#    persistence_timeout 50
    protocol TCP

    real_server 192.168.80.102 80 {
        weight 1
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
    }
    real_server 192.168.80.103 80 {
        weight 1
	TCP_CHECK {

 		connect_port 80
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

	}
}
}


virtual_server 192.168.80.210 8080 {
    delay_loop 6
    lb_algo rr
    lb_kind DR
#    persistence_timeout 50
    protocol TCP

    real_server 192.168.80.102 8080 {
        weight 1
        TCP_CHECK {

                connect_port 8080
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

        }
    }
    real_server 192.168.80.103 8080 {
        weight 1
        TCP_CHECK {

                connect_port 8080
            delay_before_retry 3
            nb_get_retry 3
            connect_timeout 3

        }
}
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、在相同的2个rs节点上，安装nginx，监听在8080端口，当作另外一个集群&lt;/p&gt;
&lt;p&gt;​	略&lt;/p&gt;
&lt;p&gt;3、rs上配置第二个vip，在lo的第二个别名接口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rs1 yum.repos.d]# ip add add 192.168.80.210 dev lo:2

[root@rs2 yum.repos.d]# ip addr add 192.168.80.210 dev lo:2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、双主的keepalived高可用测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 根据配置，2个keepalived节点都正常时，
# host6 有vip 80.210
# lvs 有vip 80.200

[root@host6 ~]# ifconfig -a
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.105  netmask 255.255.255.0  broadcast 192.168.80.255
        inet6 fe80::6247:1fa9:b7d7:84b9  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::4ce0:11e4:5740:290c  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::eb02:a6b5:be84:952  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)
        RX packets 33474  bytes 12524160 (11.9 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 36616  bytes 4650803 (4.4 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth0:2: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.210  netmask 255.255.255.255  broadcast 0.0.0.0
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)


[root@lvs ~]# ifconfig -a
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.104  netmask 255.255.255.0  broadcast 192.168.80.255
        inet6 fe80::6247:1fa9:b7d7:84b9  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::4ce0:11e4:5740:290c  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::eb02:a6b5:be84:952  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 00:0c:29:55:b3:ea  txqueuelen 1000  (Ethernet)
        RX packets 33658  bytes 2646960 (2.5 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 55176  bytes 4310822 (4.1 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth0:1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.200  netmask 255.255.255.255  broadcast 0.0.0.0
        ether 00:0c:29:55:b3:ea  txqueuelen 1000  (Ethernet)


# 其中一个keepalived关闭，vip就会飘动到另外的节点
# 保证，2个vip的高可用
# 停止lvs上keepalived时，2个vip都跑到了host6上，反之亦然
[root@host6 ~]# ifconfig -a
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.105  netmask 255.255.255.0  broadcast 192.168.80.255
        inet6 fe80::6247:1fa9:b7d7:84b9  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::4ce0:11e4:5740:290c  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        inet6 fe80::eb02:a6b5:be84:952  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)
        RX packets 33791  bytes 12545382 (11.9 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 37124  bytes 4686905 (4.4 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth0:1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.200  netmask 255.255.255.255  broadcast 0.0.0.0
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)

eth0:2: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 192.168.80.210  netmask 255.255.255.255  broadcast 0.0.0.0
        ether 00:0c:29:a5:67:42  txqueuelen 1000  (Ethernet)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、访问测试&lt;/p&gt;
&lt;p&gt;​	2个keepalived节点实现了2个vip的高可用，只要有一台keepalived节点存活，都会把另外一台的节点上的vip接管过来，客户端对这2个vip的访问就不会受影响！同理可以增加vip提供更多服务；可以增加keepalived节点进一步增强高可用性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# while true; do curl 192.168.80.210:8080;sleep 1; done
rs2:nginx
rs1:nginx
rs2:nginx
rs1:nginx
rs2:nginx
^C
[root@client ~]# while true; do curl 192.168.80.200;sleep 1; done
rs1:192.168.80.102
rs2:192.168.80.103
rs1:192.168.80.102
rs2:192.168.80.103
^C
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;遇到的问题&#34;&gt;遇到的问题&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;忘记，在2个rs上，配置第2个vip了！没法用vip封装回程报文，所以客户端一直不通！！！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;sorry-server和local-rs&#34;&gt;sorry server和local rs&lt;/h1&gt;
&lt;h2 id=&#34;sorry-server&#34;&gt;sorry server&lt;/h2&gt;
&lt;p&gt;​	当后端节点都挂掉时，需要准备一个sorry server，用于向用户响应报错页面；&lt;/p&gt;
&lt;p&gt;1、在某个vip的集群服务中，配置sorry server指令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;virtual_server 192.168.80.200 80 {
    delay_loop 6
    lb_algo rr
    lb_kind DR
#    persistence_timeout 50
    protocol TCP
         
        sorry_server 127.0.0.1 80
        # 可以指向一个专门的server，一般是keepalived自己
    real_server 192.168.80.102 80 {
        weight 1
        TCP_CHECK {
             
                connect_port 80
            delay_before_retry 3
            nb_get_retry 3 
            connect_timeout 3
    
        }
    }
...
systemctl restart keepalived
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、准备sorry server&lt;/p&gt;
&lt;p&gt;​	如果是高可用的情况下，每个keepalived节点都要准备sorry server，当前是主状态的keepalived上的sorry server生效，&lt;/p&gt;
&lt;p&gt;如果是单独的sorry server，那么所有keepalived都指向它即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y httpd
echo sorry-server &amp;gt; /var/www/html/index.html
systemctl start httpd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、访问测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# while true; do curl 192.168.80.200;sleep 1; done
rs1:192.168.80.102
rs2:192.168.80.103
rs1:192.168.80.102
rs2:192.168.80.103
rs1:192.168.80.102
rs2:192.168.80.103
curl: (7) Failed connect to 192.168.80.200:80; Connection refused
curl: (7) Failed connect to 192.168.80.200:80; Connection refused
curl: (7) Failed connect to 192.168.80.200:80; Connection refused
curl: (7) Failed connect to 192.168.80.200:80; Connection refused
sorry server
sorry server
sorry server
有一定延迟...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;local-rs&#34;&gt;local rs&lt;/h2&gt;
&lt;p&gt;在lvs服务器负载不大时，其自身也可以部署web server作为rs的一员，将自己的地址，也配置为real server即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;real_server 127.0.0.1 80 {
        weight 1
        TCP_CHECK {
                connect_port 80
                connect_timeout 1
                nb_get_retry 2
                delay_before_retry 1
        }
}
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/keepalived/" term="keepalived" label="keepalived" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs/" term="lvs" label="lvs" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">keepalived配置文件介绍与示例</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/keepalived%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%A4%BA%E4%BE%8B/" />
            <id>https://latteStudio.github.io/posts/keepalived%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E7%A4%BA%E4%BE%8B/</id>
            <updated>2020-10-21T15:25:21&#43;08:00</updated>
            <published>2020-10-20T15:48:44&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">keepalived配置文件介绍与示例</summary>
            
                <content type="html">&lt;h1 id=&#34;配置文件示例&#34;&gt;配置文件示例&lt;/h1&gt;
&lt;p&gt;把默认路径的配置文件，和编译安装目录下的模板配置文件，都删除了，keepalived仍然能正常启停，那编译安装的keepalived启动时读取的哪个配置文件？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived]# cat /etc/sysconfig/keepalived 
...

KEEPALIVED_OPTIONS=&amp;quot;-D -f /usr/local/keepalived/etc/keepalived/keepalived.conf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived]# service keepalived start
Starting keepalived (via systemctl):                       [  OK  ]
[root@lvs keepalived]# service keepalived status
● keepalived.service - SYSV: Start and stop Keepalived
   Loaded: loaded (/etc/rc.d/init.d/keepalived; bad; vendor preset: disabled)
   Active: active (running) since Thu 2020-09-10 17:51:54 CST; 5s ago
     Docs: man:systemd-sysv-generator(8)
  Process: 3746 ExecStart=/etc/rc.d/init.d/keepalived start (code=exited, status=0/SUCCESS)
 Main PID: 3753 (keepalived)
   CGroup: /system.slice/keepalived.service
           ├─3753 /usr/local/keepalived/sbin/keepalived -D
           ├─3755 /usr/local/keepalived/sbin/keepalived -D
           └─3756 /usr/local/keepalived/sbin/keepalived -D

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;自定义日志路径&#34;&gt;自定义日志路径&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;
[root@lvs keepalived]# mkdir /usr/local/keepalived/log
[root@lvs keepalived]# vim /etc/sysconfig/keepalived 
# --log-detail         -D    Detailed log messages.
# --log-facility       -S    0-7 Set local syslog facility (default=LOG_DAEMON)
#
KEEPALIVED_OPTIONS=&amp;quot;-D -S 0&amp;quot;
# 加上 -S 0选项，表示用本地的local0设置记录日志

[root@lvs keepalived]# vim /etc/rsyslog.conf
# Save boot messages also to boot.log
local7.*                                                /var/log/boot.log
local0.*                                                /usr/local/keepalived/log/keepalived.log
# 在local7下，加入一行local0相关，表示将local0设备日志记录到文件/usr/local/keepalived/log/keepalived.log


# 重启rsyslog服务，再重启keepalived，发现对应日志已经记录在单独日志里了
[root@lvs keepalived]# systemctl restart rsyslog
[root@lvs keepalived]# service keepalived restart


[root@lvs ~]# ll  /usr/local/keepalived/log/keepalived.log 
-rw------- 1 root root 3981 Sep 10 18:15 /usr/local/keepalived/log/keepalived.log


# 此时系统日志仍然会记录一份！
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;​	排除之前手动配置ipvs规则，或利用ldirectd服务加载配置文件，和ipvsadm服务加载规则文件的干扰&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived]# ll /etc/sysconfig/ipvsadm
-rw-r--r-- 1 root root 0 Sep 10 17:39 /etc/sysconfig/ipvsadm
[root@lvs keepalived]# ll /etc/ha.d/ldirectord.cf 
-rw-r--r-- 1 root root 8232 Sep 10 15:31 /etc/ha.d/ldirectord.cf

# 这2个文件如果存在，且有规则配置，不必清理，将对应的服务停止，开机不启动，清理现有ipvs规则即可

[root@lvs keepalived]# systemctl stop ipvsadm
[root@lvs keepalived]# systemctl disable ipvsadm
Removed symlink /etc/systemd/system/multi-user.target.wants/ipvsadm.service.

[root@lvs keepalived]# systemctl stop ldirectord
[root@lvs keepalived]# systemctl disable ldirectord

[root@lvs keepalived]# ipvsadm -C
[root@lvs keepalived]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看帮助&#34;&gt;查看帮助&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived]# man keepalived.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置文件示例-1&#34;&gt;配置文件示例&lt;/h3&gt;
&lt;p&gt;​	下面是自带的一个示例配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /etc/keepalived/keepalived.conf
! Configuration File for keepalived

# 全局配置段，报警邮件相关
global_defs {
   notification_email {
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   }
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 192.168.200.1 # 邮件服务器
   smtp_connect_timeout 30 # 邮件服务器连接超时时长
   router_id LVS_DEVEL # keepalived服务器的标识，各个keepalived服务器唯一！
   

}

# vvrp协议配置段
# 一个虚拟路由器，是由一主，多备共同组成的高可用虚拟路由器，每个节点上的keepalived都是一个vvrp实例，
# 下面的vvrp实例定义了；
# 我这个实例是主角色
# vvrp协议通信端口是eth0
# 我所在的vrouter id是51，vrouter是51的其他实例和我共同组成了一个vrouter
# 我竞争主角色时优先级是100，优先级大于state定义，比如我定义成主，但是别人优先级是120，那我也只能当从
# 通信广播间隔1s
# 成员认证密码是1111
# 定义了3个虚拟ip

vrrp_instance VI_1 {
    state MASTER # 表示节点是主，
    interface eth0 
    virtual_router_id 51 # 虚拟路由器的id，一个虚拟路由器下的多个keepalived实例需要配置同一个router id
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.200.16
        192.168.200.17
        192.168.200.18
    }
    
    track_interface{ # 配置用来检测的接口，其中定义的接口，如eth1 down掉，则keepalived转为fault状态；
    eth0
    eth1
    eth...
   }
}


# 虚拟服务配置段，相当于ipvsadm配置的 -A vip:port 这部分
# 定义了vip和服务端口
# rs健康检测间隔6s
# rs调度算法 rr
# ipvs工作模型是nat
# vip掩码 24位
# 启用会话保持 50s，
# 大致相当于ipvsadm -A -t 192.168.200.100:443 -m -s rr -p 50
virtual_server 192.168.200.100 443 {
    delay_loop 6
    lb_algo rr
    lb_kind NAT
    nat_mask 255.255.255.0
    persistence_timeout 50
    protocol TCP
   
# vs背后定义了一个rs服务器
# 定义ip和端口
# 权重1
# 健康监测用https流量的get方法，
# 定义了2个监测页面
# 判断方法用页面的hash值和digest对比，看是否一致，也可以用status_code
# 大致相当 ipvsadm -a -t 192.168.200.100:443 -r 192.168.201.100:443 -w 1
# 连接超时3s
# 连续3次失败，认为该rs不可用
# 每次检查失败3s后再重试，即不考虑超时，9s后才能得知一个rs不可用
    real_server 192.168.201.100 443 {
        weight 1
        SSL_GET {
            url {
              path /
              digest ff20ad2481f97b1754ef3e12ecd3a9cc
            }
            url {
              path /mrtg/
              digest 9b3a0c85a887a256d6939da88aabd8cd
            }
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
        }
    }
}

# 又在10.10.10.2的1358上，定义了一个ipvs集群服务
# 后端有2个rs
# 采用http流量的get检查健康性
# 定义了个sorry server 192.168.200.200 1358
virtual_server 10.10.10.2 1358 {
    delay_loop 6
    lb_algo rr 
    lb_kind NAT
    persistence_timeout 50
    protocol TCP

    sorry_server 192.168.200.200 1358

    real_server 192.168.200.2 1358 {
        weight 1
        HTTP_GET {
            url { 
              path /testurl/test.jsp
              digest 640205b7b0fc66c1ea91c463fac6334d
            }
            url { 
              path /testurl2/test.jsp
              digest 640205b7b0fc66c1ea91c463fac6334d
            }
            url { 
              path /testurl3/test.jsp
              digest 640205b7b0fc66c1ea91c463fac6334d
            }
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
        }
    }

    real_server 192.168.200.3 1358 {
        weight 1
        HTTP_GET {
            url { 
              path /testurl/test.jsp
              digest 640205b7b0fc66c1ea91c463fac6334c
            }
            url { 
              path /testurl2/test.jsp
              digest 640205b7b0fc66c1ea91c463fac6334c
            }
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;keepalived状态变化通知脚本&#34;&gt;keepalived状态变化通知脚本&lt;/h2&gt;
&lt;p&gt;​	keepalived支持配置，调用自定义的状态变化通知脚本，&lt;strong&gt;当keepalived的状态变化时，会触发响应脚本的执行，一般为发送通知邮件操作，变化一般有3个状态，变为主、变为从、变为宕机；&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 在vvrp_instance配置段中定义

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.200.16
        192.168.200.17
        192.168.200.18
    }
    
    notify_master &amp;quot;/etc/keepalived/notify.sh master&amp;quot;
    notify_backup &amp;quot;/etc/keepalived/notify.sh backup&amp;quot;
    notify_fault &amp;quot;/etc/keepalived/notify.sh fault&amp;quot;
}

# 实验示例，在vvrp实例配置段，添加下面3行；
vrrp_instance VI_1 {
    state BACKUP
    interface eth0
    virtual_router_id 51
    priority 80
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.80.200/24 dev eth0 label eth0:1
    }



        notify_master &amp;quot;/etc/keepalived/notify.sh master&amp;quot;
        notify_backup &amp;quot;/etc/keepalived/notify.sh backup&amp;quot;
        notify_fault &amp;quot;/etc/keepalived/notify.sh fault&amp;quot;
}

# 创建脚本如下，一般为发送通知邮件，此处改为创建文件
[root@host2 ~]# cat /etc/keepalived/notify.sh 
#!/bin/bash

notify () {
	touch /tmp/$1
	

}

case $1 in 
	master)
 		notify master
		;;
	backup)
		notify backup
		;;
	fault)
		notify fault
		;;
	*)
		echo &amp;quot;usage: $(basename $0) (master|backup|fault)&amp;quot;
		exit 1
		;;
	esac
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rs节点状态变化通知脚本&#34;&gt;rs节点状态变化通知脚本&lt;/h2&gt;
&lt;p&gt;​	在各个rs节点的配置段内部，可以定义rs状态变化的通知脚本，&lt;/p&gt;
&lt;p&gt;​	详细，参见：https://keepalived.org/manpage.html&lt;/p&gt;
&lt;h3 id=&#34;示例-1&#34;&gt;示例&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 在rs配置段内部定义
real_server &amp;lt;IPADDR&amp;gt; &amp;lt;PORT&amp;gt;    {  
	weight &amp;lt;INT&amp;gt;     RS权重 
    notify_up &amp;lt;STRING&amp;gt;|&amp;lt;QUOTED-STRING&amp;gt;  RS上线通知脚本  
    notify_down &amp;lt;STRING&amp;gt;|&amp;lt;QUOTED-STRING&amp;gt; RS下线通知脚本  		     HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK 
    { ... }：定义当前主机的 健康状态检测方法 
    
    }

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/keepalived/" term="keepalived" label="keepalived" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">keepalived简介与安装</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/keepalived%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/" />
            <id>https://latteStudio.github.io/posts/keepalived%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
            <updated>2020-10-20T17:20:27&#43;08:00</updated>
            <published>2020-10-20T15:48:03&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">keepalived简介与安装</summary>
            
                <content type="html">&lt;h1 id=&#34;keepalived基础&#34;&gt;keepalived基础&lt;/h1&gt;
&lt;p&gt;lvs官方提供了几种lvs高可用构建方案，如下：&lt;strong&gt;常用keepalived&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/HighAvailability.html&#34;&gt;http://www.linuxvirtualserver.org/HighAvailability.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following examples of building highly available LVS systems are only for reference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/docs/ha/piranha.html&#34;&gt;Using Piranha to build highly available LVS systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/docs/ha/keepalived.html&#34;&gt;Using Keepalived to build highly available LVS systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/docs/ha/ultramonkey.html&#34;&gt;Using UltraMonkey to build highly available LVS systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/docs/ha/heartbeat_mon.html&#34;&gt;Using heartbeat+mon+coda to build highly available LVS systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/docs/ha/heartbeat_ldirectord.html&#34;&gt;Using heartbeat+ldirectord to build highly available LVS systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;​	lvs本身不探测后端rs的健康性，由ldirectd辅助完成&lt;/p&gt;
&lt;p&gt;​	lvs本身不保证自己的高可用，结合keepalived的vvrp虚拟路由冗余协议实现高可用&lt;/p&gt;
&lt;p&gt;​	keepalived作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证lvs的高可用&lt;/li&gt;
&lt;li&gt;探测后端节点的健康性，并实现节点动态增删&lt;/li&gt;
&lt;li&gt;通过配置keepalived，即可实现ipvs规则的配置管理&lt;/li&gt;
&lt;li&gt;keepalived支持多种方法探测后端节点
&lt;ul&gt;
&lt;li&gt;四层端口&lt;/li&gt;
&lt;li&gt;七层http/https头部&lt;/li&gt;
&lt;li&gt;其他http报文内容&lt;/li&gt;
&lt;li&gt;支持调用外部自定义脚本进行探测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vrrp协议&#34;&gt;vrrp协议&lt;/h2&gt;
&lt;p&gt;​	vvrp：virtual router redundancy protocol 虚拟路由冗余协议，本意用来保证路由的高可用，实现逻辑：多个路由节点组成一个虚拟路由节点，某一刻，只有一个主节点起作用，但主节点和其他从节点会不断进行通信，告诉它们朕一日不死，你们都是太子，当主节点挂掉时，其他从节点会争抢出新的主节点，周而复始，从而这个虚拟路由节点就有了高可用的属性！&lt;/p&gt;
&lt;h2 id=&#34;keepalived程序架构&#34;&gt;keepalived程序架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200910190816863.png&#34; alt=&#34;image-20200910190816863&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;checkers：检测后端rs的健康状态，支持多种方法
&lt;ul&gt;
&lt;li&gt;tcp&lt;/li&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;li&gt;https&lt;/li&gt;
&lt;li&gt;misc自定义脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ipvs wrapper：该组件用于管理ipvs规则&lt;/li&gt;
&lt;li&gt;system all：提供自定义脚本调用的功能&lt;/li&gt;
&lt;li&gt;vvrp stack：管理vvrp协议的实现&lt;/li&gt;
&lt;li&gt;netlink reflector：管理监控vvrp的 vip地址&lt;/li&gt;
&lt;li&gt;watch dog：监控程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;
&lt;p&gt;yum可以直接安装；&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/acassen/keepalived/blob/master/INSTALL&#34;&gt;源码安装，官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下为编译安装过程：&lt;/p&gt;
&lt;p&gt;1、下载源码包，解压，安装依赖包，编译工具&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# yum install -y openssl-devel gcc gcc++
[root@lvs ~]# tar -xf keepalived-1.2.19.tar.gz
[root@lvs ~]# cd keepalived-1.2.19
[root@lvs keepalived-1.2.19]# pwd
/root/keepalived-1.2.19


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、三步走&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived-1.2.19]# ./configure --prefix=/usr/local/keepalived-1.2.19

[root@lvs keepalived-1.2.19]# make &amp;amp;&amp;amp; make install

[root@lvs keepalived-1.2.19]# ln -sv /usr/local/keepalived-1.2.19/ /usr/local/keepalived
‘/usr/local/keepalived’ -&amp;gt; ‘/usr/local/keepalived-1.2.19/’
# 做软链接方便，版本切换；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、安装后配置:配置path变量和manpath路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived-1.2.19]# echo &amp;quot;export PATH=/usr/local/keepalived/bin:$PATH&amp;quot; &amp;gt;&amp;gt; /etc/profile.d/keepalived.sh
[root@lvs keepalived-1.2.19]# source !$
source /etc/profile.d/keepalived.sh

[root@lvs keepalived-1.2.19]# echo &amp;quot;MANPATH /usr/local/keepalived/share/man&amp;quot; &amp;gt;&amp;gt; /etc/man.config
[root@lvs keepalived-1.2.19]# man keepalived.conf

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、安装后目录结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived]# pwd
/usr/local/keepalived
[root@lvs keepalived]# ll  ./*
./bin:
total 44
-rwxr-xr-x 1 root root 43752 Sep 10 17:18 genhash

# bin下有个genhash，健康检测后端rs页面时，用status_code或genhash命令生成的hash值判断检查结果

./etc:
total 0
drwxr-xr-x 3 root root 44 Sep 10 17:18 keepalived
# 主配置，以及参考模版
drwxr-xr-x 3 root root 20 Sep 10 17:18 rc.d
# 服务启动脚本
drwxr-xr-x 2 root root 24 Sep 10 17:18 sysconfig
# 服务脚本启动时读取的参数文件

./sbin:
total 196
-rwx------ 1 root root 200248 Sep 10 17:18 keepalived

# 主程序

./share:
total 0
drwxr-xr-x 5 root root 42 Sep 10 17:18 man
# man手册，有 1 5 8 三个章节，有keepalived.conf和genhash的配置手册说明
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、准备服务脚本、服务脚本参数文件、配置文件，并做适当修改&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs keepalived]# cp etc/rc.d/init.d/keepalived /etc/rc.d/init.d/
# 将自带的服务脚本复制到init.d目录下

# 修改服务脚本
# 将daemon后的keepalived改为编译安装的主程序文件路径，如下：
[root@lvs keepalived]# vim /etc/rc.d/init.d/keepalived 
......
start() {
    echo -n $&amp;quot;Starting $prog: &amp;quot;
    daemon /usr/local/keepalived/sbin/keepalived ${KEEPALIVED_OPTIONS}
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] &amp;amp;&amp;amp; touch /var/lock/subsys/$prog
}



# 添加开启启动项，并设置为开启启动
[root@lvs keepalived]# chkconfig --add keepalived
[root@lvs keepalived]# chkconfig keepalived on


# 复制自带的服务脚本参数文件，到/etc/sysconfig目录下
[root@lvs keepalived]# cp etc/sysconfig/keepalived /etc/sysconfig/   


# 复制自带的配置文件到，对应目录
[root@lvs keepalived]# mkdir /etc/keepalived
[root@lvs keepalived]# cp etc/keepalived/keepalived.conf /etc/keepalived/
[root@lvs keepalived]# ll /etc/keepalived/keepalived.conf 

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ps: 复制自带配置文件到哪个目标路径？自带的服务脚本里指明了默认路径，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
#
# Startup script for the Keepalived daemon
#
# processname: keepalived
# pidfile: /var/run/keepalived.pid
# config: /etc/keepalived/keepalived.conf
# chkconfig: - 21 79
# description: Start and stop Keepalived

# Source function library
. /etc/rc.d/init.d/functions

# Source configuration file (we set KEEPALIVED_OPTIONS there)
. /etc/sysconfig/keepalived

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ps：配置sysconfig文件，可以自定义keepalived程序读取的配置文件，从而不使用默认的配置文件&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/keepalived/" term="keepalived" label="keepalived" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">lvs的四种工作模型实现</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/lvs%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0/" />
            <id>https://latteStudio.github.io/posts/lvs%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0/</id>
            <updated>2020-10-20T15:28:38&#43;08:00</updated>
            <published>2020-10-20T14:40:49&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">lvs的四种工作模型实现</summary>
            
                <content type="html">&lt;h1 id=&#34;vsnat&#34;&gt;vs/nat&lt;/h1&gt;
&lt;h2 id=&#34;实验环境&#34;&gt;实验环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;客户端：
&lt;ul&gt;
&lt;li&gt;cip：192.168.10.100：eth1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lvs：
&lt;ul&gt;
&lt;li&gt;vip：192.168.10.101：eth1&lt;/li&gt;
&lt;li&gt;dip：192.168.80.101：eth0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rs1：
&lt;ul&gt;
&lt;li&gt;rip：192.168.80.102：eth0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rs2：
&lt;ul&gt;
&lt;li&gt;rip：192.168.80.103：eth0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lvs共计2块网卡，一块对外，和客户端处于一个局域网，一块对内，和2个realserver组成一个局域网；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200908142343845.png&#34; alt=&#34;image-20200908142343845&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;准备配置&#34;&gt;准备配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;lvs对客户端和对realserver都能通信，&lt;/li&gt;
&lt;li&gt;先配置客户端和2个realserver可以通过指向网关为lvs，实现通信&lt;/li&gt;
&lt;li&gt;客户端和2个realserver不能直接相互访问&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1、lvs对客户端和对realserver都能通信&lt;/p&gt;
&lt;p&gt;​	添加对应网卡后，保持默认即可，lvs有2块网卡分别和2个不同局域网通信；&lt;/p&gt;
&lt;p&gt;2、先配置客户端和2个realserver可以通过指向网关为lvs，实现通信&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lvs连接2个网段，开启转发功能后，使得变成路由器的角色，而两端又配置了去往对方网段的路由，本例是将默认路由指向了lvs，lvs负责2个网段的转发，数据包有去有回，从而实现了互通&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;rs1和rs2添加默认路由，指向lvs的80.101地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
#默认是有一条指向vmvare workstation的网关路由；

[root@rs2 ~]# route add default gw 192.168.80.101
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
# 添加指向101地址的路由


#rs1同理
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs1 ~]# route add default gw 192.168.80.101
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端添加默认路由指向lvs的10.101，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.10.101  0.0.0.0         UG    0      0        0 eth1
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
[root@client ~]# route add default gw 192.168.10.101

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;lvs上开启路由转发，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;客户端此时，能访问rs1和rs2，rs也能访问客户端&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# ping 192.168.80.103
PING 192.168.80.103 (192.168.80.103) 56(84) bytes of data.
64 bytes from 192.168.80.103: icmp_seq=5 ttl=63 time=0.987 ms
64 bytes from 192.168.80.103: icmp_seq=6 ttl=63 time=1.20 ms

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、客户端和2个realserver不能直接相互访问&lt;/p&gt;
&lt;p&gt;客户端，和rs分别删除默认路由；此时2端分别只能访问自己本网段地址，非本网段的由于没有对应的路由信息，和默认路由，&lt;strong&gt;一律网络不可达&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# route del default gw 192.168.10.101
[root@client ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
[root@client ~]# ping 192.168.80.103
connect: Network is unreachable
# 客户端

[root@rs2 ~]# route del default gw 192.168.80.101
[root@rs2 ~]# route del default gw 192.168.80.2
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs2 ~]# ping 192.168.10.100
connect: Network is unreachable
# rs2


[root@rs1 ~]# route del default gw 192.168.80.101
[root@rs1 ~]# route del default gw 192.168.80.2
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs1 ~]# ping 192.168.10.100
connect: Network is unreachable
# rs1

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时客户端无法直接访问rs了，只有10本网段的地址可达，此时客户端只能访问lvs的地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# ping 192.168.80.103
connect: Network is unreachable
[root@client ~]# ping 192.168.80.102
connect: Network is unreachable

[root@client ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置vsnat&#34;&gt;配置vs/nat&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;lvs服务器：
&lt;ol&gt;
&lt;li&gt;启用ipvs模块，（默认已启用）&lt;/li&gt;
&lt;li&gt;安装ipvsadm管理命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lvs服务器上开启ip_forward&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;rs服务器
&lt;ol&gt;
&lt;li&gt;安装httpd&lt;/li&gt;
&lt;li&gt;写入不同主页，并启动&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网关指向lvs的dip地址，&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;lvs服务器
&lt;ol&gt;
&lt;li&gt;配置ipvs规则，&lt;/li&gt;
&lt;li&gt;对外开放10.101的80端口服务&lt;/li&gt;
&lt;li&gt;添加后端2个rs节点，做realsever&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;客户端访问lvs的10.101的80端口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1、检查ipvs模块是否启用，安装ipvsadm命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;yum install -y ipvsadm即可
也可编译安装，参见ipvsadm编译安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ll /usr/lib/modules/3.10.0-862.el7.x86_64/kernel/net/netfilter/ipvs/
total 112
-rw-r--r--. 1 root root  2160 Apr 21  2018 ip_vs_dh.ko.xz
-rw-r--r--. 1 root root  4084 Apr 21  2018 ip_vs_ftp.ko.xz
-rw-r--r--. 1 root root 59100 Apr 21  2018 ip_vs.ko.xz
-rw-r--r--. 1 root root  3952 Apr 21  2018 ip_vs_lblc.ko.xz
-rw-r--r--. 1 root root  4740 Apr 21  2018 ip_vs_lblcr.ko.xz
-rw-r--r--. 1 root root  1728 Apr 21  2018 ip_vs_lc.ko.xz
-rw-r--r--. 1 root root  1752 Apr 21  2018 ip_vs_nq.ko.xz
-rw-r--r--. 1 root root  2972 Apr 21  2018 ip_vs_pe_sip.ko.xz
-rw-r--r--. 1 root root  1928 Apr 21  2018 ip_vs_rr.ko.xz
-rw-r--r--. 1 root root  1740 Apr 21  2018 ip_vs_sed.ko.xz
-rw-r--r--. 1 root root  2532 Apr 21  2018 ip_vs_sh.ko.xz
-rw-r--r--. 1 root root  1760 Apr 21  2018 ip_vs_wlc.ko.xz
-rw-r--r--. 1 root root  2508 Apr 21  2018 ip_vs_wrr.ko.xz
#ipvs模块位置；

[root@lvs ~]# rpm -ql ipvsadm
/etc/sysconfig/ipvsadm-config
/usr/lib/systemd/system/ipvsadm.service
/usr/sbin/ipvsadm
/usr/sbin/ipvsadm-restore
/usr/sbin/ipvsadm-save
/usr/share/doc/ipvsadm-1.27
/usr/share/doc/ipvsadm-1.27/README
/usr/share/man/man8/ipvsadm-restore.8.gz
/usr/share/man/man8/ipvsadm-save.8.gz
/usr/share/man/man8/ipvsadm.8.gz
#ipvsadm软件包文件列表
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、准备rs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  159  yum install -y httpd
  160  echo rs2:192.168.80.103 &amp;gt; /var/www/html/index.html
  161  systemctl start httpd
  
  
  501  yum install -y httpd
  502  echo rs1:192.168.80.102 &amp;gt; /var/www/html/index.html 
  504  systemctl start httpd
  
  
[root@lvs ~]# curl 192.168.80.102
rs1:192.168.80.102
[root@lvs ~]# curl 192.168.80.103
rs2:192.168.80.103
#lvs访问测试成功
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;3、配置ipvs规则&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[root@lvs ~]# ipvsadm -C
# 清空规则，防止干扰
[root@lvs ~]# ipvsadm -A -t 192.168.10.101:80 -s wrr
# 添加一个对外服务，算法选择为wrr，加权轮询，服务在本机vip地址的80端口

[root@lvs ~]# ipvsadm -L
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  lvs:http wrr
# 看到已经添加了一个tcp的http的服务，算法为wrr


[root@lvs ~]# ipvsadm -a -t 192.168.10.101:80 -r 192.168.80.102:80 -m -w 2
[root@lvs ~]# ipvsadm -a -t 192.168.10.101:80 -r 192.168.80.103:80 -m -w 3
# 添加2个rs，
# a为添加 t是tcp协议 m是nat模式，w指定权重

[root@lvs ~]# ipvsadm -L
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  lvs:http wrr
  -&amp;gt; 192.168.80.102:http          Masq    2      0          0         
  -&amp;gt; 192.168.80.103:http          Masq    3      0          0    
# 可以看到一个对外服务，及其后端真实的rs服务器
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实验时：lvs上忘记了开启ip_forward&lt;/li&gt;
&lt;li&gt;rs上忘记了配置网关为lvs的dip&lt;/li&gt;
&lt;li&gt;所以客户端访问不通！&lt;strong&gt;因为vs/nat需要lvs做nat，转发，rs处理后需要将数据发给网关即lvs的dip地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;补充如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs2 ~]# route add default gw 192.168.80.101
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs1 ~]# route add default gw 192.168.80.101
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

[root@lvs ~]# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
[root@lvs ~]# cat /proc/sys/net/ipv4/ip_forward
1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4、客户端访问&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# curl 192.168.10.101
rs1:192.168.80.102
[root@client ~]# curl 192.168.10.101
rs2:192.168.80.103
[root@client ~]# curl 192.168.10.101
rs1:192.168.80.102
[root@client ~]# curl 192.168.10.101
rs2:192.168.80.103
[root@client ~]# curl 192.168.10.101
rs2:192.168.80.103
[root@client ~]# curl 192.168.10.101
rs1:192.168.80.102
#成功实现调度，比例约为2:3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;查看lvs状态信息&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ipvsadm -Ln --stats
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port               Conns   InPkts  OutPkts  InBytes OutBytes
  -&amp;gt; RemoteAddress:Port
TCP  192.168.10.101:80                  15       84       48     5496     5712
  -&amp;gt; 192.168.80.102:80                   6       31       20     2050     2380
  -&amp;gt; 192.168.80.103:80                   9       53       28     3446     3332

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;vs/nat实现！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;vstun&#34;&gt;vs/tun&lt;/h1&gt;
&lt;h1 id=&#34;vsdr&#34;&gt;vs/dr&lt;/h1&gt;
&lt;h2 id=&#34;arp相关内核参数&#34;&gt;arp相关内核参数&lt;/h2&gt;
&lt;p&gt;​	arp过程中，请求方请求一个ip对应的mac，同时包中填入自己的源ip和源mac，这一对，会被接收方缓存，接收方收到后，发现自己有对方所请求的ip，于是，将自己的ip和mac填入响应包，单播给请求端，&lt;strong&gt;想当然的以为，ip和mac一定对应，即ip所在的接口和接口mac一对一对应，其实不然，ip和mac不必对应，尤其是一台主机有多个接口，多个ip，还有lo接口的情况下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;arp_ingore决定了回应arp包时，用自己的哪个ip，哪个mac填包，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;arp_announce决定了发arp请求时，用自己的哪个ip，哪个mac填包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	dr模型下，lvs和rs同处于一个物理网段，在lvs和多个rs都配置了vip的情况下，同个网段多个vip，那么arp广播时，就会导致冲突！&lt;/p&gt;
&lt;p&gt;​	解决办法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端如router静态绑定，将lvs的某个接口mac和vip静态绑定，写在router的arp表里，但不够灵活&lt;/li&gt;
&lt;li&gt;每个rs上，使用arptables&lt;/li&gt;
&lt;li&gt;每个rs上，修改内核参数，使得rs对vip这个地址，的arp回应和通告做一定限制（常用）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arp_ingore&#34;&gt;arp_ingore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认是0；&lt;/li&gt;
&lt;li&gt;改为1，表示，仅在arp请求的ip，正好配置在该arp广播进来的接口上时，才回应；
&lt;ul&gt;
&lt;li&gt;eg：rs2从eth0接口收到了arp广播，发现请求的是80.200，但是80.200配置的是自己的lo接口，&lt;/li&gt;
&lt;li&gt;所以不回应该arp广播&lt;/li&gt;
&lt;li&gt;其他rs一样&lt;/li&gt;
&lt;li&gt;此时只有lvs可以回应，解决了多个vip冲突问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arp_announce&#34;&gt;arp_announce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认是0&lt;/li&gt;
&lt;li&gt;尽量避免将接口信息向非直连网络进行通告&lt;/li&gt;
&lt;li&gt;必须避免将接口信息向非本网络进行通告&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般rs上：arp_ingore设置为1，arp_announce设置为2，还原时，重新设置为0即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ip neigh flush all 
清理所有arp缓存

[root@router ~]# ll /proc/sys/net/ipv4/conf/
total 0
dr-xr-xr-x 1 root root 0 Sep  9 15:23 all
dr-xr-xr-x 1 root root 0 Sep  9 15:23 default
dr-xr-xr-x 1 root root 0 Sep  9 15:27 eth0
dr-xr-xr-x 1 root root 0 Sep  9 15:27 eth1
dr-xr-xr-x 1 root root 0 Sep  9 15:27 lo
[root@router ~]# 
all和lo接口都要同时设置
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vipdiprip同网段&#34;&gt;vip、dip、rip同网段&lt;/h2&gt;
&lt;p&gt;1、准备实验拓扑如下，准备基础网络环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200909110638440.png&#34; alt=&#34;image-20200909110638440&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据网络拓扑，配置基础路由，ip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#client:
[root@client ~]# route add default gw 192.168.10.101
[root@client ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.10.101  0.0.0.0         UG    0      0        0 eth1
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1


#router
# 连接2个网段，开启路由转发，充当router
[root@router ~]# cat /proc/sys/net/ipv4/ip_forward
0
[root@router ~]# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
[root@router ~]# cat /proc/sys/net/ipv4/ip_forward
1
[root@router ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0


# rs1
# rs都删除默认的vnet8的默认路由，并指向80.101为默认路由
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs1 ~]# route del default gw 192.168.80.2
[root@rs1 ~]# route add default gw 192.168.80.101
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0


# rs2
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs2 ~]# route del default gw 192.168.80.2
[root@rs2 ~]# route add default gw 192.168.80.101
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

# lvs
# lvs只有一个dip，目前，网关也指向了router的80.101
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@lvs ~]# route del default gw 192.168.80.2
[root@lvs ~]# route add default gw 192.168.80.101
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、lvs配置vip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ip addr add 192.168.80.200/32 dev eth0


[root@lvs ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:55:b3:ea brd ff:ff:ff:ff:ff:ff
    inet 192.168.80.104/24 brd 192.168.80.255 scope global noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet 192.168.80.200/32 scope global eth0
       valid_lft forever preferred_lft forever


# router可以ping通此时lvs上的vip
[root@router ~]# ping 192.168.80.200
PING 192.168.80.200 (192.168.80.200) 56(84) bytes of data.
64 bytes from 192.168.80.200: icmp_seq=1 ttl=64 time=0.915 ms

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、2个rs配置vip，arp相关参数，&lt;/p&gt;
&lt;p&gt;​	配置脚本如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;根据需求，修改vip即可，start是启用，stop直接清空配置
此脚本，可方便实现rs的上线、下线

[root@rs2 ~]# cat lvs 
#!/bin/bash
#
vip=192.168.80.200
mask=&#39;255.255.255.255&#39;
case $1 in
start)
	echo 1 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore
	echo 1 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
	echo 2 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce
	echo 2 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_announce
	ifconfig lo:0 $vip netmask $mask broadcast $vip up
	route add -host $vip dev lo:0
	;;
stop)
	ifconfig lo:0 down
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_announce
	;;
*) 
	echo &amp;quot;Usage $(basename $0) start|stop&amp;quot;
	exit 1
	;;
esac
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、lvs配置ipvs规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ipvsadm -C
[root@lvs ~]# ipvsadm -A -t 192.168.80.200:80 -g
Illegal &#39;forwarding-method&#39; option with the &#39;add-service&#39; command
[root@lvs ~]# ipvsadm -A -t 192.168.80.200:80
[root@lvs ~]# ipvsadm -L
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  lvs:http wlc
[root@lvs ~]# ipvsadm -a -t 192.168.80.200:80 -r 192.168.80.102:80 -g
[root@lvs ~]# ipvsadm -a -t 192.168.80.200:80 -r 192.168.80.103:80 -g
[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 wlc
  -&amp;gt; 192.168.80.102:80            Route   1      0          0         
  -&amp;gt; 192.168.80.103:80            Route   1      0          0         

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、客户端访问测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 一开始失败，用客户端直接ping rs时不通，排查发现有去程的默认路由，router也开启了转发，再排查到rs，发现rs没有了回10网段的路由，默认路由又重新指向了vnet8的80.2
# 同时多了一条主机ip路由80.200指向自己的环回口，
# 应该是配置vip到自己的lo接口时影响了默认路由？
# 重新指向80.101后，成功，此时客户端能ping通rs直接，
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
192.168.80.200  0.0.0.0         255.255.255.255 UH    0      0        0 lo
[root@rs2 ~]# route add default gw 192.168.80.101
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
192.168.80.200  0.0.0.0         255.255.255.255 UH    0      0        0 lo

# 再次向lvs的vip请求
# 成功
[root@client ~]# curl 192.168.80.200
rs1:192.168.80.102
[root@client ~]# curl 192.168.80.200
rs2:192.168.80.103
[root@client ~]# curl 192.168.80.200
rs1:192.168.80.102
[root@client ~]# curl 192.168.80.200
rs2:192.168.80.103
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	lvs要配置网关，且可以指定一个同网段，不存在的地址，&lt;/p&gt;
&lt;p&gt;​	原因&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

...
rs2:192.168.80.103
curl: (7) Failed connect to 192.168.80.200:80; Connection timed out
# 没有网关时，客户端是curl不通vip的，循环会中断


[root@lvs ~]# route add default gw 192.168.80.222
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.222  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@client ~]# while true; do curl 192.168.80.200;  sleep 1;done;
rs2:192.168.80.103
rs1:192.168.80.102

# 有网关时，客户端curl才通，循环继续


# 原因：lvs看似只接收客户端的建立连接的握手包，但是，若没有默认网关，当它接收到来自10网段的数据包时，比对路由信息，发现自己只有本80网段的路由，对10网段一无所知，没有相关路由，也没有默认路由，就认为自己处理不了，于是直接丢弃，不再处理，于是客户端无法curl通；
# 所以一定给lvs配置一个默认网关，指向相同网段，即便是一个不存在的地址
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;简单总结&#34;&gt;简单总结&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;完成网络拓扑的构建，基础路由，ip的规划，实际中网络结构一般由网络工程师完成&lt;/li&gt;
&lt;li&gt;lvs上：
&lt;ol&gt;
&lt;li&gt;配置vip，dip，&lt;/li&gt;
&lt;li&gt;vip一般就配置在lo接口或lo别名接口，32位掩码，lo接口必须是32位掩码&lt;/li&gt;
&lt;li&gt;vip也可配置在物理接口上，32位或和dip同位掩码都可以&lt;/li&gt;
&lt;li&gt;无需arp相关参数设置&lt;/li&gt;
&lt;li&gt;无需ip_forward开启&lt;/li&gt;
&lt;li&gt;lvs也要配置合适的路由；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;rs上：
&lt;ol&gt;
&lt;li&gt;vip配置在lo接口，或lo接口的别名接口，&lt;/li&gt;
&lt;li&gt;vip是32位掩码&lt;/li&gt;
&lt;li&gt;/proc/sys/net/ipv4/conf/{all,lo}/arp_ingore设置为1，还原是设置为0&lt;/li&gt;
&lt;li&gt;/proc/sys/net/ipv4/conf/{all,lo}/arp_announce设置为2，还原是设置为0&lt;/li&gt;
&lt;li&gt;指向自己的默认网关，不执向lvs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;lvs配置规则&lt;/li&gt;
&lt;li&gt;客户端访问&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;vipdiprip不同网段&#34;&gt;vip、dip、rip不同网段&lt;/h2&gt;
&lt;p&gt;1、准备网络拓扑环境如下图，配置基础路由，ip信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200909180855803.png&#34; alt=&#34;image-20200909180855803&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@client ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.10.101  0.0.0.0         UG    0      0        0 eth1
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
# 只剩直连10网段的路由，默认路由指向10.101
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;router&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@router ~]# route del default gw 192.168.80.2
[root@router ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0
[root@router ~]# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
# 只剩下2个网络的直连路由，
# 开启ip_forward
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;lvs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# route del default gw 192.168.80.2
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0
# 目前只有dip，一条直连路由
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;rs1、rs2：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
0.0.0.0         192.168.80.2    0.0.0.0         UG    102    0        0 eth2
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth2
[root@rs1 ~]# ifconfig eth1 donw
^C
[root@rs1 ~]# ifconfig eth1 down
[root@rs1 ~]# ifconfig eth1 down
[root@rs1 ~]# ifconfig eth2 down
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs1 ~]# route del default gw 192.168.80.2
[root@rs1 ~]# route add default gw 192.168.80.101
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs1 ~]# 

# 删除原来默认路由，添加一条默认路由指向80.101
# 禁用其他无关网卡，
# 只剩下80网段的直连路由，和指向80.101的默认路由

[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs2 ~]# ifconfig eth1 down
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs2 ~]# route del default gw 192.168.80.2
[root@rs2 ~]# route del default gw 192.168.80.101
SIOCDELRT: No such process
[root@rs2 ~]# route add default gw 192.168.80.101
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
# 同rs1

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、lvs配置vip&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ip addr add 10.0.0.100/8 dev eth0
[root@lvs ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:55:b3:ea brd ff:ff:ff:ff:ff:ff
    inet 192.168.80.104/24 brd 192.168.80.255 scope global noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet 10.0.0.100/8 scope global eth0
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.0.0.0        0.0.0.0         255.0.0.0       U     0      0        0 eth0

# lvs的eth0上，加上10.0.0.100/8的vip，和dip不同网段；
# 配置后，多出一条直连路由
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、rs配置vip和arp内核参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 修改rs配置脚本，改一下vip和掩码，和lvs的vip一致
[root@rs1 ~]# cat lvs-dr-rs 
#!/bin/bash
#
vip=10.0.0.100
mask=&#39;255.0.0.0&#39;
case $1 in
start)
	echo 1 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore
	echo 1 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
	echo 2 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce
	echo 2 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_announce
	ifconfig lo:0 $vip netmask $mask broadcast $vip up
	route add -host $vip dev lo:0
	;;
stop)
	ifconfig lo:0 down
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_announce
	;;
*) 
	echo &amp;quot;Usage $(basename $0) start|stop&amp;quot;
	exit 1
	;;
esac

# 每个rs上，执行脚本，
# 发现vip已经配置在了还回口，arp参数已经修改
[root@rs2 ~]# sh lvs-dr-rs start
[root@rs2 ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet 10.0.0.100/8 brd 10.0.0.100 scope global lo:0
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever

[root@rs1 ~]# sh lvs-dr-rs start
[root@rs1 ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet 10.0.0.100/8 brd 10.0.0.100 scope global lo:0
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever



# 执行脚本后，对路由的影响
# 加了一条主机路由，
# 默认路由又指向了80.2，一会要再改，否则客户端不通、
# 见下方，curl vip不通的情况
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
10.0.0.100      0.0.0.0         255.255.255.255 UH    0      0        0 lo
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、lvs配置ipvs规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ipvsadm -C
[root@lvs ~]# ipvsadm -A -t 10.0.0.100:80 
[root@lvs ~]# ipvsadm -a -t 10.0.0.100:80 -r 192.168.80.102:80 
[root@lvs ~]# ipvsadm -a -t 10.0.0.100:80 -r 192.168.80.103:8088 
[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  10.0.0.100:80 wlc
  -&amp;gt; 192.168.80.102:80            Route   1      0          0         
  -&amp;gt; 192.168.80.103:80            Route   1      0          0       
 # dr不支持端口映射，故意写成8088也无效
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、客户端访问测试&lt;/p&gt;
&lt;p&gt;​	vip不通解决；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@client ~]# ping 10.0.0.100
PING 10.0.0.100 (10.0.0.100) 56(84) bytes of data.
From 192.168.10.101 icmp_seq=1 Destination Net Unreachable
From 192.168.10.101 icmp_seq=2 Destination Net Unreachable
^C
--- 10.0.0.100 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 1000ms
# 客户端ping vip时，不通

排查：
1，此时router没有10.0.0.0/8网段的路由，router这就不知道往哪里转发
因此，给router加一个10.0.0.101/8的地址，多了一条直连路由，
[root@router ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0
[root@router ~]# ip addr add 10.0.0.101/8 dev eth0
[root@router ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.0.0.0        0.0.0.0         255.0.0.0       U     0      0        0 eth0
192.168.10.0    0.0.0.0         255.255.255.0   U     101    0        0 eth1
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0
# 此时还不通

2，再看lvs路由，没有192.168.10段回程路由，有去无回，所以不通
加条默认路由，甩给router
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.0.0.0        0.0.0.0         255.0.0.0       U     0      0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0
[root@lvs ~]# route add default gw 192.168.80.101 
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
10.0.0.0        0.0.0.0         255.0.0.0       U     0      0        0 eth0
10.0.0.0        0.0.0.0         255.0.0.0       U     102    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0

3，此时通了
~]# ping 10.0.0.100
PING 10.0.0.100 (10.0.0.100) 56(84) bytes of data.
64 bytes from 10.0.0.100: icmp_seq=1 ttl=63 time=0.892 ms
64 bytes from 10.0.0.100: icmp_seq=2 ttl=63 time=2.07 ms

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	vip通过，lvs调度不通解决&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# curl 10.0.0.100

^C
[root@client ~]# 
# 此时ping vip通，但是访问80端口服务不同，
# 问题出在，客户端和rs的通信上

# 排查2个rs，发现默认路由指向，又成了80.2，客户端能和lvs的vip通信了，但除了请求连接的包，后续的数据通信都是直接和rs通信的，rs没有192.168.10.0的回程路由，所以问题是客户端和rs不通，
# 给rs修改默认路由，指向80.101

[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
10.0.0.100      0.0.0.0         255.255.255.255 UH    0      0        0 lo
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs1 ~]# route add default gw 192.168.80.101
[root@rs1 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
10.0.0.100      0.0.0.0         255.255.255.255 UH    0      0        0 lo
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

# 再测，通了
[root@client ~]# curl 10.0.0.100
rs2:192.168.80.103
[root@client ~]# curl 10.0.0.100
rs1:192.168.80.102
[root@client ~]# curl 10.0.0.100
rs2:192.168.80.103
[root@client ~]# curl 10.0.0.100
rs1:192.168.80.102
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6、lvs更换网关为router的10.0.0.101&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# route add default gw 10.0.0.101
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.0.0.101      0.0.0.0         UG    0      0        0 eth0
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
10.0.0.0        0.0.0.0         255.0.0.0       U     0      0        0 eth0
10.0.0.0        0.0.0.0         255.0.0.0       U     102    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0
[root@lvs ~]# route del default gw 192.168.80.101
[root@lvs ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.0.0.101      0.0.0.0         UG    0      0        0 eth0
10.0.0.0        0.0.0.0         255.0.0.0       U     0      0        0 eth0
10.0.0.0        0.0.0.0         255.0.0.0       U     102    0        0 eth0
192.168.80.0    0.0.0.0         255.255.255.0   U     102    0        0 eth0

此时仍然通，lvs找网关10.0.0.101时，通过10.0.0.0/8的路由可以出去，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7、rs更换网关为router的10.0.0.101&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
10.0.0.100      0.0.0.0         255.255.255.255 UH    0      0        0 lo
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0
[root@rs2 ~]# route add default gw 10.0.0.101
[root@rs2 ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         10.0.0.101      0.0.0.0         UG    0      0        0 lo
0.0.0.0         192.168.80.101  0.0.0.0         UG    0      0        0 eth0
0.0.0.0         192.168.80.2    0.0.0.0         UG    100    0        0 eth0
10.0.0.100      0.0.0.0         255.255.255.255 UH    0      0        0 lo
192.168.80.0    0.0.0.0         255.255.255.0   U     100    0        0 eth0

此时就不通了，因为rs找网关10.0.0.101的时候，没有路由可以找到它
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;/h3&gt;
&lt;p&gt;​	dr模型，客户端和lvs，客户端和每个rs的路由可达问题，客户端在连接建立、连接断开阶段的数据包是和lvs通信；其他的数据通信阶段都是和rs直接通信，&lt;strong&gt;一定注意！排查客户端和lvs，客户端和rs之间的路由可达问题！！！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;vs和rs配置参考脚本&#34;&gt;vs和rs配置参考脚本&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;VS的配置脚本：
	#!/bin/bash
	#
	vip=&#39;10.1.0.5&#39;
	iface=&#39;eno16777736:0&#39;
	mask=&#39;255.255.255.255&#39;
	port=&#39;80&#39;
	rs1=&#39;10.1.0.7&#39;
	rs2=&#39;10.1.0.8&#39;
	scheduler=&#39;wrr&#39;
	type=&#39;-g&#39;
	case $1 in
	start)
		ifconfig $iface $vip netmask $mask broadcast $vip up
		iptables -F
		
		ipvsadm -A -t ${vip}:${port} -s $scheduler
		ipvsadm -a -t ${vip}:${port} -r ${rs1} $type -w 1
		ipvsadm -a -t ${vip}:${port} -r ${rs2} $type -w 1
		;;
	stop)
		ipvsadm -C
		ifconfig $iface down
		;;
	*)
		echo &amp;quot;Usage $(basename $0) start|stop&amp;quot;
		exit 1
		;;
	esac	
    
    

根据需求，修改vip即可，start是启用，stop直接清空配置
此脚本，可方便实现rs的上线、下线

[root@rs2 ~]# cat lvs 
#!/bin/bash
#
vip=192.168.80.200
mask=&#39;255.255.255.255&#39;
case $1 in
start)
	echo 1 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore
	echo 1 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
	echo 2 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce
	echo 2 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_announce
	ifconfig lo:0 $vip netmask $mask broadcast $vip up
	route add -host $vip dev lo:0
	;;
stop)
	ifconfig lo:0 down
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_ignore
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_ignore
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/all/arp_announce
	echo 0 &amp;gt; /proc/sys/net/ipv4/conf/lo/arp_announce
	;;
*) 
	echo &amp;quot;Usage $(basename $0) start|stop&amp;quot;
	exit 1
	;;
esac
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;arp抓包分析&#34;&gt;arp抓包分析&lt;/h2&gt;
&lt;p&gt;一个结论：lvs的vip会回应，其他rs也回回应，但是回应的都是lvs上某个接口的mac，抓包发现的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lvs在eth0上，配置了32位的192.168.80.200的vip后，

# router 开始ping vip
[root@router ~]# ping 192.168.80.200
PING 192.168.80.200 (192.168.80.200) 56(84) bytes of data.
64 bytes from 192.168.80.200: icmp_seq=1 ttl=64 time=1.14 ms
64 bytes from 192.168.80.200: icmp_seq=2 ttl=64 time=0.841 ms
64 bytes from 192.168.80.200: icmp_seq=3 ttl=64 time=0.934 ms

# lvs在eth0上抓arp包
# 看到lvs回复了，回应的mac是b3:ea，查看此为eth0上的mac

[root@lvs ~]# tcpdump -i eth0 -nn arp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
...
11:25:07.684940 ARP, Request who-has 192.168.80.200 tell 192.168.80.101, length 46
11:25:07.684955 ARP, Reply 192.168.80.200 is-at 00:0c:29:55:b3:ea, length 28

# router上的arp缓存，200对应的正在lvs上，eth0的mac地址
[root@router ~]# arp -n
Address                  HWtype  HWaddress           Flags Mask            Iface
192.168.80.200           ether   00:0c:29:55:b3:ea   C                     eth0


# rs上也配置vip，且配置arp相关内核参数
# rs抓包，发现不回应，
# 只有lvs的vip回应，
# router ping仍然正常
# 把lvs的vip拿掉后，router的ping会中断，因为此时只有rs有vip，但由设置了arp内核参数，是不会回应router的arp广播的，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实验现象：rs会将lvs的vip所在的mac回应给router？why&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[root@rs1 ~]# tcpdump -i eth0 -nn arp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode

12:55:22.885770 ARP, Request who-has 192.168.80.200 tell 192.168.80.101, length 46
12:55:22.885893 ARP, Reply 192.168.80.200 is-at 00:0c:29:55:b3:ea, length 46

[root@rs2 ~]# tcpdump -i eth0 -nn arp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes

12:54:33.665591 ARP, Request who-has 192.168.80.200 tell 192.168.80.101, length 46
12:54:33.665604 ARP, Reply 192.168.80.200 is-at 00:0c:29:55:b3:ea, length 46

rs1和2都是，回复的mac：b3：ea是lvs上配置了vip的eth0网卡的mac
[root@lvs ~]# ip a
...
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:55:b3:ea brd ff:ff:ff:ff:ff:ff
    inet 192.168.80.104/24 brd 192.168.80.255 scope global noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet 192.168.80.200/32 scope global eth0

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现象：将lvs上eth0上的vip删除，后router就ping不通vip了，此时尽管2个rs上的lo接口有vip，但因为设置了arp-ingore，不会应答关于vip的 arp的请求包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ip addr del 192.168.80.200/32 dev eth0
[root@lvs ~]# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:55:b3:ea brd ff:ff:ff:ff:ff:ff
    inet 192.168.80.104/24 brd 192.168.80.255 scope global noprefixroute eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::6247:1fa9:b7d7:84b9/64 scope link tentative dadfailed 
       valid_lft forever preferred_lft forever


[root@router ~]# ping 192.168.80.200
PING 192.168.80.200 (192.168.80.200) 56(84) bytes of data.
^C
--- 192.168.80.200 ping statistics ---
5 packets transmitted, 0 received, 100% packet loss, time 3999ms


# rs上，收到了关于vip200的请求，但不回应，因为arp_ingore内核参数的设置
[root@rs1 ~]# tcpdump -i eth0 -nn arp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
13:01:47.706964 ARP, Request who-has 192.168.80.200 tell 192.168.80.101, length 46
13:01:48.708097 ARP, Request who-has 192.168.80.200 tell 192.168.80.101, length 46
13:01:49.710453 ARP, Request who-has 192.168.80.200 tell 192.168.80.101, length 46

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实验结果：&lt;/p&gt;
&lt;p&gt;​	1、将80.200/32设置在lo接口，vip仍然起作用，且回复arp是用的eth0的mac&lt;/p&gt;
&lt;p&gt;​	2、vip配置为24位时，（位数根据实际情况，即和dip同网段即可），物理接口行，lo接口不行会断开网络，&lt;strong&gt;一般设置lo接口并32位就行了&lt;/strong&gt;，当是32位时，设置在物理接口和lo接口都可以，&lt;/p&gt;
&lt;p&gt;​	3、&lt;strong&gt;rs的vip一般设置在lo接口，且是32位&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ip add add 192.168.80.200/24 dev lo
不行

[root@lvs ~]# ip add add 192.168.80.200/24 dev eth0
行

[root@lvs ~]# ip add add 192.168.80.200/32 dev eth0
行

[root@lvs ~]# ip add add 192.168.80.200/32 dev lo
行
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;dr和tunrs上vip的作用&#34;&gt;dr和tun，rs上vip的作用&lt;/h1&gt;
&lt;h2 id=&#34;dr时&#34;&gt;dr时&lt;/h2&gt;
&lt;p&gt;收：&lt;/p&gt;
&lt;p&gt;​	lvs转发时只修改了二层mac，ip层，还是cip-》vip，rs根据修改的mac收到二层包，拆到三层发现目的是vip，而自己的lo接口有vip，于是收下该包，进行处理，&lt;/p&gt;
&lt;p&gt;发：&lt;/p&gt;
&lt;p&gt;​	发响应包，ip封包是，vip-cip，vip此处还有填充源ip的作用；&lt;/p&gt;
&lt;h2 id=&#34;tun时&#34;&gt;tun时&lt;/h2&gt;
&lt;p&gt;收：&lt;/p&gt;
&lt;p&gt;​	lvs转发时，修改了原包的ip头部，原来的cip-vip，之前又加了一个头部dip-某个rip，&lt;strong&gt;tun时，lvs还不需要开启ip_forward&lt;/strong&gt;，rs是靠着外部ip头，dip-rip接收到包，且靠ip寻址，自然可以跨网段，跨广域网，这里收包先是靠着自己的rip收到，进行隧道拆分时，发现原始的头部，再看cip-vip，目的还是自己，自己的接口上还是有vip，&lt;strong&gt;所以此处vip还是用来收包之用的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发：&lt;/p&gt;
&lt;p&gt;​	发响应包时，ip封包，是vip-vip，vip此处用来填充源ip&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;​	dr和tun模式，rs上配置的vip都有确认收下数据包之用，只不过，tun模式，分2两次，第一次靠的是rs上的rip收下的，第二层头部，才是靠自己接口的vip收下的，也都用发响应包时，填充源ip之用，&lt;/p&gt;
&lt;p&gt;​	tun模式，跨网段，甚至跨广域网，应该不用考虑arp问题了吧？&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs/" term="lvs" label="lvs" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs4%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B/" term="lvs4种工作模型" label="lvs4种工作模型" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">lvs的规则管理工具ipvsadm</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/lvs%E7%9A%84%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7ipvsadm/" />
            <id>https://latteStudio.github.io/posts/lvs%E7%9A%84%E8%A7%84%E5%88%99%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7ipvsadm/</id>
            <updated>2020-10-20T15:23:13&#43;08:00</updated>
            <published>2020-10-20T10:56:48&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">lvs的规则管理工具ipvsadm</summary>
            
                <content type="html">&lt;h1 id=&#34;用户空间管理工具&#34;&gt;用户空间管理工具&lt;/h1&gt;
&lt;h2 id=&#34;ipvsadm安装&#34;&gt;ipvsadm安装&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;yum安装&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# yum install -y ipvsadm

[root@host2 ~]# rpm -ql ipvsadm
/etc/sysconfig/ipvsadm-config
#服务脚本参数文件
/usr/lib/systemd/system/ipvsadm.service
#服务脚本，开机，加载生效，ipvs规则文件中规则的，文件是：/etc/sysconfig/ipvsadm
/usr/sbin/ipvsadm
#规则管理工具
/usr/sbin/ipvsadm-restore
#规则恢复工具
/usr/sbin/ipvsadm-save
#规则保存工具
/usr/share/doc/ipvsadm-1.27
/usr/share/doc/ipvsadm-1.27/README
/usr/share/man/man8/ipvsadm-restore.8.gz
/usr/share/man/man8/ipvsadm-save.8.gz
/usr/share/man/man8/ipvsadm.8.gz

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;编译安装&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1，下载源码包
 wget http://www.linuxvirtualserver.org/software/kernel-2.6/ipvsadm-1.26.tar.gz
 
2，安装依赖包，共6个
[root@host3 ipvsadm-1.26]# yum install -y libnl* popt*
...
Installed:
  libnl.x86_64 0:1.1.4-3.el7                    libnl-devel.x86_64 0:1.1.4-3.el7           
  libnl3-devel.x86_64 0:3.2.28-4.el7            libnl3-doc.x86_64 0:3.2.28-4.el7           
  popt-devel.x86_64 0:1.13-16.el7               popt-static.x86_64 0:1.13-16.el7
  
3，两步走
[root@host3 ipvsadm-1.26]# make &amp;amp;&amp;amp; make install

4，生成的3个程序文件，1个服务脚本
和yum安装的相同，少了帮助文档，不影响
[root@host3 ipvsadm-1.26]# ll /usr/sbin/ipvs*
-rwxr-xr-x 1 root root 104960 Sep  7 16:36 /usr/sbin/ipvsadm
-rwxr-xr-x 1 root root    621 Sep  7 16:36 /usr/sbin/ipvsadm-restore
-rwxr-xr-x 1 root root    791 Sep  7 16:36 /usr/sbin/ipvsadm-save
[root@host3 ipvsadm-1.26]# ll /etc/init.d/ipvsadm 
-rwxr-xr-x 1 root root 2423 Sep  7 16:36 /etc/init.d/ipvsadm
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ipvsadm语法&#34;&gt;ipvsadm语法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# man ipvsadm
[root@host2 ~]# ipvsadm --help 
man手册更详细些

[root@host2 ~]# ipvsadm -h
ipvsadm v1.27 2008/5/15 (compiled with popt and IPVS v1.2.1)
Usage:
  ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [--pe persistence_engine] [-b sched-flags]
  # 添加、修改，tcp|udp|防火墙标记集群，对外地址，调度算法
  # eg：ipvsadm -A -t 192.168.80.100:80 -s rr
  
  ipvsadm -D -t|u|f service-address
  # 删除一个对外服务
  ipvsadm -C # 删除 
  ipvsadm -R # 从文件恢复，等同于ipvsadm-restore
  ipvsadm -S [-n] # 规则导出到文件，等同于ipvsadm-save
  ipvsadm -a|e -t|u|f service-address -r server-address [options]
  # 从某一个对外服务，添加或编译一个后端节点
  # eg: ipvsadm -a -t 192.168.80.100:80 -r 192.168.80.101:80 -m 
  
  ipvsadm -d -t|u|f service-address -r server-address
  从某个对外服务中，删除一个后端节点
  ipvsadm -L|l [options]
  列出当前信息
  ipvsadm -Z [-t|u|f service-address]
  ipvsadm --set tcp tcpfin udp
  ipvsadm --start-daemon state [--mcast-interface interface] [--syncid sid]
  ipvsadm --stop-daemon state
  ipvsadm -h
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重点选项，参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service-address 是lvs对外放开的服务，ip:port
server-address 是后端节点的地址，ip:port

service-address包含一个或多个server-address
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;A 添加
E 修改
C 删除
大写操作的是service-address
a 添加
e 修改
c 删除
小写操作对象是server-address
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;指定调度算法的选项：10选1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--scheduler    -s scheduler         one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;指定lvs工作模式的选项，三选一：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; --gatewaying   -g                   gatewaying (direct routing) (default)
  --ipip         -i                   ipip encapsulation (tunneling)
  --masquerading -m                   masquerading (NAT)

g 默认的直接路由，vs/dr
i ip隧道，vs/tun
m nat网络地址转换，vs/nat
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fwm多集群绑定&#34;&gt;FWM多集群绑定&lt;/h2&gt;
&lt;p&gt;​	firewall mask，可以给特定的报文流量，打上指定的标签；定义ipvs集群规则时，可以引用该标签，多种报文打上相同的标签，这样引用一个标签，就实现了多个集群的调度规则绑定；&lt;/p&gt;
&lt;p&gt;1、实现httpd的ssl加密&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rs1 ~]# !rpm
rpm -ql mod_ssl
/etc/httpd/conf.d/ssl.conf
/etc/httpd/conf.modules.d/00-ssl.conf
/usr/lib64/httpd/modules/mod_ssl.so
/usr/libexec/httpd-ssl-pass-dialog
/var/cache/httpd/ssl
[root@rs1 ~]# yum install -y mod_ssl
# 安装mod_ssl模块，利用其包含的配置文件，模块，自签名证书，实现httpd的ssl加密
# 安装模块后，直接重启，即可


[root@router ~]# curl -k https://192.168.80.102
rs1:192.168.80.102
[root@router ~]# curl -k https://192.168.80.103
rs2:192.168.80.103
# 浏览器访问
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、没有fwm情况下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# curl -k https://192.168.80.200:443
rs1:192.168.80.102
[root@client ~]# curl -k https://192.168.80.200:443
rs2:192.168.80.103
[root@client ~]# curl 192.168.80.200
rs2:192.168.80.103
[root@client ~]# curl 192.168.80.200
rs1:192.168.80.102

[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 wlc
  -&amp;gt; 192.168.80.102:80            Route   1      0          0         
  -&amp;gt; 192.168.80.103:80            Route   1      0          0         
TCP  192.168.80.200:443 wlc
  -&amp;gt; 192.168.80.102:443           Route   1      0          0         
  -&amp;gt; 192.168.80.103:443           Route   1      0          0     
  
  
# 客户端访问80和443的http以及https，分别需要在lvs上配置2套集群规则，
# 因为dr模型下，端口无法做映射，客户端访问http的80，只能转给rs的80，同样访问https的443，只能转给rs的443，
# 因此必须配置2套集群调度规则

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、利用FireWallMask实现多集群绑定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 针对上述请况，可以根据iptables在不同的报文上打上相同的标签，
# 在ipvs配置集群时，引用此标签，就实现了多个目标端口集群的绑定，用一套ipvs规则即可实现
# 打标签语法如下
# mangle表的prerouting链，Number是数字型的标签，自定义
iptables -t mangle -A PREROUTING -d $vip -p $proto --dport $port -j MARK --set-mark NUMBER 
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;
# 对http和https2个端口的流量打上9的标签
[root@lvs ~]# iptables -t mangle -A PREROUTING -d 192.168.80.200 -p tcp --dport 80 -j MARK --set-mark 9
[root@lvs ~]# iptables -t mangle -A PREROUTING -d 192.168.80.200 -p tcp --dport 443 -j MARK --set-mark 9

# 定义对外集群服务时，引用标签9定义
[root@lvs ~]# ipvsadm -A -f 9 
[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
FWM  9 wlc

# 添加后端节点，只需要ip即可，端口不用特意指定，因为dr的端口一定是一一对应，后端服务端口确保80和443端口监听即可
[root@lvs ~]# ipvsadm -a -f 9 -r 192.168.80.102
[root@lvs ~]# ipvsadm -a -f 9 -r 192.168.80.103
[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
FWM  9 wlc
  -&amp;gt; 192.168.80.102:0             Route   1      0          0         
  -&amp;gt; 192.168.80.103:0             Route   1      0          0    

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、客户端测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# while true;do curl 192.168.80.200;curl -k https://192.168.80.200;sleep 1;done
rs2:192.168.80.103
rs1:192.168.80.102
rs2:192.168.80.103
rs2:192.168.80.103

#看到，不管是http还是https，可以通过带标签的一套ipvs集群规则实现调度！
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;持久连接&#34;&gt;持久连接&lt;/h2&gt;
&lt;p&gt;​	在不考虑sh调度算法的情况下，lvs是对每连接进行调度的，在rr算法下，即便同一个客户端过来的连接，都会被轮询调度，这样不利于会话的保持，&lt;/p&gt;
&lt;p&gt;​	因此，lvs设置了持久连接，无论使用哪种调度算法，哪怕算法采用的是wrr轮询，只要设置了持久连接，那么在一段时间内，默认360s，相同客户端再发来的连接，不会按照wrr调度，而是会调度到同一台rs上，方便会话保持，&lt;/p&gt;
&lt;p&gt;port Affinity：
每端口持久：每个端口对应定义为一个集群服务，每集群服务单独调度；
每防火墙标记持久：基于防火墙标记定义集群服务；可实现将多个端口上的应用统一调度，即所谓的port Affinity；
每客户端持久：基于0端口定义集群服务，即将客户端对所有应用的请求统统调度至后端主机，必须定义为持久模式；&lt;/p&gt;
&lt;p&gt;1、配置会话保持规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ipvsadm -A -t 192.168.80.200:443
[root@lvs ~]# ipvsadm -E -t 192.168.80.200:443 -p
# 加个-p选项即可，默认是360s
[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:443 wlc persistent 360

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、添加后端节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ipvsadm -a -t 192.168.80.200:443 -r 192.168.80.102:443 
[root@lvs ~]# ipvsadm -a -t 192.168.80.200:443 -r 192.168.80.103:443 
[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:443 wlc persistent 360
  -&amp;gt; 192.168.80.102:443           Route   1      0          0         
  -&amp;gt; 192.168.80.103:443           Route   1      0          0      
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、客户端访问，发现360s后，访问才变，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@client ~]# while true;do curl -k https://192.168.80.200;sleep 1;done
rs2:192.168.80.103
rs2:192.168.80.103
rs2:192.168.80.103
... 360s后
rs1:192.168.80.102

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ipvs规则持久化&#34;&gt;ipvs规则持久化&lt;/h2&gt;
&lt;p&gt;通过ipvsadm命令行配置的ipvs默认重启后会丢失，持久化需要保存到配置文件当中：过程如下：&lt;/p&gt;
&lt;p&gt;1、保存到配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipvsadm -S /path/to/file
ipvsadm-save &amp;gt; /path/to/file
# 2者等效，文件路径，建议/etc/sysconfig/ipvsadm，在enable了ipvsadm服务脚本后，会自动读取该配置文件，实现ipvs开机加载规则

ipvsadm -R /path/to/file
ipvsadm-restore &amp;lt; /path/to/file
# 手动恢复，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、enable ipvsadm的服务脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable ipvsadm.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、重启后，发现规则仍然存在，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:443 wrr
  -&amp;gt; 192.168.80.102:443           Route   1      0          0         
  -&amp;gt; 192.168.80.103:443           Route   1      0          0         

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ldirectd健康检测&#34;&gt;ldirectd健康检测&lt;/h2&gt;
&lt;p&gt;​	lvs默认不会监测后端节点的健康性，并进行动态的摘除，或恢复上线，因此需要结合其他工具，辅助完成后端节点的健康性监测，实现方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义脚本，&lt;strong&gt;如脚本循环探测后端web的某页面，发现失败时，调用ipvsadm命令进行节点的摘除，恢复时，进行节点的重新上线&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ldirectd程序，Daemon to monitor remote services and control Linux Virtual Server. ldirectord is a daemon to monitor and administer real servers in a cluster of load balanced virtual servers. ldirectord typically is started from heartbeat but can also be run from the command line.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1、下载rpm包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# wget  http://download.opensuse.org/repositories/network:/ha-clustering:/Stable/CentOS_CentOS-7/x86_64/ldirectord-3.9.6-0rc1.1.2.x86_64.rpm

[root@lvs ~]# yum localinstall -y ldirectord-3.9.6-0rc1.1.2.x86_64.rpm 

会安装一些依赖包
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、包中文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# rpm -qpl ldirectord-3.9.6-0rc1.1.2.x86_64.rpm 
warning: ldirectord-3.9.6-0rc1.1.2.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 17280ddf: NOKEY
/etc/ha.d
/etc/ha.d/resource.d
/etc/ha.d/resource.d/ldirectord # 配置文件
/etc/logrotate.d/ldirectord
/usr/lib/ocf/resource.d/heartbeat/ldirectord 
/usr/lib/systemd/system/ldirectord.service # 服务脚本
/usr/sbin/ldirectord # 主程序
/usr/share/doc/ldirectord-3.9.6
/usr/share/doc/ldirectord-3.9.6/COPYING
/usr/share/doc/ldirectord-3.9.6/ldirectord.cf # 配置模版
/usr/share/man/man8/ldirectord.8.gz

[root@lvs ~]# cp /usr/share/doc/ldirectord-3.9.6/ldirectord.cf /etc/ha.d/
[root@lvs ~]# 
# 将模版配置文件，放在配置目录下
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、lvs准备sorry server页面&lt;/p&gt;
&lt;p&gt;​	用于所有rs挂掉时，响应的错误页面，可以单独准备，也可以lvs自己准备&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[root@lvs ~]# yum install -y httpd
[root@lvs ~]# echo &amp;quot;sorry server&amp;quot; &amp;gt; /var/www/html/index.html
[root@lvs ~]# systemctl start httpd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、修改配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@lvs ~]# vim /etc/ha.d/ldirectord.cf
...
virtual=192.168.80.200:80
        real=192.168.80.102:80 gate
        real=192.168.80.103:80 gate
        fallback=127.0.0.1:80 gate
        service=http
        scheduler=rr
        #persistent=600
        #netmask=255.255.255.255
        protocol=tcp
        checktype=negotiate
        checkport=80
        request=&amp;quot;index.html&amp;quot;
 # 在模版基础之上，修改即可，会根据信息，自动生成ipvs规则，
 # 但lvs的vip仍需要手动配置
 
 [root@lvs ~]# ipvsadm -C
 [root@lvs ~]# ip addr add 192.168.80.200/32 dev lo:1
# 清除所有规则，lvs的vip还需要手动配置

[root@lvs ~]# systemctl start ldirectord
[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 rr
  -&amp;gt; 192.168.80.102:80            Route   1      0          3         
  -&amp;gt; 192.168.80.103:80            Route   1      0          15 
# 启动ldirectd，查看生成的ipvs规则
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、访问测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@rs1 ~]# systemctl stop httpd
# rs1停止之后，调度自动切换，只调度到rs2上

[root@client ~]# while true;do curl http://192.168.80.200;sleep 1;done
rs2:192.168.80.103
rs1:192.168.80.102
rs2:192.168.80.103
rs1:192.168.80.102
rs2:192.168.80.103
rs2:192.168.80.103

[root@lvs ~]# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&amp;gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.80.200:80 rr
  -&amp;gt; 192.168.80.103:80            Route   1      0          10   
 # ipvs规则，自动将rs1摘除
 # 重新启动
 
 
 # 2个都停止，这时sorry server就会提供服务；
 rs1:192.168.80.102
rs2:192.168.80.103
curl: (7) Failed connect to 192.168.80.200:80; Connection refused
rs2:192.168.80.103
rs2:192.168.80.103
rs2:192.168.80.103
rs2:192.168.80.103
rs2:192.168.80.103
curl: (7) Failed connect to 192.168.80.200:80; Connection refused
sorry server
sorry server
sorry server
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs/" term="lvs" label="lvs" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ipvsadm/" term="ipvsadm" label="ipvsadm" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">lvs的10种调度算法</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/lvs%E7%9A%8410%E7%A7%8D%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/" />
            <id>https://latteStudio.github.io/posts/lvs%E7%9A%8410%E7%A7%8D%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</id>
            <updated>2020-10-20T14:46:22&#43;08:00</updated>
            <published>2020-10-20T10:55:08&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">lvs的10种调度算法</summary>
            
                <content type="html">&lt;h1 id=&#34;10种调度算法&#34;&gt;10种调度算法&lt;/h1&gt;
&lt;p&gt;​	官方介绍：http://www.linuxvirtualserver.org/zh/lvs4.html&lt;/p&gt;
&lt;p&gt;​	lvs的调度算法大致分为2类，静态、动态，静态是指lvs不考虑后端节点现有负载情况，根据既定调度算法直接调度，动态更人性化，会考虑后端节点的当前负载状态，忙的就少分点，多的就多分点；&lt;/p&gt;
&lt;p&gt;​	在内核共实现了8种调度算法：+ 2种，共10种，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轮叫调度（Round-Robin Scheduling）&lt;/li&gt;
&lt;li&gt;加权轮叫调度（Weighted Round-Robin Scheduling）&lt;/li&gt;
&lt;li&gt;最小连接调度（Least-Connection Scheduling）&lt;/li&gt;
&lt;li&gt;加权最小连接调度（Weighted Least-Connection Scheduling）&lt;/li&gt;
&lt;li&gt;基于局部性的最少链接（Locality-Based Least Connections Scheduling）&lt;/li&gt;
&lt;li&gt;带复制的基于局部性最少链接（Locality-Based Least Connections with Replication Scheduling）&lt;/li&gt;
&lt;li&gt;目标地址散列调度（Destination Hashing Scheduling）&lt;/li&gt;
&lt;li&gt;源地址散列调度（Source Hashing Scheduling）&lt;/li&gt;
&lt;li&gt;sed （shorest expection delay）&lt;/li&gt;
&lt;li&gt;nq （never queue）&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs/" term="lvs" label="lvs" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/" term="lvs调度算法" label="lvs调度算法" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">lvs的四种工作模型介绍</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/lvs%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/" />
            <id>https://latteStudio.github.io/posts/lvs%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/</id>
            <updated>2020-10-20T14:45:56&#43;08:00</updated>
            <published>2020-10-20T10:54:56&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">lvs的四种工作模型介绍</summary>
            
                <content type="html">&lt;h1 id=&#34;四种工作模型工作过程与特点&#34;&gt;四种工作模型工作过程与特点&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;lvs有常用的三种工作模式，分别是vs/nat网络地址转换、vs/tun隧道模式、vs/dr直接路由

还有一种fullnat，共计4种，
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;相关术语&#34;&gt;相关术语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cip，客户端来源ip&lt;/li&gt;
&lt;li&gt;vip，lvs对外接收客户端数据包的ip&lt;/li&gt;
&lt;li&gt;dip，lvs对内向后端节点转发数据包的ip&lt;/li&gt;
&lt;li&gt;ripN，后端服务器节点的真实ip&lt;/li&gt;
&lt;li&gt;lvs服务器，提供lvs服务，配置ipvs相关规则的服务器&lt;/li&gt;
&lt;li&gt;rs服务器，后端真实提供服务的服务器，支持多种服务，web、mail、media、cache等，&lt;/li&gt;
&lt;li&gt;客户端，用户客户端浏览器&lt;/li&gt;
&lt;li&gt;own router：tun和dr模式下，rs服务器自己的负责转发响应数据的路由器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vsnat&#34;&gt;vs/nat&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;图示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200908161537965.png&#34; alt=&#34;image-20200908161537965&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过程解释：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;lvs的vip接收cip发来的是数据包，中间是互联网，&lt;strong&gt;此时ip头，cip-&amp;gt;vip&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;lvs的vip一般不是公网地址，用一个公网地址配置在最外层防火墙，然后由防火墙做个dnat映射到lvs的vip；此时vip就是私网ip，&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;lvs做ip头部的修改，将目的的vip，改成选出来的某个rip，&lt;strong&gt;此时ip头：cip-ripX&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;这步是ip寻址，所以dip和rip可以跨网段，路由可达即可&lt;/li&gt;
&lt;li&gt;端口可以修改，所以支持端口映射&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;某个rip收到后，处理后，&lt;strong&gt;响应ip头：ripX-cip&lt;/strong&gt;，发给网关dip，即lvs&lt;/li&gt;
&lt;li&gt;lvs收到后，修改ip头部，&lt;strong&gt;此时ip头：vip-cip&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;客户端收到数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本质是由lvs做的多目标ip的dnat&lt;/li&gt;
&lt;li&gt;lvs需要开启ip_forward&lt;/li&gt;
&lt;li&gt;rs的路由需要指向lvs的dip&lt;/li&gt;
&lt;li&gt;lvs处理请求和响应数据，压力大，可负载的后端节点数量少&lt;/li&gt;
&lt;li&gt;操作中，修改了ip头部，且支持修改端口，做端口映射&lt;/li&gt;
&lt;li&gt;后端节点的OS，有tcp/ip协议栈即可，&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;vstun&#34;&gt;vs/tun&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200908171141424.png&#34; alt=&#34;image-20200908171141424&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过程解释&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;lvs由vip处收到cip请求：&lt;strong&gt;包头：cip-vip&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;lvs不对ip头部做修改，在原有ip头部再加一层ip头部，&lt;strong&gt;隧道包头：[cip-vip]dip-rip&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;接下来，根据dip和rip完成，lvs到rs的路由寻址&lt;/li&gt;
&lt;li&gt;可以内部私有网络，可公网互联网&lt;/li&gt;
&lt;li&gt;dip，rip可以都是公网ip，从而完成跨广域网的ip寻址，如跨地域的cache系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;rs收到后，处理，返回时，&lt;strong&gt;包头：vip-cip&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;这个vip一般是配置在每个rs上lo别名接口上，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多个vip共存一个网段时，还要做arp相关的设置&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;从rs自己的路由器返回&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;客户端收到响应&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**rs用自己的出口路由，**从而lvs只承担请求建立、请求端口的数据包，极大扩展了lvs能挂的后端节点&lt;/li&gt;
&lt;li&gt;用ip隧道封装，要求后端rs支持隧道封装，解封装，&lt;/li&gt;
&lt;li&gt;由于ip隧道封装，可以跨广域网，dip和rip可以都是公网ip&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lvs不对原ip头修改，因此端口无法映射&lt;/strong&gt;，即，lvs上service端口要和后端rs服务端口一一对应；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vsdr&#34;&gt;vs/dr&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200908171207029.png&#34; alt=&#34;image-20200908171207029&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过程解释&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;lvs从vip处，收到cip的请求数据，&lt;strong&gt;包头：cip-vip&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;lvs&lt;strong&gt;不做ip头部修改、不做ip头部隧道封装&lt;/strong&gt;，&lt;strong&gt;而是！对二次mac做修改&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;本来是：&lt;strong&gt;cip-vip：上一跳mac-vip接口mac&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;改成是：&lt;strong&gt;cip-vip：dip接口mac-某个rs的rip接口mac&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;经由连接在同一个switch接口，进行二层通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;rip收到，处理，从自己路由返回
&lt;ol&gt;
&lt;li&gt;某个rs看二层目标mac是自己，收了！&lt;/li&gt;
&lt;li&gt;拆到三层，目标vip，我也有，收了！&lt;/li&gt;
&lt;li&gt;于是一直向上进入应用层处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意：同网段，arp广播，多个相同vip时，arp设置问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;客户端收到数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lvs的dip和rs的rip要在&lt;strong&gt;同一个交换机，同一个网段&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个rs要配置vip，在lo的别名接口，且设置non-arp应答&lt;/li&gt;
&lt;li&gt;rs都有自己出口路由&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改二层mac，因此端口不可映射&lt;/strong&gt;，需一一对应&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三种模式对比&#34;&gt;三种模式对比&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;还有一种模式：fullnat，
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200908164704605.png&#34; alt=&#34;image-20200908164704605&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nat
&lt;ul&gt;
&lt;li&gt;后端服务器没什么要求，支持tcp/ip协议栈即可&lt;/li&gt;
&lt;li&gt;一般在一个私有网络，不硬性要求是一个switch连接的局域网，lvs的dip和rs的rip之间路由可达即可；&lt;/li&gt;
&lt;li&gt;可负载的后端节点较少，&lt;/li&gt;
&lt;li&gt;lvs同时做了rs响应数据的网关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tun
&lt;ul&gt;
&lt;li&gt;后端服务器需支持ip的隧道封装，解封装&lt;/li&gt;
&lt;li&gt;lvs的dip和rs的rip可以是局域网，也可是跨互联网的广域网，常用于跨地域的cache系统&lt;/li&gt;
&lt;li&gt;rs有自己的出口路由，&lt;/li&gt;
&lt;li&gt;响应数据不用经过lvs，所以可以负载的后端节点多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dr：lvs的默认模式
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;各个rs需要在自己的lo接口的别名接口上配置vip，且设置为不应答arp广播&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lvs的dip和rs的rip需要是连接在一个交换机上的相同局域网网段内&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rs有自己的出口路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应数据不用经过lvs，所以可以负载的后端节点多&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nat模式缺点&lt;/strong&gt;：请求与响应数据包都经由lvs，lvs就极易成为性能瓶颈，且响应数据一般远远大于请求数据包，若响应数据由各个后端真实节点各自返回给客户端，&lt;strong&gt;就实现了分而治之，各个节点的压力被分担开，系统方便水平扩展！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此有了tun模式和dr模式&lt;/strong&gt;，此2种模式，rs都由自己的路由负责响应数据的转发，lvs只负责 &lt;strong&gt;建立连接的请求数据、断开连接的数据&lt;/strong&gt; 因此极大的提高了lvs可负载的节点数量；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tun和dr模式&lt;/strong&gt;的区别：tun需要ip封装，性能稍差，但支持跨广域网，dr模式直接改写mac地址，性能好些，但将lvs和rs限制在一个交换机连接的局域网；&lt;strong&gt;dr模式为lvs的默认模式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fullnat&#34;&gt;fullnat&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;参考文档：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;lvs的fullnat模型，为alibaba添加的新模块，参考文档如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/LVS&#34;&gt;https://github.com/alibaba/LVS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tonydeng.github.io/sdn-handbook/linux/loadbalance.html&#34;&gt;https://tonydeng.github.io/sdn-handbook/linux/loadbalance.html&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs/" term="lvs" label="lvs" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs4%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B/" term="lvs4种工作模型" label="lvs4种工作模型" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">lvs与集群相关概念介绍</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/lvs%E4%B8%8E%E9%9B%86%E7%BE%A4%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/" />
            <id>https://latteStudio.github.io/posts/lvs%E4%B8%8E%E9%9B%86%E7%BE%A4%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/</id>
            <updated>2020-10-20T14:46:36&#43;08:00</updated>
            <published>2020-10-20T10:54:28&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">lvs与集群相关概念介绍</summary>
            
                <content type="html">&lt;h1 id=&#34;集群相关概念&#34;&gt;集群相关概念&lt;/h1&gt;
&lt;h2 id=&#34;集群&#34;&gt;&lt;strong&gt;集群&lt;/strong&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;对于日益增长用户量，增加单一服务器的性能，不可能随之用户量而实现线性增长，且成本巨大，因此出现了集群系统，将多个普通服务器组织为一个单一的集群，然后多个服务器共同为外部提供服务，**实现用户请求的分而治之，**集群降低了成本，基本上，使得处理能力可以随之用户量实现线性增长
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;网站划分层次&#34;&gt;&lt;strong&gt;网站划分层次&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;垂直分层
&lt;ul&gt;
&lt;li&gt;接入层/安全层，如防火墙，&lt;/li&gt;
&lt;li&gt;负载层/调度层，lvs/keepalived/haproxy&lt;/li&gt;
&lt;li&gt;静态缓存层，如varnish，squid&lt;/li&gt;
&lt;li&gt;静态web层，如httpd/nginx&lt;/li&gt;
&lt;li&gt;静态资源层,，nfs网络文件系统，或分布式文件系统，fastdfs，glusterfs，存储照片等非结构化数据；&lt;/li&gt;
&lt;li&gt;动态应用服务器，如tomcat，phpfpm等java或php网站程序，&lt;/li&gt;
&lt;li&gt;动态会话缓存层，如redis，memcache，使得会话剥离于动态服务器，将tomcat等服务变成stateless，方便水平扩展&lt;/li&gt;
&lt;li&gt;消息队列，如rabbitmq，kafka，做系统的解耦，流量削峰等&lt;/li&gt;
&lt;li&gt;数据持久层，mysql，oracle等关系型数据库，存储结构化数据；&lt;/li&gt;
&lt;li&gt;离线业务层，hadoop生态做大数据分析处理，&lt;/li&gt;
&lt;li&gt;日志层，ELK做日志的收集，分析，展示&lt;/li&gt;
&lt;li&gt;监控层，zabbix，全局各个层次的监控&lt;/li&gt;
&lt;li&gt;持久集成/部署，gitlab，Jenkins，snarqube，代码的持续提交，测试，发布，回滚&lt;/li&gt;
&lt;li&gt;自动化工具，ansible，pubbet&lt;/li&gt;
&lt;li&gt;底层平台：
&lt;ul&gt;
&lt;li&gt;物理机器&lt;/li&gt;
&lt;li&gt;私有云IAAS，kvm，openstack&lt;/li&gt;
&lt;li&gt;容器云，docker，kubernetes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;水平业务切分
&lt;ul&gt;
&lt;li&gt;微服务化，模块化，各服务通过restful api或rpc进行网络通信；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;会话保持的方式&#34;&gt;&lt;strong&gt;会话保持的方式&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	实现会话保持，有多种方式：可以在前端调度器的调度方法上实现；也可以在后端应用服务器实现，利用状态信息在节点间复制，或抽离出来放在高可用的会话服务器上；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调度方法上：
&lt;ul&gt;
&lt;li&gt;sh：调度时，采用源地址hash方式，使得同一个ip的请求，总是发往一个后端服务&lt;/li&gt;
&lt;li&gt;cookie：调度时，基于cookie调度，实现会话保持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;会话复制
&lt;ul&gt;
&lt;li&gt;所有服务器 都保存一份会话信息，相互复制，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;会话服务器
&lt;ul&gt;
&lt;li&gt;将会话信息外置，于redis，memche&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;lvs简介&#34;&gt;lvs简介&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;lvs全称linux virtual server 为章文嵩博士开发的一款负载均衡软件，为linux内核模块之一，内核空间管理命令为ipvsadm，配置使用可实现高可用的有keepalived软件。

lvs可以实现基于ip的负载调度（内核的ipvs模块）、基于内容的调度（内核的KTCPVS模块），如用于七层的web，cache的调度，且是基于内核实现，效率高，不过在开发中，http://www.linuxvirtualserver.org/software/ktcpvs/ktcpvs.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;官方网址&#34;&gt;官方网址&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/Documents.html&#34;&gt;http://www.linuxvirtualserver.org/Documents.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.linuxvirtualserver.org/zh/index.html&#34;&gt;http://www.linuxvirtualserver.org/zh/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kb.linuxvirtualserver.org/wiki/Main_Page&#34;&gt;http://kb.linuxvirtualserver.org/wiki/Main_Page&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;4种工作模型概括&#34;&gt;4种工作模型概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;nat：可支持的并发不高&lt;/li&gt;
&lt;li&gt;tun：调度器和后端节点可以跨公网，适用于如公网cdn&lt;/li&gt;
&lt;li&gt;dr：默认工作模型，适用于本地局域网&lt;/li&gt;
&lt;li&gt;fullnat：不常用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10种调度算法概括&#34;&gt;10种调度算法概括&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;rr：轮询&lt;/li&gt;
&lt;li&gt;wrr：加权轮询&lt;/li&gt;
&lt;li&gt;lc：最小连接调度&lt;/li&gt;
&lt;li&gt;wlc：默认调度算法，加权最小连接调度&lt;/li&gt;
&lt;li&gt;lblc：基于局部的最小连接，local-based least-connection&lt;/li&gt;
&lt;li&gt;lblcr：基于局部的带有复制的最小连接；local-based least-connection with-replication&lt;/li&gt;
&lt;li&gt;sh：源地址hash&lt;/li&gt;
&lt;li&gt;dh：目标地址hash&lt;/li&gt;
&lt;li&gt;sed：shorest expection delay，&lt;/li&gt;
&lt;li&gt;nq：never queue，第一轮均匀分配，后续sed&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%8D%E5%8A%A1/" term="负载均衡服务" label="负载均衡服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lvs/" term="lvs" label="lvs" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx之七层代理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%B9%8B%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%B9%8B%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86/</id>
            <updated>2020-10-19T17:05:20&#43;08:00</updated>
            <published>2020-10-19T15:29:31&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">nginx之七层代理</summary>
            
                <content type="html">&lt;h1 id=&#34;七层代理&#34;&gt;七层代理&lt;/h1&gt;
&lt;p&gt;​	nginx做七层代理，可以代理多种七层协议，代理http为同构代理，代理异构的fastcgi、uwsgi等为异构代理；&lt;/p&gt;
&lt;h2 id=&#34;http代理&#34;&gt;http代理&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_proxy_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_proxy_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分别可以对php动态，http静态，python动态，四层tcp/udp 做代理&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ngx_http_fastcgi_module&lt;/code&gt; module allows passing requests to a FastCGI server.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ngx_http_proxy_module&lt;/code&gt; module allows passing requests to another server.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ngx_http_uwsgi_module&lt;/code&gt; module allows passing requests to a uwsgi server.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ngx_stream_proxy_module&lt;/code&gt; module (1.9.0) allows proxying data streams over TCP, UDP (1.9.13), and UNIX-domain sockets.&lt;/p&gt;
&lt;h3 id=&#34;后端是主机组&#34;&gt;后端是主机组&lt;/h3&gt;
&lt;p&gt;1，后端部署2个httpd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y httpd

echo host3 &amp;gt; /var/www/html/index.html
echo host4 &amp;gt; /var/www/html/index.html
#分别写入不同主页，然后启动
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，定义主机组，定义nginx的虚拟主机做主机组转发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim nginx.conf

http {
...
upstream back1 {
        server 192.168.80.102;
        server 192.168.80.103;

}
...
}
#http段配置后端主机组，可以设置主机的权重，状态，调度算法，健康检测机制等；

[root@host2 conf]# cat vhosts/httpd-pro.conf 
server {
	listen 80;
	server_name www.load1.com;
	location / {
		proxy_pass  http://back1;
	}
}
#做一个虚拟主机，然后引用刚定义的主机组；记得reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# curl www.load1.com
host4
[root@host1 ~]# curl www.load1.com
host3
[root@host1 ~]# curl www.load1.com
host4
[root@host1 ~]# curl www.load1.com
host3
#默认算法是轮询调度
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;调度算法&#34;&gt;调度算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;轮询，默认算法；&lt;/li&gt;
&lt;li&gt;当前最少连接；&lt;/li&gt;
&lt;li&gt;源ip的hash；可以做会话的绑定&lt;/li&gt;
&lt;li&gt;基于key的hash；对$request_uri的hash，适用于后端是varnish缓存的情况，利用提供缓存使用率；&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;http {
...
upstream back1 {
#       least_conn;
        ip_hash;
#   	round-robin;
#		hash $reqeust_uri consistent;
		hash $remote_addr;
		hash $cookie_NAME; 对变量名是NAME的cookie做hash；
nginx默认支持4种调度算法，默认是轮询；
hash为generial hash，可以对一些变量做hash，consisten代表用一致性hash；$request_uri适用于对后端的varnish等缓存做反代的情况；提高缓存命中率；
# 另外，每台server后，可以设置weight权重、down或者backup的状态；

        server 192.168.80.102;
        server 192.168.80.103;

}
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;单节点location为&#34;&gt;单节点、location为/&lt;/h3&gt;
&lt;p&gt;后端主机单节点，转发的location是/；会到后端节点的根网页文件目录寻找文件；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 
bbs虚拟主机：将对/的请求，都转发给102,102是httpd；
server {
        listen 80;
        server_name www.bbs.com;
        location / {
                #root /data/html/bbs;
                #index index.html;
                proxy_pass http://192.168.80.102;
        }

}

#
[root@host1 ~]# curl www.bbs.com
bbs-index
reload后，再次访问，就变为102主页；
[root@host1 ~]# curl www.bbs.com
102-index
[root@host1 ~]# curl www.bbs.com
102-index
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;单节点转发location带uri&#34;&gt;单节点，转发location带uri&lt;/h3&gt;
&lt;p&gt;1，转发配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name www.load1.com;
        index index.html;
        location /path {
                proxy_pass  http://192.168.80.103/;
                # 一定以/结尾，否则会404 not found
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，后端文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host4 html]# echo 666 &amp;gt; 6.html
[root@host4 html]# ll
total 12
-rw-r--r-- 1 root root  4 Aug 30 13:38 6.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，访问&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# curl www.load1.com/path/6.html
666
[root@host1 ~]# curl 192.168.80.103/6.html
666

# 看到对/path/xx的访问转发为了对后端/xx的访问；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;单节点转发location带uri目标节点带uri&#34;&gt;单节点，转发location带uri，目标节点带uri&lt;/h3&gt;
&lt;p&gt;1，配置转发，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name www.load1.com;
        index index.html;
        location /path {
                proxy_pass  http://192.168.80.103/dir/;
        }
}
# dir的uri，会覆盖掉path的uri
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，后端页面；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host4 html]# cat path/1.html 
path-1.html
[root@host4 html]# cat dir/1.html 
dir
[root@host4 html]# ll
total 8
-rw-r--r-- 1 root root  7 Aug 30 13:27 1.html
drwxr-xr-x 2 root root 20 Aug 30 13:31 dir
-rw-r--r-- 1 root root  6 Aug 30 12:47 index.html
drwxr-xr-x 2 root root 38 Aug 30 13:27 path

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，访问&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# curl www.load1.com/path/1.html
dir
[root@host1 ~]# curl 192.168.80.103/dir/1.html
dir

# 可见：对www.load1.com/path/xx下的访问转发为了对192.168.80.103/dir/xx的访问
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;单节点location用正则匹配目标节点要以结尾&#34;&gt;单节点，location用正则匹配，目标节点要以/结尾&lt;/h3&gt;
&lt;p&gt;1，转发配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name www.load1.com;
        index index.html;
        location ~ /path/ {
                proxy_pass  http://192.168.80.103;

        }
}

# 103/后边不可以带uri，/根也不可以带，否则如下报错；
[root@host2 conf]# nginx -s reload
nginx: [emerg] &amp;quot;proxy_pass&amp;quot; cannot have URI part in location given by regular expression
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，后端页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host4 html]# echo path-p &amp;gt; path/p/1.html

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，访问&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# curl www.load1.com/path/p/1.html
path-p
[root@host1 ~]# curl 192.168.80.103/path/p/1.html
path-p
#看到，~ 正则匹配，是将nginx和后端节点的uri都划上了等号；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fastcgi代理&#34;&gt;fastcgi代理&lt;/h2&gt;
&lt;p&gt;0，实验环境：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx+php-fpm，不在同一个主机；

nginx：192.168.80.101
编译安装1.14.2版本

php-fpm：192.168.80.102
编译安装5.5.38版本
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1，编译nginx&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://boogie96.gitee.io/2020/08/28/nginx%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/&#34;&gt;见nginx编译安装部分&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2，编辑php&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://boogie96.gitee.io/2020/10/16/httpd%E4%B9%8BLAMP%E7%8E%AF%E5%A2%83/?highlight=php&#34;&gt;见php编译&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3，配置nginx做fastcgi代理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   location ~* \.php$ {

                fastcgi_pass 192.168.80.102:9000;
                # php-fpm地址和端口
                fastcgi_index index.php;
                # 后端php-fpm的默认页面
                fastcgi_param SCRIPT_FILENAME /data/php$fastcgi_script_name;
                # 传递给后端php-fpm的参数SCRIPT_FILENAME，参数值是/data/php$fastcgi_script_name;即：假如请求的是1.php文件，那么找的文件就是在php-fpm所在主机上，找/data/php/1.php文件，并执行，然后返回结果给nginx，再由nginx返回给客户端；
                # 注意，文件是放在后端php-fpm上的，$fastcgi_script_name的值是请求的uri，如/1.php
                include fastcgi_params;
                # 引入nginx配置目录下的fastcgi_params参数文件；

        }

        location ~*  ^/(ping|status)$ {
                fastcgi_pass 192.168.80.102:9000;
                fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
                include fastcgi_params;
                # 同上，由于ping，和status是内置页面，不需要有真实文件存在于php-fpm的主机上，SCRIPT_FILENAME，只传递一个$fastcgi_script_name即可，即为status或ping

        }
# 以上定义在一个虚拟主机配置段中，本例是在www.pc.com中
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，php-fpm配置&lt;/p&gt;
&lt;p&gt;修改php-fpm配置文件，并开启status和ping的内置页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 php]# grep -v &amp;quot;^;&amp;quot; etc/php-fpm.conf |grep -Ev &amp;quot;^$&amp;quot;
[global]
[www]
user = nginx
group = nginx
listen = 9000
# php-fpm的进程用户，监听端口

listen.allowed_clients = 192.168.80.101,192.168.10.101
# 允许接入的客户端ip

pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3
# 进程相关不影响转发，保持默认即可
 
pm.status_path = /status
ping.path = /ping
ping.response = pong
# 定义status和ping页面

access.log = log/$pool.access.log 
slowlog = log/$pool.log.slow
php_admin_value[error_log] = /var/log/fpm-php.www.log
php_admin_flag[log_errors] = on
php_value[session.save_handler] = files
php_value[session.save_path] = /var/lib/php/session
#日志相关，会话保存文件相关，不影响转发的配置
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;准备index.php文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir /data/php
vim /data/php/index.php
&amp;lt;?php
	phpinfo()
?&amp;gt;
# 准备index.php文件

useradd nginx
chown -R nginx.nginx /data/php/
service php-fpmd restart
# 创建nginx用户，改目录权限，php-fpm的启动用户和nginx保持一致，否则会有权限问题；
# nginx和php-fpm两台主机的nginx用户，uid不必相同；但最好一致！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，访问测试&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830152200712.png&#34; alt=&#34;image-20200830152200712&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830152147282.png&#34; alt=&#34;image-20200830152147282&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830152134015.png&#34; alt=&#34;image-20200830152134015&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;报文头部加工&#34;&gt;报文头部加工&lt;/h2&gt;
&lt;p&gt;1、&lt;strong&gt;客户端请求报文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header&#34;&gt;https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;nginx透传客户端真实ip&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1，使用proxy_set_header指令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name www.pc.com;
        root /data/nginx/pc;
        index index.html;
        location / {
                proxy_set_header x-real-ip $remote_addr;
                proxy_pass http://192.168.80.103;

        }

}
# proxy_set_header指令，添加一个变量，值为引用的内建遍历$remote_addr
nginx -t
nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，httpd修改日志格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 添加一个变量，和nginx定义的需保持一致；
  LogFormat &amp;quot;%{x-real-ip}i %h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; log1

# 引用上步定义的日志格式
CustomLog &amp;quot;logs/access_log&amp;quot; log1

# 语法检查，重启
httpd -t
httpd -k restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，访问，查看日志&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# curl www.pc.com
host4

# 查看httpd日志，比之前多了客户端的真实ip
# 100是客户端，101是nginx代理，103是httpd后端节点；
[root@host4 html]# tailf /var/log/httpd/access_log 
192.168.80.101 - - [30/Aug/2020:13:46:09 +0800] &amp;quot;GET /path/1.html HTTP/1.0&amp;quot; 200 12 &amp;quot;-&amp;quot; &amp;quot;curl/7.29.0&amp;quot;

192.168.80.100 192.168.80.101 - - [30/Aug/2020:14:04:13 +0800] &amp;quot;GET / HTTP/1.0&amp;quot; 200 6 &amp;quot;-&amp;quot; &amp;quot;curl/7.29.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、&lt;strong&gt;服务端响应报文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header&#34;&gt;https://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nginx对从后端接收到的报文头部，做增删修改，如加一个via字段，把自己nginx的ip加入，向客户端表示请求是经由自己转发；去掉后端服务的软件版本等信息；&lt;/p&gt;
&lt;p&gt;1，利用add_header指令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name www.pc.com;
        root /data/nginx/pc;
        index index.html;


        location / {
                proxy_set_header x-real-ip $remote_addr;
                proxy_pass http://192.168.80.103;
                
                add_header x-via $server_addr;
                add_header x-accel $server_name;

        }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，访问，查看头部&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# curl -I www.pc.com
HTTP/1.1 200 OK
Server: nginx/1.14.2
Date: Sun, 30 Aug 2020 06:15:16 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 6
Connection: keep-alive
Last-Modified: Sun, 30 Aug 2020 04:47:06 GMT
ETag: &amp;quot;6-5ae10fa5ad668&amp;quot;
Accept-Ranges: bytes
# reload了nginx之后，头部多了2个字段；
[root@host1 ~]# curl -I www.pc.com
HTTP/1.1 200 OK
Server: nginx/1.14.2
Date: Sun, 30 Aug 2020 06:15:21 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 6
Connection: keep-alive
Last-Modified: Sun, 30 Aug 2020 04:47:06 GMT
ETag: &amp;quot;6-5ae10fa5ad668&amp;quot;
Accept-Ranges: bytes


x-via: 192.168.80.101 # nginx的ip
x-accel: www.pc.com   # nginx哪个虚拟主机提供的转发
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx%E4%BB%A3%E7%90%86/" term="nginx代理" label="nginx代理" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx之tengine与高并发内核参数</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%B9%8Btengine%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%B9%8Btengine%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/</id>
            <updated>2020-10-19T17:07:17&#43;08:00</updated>
            <published>2020-10-19T14:51:42&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">nginx发行版tengine的基础安装配置，与实现nginx高并发相关内核参数的调整</summary>
            
                <content type="html">&lt;h1 id=&#34;tengine部署&#34;&gt;tengine部署&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://tengine.taobao.org/&#34;&gt;http://tengine.taobao.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;淘宝开源的nginx的二次开发版；&lt;/p&gt;
&lt;p&gt;Tengine是由淘宝网发起的Web服务器项目。它在&lt;a href=&#34;http://nginx.org/&#34;&gt;Nginx&lt;/a&gt;的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如&lt;a href=&#34;http://www.taobao.com/&#34;&gt;淘宝网&lt;/a&gt;，&lt;a href=&#34;http://www.tmall.com/&#34;&gt;天猫商城&lt;/a&gt;等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。&lt;/p&gt;
&lt;p&gt;1，安装依赖包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y gcc gcc++ zlib-devel openssl-devel pcre-devel
编译工具
压缩
加密
正则
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，三步走&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;解压后
./configure
make
make install

默认安装的prefix是/usr/local/nginx
nginx -v查看版本为tengine
启动访问测试页面也是tengine

tengine支持DSO，sbin目录多了个dso_install命令
nginx -V 显示默认带有编译的模块，全是static
&amp;lt;prefix&amp;gt;/modules放模块目录

参数基本兼容nginx，额外特性具体参考官网，注意基本哪个版本的nginx的指令配置；

[root@host4 nginx]# ./sbin/nginx -v
Tengine version: Tengine/2.2.1 (nginx/1.8.1)

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;nginx高并发相关内核参数调优&#34;&gt;nginx高并发相关内核参数调优&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;nginx的高并发特性，需要底层内核支持；

内核参数设置：适用的是大多数通用场景；针对nginx的高并发场景，需要设置不同的内核参数；**且nginx做web，做四层反代，七层反代，做内容缓存，需要的内核参数也不尽相同；**
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;提高并发tcp连接的配置&#34;&gt;提高并发tcp连接的配置&lt;/h2&gt;
&lt;p&gt;编辑/etc/sysctl.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat /etc/sysctl.conf 
# sysctl settings are defined through files in
# /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.
#
# Vendors settings live in /usr/lib/sysctl.d/.
# To override a whole file, create a new file with the same in
# /etc/sysctl.d/ and put new settings there. To override
# only specific settings, add a file with a lexically later
# name in /etc/sysctl.d/ and put new settings there.
#
# For more information, see sysctl.conf(5) and sysctl.d(5).
fs.file-max=999999
# 单个进程最大可以打开的句柄数
net.ipv4.tcp_tw_reuse = 1
# 1表示，允许time-wait状态的连接的socket重新用于新的tcp连接，对于有大量的time-wait的连接来说，可提高效率

net.ipv4.tcp_keepalive_time=600
# tcp发送keepalive消息的间隔，默认2h，改为10min，更快清理无效连接
net.ipv4.tcp_fin_timeout = 30
#服务器关闭连接时，socket保持在fin-wait-2状态的时间
#
net.ipv4.tcp_max_tw_buckets = 5000
# 允许time-wait状态的套接字数量的最大值，若超过会立即开始清理，默认是8000，过多的time-wait套接字，会使得服务器变慢
#
net.ipv4.ip_local_port_range = 1024 65000
# 定义tcp udp连接的本地端口取值
net.ipv4.tcp_rmem = 10240 87380 12582912
# 定义tcp接收缓存的最小值 默认值 较大值
net.ipv4.tcp_wmem = 10240 87380 12582912
# 定义tcp写缓存的最小 默认 最大值
net.core.netdev_max_backlog=8096
# 网卡接收数据包速度大于内核处理速度时,暂时保存的队列大小
#
#
# 以下4参数根据实际情况而定
net.core.rmem_default = 6291456
# 内核套接字读即接收缓存区默认大小
net.core.wmem_default = 6291456
#内核套接字发送缓冲区默认大小
net.core.rmem_max=12582912
net.core.wmem_max=12582912
#内核套接字发送接收缓存区最大值


net.ipv4.tcp_syncookies=1
#解决tcp的syn攻击
net.ipv4.tcp_max_syn_backlog=8192
#tcp握手时，syn队列的较大长度，默认1024，设置大防止nginx繁忙来不及调用accept时，客户端的连接不至于被丢失
net.ipv4.tcp_tw_recycle=1
#启用timewait快速回收
#net.core.somaxconn=262114
#默认128，调节系统同时发起的tcp连接数，高并发场景，默认值会导致连接超时或重传
net.ipv4.tcp_max_orphans=262114
# 用于简单防止dos攻击

# sysctl -p生效
# sysctl -a查看所有目前的内核参数
[root@host2 ~]# sysctl -p
fs.file-max = 999999
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_rmem = 10240 87380 12582912
net.ipv4.tcp_wmem = 10240 87380 12582912
net.core.netdev_max_backlog = 8096
net.core.rmem_default = 6291456
net.core.wmem_default = 6291456
net.core.rmem_max = 12582912
net.core.wmem_max = 12582912
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_max_orphans = 262114
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx%E9%AB%98%E5%B9%B6%E5%8F%91/" term="nginx高并发" label="nginx高并发" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx之程序热部署</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%B9%8B%E7%A8%8B%E5%BA%8F%E7%83%AD%E9%83%A8%E7%BD%B2/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%B9%8B%E7%A8%8B%E5%BA%8F%E7%83%AD%E9%83%A8%E7%BD%B2/</id>
            <updated>2020-10-19T17:17:33&#43;08:00</updated>
            <published>2020-10-19T14:47:51&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">nginx不停机做版本的升级，降级操作...</summary>
            
                <content type="html">&lt;h1 id=&#34;热部署&#34;&gt;热部署&lt;/h1&gt;
&lt;h2 id=&#34;nginx信号&#34;&gt;nginx信号：&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/control.html&#34;&gt;https://nginx.org/en/docs/control.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主进程可接收信号
&lt;ul&gt;
&lt;li&gt;TERM , INT 快速关闭&lt;/li&gt;
&lt;li&gt;QUIT	graceful shutdown master 以及worker&lt;/li&gt;
&lt;li&gt;HUP  重读配置文件，用于新的worker，并退出老的worker，即nginx -s reload&lt;/li&gt;
&lt;li&gt;USR1 re-opening log files&lt;/li&gt;
&lt;li&gt;USR2 更换可执行程序，（热切换时用）&lt;/li&gt;
&lt;li&gt;WIHCH  只graceful shutdown worker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;worker进程可接收信号
&lt;ul&gt;
&lt;li&gt;TERM INT 快速关闭&lt;/li&gt;
&lt;li&gt;QUIT graceful shutdown&lt;/li&gt;
&lt;li&gt;USR1 re-opening log files&lt;/li&gt;
&lt;li&gt;WINCH abnormal termination for debugging (requires &lt;a href=&#34;https://nginx.org/en/docs/ngx_core_module.html#debug_points&#34;&gt;debug_points&lt;/a&gt; to be enabled)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;升级&#34;&gt;升级&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1，软链接方式&lt;/strong&gt;，停机切换&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;若编译安装指定prefix带有版本号，可以通过软连接实现版本切换；**注意PATH变量，不能是带版本号的路径，而应该是软链接的路径**
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;初始版本
ln -sv /usr/local/nginx-1.14 /usr/local/nginx

升级：
ln -sv /usr/local/nginx-1.16 /usr/local/nginx

降级：
ln -sv /usr/local/nginx-1.12 /usr/local/nginx

nginx运行时，不能做软链接的删除，重新链接：所以要停机
原因：一旦改变软链接指向，nginx程序就变了，此时在发信号，是找不到与之对应的pid文件的，自然失败；

如下：16在线切为14，命令立刻变为14版本的，发信号是去找14版本目标下的pid，但此时是16版本的nginx在运行，16的才有pid文件；报错文件找不到，【所以软连接直接修改还是需要中断服务的】
[root@host2 nginx-1.16.1]# nginx -v
nginx version: nginx/1.14.2
[root@host2 nginx-1.16.1]# nginx -s reload
nginx: [error] open() &amp;quot;/usr/local/nginx-1.14/logs/nginx.pid&amp;quot; failed (2: No such file or directory)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2，用USR2信号，不中断服务切换版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初始14版本；configure选择带版本号的路径，并做软链接；&lt;/p&gt;
&lt;p&gt;升级为16版本，configure时选择带版本号的路径，升级时，修改软链接指向为新的；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：对configure时选项的需求&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个版本的prefix要带版本号，然后做软链接到/usr/local/nginx&lt;/li&gt;
&lt;li&gt;pid的唯一路径，针对1方式pid文件的问题，需要把多个configure的pid指定为相同的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;14版本编译选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./configure --prefix=/usr/local/nginx-1.14 --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio --with-stream_realip_module --with-stream_ssl_module --with-stream --with-pcre --with-http_gzip_static_module --with-http_realip_module --add-module=/usr/local/src/echo-nginx-module --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/subsys/nginx

[root@host2 nginx-1.14.2]# cat /var/run/nginx/nginx.pid 
30350
[root@host2 nginx-1.14.2]# cat /var/log/nginx/error.log 
[root@host2 nginx-1.14.2]# cat /var/log/nginx/access.log

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;16编译选项&lt;/p&gt;
&lt;p&gt;和14的prefix必须不同，user group需要相同，选项根据需求自定义，&lt;strong&gt;重点是pid路径，2个日志路径，1个锁路径必须一致，新老nginx程序都读一个路径下的pid文件，才能完成在线的版本切换&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx-1.16.1]# ./configure --prefix=/usr/local/nginx-1.16 --user=nginx --group=nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/subsys/nginx


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;开始升级&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软连接切换，从14切到16，此时nginx程序版本是16&lt;/li&gt;
&lt;li&gt;对14实例的主进程发送USR2信号，&lt;strong&gt;作用提示更换程序文件，其实相当于将程序文件重装了一遍，只不过相同的路径，实际已经是16版本的程序了&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;此时2个版本的主-worker进程并存&lt;/li&gt;
&lt;li&gt;pid会更新，新旧pid文件并存&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;向旧pid文件发QUIT信号，会优雅停止旧的主进程及worker进程；
&lt;ol&gt;
&lt;li&gt;此时完成了在线切换&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;**稳妥起见：**先发WINCH信号，只优雅停止旧的worker，旧的主进程保留，方便回退；&lt;/li&gt;
&lt;li&gt;回退时：向旧的主进程发HUP信号，重新加载配置文件，fork出新的旧版本的worker进程，&lt;strong&gt;然后发QUIT信号给新版本的程序的pid，退出&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;此时完成了回退；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;成功升级方法&#34;&gt;成功升级方法&lt;/h2&gt;
&lt;p&gt;reference：https://groups.google.com/g/openresty/c/HiV3c-JwTZ4&lt;/p&gt;
&lt;p&gt;根据回答，上一节，&lt;strong&gt;每个版本设置不同路径，然后用相同软链接配置到PATH变量中，反而会影响在线升级&lt;/strong&gt;，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error.log报错：
[alert] 1284#1284: execve() failed while executing new binary process &amp;quot;nginx&amp;quot; (2: No such file or directory)

正常后error.log：
2020/08/28 11:48:01 [notice] 1371#0: using inherited sockets from &amp;quot;6;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解决方法：直接将编译好的主程序文件，放在sbin目录下，替换原来的主程序，然后发送USR2信号；（不再利用不同版本做软链接的方法）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;启动时一定用绝对路径，不用环境变量里的软链接路径&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 sbin]# /usr/local/nginx-1.14/sbin/nginx -v
nginx version: nginx/1.14.2
[root@host2 sbin]# /usr/local/nginx-1.14/sbin/nginx
[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1339      1  0 11:46 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1340   1339  0 11:46 ?        00:00:00 nginx: worker process
直接用绝对路径启动14版本的nginx

[root@host2 sbin]# ll
total 11952
-rwxr-xr-x 1 root root 8410944 Aug 27 19:13 nginx
-rwxr-xr-x 1 root root 3825016 Aug 28 11:06 nginx.16
[root@host2 sbin]# mv nginx nginx.14
[root@host2 sbin]# mv nginx.16 nginx
[root@host2 sbin]# ll
total 11952
-rwxr-xr-x 1 root root 3825016 Aug 28 11:06 nginx
-rwxr-xr-x 1 root root 8410944 Aug 27 19:13 nginx.14
更换主程序版本


[root@host2 sbin]# ll /var/run/nginx/
total 4
-rw-r--r-- 1 root root 5 Aug 28 11:46 nginx.pid
此时只有一个pid

[root@host2 sbin]# kill -USR2 `cat /var/run/nginx/nginx.pid`
[root@host2 sbin]# ll /var/run/nginx/
total 8
-rw-r--r-- 1 root root 5 Aug 28 11:48 nginx.pid
-rw-r--r-- 1 root root 5 Aug 28 11:46 nginx.pid.oldbin
发送信号后，生成新的pid，以及原有pid共存

[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1339      1  0 11:46 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1340   1339  0 11:46 ?        00:00:00 nginx: worker process
root       1371   1339  0 11:48 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1372   1371  0 11:48 ?        00:00:00 nginx: worker process
此时，2个版本的进程，主和worker都共存；

[root@host2 sbin]# kill -WIHCH `cat /var/run/nginx/nginx.pid.oldbin`
-bash: kill: WIHCH: invalid signal specification
[root@host2 sbin]# kill -s WINCH `cat /var/run/nginx/nginx.pid.oldbin`
[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1339      1  0 11:46 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
root       1371   1339  0 11:48 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1372   1371  0 11:48 ?        00:00:00 nginx: worker process
发送WINCH信号，先把旧的worker退出；

[root@host2 sbin]# kill -s QUIT `cat /var/run/nginx/nginx.pid.oldbin`
确认新版本工作正常一段时间，可以把旧的主进程也退出

[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1371      1  0 11:48 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1372   1371  0 11:48 ?        00:00:00 nginx: worker process
此时，只有新的16版本程序进程了

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;回滚降级&#34;&gt;回滚/降级&lt;/h2&gt;
&lt;p&gt;和升级步骤相同：只是用低版本的14替换现在运行的高版本的16的主程序&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;升级未完成时回滚&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 sbin]# kill -USR2 `cat /var/run/nginx/nginx.pid`
[root@host2 sbin]# ll /var/run/nginx/
total 8
-rw-r--r-- 1 root root 5 Aug 28 12:22 nginx.pid
-rw-r--r-- 1 root root 5 Aug 28 12:13 nginx.pid.oldbin
[root@host2 sbin]# !ps
ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1430      1  0 12:13 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1431   1430  0 12:13 ?        00:00:00 nginx: worker process
root       1458   1430  0 12:22 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1459   1458  0 12:22 ?        00:00:00 nginx: worker process
[root@host2 sbin]# kill -s WINCH `cat /var/run/nginx/nginx.pid.oldbin`
[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1430      1  0 12:13 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
root       1458   1430  0 12:22 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1459   1458  0 12:22 ?        00:00:00 nginx: worker process

[root@host2 sbin]# kill -s HUP `cat /var/run/nginx/nginx.pid.oldbin`
[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1430      1  0 12:13 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
root       1458   1430  0 12:22 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1459   1458  0 12:22 ?        00:00:00 nginx: worker process
nginx      1469   1430  0 12:23 ?        00:00:00 nginx: worker process
使得旧的主进程重新fork旧版的worker

[root@host2 sbin]# kill -s QUIT `cat /var/run/nginx/nginx.pid`
[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1430      1  0 12:13 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1469   1430  0 12:23 ?        00:00:00 nginx: worker process
然后退出新版本的主和worker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;已经升级完成，想要回滚，或者降级&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 sbin]# !ps
ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1371      1  0 11:48 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1411   1371  0 12:06 ?        00:00:00 nginx: worker process
16版本在运行


[root@host2 sbin]# ll
total 11952
-rwxr-xr-x 1 root root 3825016 Aug 28 11:06 nginx
-rwxr-xr-x 1 root root 8410944 Aug 27 19:13 nginx.14
[root@host2 sbin]# mv nginx nginx.16
[root@host2 sbin]# mv nginx.14 nginx
[root@host2 sbin]# ll
total 11952
-rwxr-xr-x 1 root root 8410944 Aug 27 19:13 nginx
-rwxr-xr-x 1 root root 3825016 Aug 28 11:06 nginx.16
更换为14版本

[root@host2 sbin]# kill -USR2 `cat /var/run/nginx/nginx.pid`
[root@host2 sbin]# ll /var/run/nginx/
total 8
-rw-r--r-- 1 root root 5 Aug 28 12:13 nginx.pid
-rw-r--r-- 1 root root 5 Aug 28 11:48 nginx.pid.oldbin
发送USR2信号，重载主程序文件

[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1371      1  0 11:48 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1411   1371  0 12:06 ?        00:00:00 nginx: worker process
root       1430   1371  0 12:13 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1431   1430  0 12:13 ?        00:00:00 nginx: worker process
此时2版本，进程共存

[root@host2 sbin]# nginx -v
nginx version: nginx/1.14.2
[root@host2 sbin]# kill -QUIT `cat /var/run/nginx/nginx.pid.oldbin`
退出16版本的进程

[root@host2 sbin]# ps -ef |grep nginx |grep -v &amp;quot;grep&amp;quot;
root       1430      1  0 12:13 ?        00:00:00 nginx: master process /usr/local/nginx-1.14/sbin/nginx
nginx      1431   1430  0 12:13 ?        00:00:00 nginx: worker process
此时只有14版本进程；完成降级/回滚；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;reference&#34;&gt;reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/f-ck-need-u/p/7658111.html&#34;&gt;https://www.cnblogs.com/f-ck-need-u/p/7658111.html&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">httpd之LAMP环境</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/httpd%E4%B9%8Blamp%E7%8E%AF%E5%A2%83/" />
            <id>https://latteStudio.github.io/posts/httpd%E4%B9%8Blamp%E7%8E%AF%E5%A2%83/</id>
            <updated>2020-10-19T12:58:02&#43;08:00</updated>
            <published>2020-10-15T16:06:38&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">httpd搭建lamp环境，以及discuz和wordpress的部署...</summary>
            
                <content type="html">&lt;h1 id=&#34;lamp环境搭建&#34;&gt;LAMP环境搭建&lt;/h1&gt;
&lt;p&gt;本实验，采用异机部署，机httpd和php，mysql的实例不在同一台主机，&lt;strong&gt;异机部署时，应注意httpd和php分别处理的动静内容的转发问题，通过nfs等网络共享服务能较好的解决该问题，&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;编译安装httpd&#34;&gt;编译安装httpd&lt;/h2&gt;
&lt;p&gt;官方文档：http://httpd.apache.org/docs/2.4/install.html&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装依赖包，编译工具&lt;/li&gt;
&lt;li&gt;configure、make、make install 三步走&lt;/li&gt;
&lt;li&gt;安装后配置
&lt;ol&gt;
&lt;li&gt;PATH变量、&lt;/li&gt;
&lt;li&gt;man文件、头文件、库文件、[可选]&lt;/li&gt;
&lt;li&gt;单独的网页文件存放目录，（一般单独挂载高可用的存储设备，或nfs共享）&lt;/li&gt;
&lt;li&gt;添加apache用户&lt;/li&gt;
&lt;li&gt;服务脚本、配置文件准备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1，安装依赖包，编译安装apr和apr-utils&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装依赖包，编译工具
# 包含pcre正则，expat和xml相关的包，会被httpd应用到
[root@host2 ~]# yum install -y pcre-devel expat-devel pcre gcc gcc++

# 编译安装apr
[root@host2 apr-1.6.2]# ./configure --prefix=/usr/local/apr
[root@host2 apr-1.6.2]# make &amp;amp;&amp;amp; make install
[root@host2 apr-1.6.2]# ll /usr/local/apr/
total 0
drwxr-xr-x 2 root root  26 Aug 31 19:40 bin
drwxr-xr-x 2 root root 148 Aug 31 19:40 build-1
drwxr-xr-x 3 root root  19 Aug 31 19:40 include
drwxr-xr-x 3 root root 140 Aug 31 19:40 lib


# 编译安装apr-utils，需要在apr之后！
configure: error: APR could not be located. Please use the --with-apr option.
[root@host2 apr-util-1.6.1]# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/
[root@host2 apr-util-1.6.1]# make &amp;amp;&amp;amp; make install
[root@host2 apr-util-1.6.1]# ll /usr/local/apr-util/
total 0
drwxr-xr-x 2 root root  26 Aug 31 19:42 bin
drwxr-xr-x 3 root root  19 Aug 31 19:42 include
drwxr-xr-x 3 root root 164 Aug 31 19:42 lib
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，三步走&lt;/p&gt;
&lt;p&gt;常见编译选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./configure -h
...
# 查看选项，编译时应该根据实际需求选择


prefix 
程序安装路径

sysconfdir 
配置文件路径，非必须，不指定默认是prefix目录下的conf目录

#
  --enable-mpms-shared=MPM-LIST
  
  
  --with-mpm=MPM          Choose the process model for Apache to use by
                          unless --enable-mpms-shared is also specified.
单独此项，为静态编译一个mpm模型，这样mpm就选死了；
# 
--with-mpm=MPM
mpm模型三选一，如果选择是只静态编译一种mpm模型，则需要更换其他模型时，必须重新编译！
较好方式：3个都动态编译，指定一个为默认，其他2个还可以随时切换；
示例如下：意思是3种动态模型都动态编译，默认为event，安装后还可以用LoadModule指令可以切换其他2种模型
--with-mpm=event --enable-mpms-shared=all

with-z zlib
压缩启用
with-pcre 
正则启用
with-apr
with-apr-utils
启用Apache Portable Runtime：为应用提供通用运行时环境

# 编译时，动态编译了3种mpm模型后，可以在模块目录看到对应的3种动态模块
[root@host2 httpd-2.4.27]# ll /usr/local/apache/modules/ |grep mpm
-rwxr-xr-x 1 apache apache 191360 Aug 18 19:35 mod_mpm_event.so
-rwxr-xr-x 1 apache apache  88720 Aug 18 19:35 mod_mpm_prefork.so
-rwxr-xr-x 1 apache apache 137424 Aug 18 19:35 mod_mpm_worker.so


configure选项中：
--disable-xx默认是开启的模块
--enable-xx默认是关闭的模块
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;动态/静态编译的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态static编译：编译时，把模块编译到核心模块里面，随着核心模块启动而启动，&lt;strong&gt;也就是说和httpd进程的生命周期一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;静态shared编译：把模块编译为二进制文件，但是不随着核心模块启动而启动，而是需要的时候，用LoadModule指令引用；&lt;strong&gt;所谓动态，即需要增减的时候，用LoadMoudule加载或注释掉需要的模块，然后发送HUP信号，重读配置文件即实现模块的动态装载或卸载&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--enable-so：启用so模块，默认启用，默认静态编译，指定为动态选择不生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 httpd-2.4.27]# httpd -M
Loaded Modules:
 core_module (static)
 so_module (static)
 http_module (static)

一定静态编译的模块so_module,这个模块才使得httpd有了动态装载、卸载模块的能力；
DSO：dymanic shared object 动态共享模块对象；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，开始编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 进入解压后目录，三步走；
# 三种mpm都动态编译，默认用event；启用pcre正则、apr跨平台、启用zlib压缩
[root@host2 httpd-2.4.27]# ./configure --prefix=/usr/local/apache --with-z --with-pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util/ --with-mpm=event --enable-mpms-shared=all

[root@host2 httpd-2.4.27]# make &amp;amp;&amp;amp; make install

# 安装后测试
[root@host2 httpd-2.4.27]# /usr/local/apache/bin/httpd -t
Syntax OK
[root@host2 httpd-2.4.27]# /usr/local/apache/bin/httpd -k start
[root@host2 httpd-2.4.27]# curl localhost
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，编译安装后配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# path变量配置
[root@host2 httpd-2.4.27]# cat /etc/profile.d/httpd.sh
export PATH=/usr/local/apache/bin:$PATH
[root@host2 httpd-2.4.27]# source !$
source /etc/profile.d/httpd.sh

# 改httpd的进程启动用户，默认为nobody
[root@host2 httpd-2.4.27]# useradd apache
[root@host2 httpd-2.4.27]# id apache
uid=1000(apache) gid=1000(apache) groups=1000(apache)

[root@host2 apache]# vim conf/httpd.conf 
	...
	User apache
	Group apche
	...
[root@host2 apache]# apachectl -k restart

# 服务脚本准备
实验时，从yum安装中复制过来，然后修改的服务脚本有点问题，无法关闭进程
# 解决方法：命令行方式管理httpd进程，
apachectl脚本，或httpd即可完成程序的启停；
# 再结合利用/etc/rc.local可以实现开机自启动
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下：非必须配置，但path变量一般都需要配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
--
manpath配置
echo &amp;quot;MANPATH /usr/local/apache/man&amp;quot; &amp;gt;&amp;gt; /etc/man.config

--
path配置
echo &amp;quot;PATH=/usr/local/apache/bin:$PATH&amp;quot; &amp;gt;&amp;gt; /etc/profile.d/apache.sh
source /etc/profile.d/apache.sh 


--
头文件引用？
ln -s /usr/include /usr/local/apache/include

service编写，用yum安装的修改即可；
EnvironmentFile=/etc/sysconfig/httpd
ExecStart=/usr/local/apache/bin/httpd $OPTIONS -k start -DFOREGROUND
ExecReload=/usr/local/apache/bin/httpd $OPTIONS -k graceful
ExecStop=/bin/kill -WINCH ${MAINPID}
主要改了httpd进程的路径；
能启动，能访问，但是启动、关闭，都卡住？如果是命令正常，应该是service文件问题；编译没问题；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编译php&#34;&gt;编译php&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;整体步骤如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装依赖包、编译工具；&lt;/li&gt;
&lt;li&gt;三步走
&lt;ol&gt;
&lt;li&gt;configure：注意：启用php-fpm、mysql连接方式一般选为mysqlnd、&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;make install&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;准备：php配置文件，php-fpm配置文件、服务脚本&lt;/li&gt;
&lt;li&gt;配置php-fpm，允许apache主机的连接，修改监听地址；进程用户改为apache&lt;/li&gt;
&lt;li&gt;apache httpd和php-fpm同主机情况：注意静态网页根目录和动态脚本目根录同一个；&lt;/li&gt;
&lt;li&gt;apache httpd和php-fpm不同主机情况：通过nfs服务，使得网页根目录和脚本目录也为同一个；属主都为apache用户，且uid一致；（php-fpm主机上要创建apache用户，且指定uid一致）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1，安装依赖包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y bzip2-devel libmcrypt-devel openssl-devel libxml2-devel gcc gcc++ 
devel包不要写成level，写错过！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，下载源码包，解压，进入解压后目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php src]# ll
total 17372
-rw-r--r-- 1 root root 17785731 Aug 19 15:26 php-5.5.38.tar.gz
[root@php src]# tar -xf php-5.5.38.tar.gz 
[root@php src]# cd php-5.5.38
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，三步走&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#configure：启用php-fpm方式，用mysqlnd连接数据库，指定安装目录，等，

[root@php php-5.5.38]# ./configure --prefix=/usr/local/php --with-openssl --with-mbstring --enable-sockets --with-freetype-dir --with-jpeg-dir --with-png-dir --with-libxml-dir=/usr --enable-xml --with-zlib --with-mcrypt --with-bz2 --with-mhash --with-config-file-path=/etc \--with-config-file-scan-dir=/etc/php.d --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-fpm

#make

#make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php的configure脚本一些参数说明；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

SAPI modules:

  --with-apxs2=FILE       Build shared Apache 2.0 Handler module. FILE is the optional
                          pathname to the Apache apxs tool apxs
php编译为apache模式的方式时，指定，模块的路径
  --enable-fpm            Enable building of the fpm SAPI executable
php单独运行为fpm格式；

General settings:

  --with-config-file-path=PATH
                          Set the path in which to look for php.ini [PREFIX/lib]
php解释器的配置文件                        
  --with-config-file-scan-dir=PATH
                          Set the path where to scan for configuration files
php-fpm的配置文件夹

---
php连接mysql方式2种；libmysql驱动连接、mysqlnd连接
# libmysql时：需先安装mysql，mysql-devel
# --with-mysql指定mysql安装路径
# with-mysqli mysql_config 脚本路径
# with-pdo-mysql mysql安装路径
# 例如：
./configure --prefix=/usr/local/php --with-mysql=/usrlocal/mysql --with-mysqli=/usr/local/mysql/bin/mysql_cofig 
--with-pdo-mysql=/usr/local/mysql


 --with-pdo-mysql=DIR    PDO: MySQL support. DIR is the MySQL base directory
                          If no value or mysqlnd is passed as DIR, the
                         directory /usr/local/freetds
  --with-mysql=DIR        Include MySQL support.  DIR is the MySQL base
                          directory, if no DIR is passed or the value is
                          mysqlnd the MySQL native driver will be used

  --with-mysqli=FILE      Include MySQLi support.  FILE is the path
                          to mysql_config.  If no value or mysqlnd is passed
                          as FILE, the MySQL native driver will be used
                          
                          
# mysqlnd驱动连接时，不需提前安装mysql mysql-devel
mysqlnd作为上面3项的值，然后enable-mysqlnd
# 例子
./configure --prefix=/usr/local/php --enable-mysqld --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd


 --enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly
                          when required by other extensions

建议用mysqlnd

# 扩展php支持类型的
  --with-vpx-dir=DIR      GD: Set the path to libvpx install prefix
  --with-jpeg-dir=DIR     GD: Set the path to libjpeg install prefix
  --with-png-dir=DIR      GD: Set the path to libpng install prefix
  --with-zlib-dir=DIR     GD: Set the path to libz install prefix
  --with-xpm-dir=DIR      GD: Set the path to libXpm install prefix
  --with-freetype-dir=DIR GD: Set the path to FreeType 2 install prefix
加密，安装，压缩，等；
  --with-libxml-dir=DIR   LIBXML: libxml2 install prefix
  --with-openssl=DIR      Include OpenSSL support (requires OpenSSL &amp;gt;= 0.9.6)
  --with-kerberos=DIR     OPENSSL: Include Kerberos support
  --with-pcre-regex=DIR   Include Perl Compatible Regular Expressions support.
                          DIR is the PCRE install prefix BUNDLED
  --without-sqlite3=DIR   Do not include SQLite3 support. DIR is the prefix to
                          SQLite3 installation directory.
  --with-zlib=DIR         Include ZLIB support (requires zlib &amp;gt;= 1.0.9)
  --with-zlib-dir=&amp;lt;DIR&amp;gt;   Define the location of zlib install directory
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，安装后配置&lt;/p&gt;
&lt;p&gt;php的配置文件php.ini&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;准备php解释器的配置文件；php的一般还有个/etc/php.d/目录

[root@php php-5.5.38]# cp php.ini-production /etc/php.ini
[root@php php-5.5.38]# pwd
/usr/local/src/php-5.5.38
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php-fpmd服务脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;准备php-fpm的服务脚本，加入执行权限

[root@php php-5.5.38]# cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpmd
[root@php php-5.5.38]# chmod +x /etc/init.d/php-fpmd 
[root@php php-5.5.38]# chkconfig php-fpmd on

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php-fpmd的配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;准备php-fpm的配置文件；【和php的配置文件不一回事，类比java配置和tomcat的配置】

[root@php php-5.5.38]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf

注意：/usr/local/php是编译安装的目录；根据情况修改；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改监听端口为本机所有地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php php-5.5.38]# cd /usr/local/php/
[root@php php]# ll
total 0
drwxr-xr-x 2 root root 132 Aug 30 16:54 bin
drwxr-xr-x 2 root root  71 Aug 30 16:58 etc
drwxr-xr-x 3 root root  17 Aug 30 16:54 include
drwxr-xr-x 3 root root  17 Aug 30 16:54 lib
drwxr-xr-x 4 root root  28 Aug 30 16:54 php
drwxr-xr-x 2 root root  21 Aug 30 16:54 sbin
drwxr-xr-x 4 root root  28 Aug 30 16:54 var

[root@php php]# vim etc/php-fpm.conf

# 取消127.0.0.1，即改成监听所有地址

[root@php php]# service php-fpmd start
Starting php-fpm  done
[root@php php]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:9000                                                                           *:*                  
LISTEN     0      128                                                                *:22                                                                             *:*        
# php-fpm默认监听9000端口
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改php-fpm的进程用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;httpd或nginx配置向后端的php-fpm转发时，需要2者进程用户一致，避免权限问题；**uid不同时，测试也可以，但最好保持一致**
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# 将如下nginx改为apache即可，如下为lnmp时实验配置；

[root@php php]# groupadd -g 2000 nginx
[root@php php]# useradd -u 2000 nginx -g nginx
[root@php php]# id nginx
uid=2000(nginx) gid=2000(nginx) groups=2000(nginx)
# 添加nginx用户，uid最好一致，

[root@php php]# vim etc/php-fpm.conf
[root@php php]# service php-fpmd restart
Gracefully shutting down php-fpm . done
Starting php-fpm  done

# 改为nginx用户启动

[root@php php]# ps aux|grep php
root      81399  0.0  0.4  74912  4196 ?        Ss   17:02   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)
nginx     81400  0.0  0.3  74912  3744 ?        S    17:02   0:00 php-fpm: pool www
nginx     81401  0.0  0.3  74912  3744 ?        S    17:02   0:00 php-fpm: pool www
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装xcache&#34;&gt;安装xcache&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;php不是直接编译成二进制，而是会先编译成字节码；opcode，于是采用xcache做字节码的缓存，提高效率，不用随用随编译；
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 xcache-3.2.0]# make install
Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/

问题：
yum install -y autoconf m4
无法打开htdoc目录
暂略；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二进制mysql安装&#34;&gt;二进制mysql安装&lt;/h2&gt;
&lt;p&gt;1，下载二进制压缩包&lt;/p&gt;
&lt;p&gt;2，解压，解压后目录做软链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# tar -xf mysql-5.7.30-el7-x86_64.tar.gz 
[root@mysql local]# ll
...
drwxr-xr-x  9 root root       129 Aug 30 17:10 mysql-5.7.30-el7-x86_64
-rw-r--r--  1 root root 727333633 Aug 20 16:16 mysql-5.7.30-el7-x86_64.tar.gz
...
[root@mysql local]# ln -sv mysql-5.7.30-el7-x86_64 mysql
‘mysql’ -&amp;gt; ‘mysql-5.7.30-el7-x86_64’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，配置环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# vim /etc/profile.d/mysql.sh
[root@mysql local]# source /etc/profile.d/mysql.sh
[root@mysql local]# cat /etc/profile.d/mysql.sh 
export PATH=/usr/local/mysql/bin:$PATH

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，创建数据目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# mkdir /data/mysql -pv
mkdir: created directory ‘/data’
mkdir: created directory ‘/data/mysql’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，创建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# useradd mysql
[root@mysql local]# chown -R mysql.mysql /data/mysql/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6，服务脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql mysql]# cp support-files/mysql.server /etc/init.d/mysqld
[root@mysql mysql]# pwd
/usr/local/mysql

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7，配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 将原有配置文件备份，并修改
[root@mysql mysql]# cp /etc/my.cnf{,.bak}

[root@mysql mysql]# ll /etc/my.cnf*
-rw-r--r--. 1 root root 570 Jun  8  2017 /etc/my.cnf
-rw-r--r--  1 root root 570 Aug 30 17:27 /etc/my.cnf.bak

# 修改如下
[root@mysql mysql]# vim /etc/my.cnf
[root@mysql mysql]# cat /etc/my.cnf
[mysqld]

datadir=/data/mysql
socket=/data/mysql/mysql.sock

symbolic-links=0

skip_name_resolve=on
[mysqld_safe]
log-error=/data/mysql/mariadb.log
pid-file=/data/mysql/mariadb.pid

#
# include all files from the config directory
#
!includedir /etc/my.cnf.d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6，执行数据库初始化脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql mysql]# mysql_install_db --datadir=/data/mysql --user=mysql
2020-08-30 17:31:00 [WARNING] mysql_install_db is deprecated. Please consider switching to mysqld --initialize
2020-08-30 17:31:00 [ERROR]   Child process: /usr/local/mysql-5.7.30-el7-x86_64/bin/mysqldterminated prematurely with errno= 32
2020-08-30 17:31:00 [ERROR]   Failed to execute /usr/local/mysql-5.7.30-el7-x86_64/bin/mysqld --bootstrap --datadir=/data/mysql --lc-messages-dir=/usr/share/mysql --lc-messages=en_US
-- server log begin --
/usr/local/mysql-5.7.30-el7-x86_64/bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory


# 数据库初始化脚本会报错，需要libaio库，安装即可
[root@mysql mysql]# yum install -y libaio

# mysql_install_db脚本废弃，仍会报错，改用mysqld --initialize，会生成随机密码
[root@mysql mysql]# mysqld --initialize
...
[Note] A temporary password is generated for root@localhost: u5qu((8Cp&amp;gt;xs


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7，本地连入，配置远程连接用户权限，建库，建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql mysql]# service mysqld status
 ERROR! MySQL is not running
[root@mysql mysql]# chkconfig mysqld on

[root@mysql mysql]# service mysqld start
Starting MySQL.Logging to &#39;/data/mysql/mariadb.log&#39;.
 SUCCESS! 
[root@mysql mysql]# ss -nlt
                                                                       :::*        
# 连接，用初始化时，生成的随机密码；-S指定通信的socket，默认的/tmp/mysql.sock替换为了/data/mysql/mysql.sock

[root@mysql mysql]# mysql -p&amp;quot;u5qu((8Cp&amp;gt;xs&amp;quot; -S /data/mysql/mysql.sock

# 需先修改密码
mysql&amp;gt; alter user root@&#39;localhost&#39; identified by &#39;wang&#39;;
Query OK, 0 rows affected (0.01 sec)

# 建立远程连接用户
mysql&amp;gt; grant all on *.* to root@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpd配置fastcgi代理转发&#34;&gt;httpd配置fastcgi代理转发&lt;/h2&gt;
&lt;p&gt;1，新建一个虚拟主机，配置fastcgi的转发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

[root@host2 httpd]# cat conf.d/lamp.conf 
&amp;lt;Directory &amp;quot;/lamp&amp;quot;&amp;gt;
	DirectoryIndex index.php index.html
	# 安装wordpress时，没有该项时，报错，浏览器访问一直显示forbidden，
	# 查看日志发现是index文件问题，默认只找index.html，wordpress里面的index.php文件不会找，自然报错；
	# 加上该行之后，重启，即可访问，执行后续安装步骤
	Require all granted
&amp;lt;/Directory&amp;gt;
&amp;lt;VirtualHost *:80&amp;gt;
	ServerName www.bbs.com
	DocumentRoot /lamp
	ProxyPassMatch &amp;quot;^/(.*\.php)$&amp;quot; &amp;quot;fcgi://192.168.80.103:9000/lamp/$1&amp;quot;
&amp;lt;/VirtualHost&amp;gt;

# 错误日志如下：
[Tue Sep 01 18:07:21.854468 2020] [autoindex:error] [pid 2623] [client 192.168.80.1:12361] AH01276: Cannot serve directory /lamp/upload/: No matching DirectoryIndex (index.html) found, and server-generated directory index forbidden by Options directive
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，php-fpm配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监听本机所有ip&lt;/li&gt;
&lt;li&gt;允许httpd主机连接&lt;/li&gt;
&lt;li&gt;创建apache用户，uid和http主机的apache用户保持一致&lt;/li&gt;
&lt;li&gt;提供nfs，供httpd主机挂载；&lt;/li&gt;
&lt;li&gt;逻辑和lnmp完全一致，唯一区别是httpd和nginx代理的配置方法，注意小问题，如Directoryindex那个错误；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3，测试index.php页面&lt;/p&gt;
&lt;p&gt;​	向网页文件根目录，（也是php动态脚本根目录）写入测试php页面；&lt;/p&gt;
&lt;p&gt;​	如下：表明lamp部署成功；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200901175252260.png&#34; alt=&#34;image-20200901175252260&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;部署discuz&#34;&gt;部署discuz&lt;/h1&gt;
&lt;p&gt;1，将解压后的upload目录放在网页文件根目录&lt;/p&gt;
&lt;p&gt;2，浏览器访问http://ip/upload，进行安装，（指定数据库信息，安装中会进行创建，wordpress需要提前建库建用户）&lt;/p&gt;
&lt;p&gt;3，期间可能会遇到目录权限问题，根据提示添加权限，刷新页面即可继续安装；&lt;/p&gt;
&lt;h1 id=&#34;部署wordpress&#34;&gt;部署Wordpress&lt;/h1&gt;
&lt;p&gt;1，建库建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create database wd;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; grant all on wd.* to wd@&#39;192.168.80.%&#39; identified by &#39;wd&#39;;
Query OK, 0 rows affected, 1 warning (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，把解压后wordpress目录放到网页文件根目录，&lt;/p&gt;
&lt;p&gt;3，浏览器访问http://ip/wordpress，进行安装，根据页面提示即可&lt;/p&gt;
&lt;p&gt;4，如果是wordpress下所有内容，直接放到网页文件根目录，则访问http://ip/即可安装；（建议第一种方式）&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;reference&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://boogie96.gitee.io/2020/09/06/nginx%E4%B9%8BLNMP%E7%8E%AF%E5%A2%83/&#34;&gt;lnmp实验示例&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/httpd/" term="httpd" label="httpd" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lamp/" term="LAMP" label="LAMP" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">httpd之七层代理服务</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/httpd%E4%B9%8B%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/" />
            <id>https://latteStudio.github.io/posts/httpd%E4%B9%8B%E4%B8%83%E5%B1%82%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</id>
            <updated>2020-10-16T16:41:28&#43;08:00</updated>
            <published>2020-10-15T16:06:11&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">httpd做七层代理服务，httpd可以代理同构协议http，也可以代理异构协议如factcgi等...</summary>
            
                <content type="html">&lt;h1 id=&#34;httpd代理&#34;&gt;httpd代理&lt;/h1&gt;
&lt;h2 id=&#34;正代&#34;&gt;正代&lt;/h2&gt;
&lt;p&gt;​	httpd可以配置为正向代理，如局域网内部的正代上网出口，一般不常用，可以设置只允许部分局域网内部的ip进行正代上网；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ProxyRequests on
#通过启用proxyrequests指令，即可启动正代服务；
ProxyVia on
&amp;lt;Proxy &amp;quot;*&amp;quot;&amp;gt;
	Require host www.a.com
&amp;lt;/Proxy&amp;gt;
#proxy指令设置，允许正代的客户端ip，以及允许正代出去访问的url
www.a.com 的主机，可以通过该httpd的代理，访问所有url，proxyvia，可以在响应首部加一个via字段
客户端可通过这个知道中间经由了哪个客户端；


eg：
1，httpd配置正代：
[root@www conf.d]# cat proxy.conf 
ProxyRequests on
Proxyvia on
&amp;lt;Proxy &amp;quot;*&amp;quot;&amp;gt;
	Require ip 192.168.80.100
&amp;lt;/Proxy&amp;gt;
[root@www conf.d]# pwd
/etc/httpd/conf.d
然后重启；

2，客户端加代理，不加代理访问；
[root@localhost ~]# curl -h |grep proxy
     --noproxy       List of hosts which do not use proxy
 -x, --proxy [PROTOCOL://]HOST[:PORT] Use proxy on given port


[root@localhost ~]# curl -I www.baidu.com
HTTP/1.1 200 OK
...
Server: bfe/1.0.8.1

加了代理后，头部多了个via字段；
# curl的-x参数，可以指定正向代理的信息；
[root@localhost ~]# curl -I -x 192.168.80.101:80 www.baidu.com
HTTP/1.1 200 OK
...
Pragma: no-cache
Via: 1.1 www.b.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;反代&#34;&gt;反代&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html&#34;&gt;https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	httpd做反代的场景更常用，做反向代理时，分为同构协议反代，和异构协议反代，&lt;strong&gt;同构可以代理http协议，异构可以代理factcgi协议，和后端php服务器通信，常见于lamp环境；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	反代服务器，屏蔽了后端的真实服务器，接收客户端请求，转发到后端服务器处理，接收后端发来的处理结果，再转给客户端；&lt;/p&gt;
&lt;h3 id=&#34;同构反代http&#34;&gt;同构反代http&lt;/h3&gt;
&lt;p&gt;​	1、如下，为同构，反代http协议时配置示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
host3上：配2个虚拟主机；
[root@host3 conf.d]# cat vhosts.conf 
&amp;lt;Directory &amp;quot;/data/host3/www1&amp;quot;&amp;gt;
	Require all granted
&amp;lt;/Directory&amp;gt;
&amp;lt;Directory &amp;quot;/data/host3/www2&amp;quot;&amp;gt;
	Require all granted
&amp;lt;/Directory&amp;gt;
&amp;lt;VirtualHost *:80&amp;gt;
	ServerName www1.host3.com
	DocumentRoot &amp;quot;/data/host3/www1&amp;quot;
	
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:80&amp;gt;
	ServerName www2.host3.com
	DocumentRoot &amp;quot;/data/host3/www2&amp;quot;
	
&amp;lt;/VirtualHost&amp;gt;

---
host2上：写入一个index，然后重启；
[root@host2 httpd]# cat /var/www/html/index.html 
host2-index
[root@host2 httpd]

---
host1做client，访问host2
[root@host1 ~]# curl http://www.host2.com
host2-index
此时为host2的主页


---
host2加上反代配置，注意重启生效；
[root@host2 httpd]# cat conf.d/proxy.conf 
ProxyPass &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
ProxyPassReverse &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
[root@host2 httpd]# 

---
此时host1再访问host2，就已经是被代理的网页了！
[root@host1 ~]# curl http://www.host2.com
www1.host3

--
【遇到的错误】
上面的错误:加index.html访问出错；
[root@host1 ~]# curl http://www.host2.com
www1.host3
[root@host1 ~]# curl http://www.host2.com/index.html
&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//IETF//DTD HTML 2.0//EN&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;502 Proxy Error&amp;lt;/title&amp;gt;
...
html&amp;quot;&amp;gt;GET&amp;amp;nbsp;/index.html&amp;lt;/a&amp;gt;&amp;lt;/em&amp;gt;.&amp;lt;p&amp;gt;
Reason: &amp;lt;strong&amp;gt;DNS lookup failure for: www1.host3.comindex.html&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;

如下：加了斜线后
[root@host2 httpd]# cat conf.d/proxy.conf 
ProxyPass &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;
ProxyPassReverse &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;

再访问正常；【还是等效替换的方法】
原来的没加斜线，访问/index.html就-》host3.comindex.html，自然找不到，映射时加个斜线即-》host3.com/index.html，就对应/data/host3/www1/index.html了；

[root@host1 ~]# curl http://www.host2.com/index.html
www1.host3

eg2:
[root@host2 httpd]# cat conf.d/proxy.conf 
ProxyPass &amp;quot;/images&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
ProxyPassReverse &amp;quot;/images&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
注意顺序，范围小的放前面！
ProxyPass &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;
ProxyPassReverse &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;

[root@host1 ~]# curl http://www.host2.com/images/1.jpg
1.jpg
[root@host1 ~]# curl http://www.host2.com/images/2.jpg
2.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	2、配置时需注意问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;【地址重定向时的反向代理，要多加一行ProxyPassReverse指令，后面的和ProxyPass保持一致即可；】

举例说：
ProxyPass &amp;quot;/images&amp;quot; &amp;quot;http://www.a1.com&amp;quot;
ProxyPassReverse &amp;quot;/images&amp;quot; &amp;quot;http://www.a1.com&amp;quot;

客户端请求http://www.a.com/images/a.gif 时；
会反代到http://www.a1.com/a.gif
如果a.gif被重定向到了b.gif

那么没有ProxyPassReverse时，反代服务器返回给客户的重定向信息时：http://www.a1.com/b.gif,客户群请求该url，是无法访问到的，因为a1是内网地址，无法直接访问；
如果加了ProxyPassReverse ，反代服务器返回给客户端的重定向信息是：http://www.a.com/images/b.gif;客户端访问该url，后，被被反代到a1.com 的b.gif，此时才正常；
【反代，和重定向：反代是反代服务器代为访问，返回结果；重定向是返回重定向到的新url，由客户端自己去访问，】
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;异构反代fastcgi&#34;&gt;异构反代fastcgi&lt;/h3&gt;
&lt;p&gt;​	如下，为反代配置示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eg:
ProxyPass &amp;quot;/&amp;quot; &amp;quot;http://www.a1.com/&amp;quot;
ProxyPassMatch &amp;quot;^(.*\.php)$&amp;quot; &amp;quot;fcgi://127.0.0.1:9000/var/www/html/$1&amp;quot;

加了fcgi的协议头
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;后端主机组配置&#34;&gt;后端主机组配置&lt;/h1&gt;
&lt;h2 id=&#34;主机组配置&#34;&gt;主机组配置&lt;/h2&gt;
&lt;p&gt;​	将一组后端服务器，定义为一个后端服务器组；此时采用各种调度算法，轮询，加权轮询，【可以实现负载分流，故障转移，线性扩缩容等功能】&lt;/p&gt;
&lt;p&gt;​	示例1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Proxy balancer://myset&amp;gt;
	BalancerMember http://1.1.1.1:8080
	BalancerMember http://2.2.2.2:8080
	ProxySet lbmethod=bytraffic 
	调度算法
&amp;lt;/Proxy&amp;gt;
# 用proxy指令定义一个后端服务器组：myset为组名，balancermember定义一各个后端节点，
proxyset可以定义该后端服务器组的属性信息，如调度算法；



ProxyPass &amp;quot;/images/&amp;quot; &amp;quot;balancer://myset/&amp;quot;
ProxyPassReverse &amp;quot;/images&amp;quot; &amp;quot;balancer://myset/&amp;quot;
proxypass处引用，后端服务器组的组名即可，【注意/加还是不加】


#每个balancermember后可以定义每个后端节点属性信息，如权重、超时时长、是否禁用，是否是备用
&amp;lt;Proxy balancer://myset&amp;gt;
	BalancerMember http://1.1.1.1:8080
	BalancerMember http://2.2.2.2:8080 Loadfactor=3 timeout=1 
	权重为1:3
	ProxySet lbmethod=byrequests
	调度算法
&amp;lt;/Proxy&amp;gt;

eg:
反代配置：示例参考官方doc，/的位置，不符合等效替代法了。。
[root@host2 httpd]# cat conf.d/proxy.conf 
#ProxyPass &amp;quot;/images&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
#ProxyPassReverse &amp;quot;/images&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
#ProxyPass &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;
#ProxyPassReverse &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;
&amp;lt;Proxy balancer://back1&amp;gt;
	BalancerMember http://www1.host3.com
	BalancerMember http://www2.host3.com
	ProxySet lbmethod=byrequests
&amp;lt;/Proxy&amp;gt;

ProxyPass &amp;quot;/img&amp;quot; &amp;quot;balancer://back1/&amp;quot;
ProxyPassReverse &amp;quot;/img&amp;quot; &amp;quot;balancer://back1/&amp;quot;

后端服务器：
[root@host3 conf.d]# tree /data/host3/
/data/host3/
├── www1
│   └── 2.html
└── www2
    └── 2.html


访问测试
[root@host1 ~]# curl http://www.host2.com/img/2.html
www222.html
[root@host1 ~]# curl http://www.host2.com/img/2.html
www111.html
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;各个节点属性信息配置&#34;&gt;各个节点属性信息配置&lt;/h2&gt;
&lt;p&gt;​	主机组内，每个节点都可以设置属性信息，如权重、是否备用，是否禁用，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;后端节点可以设置优先级、热备节点
eg：
&amp;lt;Proxy balancer://myset&amp;gt;
	BalancerMember http://master1.com:8080
	BalancerMember http;//master2.com:8080
	BalancerMember http://back1.com:8080 lbset=1
	BalancerMember http://back2.com:8080 lbset=1
	BalancerMember http://hotstandby.com:8080 status=+H
&amp;lt;/Proxy&amp;gt;


master1 master2正常时，优先轮询调度；两个都失败时；
back1 back2登场，因为lbset=1，设置它优先级低于 master1和2，默认lbset=0，数越大，优先级越低

back1和2都坏了，hoststandby生效，因为设置了status=+H


eg:
[root@host2 conf.d]# cat proxy.conf 
&amp;lt;Proxy balancer://back1&amp;gt;
	BalancerMember http://www1.host3.com
	BalancerMember http://www2.host3.com Loadfactor=2 Timeout=2
	BalancerMember http://www.host1.com status=+H
	ProxySet lbmethod=byrequests
&amp;lt;/Proxy&amp;gt;

ProxyPass &amp;quot;/img&amp;quot; &amp;quot;balancer://back1/&amp;quot;
ProxyPassReverse &amp;quot;/img&amp;quot; &amp;quot;balancer://back1/&amp;quot;

再启一台host1，做热备，重启，
客户端测试，结果是
www1 www2的权重轮询，2者都坏，host1就顶上了；
lbset=1不生效？
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;调度算法&#34;&gt;调度算法&lt;/h2&gt;
&lt;p&gt;httpd支持三种调度算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bytraffice&lt;/li&gt;
&lt;li&gt;byrequests&lt;/li&gt;
&lt;li&gt;bybusyness&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;调度算法3种：
byrequests 默认，基于请求次数计算权重
bytraffic 基于io大小算权重
bybusyness 基于挂起请求数，即后端的繁忙程度算权重
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;负载均衡状态页管理页&#34;&gt;负载均衡状态页、管理页&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Location &amp;quot;/balancer-manager&amp;quot;&amp;gt;
    SetHandler balancer-manager
    Require host localhost
&amp;lt;/Location&amp;gt;

&amp;lt;Location &amp;quot;/server-status&amp;quot;&amp;gt;
	SetHandler server-status
	Require ip 192.168.80.100
&amp;lt;/Location&amp;gt;、

摘自官方doc，直接贴，重启；

浏览器访问该uri即可
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;健康检查&#34;&gt;健康检查&lt;/h2&gt;
&lt;p&gt;​	1、提供检查功能的模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ProxyPass指令自带ping指令，可判断后端节点是否可以ping通，但http服务只ping不够准确；

mod_proxy_hcheck模块提供了对http服务检查的指令；

[root@host2 httpd-2.4.27]# ll /usr/local/apache/modules/ |grep check
-rwxr-xr-x 1 apache apache 105896 Aug 18 19:35 mod_proxy_hcheck.so
[root@host2 httpd-2.4.27]# ./configure -h |grep hcheck
  --enable-proxy-hcheck   reverse-proxy health-check module. Requires
  默认不启用该模块，编译时需要明确指定编译该模块，
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	2、检查配置示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;检查的方法：常见检查方法有2种，tcp检查，和http探测；
hcmethod
	TCP
	OPTIONS
	HEAD
	GET

检查的属性参数
hcinterval 默认30s，检查间隔
hcuri 检查哪个uri
hcpasses=N 默认1，检查几次通过，认为检查，再次启动
hcfails=N 默认1，检查几次失败，认为不可用

eg:
&amp;lt;Proxy balancer://back1&amp;gt;
	BalancerMember http://www.a.com/ hcmethod=TCP hcinterval=5 hcpasses=3 hcfails=5
	BalancerMember http://www.b.com/ hcmethod=GET hcuri=/status.php 
	BalancerMember http://www.c.com/
&amp;lt;/Proxy&amp;gt;

ProxyPass &amp;quot;/&amp;quot; &amp;quot;balancer://back1&amp;quot;
ProxyPassReverse &amp;quot;/&amp;quot; &amp;quot;balancer://back1&amp;quot;

【注意：/斜线的问题】
	访问反代的/1.jpg 对应balancer://back1+1.jpg
	又对应，www.a.com/+1.jpg
	所以最后访问的是www.a.com/1.jpg

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	3、带有变量的检查方法&lt;/p&gt;
&lt;p&gt;参考文档：https://httpd.apache.org/docs/2.4/mod/mod_proxy_hcheck.html#proxyhcexpr&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 通过ProxyHCExpr指令，设置变量，该变量利用正则对应匹配探测响应报文的头部或body部分，
# 再在每个节点出引用该变量，作为判断节点是否健康的依据
ProxyHCExpr ok234 {%{REQUEST_STATUS} =~ /^[234]/}
ProxyHCExpr gdown {%{REQUEST_STATUS} =~ /^[5]/}
ProxyHCExpr in_maint {hc(&#39;body&#39;) !~ /Under maintenance/}

&amp;lt;Proxy balancer://foo&amp;gt;
  BalancerMember http://www.example.com/  hcmethod=GET hcexpr=in_maint hcuri=/status.php
  BalancerMember http://www2.example.com/ hcmethod=HEAD hcexpr=ok234 hcinterval=10
  BalancerMember http://www3.example.com/ hcmethod=TCP hcinterval=5 hcpasses=2 hcfails=3
  BalancerMember http://www4.example.com/
&amp;lt;/Proxy&amp;gt;

ProxyPass &amp;quot;/&amp;quot; &amp;quot;balancer://foo&amp;quot;
ProxyPassReverse &amp;quot;/&amp;quot; &amp;quot;balancer://foo&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;proxy相关指令&#34;&gt;Proxy相关指令&lt;/h1&gt;
&lt;p&gt;实验中例子；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf.d]# cat proxy.conf 
#ProxyPass &amp;quot;/images&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
#ProxyPassReverse &amp;quot;/images&amp;quot; &amp;quot;http://www1.host3.com&amp;quot;
#ProxyPass &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;
#ProxyPassReverse &amp;quot;/&amp;quot; &amp;quot;http://www1.host3.com/&amp;quot;
ProxyStatus On
ProxyVia on
&amp;lt;Location &amp;quot;/doc&amp;quot;&amp;gt;
	ProxyPass &amp;quot;http://www1.host3.com&amp;quot;
&amp;lt;/Location&amp;gt;

ProxyPassMatch &amp;quot;^/(.*\.gif)$&amp;quot; &amp;quot;http://www.host1.com/$1&amp;quot;
&amp;lt;Proxy balancer://back1&amp;gt;
	BalancerMember http://www1.host3.com 
	BalancerMember http://www2.host3.com Loadfactor=2 Timeout=2
	BalancerMember http://www.host1.com status=+H
	ProxySet lbmethod=byrequests
&amp;lt;/Proxy&amp;gt;

ProxyPass &amp;quot;/img&amp;quot; &amp;quot;balancer://back1/&amp;quot;
ProxyPassReverse &amp;quot;/img&amp;quot; &amp;quot;balancer://back1/&amp;quot;

# 开启2个页面，后端主机组管理页面，和状态页面
# 注意设置较为严格的访问权限
&amp;lt;Location &amp;quot;/balancer-manager&amp;quot;&amp;gt;
    SetHandler balancer-manager
    Require host localhost
    Require ip 192.168.80.100
&amp;lt;/Location&amp;gt;
&amp;lt;Location &amp;quot;/server-status&amp;quot;&amp;gt;
	SetHandler server-status
	Require ip 192.168.80.100
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxypass&#34;&gt;ProxyPass&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1，配置反代，应关闭正代
ProxyRequests=off

2,ProxyPass 语法
Syntax:	ProxyPass [path] !|url [key=value [key=value ...]] [nocanon] [interpolate] [noquery]
ProxyPass [path] !|url [key=valuse...]
path为反代对客户端提供的url路径；
url为后端服务器提供实际内容的url路径；
若为！，表示path表示的路径，不做反代处理

key=value是一些属性设置，设置后端节点的属性；


3，示例：
ProxyPass &amp;quot;/images/&amp;quot; &amp;quot;http://www.b.com/&amp;quot;
或
ProxyPass &amp;quot;/images&amp;quot; &amp;quot;http://www.b.com&amp;quot;
可以看出；path和url部分，对于末尾斜线，要么都由，要么都没有；


4，location容器中，不需要指定path，因为location本身就带了path配置
&amp;lt;Location &amp;quot;/images&amp;quot;&amp;gt;
	ProxyPass &amp;quot;http://www.a.com&amp;quot;
&amp;lt;/Location&amp;gt;
访问http://反代机器/images/1.jpg 会反代到http://www.a.com/1.jpg


&amp;lt;Location &amp;quot;/doc&amp;quot;&amp;gt;
	ProxyPass &amp;quot;http://www1.host3.com&amp;quot;
&amp;lt;/Location&amp;gt;


5，eg
ProxyPass &amp;quot;/images/1.jpg&amp;quot; &amp;quot;!&amp;quot;
ProxyPass &amp;quot;/images/&amp;quot; &amp;quot;http://www.a.com/&amp;quot;

1.jpg不反代，其他都反代；





----
httpd用连接池组织后端的节点；节点属性相同的共享一个连接池；后端节点属性，kv值指定
keepalive=on|off默认off，一般也是off

lbset=N，后端节点优先级，数越大，优先级越小；
httpd只有找不到上一个高优先级的节点之后，才会找下一个优先级的节点；
ping=N，和后端tomat通过ajp协议ping探测的时间间隔；
retry=N，检查到后端节点错误时，多久后重试
timeout=ProxyTimeout，等待后端返回数据的超时时间；

status=value，设置节点状态；
+为设置
-为取消设置
D:禁用节点
H:备份节点
I：无视该节点的错误
S：节点维护期
E：节点为错误状态
N：节点drain模式，只接收已预订的sticky session



---
用了balancer://后，其中节点可共享一部分属性，用ProxySet设置；
lbmethod= bytraffic byrequests bybusyness
三种调度算法

nofailover=on|off，是否开启故障状态，当后端节点之间，没有会话复制的时候，建议为on，不要失败转移，因为即便转移了，会话在新机器上也没有，直接返回错误才恰当
stickysession：sesssion名称如：JSESSIOND PHPSESSION


---
eg:
都不带斜线
&amp;lt;Proxy balancer://myset&amp;gt;
	BalancerMember http://www.a.com
	BalancerMember http://www.b.com Loadfactor=3 Timeout=3
	ProxySet lbmethod=byrequests
&amp;lt;/Proxy&amp;gt;

都带斜线
ProxyRequests off
ProxyPass &amp;quot;/images/&amp;quot; &amp;quot;balancer://myset/&amp;quot;
ProxyPassReverse &amp;quot;/images/&amp;quot; &amp;quot;balancer://myset/&amp;quot;

注意：斜线的一致原则，判断方法，位置等效替代；
/images/1.jpg &amp;gt; myset/1.jpg
myset/1.jpg &amp;gt; http://www.a.com/1.jpg
此时a.com的1.jpg有文件，就可以了
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxypassmatch&#34;&gt;ProxyPassMatch&lt;/h2&gt;
&lt;p&gt;支持正则的ProxyPass；&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ProxyPassMatch &amp;quot;^/(.*\.jpg)$&amp;quot; &amp;quot;http://www.a.com/$1&amp;quot;
ProxyPassMatch &amp;quot;^/(.*\.php)$&amp;quot; &amp;quot;fcgi://127.0.0.1:9000/var/www/a.com/$1&amp;quot;

两处都是分组匹配，注意/没有归到分组里；
^/的/和/$1的/ ，2者对应；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxyset&#34;&gt;ProxySet&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;设置后端节点的属性，一般设置在一个proxy节点组里；
如该主机组的调度算法，是否开启长连接

&amp;lt;Proxy &amp;quot;balancer://back1&amp;quot;&amp;gt;
	BalancerMember &amp;quot;http://www.a.com&amp;quot;
	BalancerMember &amp;quot;http://www.b.com&amp;quot; Loadfactor=2 Timeout=3
	ProxySet lbmethod=bytraffic
	ProxySet keealive=on
	
&amp;lt;/Proxy&amp;gt;

ProxySet &amp;quot;balancer://foo&amp;quot; lbmethod=traffic timeout=15
也可以单独设置；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxy容器&#34;&gt;Proxy容器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;proxy&amp;gt;容器，用于封装proxy相关的指令；主要用来定义后端节点组，他们的属性，调度算法；
然后再proxyPass中引用；

&amp;lt;Proxy &amp;quot;*&amp;quot;&amp;gt;
  Require host yournetwork.example.com
&amp;lt;/Proxy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxystatus&#34;&gt;ProxyStatus&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ProxyStatus {on|off|full}
on=full，开启后，server-stauts页面会有代理相关信息
需要开启状态页，定义一个location，并用set-handler指令开启状态页

eg:
ProxyStatus on
&amp;lt;Location &amp;quot;/server-status&amp;quot;&amp;gt;
	SetHandler server-stauts
	Require all granted
&amp;lt;/Location&amp;gt;

浏览器打开状态页，会有代理相关信息；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxyvia&#34;&gt;ProxyVia&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ProxyVia on开启时，反代服务器会在给客户端的响应头部中加入一个字段：Via：值一般是反代服务器的ip
告知客户端，你的请求是经由反代转发的，我其实是个反代；

curl -I http://反代/index.html
开启后，
会发现多了个Via字段；


[root@host1 ~]# curl  -I http://www.host2.com/hello.gif
HTTP/1.1 200 OK
...
Content-Type: image/gif
Via: 1.1 www.host2.com

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxypass指令顺序共享&#34;&gt;ProxyPass指令顺序、共享&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proxypass 范围小的放前面、看的是在配置文件中出现的位置先后；location无所谓、看的是uri匹配长短&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxypass根据出现的先后顺序生效；前面的被匹配生效了；
后面的就不看了；

但在location容器中，不看location的顺序，而看location中定义的uri的匹配的长度的长短；
即，最长匹配原则

eg：
ProxyPass &amp;quot;/images/1.jpg&amp;quot; &amp;quot;!&amp;quot;
ProxyPass &amp;quot;/images&amp;quot; &amp;quot;http://www.a.com&amp;quot;

此时，请求1.jpg是不会被反代的，顺序一换；就会被反代；
ProxyPass &amp;quot;/images&amp;quot; &amp;quot;http://www.a.com&amp;quot;
ProxyPass &amp;quot;/images/1.jpg&amp;quot; &amp;quot;!&amp;quot;

如果是在location里，顺序就不影响了
&amp;lt;Location &amp;quot;/images&amp;quot;&amp;gt;
	ProxyPass &amp;quot;http://www.a.com&amp;quot;
&amp;lt;/Location&amp;gt;

&amp;lt;Location &amp;quot;/images/1.jpg&amp;quot;&amp;gt;
	ProxyPass &amp;quot;!&amp;quot;
&amp;lt;/Location&amp;gt;
此时仍会被第2个location处理，不被反代，因为它匹配的更长，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;共享&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;后端节点设置的属性会被共享的，

eg:
ProxyPass &amp;quot;/apps&amp;quot; &amp;quot;http://www.a.com&amp;quot; Timeout=10
ProxyPass &amp;quot;/pcs&amp;quot; &amp;quot;http://www.a.com&amp;quot; Timeout=5

访问/pcs/pc1.html
会被第2个处理，但超时时间可是10，不是5；这就是共享；
不太懂？
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;location指令总结&#34;&gt;location指令总结：&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://httpd.apache.org/docs/2.4/mod/core.html#location&#34;&gt;https://httpd.apache.org/docs/2.4/mod/core.html#location&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	location 指令可以结合其他指令一起使用，如：alias，redirect，proxypass，以及单独使用，location指令的作用是定义一个uri路径对外提供，&lt;strong&gt;结合其他指令使用时，这个uri可以被映射到本地文件系统路径（alias）；可以被重定向到一个新的uri或完整的url（redirect）；可以被反代到其他服务器（proxypass），可以开启内置状态页（结合set-handler）；可以单独使用（结合directory，放开本地文件系统目录提供uri）&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;结合alias&#34;&gt;结合alias&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;location &amp;quot;uri路径&amp;quot;&amp;gt;
	alias 本地文件系统路径
&amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;结合redirect&#34;&gt;结合redirect&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;location &amp;quot;旧的uri路径&amp;quot;&amp;gt;
	redirect 状态码 新的uri路径
&amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;结合proxypass&#34;&gt;结合proxypass&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Location &amp;quot;/images&amp;quot;&amp;gt;
	ProxyPass &amp;quot;http://www.a.com&amp;quot;
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;结合set-handler&#34;&gt;结合set-handler&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Location &amp;quot;/server-status&amp;quot;&amp;gt;
	SetHandler server-status
	Require ip 192.168.80.100
&amp;lt;/Location&amp;gt;、
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/httpd/" term="httpd" label="httpd" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/httpd%E4%BB%A3%E7%90%86/" term="httpd代理" label="httpd代理" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">httpd之web服务</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/httpd%E4%B9%8Bweb%E6%9C%8D%E5%8A%A1/" />
            <id>https://latteStudio.github.io/posts/httpd%E4%B9%8Bweb%E6%9C%8D%E5%8A%A1/</id>
            <updated>2020-10-16T12:52:42&#43;08:00</updated>
            <published>2020-10-15T16:05:55&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">httpd做web服务的相关配置</summary>
            
                <content type="html">&lt;h1 id=&#34;虚拟主机配置&#34;&gt;虚拟主机配置&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;虚拟主机配置步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1，单独创建一个虚拟主机目录，一个虚拟主机一个配置文件，在主配置文件中Include引入；
[root@host2 conf]# pwd
/usr/local/apache/conf
[root@host2 conf]# mkdir vhosts
[root@host2 conf]# ll
drwxr-xr-x 2 root root   313 Aug 31 19:47 extra
-rw-r--r-- 1 root root 18417 Sep  1 15:52 httpd.conf
-rw-r--r-- 1 root root 18385 Sep  1 10:22 httpd.conf.bak
-rw-r--r-- 1 root root 13077 Aug 31 19:47 magic
-rw-r--r-- 1 root root 60855 Aug 31 19:47 mime.types
drwxr-xr-x 3 root root    37 Aug 31 19:47 original
drwxr-xr-x 2 root root     6 Sep  1 15:52 vhosts
[root@host2 conf]# vim vhosts/pc.conf

2，directory指定一个将要存放某虚拟主机网页文件的目录、并用Require指令放开文件系统授权，以及进程用户对目录的权限
3，定义虚拟主机配置段，指定documentroot为上步directory中指定目录；
[root@host2 conf]# cat vhosts/pc.conf 
&amp;lt;Directory &amp;quot;/data/pc&amp;quot;&amp;gt;
	Require all granted
&amp;lt;/Directory&amp;gt;

&amp;lt;VirtualHost *:80&amp;gt;
	ServerName www.pc.com
	DocumentRoot &amp;quot;/data/pc&amp;quot;
&amp;lt;/VirtualHost&amp;gt;


4，主配置中引入
[root@host2 conf]# tail -1 httpd.conf
Include conf/vhosts/*.conf



5，创建对应目录，如有需要改为apache属主，一般只读权限也够了
[root@host2 conf]# httpd -t
AH00112: Warning: DocumentRoot [/data/pc] does not exist
Syntax OK

[root@host2 conf]# mkdir /data/pc -pv
mkdir: created directory ‘/data’
mkdir: created directory ‘/data/pc’
[root@host2 conf]# httpd -t
Syntax OK
[root@host2 conf]# vim /data/pc/index.html
[root@host2 conf]# httpd -k restart

6，客户端改hosts文件，访问测试；
[root@host1 ~]# curl www.pc.com
pc-index page
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如下：基于主机头的虚拟主机&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# cat /etc/httpd/conf.d/vhosts.conf 
# 先用directory指令放开文件系统的访问
# apache用户对文件系统的权限
# 定义虚拟主机配置段

&amp;lt;Directory &amp;quot;/data/host3/www1&amp;quot;&amp;gt;
	Require all granted
&amp;lt;/Directory&amp;gt;

&amp;lt;Directory &amp;quot;/data/host3/www2&amp;quot;&amp;gt;
	Require all granted
&amp;lt;/Directory&amp;gt;

&amp;lt;VirtualHost *:80&amp;gt;
	ServerName www1.host3.com
	DocumentRoot &amp;quot;/data/host3/www1&amp;quot;
	
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost *:80&amp;gt;
	ServerName www2.host3.com
	DocumentRoot &amp;quot;/data/host3/www2&amp;quot;
	
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基于ip&#34;&gt;基于ip&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
编辑vhosts配置文件，include到主配置文件中，默认就有
[root@localhost httpd]# cat conf.d/vhosts.conf 
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.a.com
	DocumentRoot /var/www/html/html/a.com
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost 192.168.10.101:80&amp;gt;
	ServerName www.b.com
	DocumentRoot /var/www/html/html/b.com
&amp;lt;/VirtualHost&amp;gt;

# Load config files in the &amp;quot;/etc/httpd/conf.d&amp;quot; directory, if any.
IncludeOptional conf.d/*.conf

---注意：
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
        ServerName www.a.com
        DocumentRoot html/a.com
&amp;lt;/VirtualHost&amp;gt;
利用相对路径写法时，在serverroot和documentroot都建立了对应目录，都不行，最后写成绝对路径才行！

---
创建对应目录文件，
  226  mkdir /var/www/html/html/{a.com,b.com} -pv
  227  echo a.com &amp;gt; /var/www/html/html/a.com/index.html
  229  echo b.com &amp;gt; /var/www/html/html/b.com/index.html
  
---
调试配置文件，然后重启httpd
[root@localhost httpd]# httpd -S -f /etc/httpd/conf/httpd.conf 
AH00558: httpd: Could not reliably determine the server&#39;s fully qualified domain name, using localhost.localdomain. Set the &#39;ServerName&#39; directive globally to suppress this message
VirtualHost configuration:
192.168.10.101:80      www.b.com (/etc/httpd/conf.d/vhosts.conf:5)
192.168.80.101:80      www.a.com (/etc/httpd/conf.d/vhosts.conf:1)
ServerRoot: &amp;quot;/etc/httpd&amp;quot;
Main DocumentRoot: &amp;quot;/var/www/html&amp;quot;
Main ErrorLog: &amp;quot;/etc/httpd/logs/error_log&amp;quot;
Mutex authdigest-opaque: using_defaults
Mutex proxy-balancer-shm: using_defaults
Mutex rewrite-map: using_defaults
Mutex authdigest-client: using_defaults
Mutex proxy: using_defaults
Mutex authn-socache: using_defaults
Mutex default: dir=&amp;quot;/run/httpd/&amp;quot; mechanism=default 
Mutex mpm-accept: using_defaults
PidFile: &amp;quot;/run/httpd/httpd.pid&amp;quot;
Define: _RH_HAS_HTTPPROTOCOLOPTIONS
Define: DUMP_VHOSTS
Define: DUMP_RUN_CFG
User: name=&amp;quot;apache&amp;quot; id=48
Group: name=&amp;quot;apache&amp;quot; id=48



---
测试
[root@localhost ~]# curl 192.168.10.101
b.com
[root@localhost ~]# curl 192.168.80.101
a.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基于port&#34;&gt;基于port&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
多加一个listen端口；
[root@localhost httpd]# grep Listen conf/httpd.conf 
# Listen: Allows you to bind Apache to specific IP addresses and/or
# Change this to Listen on specific IP addresses as shown below to 
#Listen 12.34.56.78:80
Listen 80
Listen 8080

虚拟主机，改成ip相同，端口不同；重启测试；
[root@localhost httpd]# cat conf.d/vhosts.conf 
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.a.com
	DocumentRoot /var/www/html/html/a.com
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost 192.168.80.101:8080&amp;gt;
	ServerName www.b.com
	DocumentRoot /var/www/html/html/b.com
&amp;lt;/VirtualHost&amp;gt;



---
[root@localhost ~]# curl 192.168.80.101:80
a.com
[root@localhost ~]# curl 192.168.80.101:8080
b.com

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基于主机头&#34;&gt;基于主机头&lt;/h2&gt;
&lt;p&gt;​	web服务器对外提供的ip和port只有一份，但是拆包到http头的时候，根据请求头部的主机名不同，可转发给不同的虚拟主机段进行处理；虚拟主机必须指定自己独有的ServerName，没指定时，就继承所在主机的FQDN；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
改成ip，port都一样，靠servername区分；
listen改为只有一个80；重启；

[root@localhost httpd]# cat conf.d/vhosts.conf 
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.b.com
	DocumentRoot /var/www/html/html/b.com
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.a.com
	DocumentRoot /var/www/html/html/a.com
&amp;lt;/VirtualHost&amp;gt;

---
另一台主机测试：

[root@localhost ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.80.101 www.a.com www.b.com www.c.com


[root@localhost ~]# curl www.a.com
a.com
[root@localhost ~]# curl www.b.com
b.com
[root@localhost ~]# curl www.c.com
a.com
对于没有定义的主机头www.c.com，会被排第一位的虚拟主机匹配并处理，交换2虚拟主机定义位置后，再访问www.com就成了b.com的结果；

[root@localhost ~]# curl www.b.com
b.com
[root@localhost ~]# curl www.a.com
a.com
[root@localhost ~]# curl www.c.com
b.com

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;状态页&#34;&gt;状态页&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
setHandler结合
开启状态页
&amp;lt;Location &amp;quot;/server-status&amp;quot;&amp;gt;
	SetHandler server-status
	Require all granted
&amp;lt;/Location&amp;gt;
同样，location支持正则
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;网页身份认证&#34;&gt;网页身份认证&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;访问控制可根据来源ip和来源用户身份&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;htpasswd&#34;&gt;htpasswd&lt;/h2&gt;
&lt;p&gt;​	用于创建用户和密码，用作用户认证的依据文件，一般为.开头的隐藏文件，并设置合理的权限，保证安全；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;htpasswd -h

[root@localhost conf.d]# htpasswd -bc ht.pass wang wang
Adding password for user wang

b 不用提示符，直接命令行就输入密码，没有b会提示交互式输入密码；
c 是新建一个passfile，每次用c都会新建，和之前的passfile相同名字会冲掉之前内容；
D 是删除用户
n 不输出到文件，输出到控制台；

n和c不同时用；



[root@localhost conf.d]# htpasswd -b ht.pass li li
Adding password for user li
[root@localhost conf.d]# cat ht.pass 
wang:$apr1$xW9RSLyU$o0sJmbQdw4whjzxlrq4lD1
li:$apr1$Ql.LAGAT$N7di3x5IfUmQcF4sqd3KI/
[root@localhost conf.d]# htpasswd -D ht.pass wang
Deleting password for user wang
[root@localhost conf.d]# cat ht.pass 
li:$apr1$Ql.LAGAT$N7di3x5IfUmQcF4sqd3KI/


---
改加密算法，默认md5
[root@localhost conf.d]# htpasswd -bns wang wang
wang:{SHA}w2n5nCHTE/Xp7iuVe5PMcMOwIE0=

[root@localhost conf.d]# htpasswd -bnm wang wang
wang:$apr1$sESRKDad$ZKJU.gPwOZcwxbe71E1w61

[root@localhost conf.d]# htpasswd -bnp wang wang
Warning: storing passwords as plain text might just not work on this platform.
wang:wang
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;认证相关指令&#34;&gt;认证相关指令&lt;/h2&gt;
&lt;p&gt;提供认证功能的相关模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@localhost modules]# ll |grep auth
-rwxr-xr-x 1 root root  15336 Apr  2 21:14 mod_auth_basic.so
-rwxr-xr-x 1 root root  36088 Apr  2 21:14 mod_auth_digest.so
-rwxr-xr-x 1 root root  11160 Apr  2 21:14 mod_authn_anon.so
-rwxr-xr-x 1 root root  15376 Apr  2 21:14 mod_authn_core.so
-rwxr-xr-x 1 root root  15272 Apr  2 21:14 mod_authn_dbd.so
-rwxr-xr-x 1 root root  11200 Apr  2 21:14 mod_authn_dbm.so
-rwxr-xr-x 1 root root  11176 Apr  2 21:14 mod_authn_file.so
-rwxr-xr-x 1 root root  19552 Apr  2 21:14 mod_authn_socache.so
-rwxr-xr-x 1 root root  23752 Apr  2 21:14 mod_authz_core.so
-rwxr-xr-x 1 root root  15304 Apr  2 21:14 mod_authz_dbd.so
-rwxr-xr-x 1 root root  11216 Apr  2 21:14 mod_authz_dbm.so
-rwxr-xr-x 1 root root  11200 Apr  2 21:14 mod_authz_groupfile.so
-rwxr-xr-x 1 root root  11200 Apr  2 21:14 mod_authz_host.so
-rwxr-xr-x 1 root root  11144 Apr  2 21:14 mod_authz_owner.so
-rwxr-xr-x 1 root root   7040 Apr  2 21:14 mod_authz_user.so
[root@localhost modules]# pwd
/etc/httpd/modules
# 不同的模块提供不同类型的认证功能
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;AuthType
&lt;ul&gt;
&lt;li&gt;none basic digest form 常用的是basic，即密码文件认证；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AuthName
&lt;ul&gt;
&lt;li&gt;认证提示信息；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AuthUserFile file-path
&lt;ul&gt;
&lt;li&gt;密码文件路径，htpasswd生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AuthGroupFile file-path
&lt;ul&gt;
&lt;li&gt;组认证密码文件，文件格式：mygroup: wang li lu&lt;/li&gt;
&lt;li&gt;相对路径相对于ServerRoot&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;require指令&#34;&gt;Require指令&lt;/h2&gt;
&lt;p&gt;认证相关模块，可提供require指令一些功能；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mod_authz_user.so提供
Require user user1 ...

mod_authz_groupfile.so提供
Require group group1 ...

 mod_authz_host.so提供
Require host ...
Require ip ...



Require expr exprssion...
表达式为真才允许访问
Require method method...
允许特定的访问方法访问
Require env envvalue...
环境变量值定义了才能访问
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基于用户认证&#34;&gt;基于用户认证&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
创建用户密码文件，在ServerRoot目录下；

  329  htpasswd -bc pass.user wang wang
  330  htpasswd -b pass.user li li
  331  htpasswd -b pass.user lu lu
  332  htpasswd -b pass.user yang yang

[root@localhost httpd]# cat conf.d/vhosts.conf 
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.b.com
	DocumentRoot /var/www/html/html/b.com
	&amp;lt;Directory &amp;quot;/var/www/html/html/b.com&amp;quot;&amp;gt;
		AllowOverride Authconfig # 开启basic认证必须配置
		AuthType Basic # 认证类型basic
		AuthName &amp;quot;enter your name &amp;amp; password&amp;quot; # 提示字符串
		AuthUserFile pass.user # 认证文件，采用ServerRoot的相对路径
		Require user wang lu # 设置哪些用户可以认证

	&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.a.com
	DocumentRoot /var/www/html/html/a.com
&amp;lt;/VirtualHost&amp;gt;

---
重启，访问测试；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基于组认证&#34;&gt;基于组认证&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
在ServerRoot目录下：创建组文件；再把li yang用户加入group1，
echo &amp;quot;group1:li yang&amp;quot; &amp;gt; pass.group

[root@localhost httpd]# cat conf.d/vhosts.conf 
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.b.com
	DocumentRoot /var/www/html/html/b.com
	&amp;lt;Directory &amp;quot;/var/www/html/html/b.com&amp;quot;&amp;gt;
		AllowOverride Authconfig
		AuthType Basic
		AuthName &amp;quot;enter your name &amp;amp; password&amp;quot;
		AuthUserFile pass.user
		Require user wang lu
		# 授权group1可以方式，此时li yang用户也可认证访问b.com了；
		AuthGroupFile pass.group
		Require group group1

	&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&amp;lt;VirtualHost 192.168.80.101:80&amp;gt;
	ServerName www.a.com
	DocumentRoot /var/www/html/html/a.com
&amp;lt;/VirtualHost&amp;gt;

---
重启测试；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;日志&#34;&gt;日志&lt;/h1&gt;
&lt;p&gt;httpd日志有2种：&lt;strong&gt;访问日志（http访问相关）、错误日志（进程相关信息）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;httpd.conf的主配置文件：默认有日志级别、访问日志格式定义和引用、错误日志格式定义和引用；&lt;/p&gt;
&lt;p&gt;各个虚拟主机可以在自己配置内，自定义日志格式或日志路径，或继承主配置文件的；默认会继承；&lt;/p&gt;
&lt;h2 id=&#34;customlog访问日志&#34;&gt;customlog访问日志&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;CustomLog file|pipe format|nickname [env=[!]environment-variable| expr=expression]
file或管道，
	file指定日志文件名
	pipe结合日志处理程序用
format
	直接写日志格式定义
nickname
	调用上面定义好的日志格式的名字，如combined，common
env=
expr=
	环境变量或表达式为真或为加的时候，对应日志才记录生效；
eg：
SetEnvIf Request_URI \.gif$ gif-req
CustomLog &amp;quot;gif-req.log&amp;quot; common env=gif-req
CustomLog &amp;quot;no-gif-req.log&amp;quot; common env=!gif-req
含义为，gif的请求单独记录一个日志，其他的记录另一个日志；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;日志相关变量&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined

192.168.80.1 - wang [14/Aug/2020:12:50:58 +0800] &amp;quot;GET /favicon.ico HTTP/1.1&amp;quot; 404 209 &amp;quot;http://192.168.80.101/&amp;quot; &amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&amp;quot;
对比得出：
%h 客户端ip
%l remote logname，前提要开启一个模块，不然就是空，表现为短横线；
%u 需要认证的网页，被认证后访问了，就记录用户名；
%t 时间
%r 请求方法
\&amp;quot; \&amp;quot; 会内容之外加个冒号；
%&amp;gt;s final stauts of request 状态码
%b 响应的字节大小，包括响应头
Referer 和 User-agent都是请求头里的，依赖处理头部的模块来获得的，是变量；格式需要加%{var_name}i
前端是代理时，如nginx，并开启了透传，httpd在设置接收透传的ip时，也要采取这种方式；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;errorlog错误日志&#34;&gt;errorlog错误日志&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;https://httpd.apache.org/docs/2.4/mod/core.html#errorlogformat

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;日志轮替&#34;&gt;日志轮替&lt;/h2&gt;
&lt;h3 id=&#34;rotatelogs&#34;&gt;rotatelogs&lt;/h3&gt;
&lt;p&gt;​	httpd自带的日志工具；可基于时间、大小来轮替日志文件，可截断；&lt;/p&gt;
&lt;p&gt;​	默认启动进程时，不会立刻创建日志文件，直到第一个请求到达，-f选项会改变这一行为，启动就立刻创建；&lt;/p&gt;
&lt;p&gt;​	基于时间或大小到轮替的时候，突然没请求了，默认也不轮替，直到有请求到底，-c选项改变这行为；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Usage: rotatelogs [-v] [-l] [-L linkname] [-p prog] [-f] [-t] [-e] [-c] [-n number] &amp;lt;logfile&amp;gt; {&amp;lt;rotation time in seconds&amp;gt;|&amp;lt;rotation size&amp;gt;(B|K|M|G)} [offset minutes from UTC]



-n选项
-n number-of-files
              Use  a circular list of filenames without timestamps. With -n 3, the series
              of log files opened would  be  &amp;quot;logfile&amp;quot;,  &amp;quot;logfile.1&amp;quot;,  &amp;quot;logfile.2&amp;quot;,  then
              overwriting &amp;quot;logfile&amp;quot;.


  rotationtime
              The  time between log file rotations in seconds. The rotation occurs at the
              beginning of this interval. For example, if the rotation time is 3600,  the
              log  file  will  be rotated at the beginning of every hour; if the rotation
              time is 86400, the log file will be rotated every night at midnight. (If no
              data is logged during an interval, no file will be created.)

man 8 rotatelogs，查看更多用法；

eg：
分别是按照时间轮替，日志文件加上时间后缀，按大小轮替
CustomLog &amp;quot;|/usr/sbin/rotatelogs /var/logs/logfile 86400&amp;quot; common
CustomLog &amp;quot;/usr/sbin/rotatelogs /var/logs/logfile.%Y.%m.%d 86400&amp;quot; common
CustomLog &amp;quot;|/usr/sbin/rotatelogs /var/logs/logfile 5M&amp;quot; common

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;时间修饰符：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;常用的有年月日，时分秒；

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cronolog&#34;&gt;cronolog&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1，配置epel源

2，yum安装即可
yum install -y cronolog

3，直接在CustomLog定义引用命令即可

eg：
CustomLog &amp;quot;|/usr/sbin/cronolog logs/%Y/%m/%d/acccess.log&amp;quot; combined
采用相对serverroot的路径，和rotatelogs不同的是，用带年月日的目录，区别日志轮替的文件；到了轮替的时间点了，但没有请求到达，是不创建新文件的；

不支持截断日志文件功能；

有符合链接功能，轮替的文件自动更新链接，访问方便；
eg：
CustomLog &amp;quot;|/usr/sbin/cronolog --symlink=/var/logs/logfile logs/%Y/%m/%d/%h/%m/%s&amp;quot; combined

假设时间现在是2020、08、15，定义了cronolog的日志轮替格式为年月日；每日一轮替；
1st：
	先建立不存在的2020文件夹；
	再建立不存在的08文件夹；
	再建立不存在的15文件夹；
	建立access.log
2st：
	2020，不用建立了
	08不用建立了
	16要建立
	建立access.log
以此类推；


cronolog没有请求时，即便根据时间轮替到时间了，也不建立新文件，以一天一轮替单位来说，
15号有请求，后面3天没请求，第4天有请求了，那么就略过3天的文件，不建立了；

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;路径映射重定向&#34;&gt;路径映射、重定向&lt;/h1&gt;
&lt;h2 id=&#34;处理顺序&#34;&gt;处理顺序&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;重定向，优于路径映射处理&lt;/strong&gt;，相同类型的按照先后顺序匹配处理；匹配到处理后就略过后面的；由mod_alias模块提供；&lt;/p&gt;
&lt;p&gt;scriptalias和alias一样，只是专用于做cgi程序路径的映射；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;redirect、redirectmatch&lt;/li&gt;
&lt;li&gt;alias、aliasmatch&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;路径映射aliasaliasmatch&#34;&gt;路径映射、alias、aliasmatch&lt;/h2&gt;
&lt;p&gt;alias路径映射作用：&lt;strong&gt;将访问的uri映射到httpd所在主机的文件系统路径&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;alias语法：alias uri 本地文件系统路径，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias将url路径映射到本地根文件系统的路径；不受documentroot的局限；注意放开目录的限制：一、dirctory定义；二、httpd启动用户对文件的实际权限；

eg1：
Alias &amp;quot;/image&amp;quot; &amp;quot;/data/html/image&amp;quot;

eg2:
AliasMatch &amp;quot;^/image(.*)&amp;quot; &amp;quot;/data/html/image$1&amp;quot;

末尾加了/的，要相互匹配
eg3：
Alias &amp;quot;/image/&amp;quot; &amp;quot;/data/html/image/&amp;quot;

---
配置路径映射后，对相应目录的放行，[以及httpd用户的访问权限，要不用chmod等]
Alias &amp;quot;/image&amp;quot; &amp;quot;/data/html/image&amp;quot;
&amp;lt;Directory &amp;quot;/data/html/image&amp;quot;&amp;gt;
	Require all granted
&amp;lt;/Directory&amp;gt;

---
若是在location中做映射如下，location中就是url路径，再加个被映射到的路径即可：
&amp;lt;Location &amp;quot;/image&amp;quot;&amp;gt;
	Alias &amp;quot;/data/html/image&amp;quot;
&amp;lt;/Location&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;重定向redirectredirectmatch&#34;&gt;重定向、redirect、redirectmatch&lt;/h2&gt;
&lt;p&gt;redirect重定向作用：&lt;strong&gt;当网页资源发生变动时，将旧的uri重定向到新的uri&lt;/strong&gt;，重定向分为内部重定向和外部重定向；&lt;/p&gt;
&lt;p&gt;当资源发生变动时，客户端请求却发来的仍是旧的url路径，此时就要发回资源重定向响应，让客户端去请求新的url路径，【既然是新的url路径，就不局限于主机，自然是只要是url都可重定向，互联网其他url都可以重定向】&lt;/p&gt;
&lt;p&gt;Redirect [status] old-url new-url&lt;/p&gt;
&lt;p&gt;2个url都必须是/开头的绝对路径，new-url还可以是完整的域名路径；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eg1：
Redirect &amp;quot;/image&amp;quot; &amp;quot;https://www.baidu.com&amp;quot;
重定向到别的完整域名的网站；

eg2:
Redirect &amp;quot;/image&amp;quot; &amp;quot;/img&amp;quot;
重定向到本机的url的/img路径；

---
没指定status参数，默认是302，临时重定向；

permanent 301 永久重定向
temp 302 临时重定向，默认的
gone 410 表示资源被永久删除，new-url参数不生效；
seeother 303 表资源已经被替代


---
在location里面，只需指定new-url，因为location自带old-url
&amp;lt;Location &amp;quot;/img&amp;quot;&amp;gt;
	Redirect permanent &amp;quot;https://www.baidu.com&amp;quot;
&amp;lt;/Location&amp;gt;
&amp;lt;Location &amp;quot;/gif&amp;quot;&amp;gt;
	Redirect 302 &amp;quot;/png&amp;quot;
&amp;lt;/Location&amp;gt;
&amp;lt;LocationMatch &amp;quot;/png/(.*)&amp;quot;&amp;gt;
	Redirect permanent &amp;quot;/gif/(.*)&amp;quot;
&amp;lt;/LocationMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;location和aliasredirect的搭配&#34;&gt;location和alias、redirect的搭配&lt;/h2&gt;
&lt;p&gt;alias语法：&lt;/p&gt;
&lt;p&gt;​	alias uri路径 本地文件系统路径&lt;/p&gt;
&lt;p&gt;redirect语法：&lt;/p&gt;
&lt;p&gt;​	redirect 状态码 旧的uri路径 新的uri路径&lt;/p&gt;
&lt;p&gt;**当结合location时：**第一个uri路径都移动到了location内部；&lt;/p&gt;
&lt;p&gt;alias：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;location &amp;quot;uri路径&amp;quot;&amp;gt;
	alias 本地文件系统路径
&amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;redirect：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;location &amp;quot;旧的uri路径&amp;quot;&amp;gt;
	redirect 状态码 新的uri路径
&amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;https加密配置&#34;&gt;https加密配置&lt;/h1&gt;
&lt;p&gt;参考文档：http://httpd.apache.org/docs/2.4/ssl/&lt;/p&gt;
&lt;h2 id=&#34;mod_ssl实现&#34;&gt;mod_ssl实现&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# curl https://192.168.80.102
curl: (7) Failed connect to 192.168.80.102:443; Connection refused

# 默认不支持https访问
# 安装mod_ssl包，其中包括，共享库文件、配置文件，一套自签名密钥文件，证书
# 重启后，即可实现https加密
[root@host3 ~]# yum install -y mod_ssl

[root@host3 ~]# rpm -ql mod_ssl
/etc/httpd/conf.d/ssl.conf
/etc/httpd/conf.modules.d/00-ssl.conf
/usr/lib64/httpd/modules/mod_ssl.so
/usr/libexec/httpd-ssl-pass-dialog
/var/cache/httpd/ssl

[root@host3 ~]# systemctl restart httpd
[root@host3 ~]# curl https://192.168.80.102
curl: (60) Issuer certificate is invalid.
More details here: http://curl.haxx.se/docs/sslcerts.html
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/httpd/" term="httpd" label="httpd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">httpd之三种mpm工作模型</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/httpd%E4%B9%8B%E4%B8%89%E7%A7%8Dmpm%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B/" />
            <id>https://latteStudio.github.io/posts/httpd%E4%B9%8B%E4%B8%89%E7%A7%8Dmpm%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B/</id>
            <updated>2020-10-16T14:53:32&#43;08:00</updated>
            <published>2020-10-15T16:05:19&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">httpd的三种工作模型介绍</summary>
            
                <content type="html">&lt;h1 id=&#34;3种mpm工作模型&#34;&gt;3种MPM工作模型&lt;/h1&gt;
&lt;p&gt;mpm：multi-processing module；多路处理模块，httpd共有3种mpm工作模式，分别是prefork，worker，event；单就处理请求的能力来说，是依次增大的；&lt;/p&gt;
&lt;h2 id=&#34;httpd处理一次http请求流程&#34;&gt;httpd处理一次http请求流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;客户端向目标服务器发起建立连接请求&lt;/li&gt;
&lt;li&gt;服务端在监听套接字接收到请求后，为其创建一个连接套接字，即和客户端的套接字建立一个连接&lt;/li&gt;
&lt;li&gt;客户端发起具体方法的请求，如get 某资源&lt;/li&gt;
&lt;li&gt;服务端接收后，识别其请求是什么&lt;/li&gt;
&lt;li&gt;处理请求，如读取磁盘的文件，封装响应报文&lt;/li&gt;
&lt;li&gt;发出去，客户端接收&lt;/li&gt;
&lt;li&gt;服务端记录一条访问日志；&lt;/li&gt;
&lt;/ol&gt;
&lt;!---more---&gt;
&lt;!--- more ---&gt;
&lt;h2 id=&#34;prefork&#34;&gt;prefork&lt;/h2&gt;
&lt;p&gt;​	prefork是httpd一开始的工作模型；一个httpd主进程，fork出多个httpd工作进程，httpd启动时，&lt;strong&gt;根据startservers&lt;/strong&gt;启动对应数量的子进程，&lt;strong&gt;默认是5&lt;/strong&gt;，minspareservers默认是5，maxspareservers默认是10，空闲子进程在这2者之间调节，由主进程进行按需创建或杀掉！&lt;/p&gt;
&lt;p&gt;​	子进程负责轮流，监听，监听套接字，然后收到请求去处理；&lt;strong&gt;子进程能监听80，监听可以，bind低于1000的端口需要root权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	以进程方式处理，更安全，但也更重量；进程间切换消耗的cpu是无生产力的，不比线程间切换；进程间内存空间独立，稳定，但数据共享不了，多个子进程请求同一个文件时，数据会在每个子进程空间都存一份，浪费了；&lt;/p&gt;
&lt;p&gt;​	进程：子进程监听请求，处理请求，一条龙服务到底&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;看到默认是5个子进程；
           ├─httpd(827)─┬─httpd(844)
           │            ├─httpd(845)
           │            ├─httpd(846)
           │            ├─httpd(847)
           │            └─httpd(848)

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;worker&#34;&gt;worker&lt;/h2&gt;
&lt;p&gt;​	worker相对prefork，仍是一个主进程创建多个子进程，但每一个子进程里有多个线程，N个线程处理请求，1个监听线程，负责监听请求，没有端口复用技术时，这些监听子线程通过争抢锁，来确定谁来监听那一个监听套接字文件&lt;/p&gt;
&lt;p&gt;​	相比worker，1、线程更轻量；2、同个进程内部，多个线程请求同一个文件可共享数据，内存利用率高；3、线程切换是在一个cpu时间片，cpu线程上下文切换比进程上下文切换，轻量的多；&lt;/p&gt;
&lt;p&gt;​	监听线程、工作线程，实现了接入请求、处理请求的分工，更高效；但，一个连接接入之后，仍是一个工作线程对其负责到底；长连接情况下，该连接很久没发请求，工作线程也得陪着它，不能接待其他的请求；效率较低，于是有了下面的event模型；&lt;/p&gt;
&lt;h2 id=&#34;event&#34;&gt;event&lt;/h2&gt;
&lt;p&gt;​	event采用：基于epoll的，事件驱动IO复用模型；&lt;/p&gt;
&lt;p&gt;​	event相比worker最大的改进，&lt;strong&gt;就是采用异步连接&lt;/strong&gt;，即一个连接由监听线程监听，接入之后，分配给一个工作线程处理它的请求，但是改连接没有请求发来时，工作线程也不陪它干耗着，而是将该连接套接字交给监听线程代为管理；自己又是空闲线程了，又可以被监听线程分配干活了，真勤劳，，&lt;strong&gt;监听线程代为管理暂时空闲下来的套接字，但套接字可以采用事件通知的机制，当有事件发生，比如我这个连接套接字又发来请求了，会报告给监听线程，监听线程会再为其分配一个工作线程进行处理；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	以下状态的连接套接字会被委托管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空闲的长连接&lt;/li&gt;
&lt;li&gt;closing状态的&lt;/li&gt;
&lt;li&gt;写等待的：即要写入send buffer时，send buffer满了，返回EWOULDBACK错误；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关参数&#34;&gt;相关参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Serverlimit：最大能启动多少个进程，硬限制；&lt;/li&gt;
&lt;li&gt;threadlimt：最多能启动多个个线程，硬限制&lt;/li&gt;
&lt;li&gt;startservers：默认启动多少个子进程，prefork默认5&lt;/li&gt;
&lt;li&gt;minspareservers：maxspareservers：最小/最大的空闲进程数，超过最大就杀，小于最小就新启动，维持在min和max之间，启动的进程数最大不超过serverlimit限制；&lt;/li&gt;
&lt;li&gt;minsparethreads，maxsparethreads：worker和event中，一个子进程中能启动的线程范围&lt;/li&gt;
&lt;li&gt;maxrequestworker：能最大接受的并发连接数&lt;/li&gt;
&lt;li&gt;threadsperchild：每个子进程最多的线程数；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;记分板&#34;&gt;记分板&lt;/h1&gt;
&lt;p&gt;​	apache httpd采用socreboard记录主进程、子进程、线程的信息；&lt;/p&gt;
&lt;p&gt;​	记分板简单说：就是记录，主进程、子进程、线程状态信息的内存中的数据结构；&lt;/p&gt;
&lt;p&gt;​	prefork、worker、event都采用scoreboard；且记分板可以用于进程间，线程间通信方式之一；&lt;/p&gt;
&lt;p&gt;​	记分板信息可以用mod_status模块查看；加载模块，添加配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;httpd -M |grep status 看有无启动staus模块；

&amp;lt;Location &amp;quot;/server-status&amp;quot;&amp;gt;
	SetHandler server-staus
	Require all granted
&amp;lt;/Location&amp;gt;
apachectl fullstatus查看；
【需依赖links命令行浏览器包】

下为浏览器查看的信息：
Apache Server Status for www.a.com (via 192.168.80.101)

Server Version: Apache/2.4.6 (CentOS)
Server MPM: prefork
Server Built: Apr 2 2020 13:13:23

Current Time: Monday, 17-Aug-2020 14:33:19 CST
Restart Time: Monday, 17-Aug-2020 14:31:57 CST
Parent Server Config. Generation: 1
Parent Server MPM Generation: 0
Server uptime: 1 minute 21 seconds
Server load: 0.00 0.01 0.05
Total accesses: 4 - Total Traffic: 3 kB
CPU Usage: u0 s0 cu0 cs0
.0494 requests/sec - 37 B/second - 768 B/request
2 requests currently being processed, 4 idle workers

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;全局记分板&#34;&gt;全局记分板&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;typedef struct {
    int             server_limit;
    int             thread_limit;
    ap_generation_t running_generation; /* the generation of children which
                                         * should still be serving requests.
                                         */
    apr_time_t restart_time;
} global_score;

可看到进程、线程的硬限制数；
进程的代数:即子进程第几代了；
httpd启动时，会先创建N个槽位，然后创建子进程，每建一个子进程，就占用一个slot槽位，杀一个子进程，槽位就空出来一个，因此子进程的上限数就是slot数量；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;子进程记分板&#34;&gt;子进程记分板&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;struct process_score {
    pid_t pid;
    ap_generation_t generation; /* generation of this child */
    char quiescing;         /* the process whose pid is stored above is
                             * going down gracefully
                             */
    char not_accepting;     /* the process is busy and is not accepting more
                             * connections (for async MPMs)
                             */
    apr_uint32_t connections;       /* total connections (for async MPMs) */
    当前进程的总连接数
    apr_uint32_t write_completion;  /* async connections doing write completion */
    写等待数量
    apr_uint32_t lingering_close;   /* async connections in lingering close */
    关闭状态的连接套接字
    apr_uint32_t keep_alive;        /* async connections in keep alive */
    长连接状态
    apr_uint32_t suspended;         /* connections suspended by some module */
    被挂起的连接
    int bucket;             /* Listener bucket used by this child */
};
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;线程记分板&#34;&gt;线程记分板&lt;/h2&gt;
&lt;p&gt;​	event模型下，部分记分板信息；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   Slot  PID  Stopping   Connections    Threads      Async connections
                       total accepting busy idle writing keep-alive closing
   0    42480 no       25    yes       25   0    1       0          0
   1    42481 no       26    yes       25   0    2       0          0
   2    42482 no       27    yes       25   0    3       0          2
   3    42564 no       27    yes       24   1    2       0          1
   4    42618 no       28    yes       25   0    3       0          1
   5    42651 no       28    yes       24   1    1       0          2
   6    42652 no       26    yes       25   0    1       0          1
   7    42709 no       26    no        25   0    1       0          1
   8    42710 no       27    no        24   1    1       0          1
   9    42711 no       26    yes       25   0    1       0          1
   10   42712 no       26    no        25   0    2       0          0
   11   42824 no       26    yes       25   0    0       0          2
   12   42825 no       26    yes       25   0    1       0          1
   13   42826 no       27    yes       22   3    2       0          0
   14   42827 no       28    yes       25   0    1       0          2
   15   42828 no       26    yes       25   0    1       0          0
   Sum  16    0        425             394  6    23      0          15
   
   可以看出：
   当前有16个子进程；16个槽位；
   connections部分：
   	total，该进程当前连接总数
   	accepting，是否可以再接收连接，no的当前不能参数到最近的监听资格的争抢中，【争了也接收处理不了】
   	
   threads部分：
   	busy，在忙的线程数
   	idle，空闲线程数
   
   Async connections部分：
   	 writing ：写等待托管
   	 keep-alive ：空闲长连接托管
   	 closing：关闭状态托管：
   	 
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;一些概念&#34;&gt;一些概念&lt;/h1&gt;
&lt;h2 id=&#34;graceful-stop&#34;&gt;graceful stop&lt;/h2&gt;
&lt;p&gt;​	优雅的关闭，即给进程处理后事的时间，关闭监听，不再接收新连接，处理完当前连接后再从容的断开；&lt;/p&gt;
&lt;p&gt;​	nginx/httpd中，都可接收WINCH、USR1信号，分别表示graceful stop，graceful restart；能接收是因为程序实现了对对应信号的处理逻辑，头文件mpm_common.h有如下代码；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Signal used to gracefully restart */
#define AP_SIG_GRACEFUL SIGUSR1

/* Signal used to gracefully stop */
#define AP_SIG_GRACEFUL_STOP SIGWINCH
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;惊群&#34;&gt;惊群&lt;/h2&gt;
&lt;p&gt;​	举例来说，没有端口重用时，在httpd的worker模式，多个工作子进程的监听线程轮流监听一个套接字文件，同一个时刻只能一个监听线程在监听，当该监听线程监听到一个连接后，解除对套接字文件的监听，到后面做处理时，此时会把其他所有监听线程唤醒，通过一种机制选中下一个监听线程，叫醒那么多，确只有一个能上位，这就叫惊群；如此反复，一次把所有监听线程都叫醒了，太浪费，&lt;/p&gt;
&lt;p&gt;​	于是通过事件的方式，一是只叫醒一个可以监听的线程就避免了惊群；&lt;/p&gt;
&lt;h2 id=&#34;异步连接异步io&#34;&gt;异步连接/异步io&lt;/h2&gt;
&lt;p&gt;​	event是在worker模式之上的改进，采用异步连接，异步连接和异步io概念不同，异步连接简单理解，一个工作线程接入一个客户端连接后，不是一条龙把它服务好了自己再接下一个客，也就是不会从头服务到尾，尤其是长连接下，空闲时间，&lt;strong&gt;会把该连接套接字托管给监听线程&lt;/strong&gt;，【自己再去等着准备服务其他的客人】当再有请求发来时，该套接字可通过事件方式主动报告，我这又有活儿了，此时监听线程会再分配一个空闲的工作线程为它服务；这个工作线程和上一个线程可不一定一样；&lt;strong&gt;空闲的长连接套接字、closing状态连接套接字、写等待连接套接字都会交给监听线程代为管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	写等待连接套接字：就是，工作线程处理好数据后若回复的数据较大，或此时socket buffer的send buffer满了，没地儿了，写入调用会返回EWOULDBACK错误，此时就得等会，那工作线程干等多浪费资源，就把这个写等待状态的连接套接字委托给监听线程；当send buffer有地方了，这个套接字又可以主动报告，我这可以写了，于是监听线程再给它这个套接字分配一个闲的工作线程进行处理；将响应数据发送到send buffer中等待从网卡发出；&lt;/p&gt;
&lt;p&gt;​	这是event模型的重点；&lt;/p&gt;
&lt;h2 id=&#34;端口重用&#34;&gt;&lt;strong&gt;端口重用&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	一个套接字ip:port 可以分配多个套接字文件fd，使得&lt;strong&gt;多实例、多进程、多线程&lt;/strong&gt;，可以同时监听一个套接字，而不用采用锁机制进行争抢；采用的是轮询机制接入客户端请求，如ssd可以启动2个实例，实例都监听在本机的所有地址的22端口，2个套接字描述符轮询接收请求；自然2个实例也是轮询接收请求；&lt;/p&gt;
&lt;h2 id=&#34;进程线程&#34;&gt;&lt;strong&gt;进程/线程&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	1个重要区别，【同一个进程间的】线程间切换比较节省资源；进程间切换就比较效率低了，因为cpu分配给的是进程，而不是线程，一个cpu时间片内，该进程内部的线程切换，仍然是在一个cpu时间片内，切换的上下文资源也较少；进程更重量，而线程更不安全，一个线程可能会影响其他线程的数据；&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/httpd/" term="httpd" label="httpd" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mpm%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B/" term="mpm工作模型" label="mpm工作模型" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">tomcat之与静态web结合</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E4%B8%8E%E9%9D%99%E6%80%81web%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE/" />
            <id>https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E4%B8%8E%E9%9D%99%E6%80%81web%E7%BB%93%E5%90%88%E9%85%8D%E7%BD%AE/</id>
            <updated>2020-10-19T19:41:28&#43;08:00</updated>
            <published>2020-09-06T20:11:58&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">tomcat与前端httpd或nginx的结合，实现动静分离</summary>
            
                <content type="html">&lt;h1 id=&#34;tomcat与前端通信方式&#34;&gt;tomcat与前端通信方式&lt;/h1&gt;
&lt;p&gt;​	由于connector是tomcat与外部通信的唯一关口，tomcat与其他服务通信方式，即是conector与其他服务通信的方式，connector能够定义的通信类型如下：&lt;/p&gt;
&lt;h2 id=&#34;connector定义类型&#34;&gt;connector定义类型&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;按照协议分&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http
&lt;ul&gt;
&lt;li&gt;1.1常用&lt;/li&gt;
&lt;li&gt;1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ajp
&lt;ul&gt;
&lt;li&gt;专用前端是httpd做web服务器时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;按照io模型分&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nio&lt;/li&gt;
&lt;li&gt;nio2&lt;/li&gt;
&lt;li&gt;apr/native&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;协议与io模型组合&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http1.1 + nio&lt;/li&gt;
&lt;li&gt;http1.1 + nio2&lt;/li&gt;
&lt;li&gt;http1.1 + apr/native&lt;/li&gt;
&lt;li&gt;ajp + nio&lt;/li&gt;
&lt;li&gt;ajp + nio2&lt;/li&gt;
&lt;li&gt;ajp + apr/native&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;connector定义示例&#34;&gt;connector定义示例&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; /&amp;gt;
http1.1会自动选择NIO nio2 apr其中一个
&amp;lt;connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;org.apache.coyote.http11NioProtocol&amp;quot;/&amp;gt;
&amp;lt;connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;org.apache.coyote.http11Nio2Protocol&amp;quot;/&amp;gt;
&amp;lt;connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;org.apache.coyote.http11AprProtocol&amp;quot;/&amp;gt;

&amp;lt;connector port=&amp;quot;8009&amp;quot; protocol=&amp;quot;AJP/1.3&amp;quot; /&amp;gt;
&amp;lt;connector port=&amp;quot;8009&amp;quot; protocol=&amp;quot;org.apache.coyote.ajp.AjpNioProtocol&amp;quot;/&amp;gt;
&amp;lt;connector port=&amp;quot;8009&amp;quot; protocol=&amp;quot;org.apache.coyote.ajp.AjpNio2Protocol&amp;quot;/&amp;gt;
&amp;lt;connector port=&amp;quot;8009&amp;quot; protocol=&amp;quot;org.apache.coyote.ajp.AjpAprProtocol&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tomcat与nginx&#34;&gt;tomcat与nginx&lt;/h2&gt;
&lt;p&gt;​	由于ajp只适用于httpd，所有tomcat和nginx只能通过http协议进行通信；&lt;/p&gt;
&lt;h2 id=&#34;tomcat与httpd&#34;&gt;tomcat与httpd&lt;/h2&gt;
&lt;p&gt;​	ajp和http都可以用于和httpd通信，httpd前端有2个模块与tomact的connector通信，mod_proxy支持http和ajp，mod_jk支持ajp，&lt;/p&gt;
&lt;h2 id=&#34;tomcat与静态web服务组合架构&#34;&gt;tomcat与静态web服务组合架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;web服务器如nginx/httpd，同时担任静态web服务，以及动态请求转发的反代服务；&lt;/li&gt;
&lt;li&gt;web服务器如nginx/httpd，只担任静态web服务器，由前端nginx/haproxy/lvs进行动静请求的分离反代；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;示例&#34;&gt;示例&lt;/h1&gt;
&lt;h2 id=&#34;tomcatnginx&#34;&gt;tomcat+nginx&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;192.168.80.100 nginx

192.168.80.101 tomcat1
192.168.80.102 tomcat2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1，安装2台tomcat&lt;/p&gt;
&lt;p&gt;​	安装jdk&lt;/p&gt;
&lt;p&gt;​	安装tomcat&lt;/p&gt;
&lt;p&gt;2，安装一台nginx&lt;/p&gt;
&lt;p&gt;​	采用nginx官方repo，安装最新稳定版1.18即可&lt;/p&gt;
&lt;p&gt;3，nginx配置一台虚拟主机，配置转发&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 nginx]# cat conf.d/tomcat.conf 
upstream tomcat {
	server 192.168.80.101:8080;
	#server 192.168.80.102:8080;
}

server {
	listen 80;
	server_name 192.168.80.100;
	
	location / {
		root /usr/share/nginx/html;
		index index.html index.htm;

	}
	
	location ~* \.(jsp|jspx|do) {
		proxy_pass http://tomcat;
	}

}
# nginx -t; nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、浏览器访问&lt;/p&gt;
&lt;p&gt;​	访问192.168.80.100/时，会返回nginx静态首页，访问.jsp后缀时，就根据配置转发到后端tomcat，tomcat运行jsp并返回处理后数据，&lt;strong&gt;文字部分直接返回，正常显示，图片部分返回的是包含在首页的链接，浏览器接收到首页后，分析其中链接，然后再次发起请求向80.100，但80.100的静态部分寻找路径是本机/usr/share/nginx/html目录，自然找不到对应文件，所有图片、样式等静态资源全部缺失，最终界面如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200905174233595.png&#34; alt=&#34;image-20200905174233595&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、解决方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置nginx将全部请求，无论动静都转发给tomcat处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;nginx配置如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 nginx]# cat conf.d/tomcat.conf 
upstream tomcat {
	server 192.168.80.101:8080;
	#server 192.168.80.102:8080;
}

server {
	listen 80;
	server_name 192.168.80.100;
	
	location / {
#		root /usr/share/nginx/html;
#		index index.html index.htm;
	proxy_pass  http://tomcat;

	}
	
#	location ~* \.(jsp|jspx|do) {
#		proxy_pass http://tomcat;
#	}

}

[root@host1 nginx]# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
[root@host1 nginx]# nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器访问，全部页面都可以正常显示，因为nginx将全部请求都交由tomcat处理，不存在动静分离，也不存在文件找不到问题；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200905180015125.png&#34; alt=&#34;image-20200905180015125&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合理配置nginx，使得其能找到静态资源，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如将ROOT目录下所有文件，以及examples这个webapp的目录拷贝到nginx的网页根目录下，再次访问，根据nginx和tomcat两台主机相同的目录路径，可以找到对应的静态资源文件，即可正常展示页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 在tomcat上，将对应目录原样复制到nginx上，
[root@host2 webapps]# scp -r examples/ 192.168.80.100:/usr/share/nginx/html
[root@host2 webapps]# scp -r ./ROOT/* 192.168.80.100:/usr/share/nginx/html

# nginx目录
# examples是将整个目录放在html/目录下，而ROOT是将其下文件直接放在html/目录下
[root@host1 nginx]# ll /usr/share/nginx/html/
total 188
-rw-r--r-- 1 nginx nginx   494 Apr 21 23:07 50x.html
-rw-r----- 1 nginx nginx 27235 Sep  5 17:45 asf-logo-wide.svg
-rw-r----- 1 nginx nginx   713 Sep  5 17:45 bg-button.png
-rw-r----- 1 nginx nginx  1918 Sep  5 17:45 bg-middle.png
-rw-r----- 1 nginx nginx  1401 Sep  5 17:45 bg-nav.png
-rw-r----- 1 nginx nginx  3103 Sep  5 17:45 bg-upper.png
drwxr-x--- 6 nginx nginx    83 Sep  5 17:49 examples
-rw-r----- 1 nginx nginx 21630 Sep  5 17:45 favicon.ico
-rw-r--r-- 1 nginx nginx   612 Apr 21 23:07 index.html
-rw-r----- 1 nginx nginx 12219 Sep  5 17:45 index.jsp
-rw-r----- 1 nginx nginx  7136 Sep  5 17:45 RELEASE-NOTES.txt
-rw-r----- 1 nginx nginx  5581 Sep  5 17:45 tomcat.css
-rw-r----- 1 nginx nginx  2066 Sep  5 17:45 tomcat.gif
-rw-r----- 1 nginx nginx  5103 Sep  5 17:45 tomcat.png
-rw-r----- 1 nginx nginx  2376 Sep  5 17:45 tomcat-power.gif
-rw-r----- 1 nginx nginx 67795 Sep  5 17:45 tomcat.svg
drwxr-x--- 2 nginx nginx    21 Sep  5 17:45 WEB-INF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;访问examples可以，首页可以，其他如docs的webapp，由于没有复制对应目录到nginx下，所以仍然无法显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200905180957819.png&#34; alt=&#34;image-20200905180957819&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200905175011811.png&#34; alt=&#34;image-20200905175011811&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tomcat与httpd-1&#34;&gt;tomcat与httpd&lt;/h2&gt;
&lt;p&gt;mod_jk下载地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tomcat.apache.org/download-connectors.cgi&#34;&gt;http://tomcat.apache.org/download-connectors.cgi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置手册：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tomcat.apache.org/tomcat-8.5-doc/connectors.html&#34;&gt;http://tomcat.apache.org/tomcat-8.5-doc/connectors.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mod_jk转发tomcat&#34;&gt;mod_jk转发tomcat&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;mod_jk模块，反代tomcat，一般只用ajp协议&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;httpd编译mod_jk模块&lt;/li&gt;
&lt;li&gt;配置httpd，引入mod_jk，指明后端节点信息配置文件，uri转发规则配置&lt;/li&gt;
&lt;li&gt;创建后端节点信息配置文件，其中配置后端节点信息&lt;/li&gt;
&lt;li&gt;重启httpd&lt;/li&gt;
&lt;li&gt;tomcat：设置jvmRoute参数在engine上&lt;/li&gt;
&lt;li&gt;设置connector，开启ajp13，配置监听地址，默认监听的所有ipv6地址，ipv4地址去连接拒绝；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1、编译mod_jk模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;下载源码包，解压；进入解压后目，再进入native目录，内有configure脚本
tar -xf tomcat-connectors-1.2.48-src.tar.gz
cd tomcat-connectors-1.2.48-src/
cd native
 
下载编译工具，包含apxs工具的httpd-devel包
yum install -y gcc gcc++ httpd-devel

编译，变异后的模块在apache-2.0目录下
./configure --with-apxs=/usr/bin/apxs
make

复制到httpd的模块目录下
cp apache-2.0/mod_jk.so /etc/httpd/modules/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，导入mod jk，配置转发规则等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LoadModule jk_module modules/mod_jk.so
# 导入jk模块

# Update this path to match your conf directory location (put workers.properties next to httpd.conf)
# 节点信息配置文件
JkWorkersFile /etc/httpd/conf.d/workers.properties


# Where to put jk shared memory
# Update this path to match your local state directory or logs directory
JkShmFile     /var/log/httpd/mod_jk.shm
# Where to put jk logs
# Update this path to match your logs directory location (put mod_jk.log next to access_log)
JkLogFile     /var/log/httpd/mod_jk.log

# Set the jk log level [debug/error/info]
JkLogLevel    info
# Select the timestamp log format
JkLogStampFormat &amp;quot;[%a %b %d %H:%M:%S %Y] &amp;quot;
# Send everything for context /examples to worker named worker1 (ajp13)

# uri的转发规则，status的是状态页，其余的全部转发给后端TomcatA节点
######### &amp;quot;JkMount /* TomcatA&amp;quot; will send all request to TomcatA   ########
JkMount   /status/*     statA
JkMount   /*        TomcatA

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，配置workers.properties文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 httpd]# cat conf.d/workers.properties 
worker.list=TomcatA,statA
worker.TomcatA.type=ajp13
worker.TomcatA.host=192.168.80.102
worker.TomcatA.port=8009
worker.TomcatA.lbfactor=1
worker.statA.type = status
# 配置2个节点，一个是status内置状态页，一个是实际tomcat节点80.102
# 重启httpd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，tomcat设置类型为ajp13的connector，和engine的jvmRoute参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 设置ajp13的连接器，地址要改为本机地址，默认的监听所有ipv6地址不不接受ipv4连接；
&amp;lt;Connector protocol=&amp;quot;AJP/1.3&amp;quot;
               address=&amp;quot;192.168.80.102&amp;quot;
               port=&amp;quot;8009&amp;quot;
               redirectPort=&amp;quot;8443&amp;quot; secretRequired=&amp;quot;&amp;quot; /&amp;gt;

# engine加上jvmRoute参数
  &amp;lt;Engine name=&amp;quot;Catalina&amp;quot; defaultHost=&amp;quot;localhost&amp;quot; jvmRoute=&amp;quot;TomcatA&amp;quot;&amp;gt;

# 重启tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，访问测试&lt;/p&gt;
&lt;p&gt;100为httpd服务器，访问其上jsp文件，都可以转发给后端102的tomcat，从而正常访问；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200906163318818.png&#34; alt=&#34;image-20200906163318818&#34;&gt;&lt;/p&gt;
&lt;p&gt;访问状态页也正常；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200906161959829.png&#34; alt=&#34;image-20200906161959829&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遇到的错误：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据上述配置完成后，一直无法正常访问，即httpd和tomcat反代一直失败，最终查看catalina引擎的日志，发现如下错误， The AJP Connector is configured with secretRequired=&amp;quot;true&amp;quot; but the secret attribute is either null or &amp;quot;&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 tomcat]# tailf logs/catalina.2020-09-06.log 
...
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
		at java.lang.reflect.Method.invoke(Method.java:498)
		at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:342)
		at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:473)
	Caused by: java.lang.IllegalArgumentException: The AJP Connector is configured with secretRequired=&amp;quot;true&amp;quot; but the secret attribute is either null or &amp;quot;&amp;quot;. 

# 根据google搜索结果，在connector部分，加入一个secretRequired=&amp;quot;&amp;quot;后重启，即可；
	  &amp;lt;Connector protocol=&amp;quot;AJP/1.3&amp;quot;
               address=&amp;quot;192.168.80.102&amp;quot;
               port=&amp;quot;8009&amp;quot;
               redirectPort=&amp;quot;8443&amp;quot; secretRequired=&amp;quot;&amp;quot; /&amp;gt;
# 之后可以正常访问；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mod_jk负载均衡tomcat&#34;&gt;mod_jk负载均衡tomcat&lt;/h3&gt;
&lt;p&gt;1、修改jk的配置文件，将转发目标设置为一个负载均衡的worker，此处命名为lb，是一个逻辑的节点，其下包含2个真实节点；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 httpd]# cat conf.d/mod_jk.conf 
LoadModule jk_module modules/mod_jk.so
...

######### &amp;quot;JkMount /* TomcatA&amp;quot; will send all request to TomcatA   ########
JkMount   /status/*     statA
JkMount   /*        lb

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、修改workers.properties文件，定义lb和其下2个真实节点&lt;/p&gt;
&lt;p&gt;​	定义了内置的stata状态页，lb一个逻辑节点，其下包含的2个真实节点，2个真实节点的地址，协议，端口，权重都根据实际情况设置，这里设置为权重一比一，关闭会话粘性，所以访问效果会是轮询！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 httpd]# cat conf.d/workers.properties
worker.list=lb,statA
worker.statA.type = status
worker.lb.type=lb
worker.lb.sticky_session=false
worker.lb.balance_workers=TomcatA,TomcatB

worker.TomcatA.type=ajp13
worker.TomcatA.host=192.168.80.102
worker.TomcatA.port=8009
worker.TomcatA.lbfactor=1

worker.TomcatB.type=ajp13
worker.TomcatB.host=192.168.80.101
worker.TomcatB.port=8009
worker.TomcatB.lbfactor=1

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，分别配置2个后端tomcat节点&lt;/p&gt;
&lt;p&gt;​	以TomcatA为例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 配置connector和jvmRoute参数
&amp;lt;Connector protocol=&amp;quot;AJP/1.3&amp;quot;
               address=&amp;quot;192.168.80.102&amp;quot;
               port=&amp;quot;8009&amp;quot;
               redirectPort=&amp;quot;8443&amp;quot; secretRequired=&amp;quot;&amp;quot; /&amp;gt;


 &amp;lt;Engine name=&amp;quot;Catalina&amp;quot; defaultHost=&amp;quot;localhost&amp;quot; jvmRoute=&amp;quot;TomcatA&amp;quot;&amp;gt;


# 创建一个test的webapp，
[root@host3 tomcat]# mkdir -pv /usr/local/tomcat/webapps/test/WEB-INF/{classes,lib}
mkdir: created directory ‘/usr/local/tomcat/webapps/test’
mkdir: created directory ‘/usr/local/tomcat/webapps/test/WEB-INF’
mkdir: created directory ‘/usr/local/tomcat/webapps/test/WEB-INF/classes’
mkdir: created directory ‘/usr/local/tomcat/webapps/test/WEB-INF/lib’

# 写入首页文件，
[root@host3 tomcat]# vim /usr/local/tomcat/webapps/test/index.jsp
&amp;lt;%@ page language=&amp;quot;java&amp;quot; %&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;TomcatA&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;font color=&amp;quot;red&amp;quot;&amp;gt;TomcatA &amp;lt;/font&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;table align=&amp;quot;centre&amp;quot; border=&amp;quot;1&amp;quot;&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Session ID&amp;lt;/td&amp;gt;
    &amp;lt;% session.setAttribute(&amp;quot;abc&amp;quot;,&amp;quot;abc&amp;quot;); %&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;%= session.getId() %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Created on&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;%= session.getCreationTime() %&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

# 重启
[root@host3 tomcat]# catalina.sh stop;catalina.sh start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	TomcatB，修改对应参数为TomcatB即可，其余步骤一致&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# connector和jvmRoute参数
    &amp;lt;Connector protocol=&amp;quot;AJP/1.3&amp;quot;
               address=&amp;quot;192.168.80.101&amp;quot;
               port=&amp;quot;8009&amp;quot;
               redirectPort=&amp;quot;8443&amp;quot; secretRequired=&amp;quot;&amp;quot;/&amp;gt;

&amp;lt;Engine name=&amp;quot;Catalina&amp;quot; defaultHost=&amp;quot;localhost&amp;quot; jvmRoute=&amp;quot;TomcatB&amp;quot;&amp;gt;


# 首页文件不同，改成TomcatB
[root@host2 tomcat]# cat /usr/local/tomcat/webapps/test/index.jsp 
&amp;lt;%@ page language=&amp;quot;java&amp;quot; %&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;TomcatB&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;font color=&amp;quot;blue&amp;quot;&amp;gt;TomcatB &amp;lt;/font&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;table align=&amp;quot;centre&amp;quot; border=&amp;quot;1&amp;quot;&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Session ID&amp;lt;/td&amp;gt;
    &amp;lt;% session.setAttribute(&amp;quot;abc&amp;quot;,&amp;quot;abc&amp;quot;); %&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;%= session.getId() %&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Created on&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;%= session.getCreationTime() %&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

# 重启tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、重启httpd，tomcat，然后用无痕模式访问测试，排除缓存干扰&lt;/p&gt;
&lt;p&gt;​	轮询效果如下：&lt;/p&gt;
&lt;p&gt;​	若将sticky_session设置为ture，则是会话绑定效果；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200906193453170.png&#34; alt=&#34;image-20200906193453170&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200906193510005.png&#34; alt=&#34;image-20200906193510005&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;mod_proxy转发tomcat&#34;&gt;mod_proxy转发tomcat&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;mod_proxy做tomcat的反代，可以使用http和ajp两种协议&lt;/strong&gt;；&lt;strong&gt;配置反代时，协议头选择ajp或http，以及对应的端口即可；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mod_proxy必须的几种模块如下：yum安装自带这些模块，编译安装时，需要enable这些模块；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 httpd]# httpd -k restart
[root@host1 httpd]# httpd -M |grep proxy
 proxy_module (shared)
 proxy_ajp_module (shared)
 proxy_balancer_module (shared)
 proxy_http_module (shared)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、配置httpd，配置反代，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 httpd]# cat conf.d/ajp.conf
&amp;lt;Location /status&amp;gt;
	SetHandler balancer-manager
	ProxyPass !
	Require ip 192.168.80.0
&amp;lt;/Location&amp;gt;

ProxyVia off
ProxyRequests off
ProxyPreserveHost off

ProxyPassMatch &amp;quot;^/(.*)$&amp;quot; ajp://192.168.80.101:8009/$1
ProxyPassReverse &amp;quot;^/(.*)$&amp;quot; ajp://192.168.80.101:8009/$1

&amp;lt;Proxy *&amp;gt;
	Require all granted
&amp;lt;/Proxy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、浏览器访问，成功反代；&lt;/p&gt;
&lt;h3 id=&#34;mod_proxy负载均衡tomcat&#34;&gt;mod_proxy负载均衡tomcat&lt;/h3&gt;
&lt;p&gt;1、配置后端节点组，在反代时，引用后端节点组名称即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 httpd]# pwd
/etc/httpd
[root@host1 httpd]# cat conf.d/ajp.conf
&amp;lt;proxy balancer://tomcatlb&amp;gt;
	BalancerMember ajp://192.168.80.101:8009
	BalancerMember ajp://192.168.80.102:8009

&amp;lt;/proxy&amp;gt;
ProxyVia off
ProxyRequests off
ProxyPreserveHost off

ProxyPassMatch &amp;quot;^/(.*\.jsp)$&amp;quot; balancer://tomcatlb/$1
ProxyPassReverse &amp;quot;^/(.*\.jsp)$&amp;quot; balancer://tomcatlb/$1

&amp;lt;Proxy *&amp;gt;
	Require all granted
&amp;lt;/Proxy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、浏览器访问&lt;/p&gt;
&lt;p&gt;​	访问：http://192.168.80.100/test/index.jsp，结果仍为轮询调度；&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/tomcat/" term="tomcat" label="tomcat" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/httpd/" term="httpd" label="httpd" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">httpd之安装与配置</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/httpd%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/" />
            <id>https://latteStudio.github.io/posts/httpd%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
            <updated>2020-10-16T11:00:33&#43;08:00</updated>
            <published>2020-09-06T14:12:10&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">httpd的安装与配置...</summary>
            
                <content type="html">&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;h2 id=&#34;yum安装&#34;&gt;&lt;strong&gt;yum安装&lt;/strong&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;yum install -y httpd
直接安装即可，共计安装5个rpm包；

systemctl enable httpd; systemctl start httpd
启动，开机自启动
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;
&lt;p&gt;官方文档：http://httpd.apache.org/docs/2.4/install.html&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装依赖包，编译工具&lt;/li&gt;
&lt;li&gt;configure、make、make install 三步走&lt;/li&gt;
&lt;li&gt;安装后配置
&lt;ol&gt;
&lt;li&gt;PATH变量、&lt;/li&gt;
&lt;li&gt;man文件、头文件、库文件、[可选]&lt;/li&gt;
&lt;li&gt;单独的网页文件存放目录，（一般单独挂载高可用的存储设备，或nfs共享）&lt;/li&gt;
&lt;li&gt;添加apache用户&lt;/li&gt;
&lt;li&gt;服务脚本、配置文件准备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1，安装依赖包，编译安装apr和apr-utils&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装依赖包，编译工具
# 包含pcre正则，expat和xml相关的包，会被httpd应用到
[root@host2 ~]# yum install -y pcre-devel expat-devel pcre gcc gcc++

# 编译安装apr
[root@host2 apr-1.6.2]# ./configure --prefix=/usr/local/apr
[root@host2 apr-1.6.2]# make &amp;amp;&amp;amp; make install
[root@host2 apr-1.6.2]# ll /usr/local/apr/
total 0
drwxr-xr-x 2 root root  26 Aug 31 19:40 bin
drwxr-xr-x 2 root root 148 Aug 31 19:40 build-1
drwxr-xr-x 3 root root  19 Aug 31 19:40 include
drwxr-xr-x 3 root root 140 Aug 31 19:40 lib


# 编译安装apr-utils，需要在apr之后！
configure: error: APR could not be located. Please use the --with-apr option.
[root@host2 apr-util-1.6.1]# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/
[root@host2 apr-util-1.6.1]# make &amp;amp;&amp;amp; make install
[root@host2 apr-util-1.6.1]# ll /usr/local/apr-util/
total 0
drwxr-xr-x 2 root root  26 Aug 31 19:42 bin
drwxr-xr-x 3 root root  19 Aug 31 19:42 include
drwxr-xr-x 3 root root 164 Aug 31 19:42 lib

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，三步走&lt;/p&gt;
&lt;p&gt;常见编译选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./configure -h
...
# 查看选项，编译时应该根据实际需求选择


prefix 
程序安装路径

sysconfdir 
配置文件路径，非必须，不指定默认是prefix目录下的conf目录

#
  --enable-mpms-shared=MPM-LIST
  
  
  --with-mpm=MPM          Choose the process model for Apache to use by
                          unless --enable-mpms-shared is also specified.
单独此项，为静态编译一个mpm模型，这样mpm就选死了；
# 
--with-mpm=MPM
mpm模型三选一，如果选择是只静态编译一种mpm模型，则需要更换其他模型时，必须重新编译！
较好方式：3个都动态编译，指定一个为默认，其他2个还可以随时切换；
示例如下：意思是3种动态模型都动态编译，默认为event，安装后还可以用LoadModule指令可以切换其他2种模型
--with-mpm=event --enable-mpms-shared=all

with-z zlib
压缩启用
with-pcre 
正则启用
with-apr
with-apr-utils
启用Apache Portable Runtime：为应用提供通用运行时环境

# 编译时，动态编译了3种mpm模型后，可以在模块目录看到对应的3种动态模块
[root@host2 httpd-2.4.27]# ll /usr/local/apache/modules/ |grep mpm
-rwxr-xr-x 1 apache apache 191360 Aug 18 19:35 mod_mpm_event.so
-rwxr-xr-x 1 apache apache  88720 Aug 18 19:35 mod_mpm_prefork.so
-rwxr-xr-x 1 apache apache 137424 Aug 18 19:35 mod_mpm_worker.so


configure选项中：
--disable-xx默认是开启的模块
--enable-xx默认是关闭的模块
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;动态/静态编译的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态static编译：编译时，把模块编译到核心模块里面，随着核心模块启动而启动，&lt;strong&gt;也就是说和httpd进程的生命周期一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;静态shared编译：把模块编译为二进制文件，但是不随着核心模块启动而启动，而是需要的时候，用LoadModule指令引用；&lt;strong&gt;所谓动态，即需要增减的时候，用LoadMoudule加载或注释掉需要的模块，然后发送HUP信号，重读配置文件即实现模块的动态装载或卸载&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--enable-so：启用so模块，默认启用，默认静态编译，指定为动态选择不生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 httpd-2.4.27]# httpd -M
Loaded Modules:
 core_module (static)
 so_module (static)
 http_module (static)

一定静态编译的模块so_module,这个模块才使得httpd有了动态装载、卸载模块的能力；
DSO：dymanic shared object 动态共享模块对象；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，开始编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 进入解压后目录，三步走；
# 三种mpm都动态编译，默认用event；启用pcre正则、apr跨平台、启用zlib压缩
[root@host2 httpd-2.4.27]# ./configure --prefix=/usr/local/apache --with-z --with-pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util/ --with-mpm=event --enable-mpms-shared=all

[root@host2 httpd-2.4.27]# make &amp;amp;&amp;amp; make install

# 安装后测试
[root@host2 httpd-2.4.27]# /usr/local/apache/bin/httpd -t
Syntax OK
[root@host2 httpd-2.4.27]# /usr/local/apache/bin/httpd -k start
[root@host2 httpd-2.4.27]# curl localhost
&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，编译安装后配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# path变量配置
[root@host2 httpd-2.4.27]# cat /etc/profile.d/httpd.sh
export PATH=/usr/local/apache/bin:$PATH
[root@host2 httpd-2.4.27]# source !$
source /etc/profile.d/httpd.sh

# 改httpd的进程启动用户，默认为nobody
[root@host2 httpd-2.4.27]# useradd apache
[root@host2 httpd-2.4.27]# id apache
uid=1000(apache) gid=1000(apache) groups=1000(apache)

[root@host2 apache]# vim conf/httpd.conf 
	...
	User apache
	Group apche
	...
[root@host2 apache]# apachectl -k restart

# 服务脚本准备
实验时，从yum安装中复制过来，然后修改的服务脚本有点问题，无法关闭进程
# 解决方法：命令行方式管理httpd进程，
apachectl脚本，或httpd即可完成程序的启停；
# 再结合利用/etc/rc.local可以实现开机自启动
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以下：非必须配置，但path变量一般都需要配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
--
manpath配置
echo &amp;quot;MANPATH /usr/local/apache/man&amp;quot; &amp;gt;&amp;gt; /etc/man.config

--
path配置
echo &amp;quot;PATH=/usr/local/apache/bin:$PATH&amp;quot; &amp;gt;&amp;gt; /etc/profile.d/apache.sh
source /etc/profile.d/apache.sh 


--
头文件引用？
ln -s /usr/include /usr/local/apache/include

service编写，用yum安装的修改即可；
EnvironmentFile=/etc/sysconfig/httpd
ExecStart=/usr/local/apache/bin/httpd $OPTIONS -k start -DFOREGROUND
ExecReload=/usr/local/apache/bin/httpd $OPTIONS -k graceful
ExecStop=/bin/kill -WINCH ${MAINPID}
主要改了httpd进程的路径；
能启动，能访问，但是启动、关闭，都卡住？如果是命令正常，应该是service文件问题；编译没问题；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpd编译第三方模块&#34;&gt;httpd编译第三方模块&lt;/h2&gt;
&lt;p&gt;下载httpd-devel包，依赖apxs命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# apxs命令可以帮助编译httpd模块，编译安装时自带该命令；yum安装时，属于httpd-devel包命令

详细看man手册
[root@host2 modules]# apxs 
Usage: apxs -g [-S &amp;lt;var&amp;gt;=&amp;lt;val&amp;gt;] -n &amp;lt;modname&amp;gt;
       apxs -q [-v] [-S &amp;lt;var&amp;gt;=&amp;lt;val&amp;gt;] [&amp;lt;query&amp;gt; ...]
       apxs -c [-S &amp;lt;var&amp;gt;=&amp;lt;val&amp;gt;] [-o &amp;lt;dsofile&amp;gt;] [-D &amp;lt;name&amp;gt;[=&amp;lt;value&amp;gt;]]
               [-I &amp;lt;incdir&amp;gt;] [-L &amp;lt;libdir&amp;gt;] [-l &amp;lt;libname&amp;gt;] [-Wc,&amp;lt;flags&amp;gt;]
               [-Wl,&amp;lt;flags&amp;gt;] [-p] &amp;lt;files&amp;gt; ...
       apxs -i [-S &amp;lt;var&amp;gt;=&amp;lt;val&amp;gt;] [-a] [-A] [-n &amp;lt;modname&amp;gt;] &amp;lt;dsofile&amp;gt; ...
       apxs -e [-S &amp;lt;var&amp;gt;=&amp;lt;val&amp;gt;] [-a] [-A] [-n &amp;lt;modname&amp;gt;] &amp;lt;dsofile&amp;gt; ...

示例：开始编译proxy代理模块
apxs -c -i -A /usr/local/src/httpd-2.4.7/modules/proxy/mod_proxy.c /usr/local/src/httpd-2.4.7/modules/proxy/proxy_util.c


...
[root@host2 apache]# ll modules/ |grep proxy.so
-rwxr-xr-x 1 root root 373872 Aug 31 19:47 mod_proxy.so
# 查看现有proxy模块；

[root@host2 apache]# mv modules/mod_proxy.so /root/
[root@host2 apache]# ll modules/ |grep proxy.so
# 将proxy模块移走；

[root@host2 apache]# apxs -c -i -A /root/httpd-2.4.27/modules/proxy/mod_proxy.c /root/httpd-2.4.27/modules/proxy/proxy_util.c 
/usr/local/apr/build-1/libtool --silent --mode=compile gcc -std=gnu99 -prefer-pic   -DLINUX -D_REENTRANT -D_GNU_SOURCE -g -O2 -pthread -I/usr/local/apache/include  -I/usr/local/apr/include/apr-1   -I/usr/local/apr-util/include/apr-1   -c -o /root/httpd-2.4.27/modules/proxy/mod_proxy.lo /root/httpd-2.4.27/modules/proxy/mod_proxy.c &amp;amp;&amp;amp; touch /root/httpd-2.4.27/modules/proxy/mod_proxy.slo
...
# 开始编译

[root@host2 apache]# ll modules/ |grep mod_proxy.so
-rwxr-xr-x 1 root root 373920 Sep  1 10:22 mod_proxy.so #新模块

[root@host2 apache]# ll /root/mod_proxy.so 
-rwxr-xr-x 1 root root 373872 Aug 31 19:47 /root/mod_proxy.so #原有模块

# 编译后发现，已经有了新编译的proxy模块；和移走的老模块大小不完成一致，但不影响httpd运行；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;安装后目录结构&#34;&gt;安装后目录结构&lt;/h1&gt;
&lt;h2 id=&#34;编译安装目录结构&#34;&gt;编译安装目录结构&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 安装后目录结构
[root@host2 httpd-2.4.27]# ll /usr/local/apache/
total 36
drwxr-xr-x  2 root root  262 Aug 31 19:47 bin # 程序目录
drwxr-xr-x  2 root root  167 Aug 31 19:47 build
drwxr-xr-x  2 root root   78 Aug 31 19:47 cgi-bin
drwxr-xr-x  4 root root   84 Aug 31 19:47 conf # 配置文件
drwxr-xr-x  3 root root 4096 Aug 31 19:47 error # http的多种语言支持的错误网页，400,500状态码时返回的页面
drwxr-xr-x  2 root root   24 Aug 31 19:47 htdocs # 网页文件根目录
drwxr-xr-x  3 root root 8192 Aug 31 19:47 icons # 图标
drwxr-xr-x  2 root root 4096 Aug 31 19:47 include # 头文件
drwxr-xr-x  2 root root    6 Aug 31 19:47 logs # 日志：包含access.log error.log httpd.pid，和nginx类似；
drwxr-xr-x  4 root root   30 Aug 31 19:47 man # man手册
drwxr-xr-x 14 root root 8192 Aug 31 19:47 manual
drwxr-xr-x  2 root root 4096 Aug 31 19:47 modules # 动态模块文件

# 程序目录
# 有httpd主程序；apachectl调用主程序脚本；ab压测工具，htpasswd密码文件创建工具；rotatelogs日志轮替工具；apxs为perl语言的脚本，可以帮助编译第三方模块；
[root@host2 httpd-2.4.27]# ll /usr/local/apache/bin/
total 2576
-rwxr-xr-x 1 root root   98608 Aug 31 19:47 ab
-rwxr-xr-x 1 root root    3434 Aug 31 19:45 apachectl
-rwxr-xr-x 1 root root   23514 Aug 31 19:45 apxs
-rwxr-xr-x 1 root root   13144 Aug 31 19:47 checkgid
-rwxr-xr-x 1 root root    8925 Aug 31 19:45 dbmmanage
-rw-r--r-- 1 root root    1071 Aug 31 19:45 envvars
-rw-r--r-- 1 root root    1071 Aug 31 19:45 envvars-std
-rwxr-xr-x 1 root root   23864 Aug 31 19:47 fcgistarter
-rwxr-xr-x 1 root root   79816 Aug 31 19:47 htcacheclean
-rwxr-xr-x 1 root root   47352 Aug 31 19:47 htdbm
-rwxr-xr-x 1 root root   25112 Aug 31 19:47 htdigest
-rwxr-xr-x 1 root root   49064 Aug 31 19:47 htpasswd
-rwxr-xr-x 1 root root 2134840 Aug 31 19:47 httpd
-rwxr-xr-x 1 root root   22024 Aug 31 19:47 httxt2dbm
-rwxr-xr-x 1 root root   25128 Aug 31 19:47 logresolve
-rwxr-xr-x 1 root root   41240 Aug 31 19:47 rotatelogs
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;yum安装目录结构&#34;&gt;yum安装目录结构&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 apache]# ll /etc/httpd/
total 0
drwxr-xr-x 2 root root  37 Sep  1 10:37 conf # 内有主配置文件的目录
drwxr-xr-x 2 root root  82 Sep  1 10:37 conf.d # 默认欢迎页面配置文件的目录
drwxr-xr-x 2 root root 146 Sep  1 10:37 conf.modules.d # 配置引用哪些动态模块的配置文件的目录
lrwxrwxrwx 1 root root  19 Sep  1 10:37 logs -&amp;gt; ../../var/log/httpd # 日志文件
lrwxrwxrwx 1 root root  29 Sep  1 10:37 modules -&amp;gt; ../../usr/lib64/httpd/modules # 模块文件目录
lrwxrwxrwx 1 root root  10 Sep  1 10:37 run -&amp;gt; /run/httpd # pid文件目录
[root@host2 apache]# 

# yum安装时几个重要文件
/usr/sbin/httpd 主程序
/etc/httpd/conf/httpd.conf 主配置
/usr/lib/systemd/system/httpd.service 服务脚本
/var/www/html 网站文件根目录
/usr/lib64/httpd/modules/ 目录下的模块文件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编译模块查看&#34;&gt;编译模块查看&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 apache]# httpd -l
Compiled in modules:
  core.c
  mod_so.c
  http_core.c
[root@host2 apache]# httpd -M
Loaded Modules:
 core_module (static)
 so_module (static)
 http_module (static)
 authn_file_module (shared)
 authn_core_module (shared)
 ...
 #看出静态编译的有core，http_core，mod_so，其余为动态模块，通过LoadModule指令动态装载；可以在&amp;lt;prefix&amp;gt;/modules目录下找到；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;httpdapachectl管理命令&#34;&gt;httpd/apachectl管理命令&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@localhost ~]# httpd -h
Usage: httpd [-D name] [-d directory] [-f file]
             [-C &amp;quot;directive&amp;quot;] [-c &amp;quot;directive&amp;quot;]
             [-k start|restart|graceful|graceful-stop|stop]
             [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]


root@localhost ~]# apachectl -h
Usage: /usr/sbin/httpd [-D name] [-d directory] [-f file]
                       [-C &amp;quot;directive&amp;quot;] [-c &amp;quot;directive&amp;quot;]
                       [-k start|restart|graceful|graceful-stop|stop]
                       [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]

此2个命令，可以管理httpd进程的启停，查看状态，程序版本，编译选项等；
apachectl是脚本，调用httpd，httpd是二进制程序
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;配置文件与指令&#34;&gt;配置文件与指令&lt;/h1&gt;
&lt;p&gt;2.4版本文档
&lt;a href=&#34;http://httpd.apache.org/docs/2.4/&#34;&gt;http://httpd.apache.org/docs/2.4/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;指令介绍文档
&lt;a href=&#34;http://httpd.apache.org/docs/2.4/mod/directives.html&#34;&gt;http://httpd.apache.org/docs/2.4/mod/directives.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;httpdconf&#34;&gt;httpd.conf&lt;/h2&gt;
&lt;p&gt;此为yum安装httpd配置文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目录权限的放行，2个方面：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;directory指令内要放行&lt;/li&gt;
&lt;li&gt;httpd进程用户如apache对目录有相应权限，一般改为属主即可&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# grep -vE &amp;quot;^(.*#|^$)&amp;quot; /etc/httpd/conf/httpd.conf
ServerRoot &amp;quot;/etc/httpd&amp;quot; 
程序根目录；

Listen 80
监听端口，可以写多行，多个端口；不写ip就是本机所有ip

Include conf.modules.d/*.conf
导入模块配置文件

User apache
Group apache
进程用户身份

ServerAdmin root@localhost
管理员邮箱

&amp;lt;Directory /&amp;gt;
    AllowOverride none
    Require all denied
&amp;lt;/Directory&amp;gt;
先把主机文件系统的根都禁止了，再根据需要放开小范围的子目录；

DocumentRoot &amp;quot;/var/www/html&amp;quot;
默认站点的网站文件根目录

&amp;lt;Directory &amp;quot;/var/www&amp;quot;&amp;gt;
    AllowOverride None
    Require all granted
&amp;lt;/Directory&amp;gt;
放开httpd进程对/var/www目录的访问；

&amp;lt;Directory &amp;quot;/var/www/html&amp;quot;&amp;gt;
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
&amp;lt;/Directory&amp;gt;
放开httpd进程对/var/www/html目录的访问；【仍需注意httpd进程用户如apache对改目录的权限；一般改为apache属主】

&amp;lt;IfModule dir_module&amp;gt;
    DirectoryIndex index.html
&amp;lt;/IfModule&amp;gt;
如果dir_module模块加载了，内部指令生效；全局的生效，可被覆盖！
指令作用，为设置访问目录时，默认返回的文件

&amp;lt;Files &amp;quot;.ht*&amp;quot;&amp;gt;
    Require all denied
&amp;lt;/Files&amp;gt;
禁用.ht文件的访问，全局的，可被覆盖；

ErrorLog &amp;quot;logs/error_log&amp;quot;
LogLevel warn
全局errolog日志路径，级别，可被覆盖
设置虚拟主机时，可以自定义自己的日志路径，级别，若不设置，默认都在该全局日志文件中


&amp;lt;IfModule log_config_module&amp;gt;
    LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot;&amp;quot; combined
    LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b&amp;quot; common
    &amp;lt;IfModule logio_module&amp;gt;
      LogFormat &amp;quot;%h %l %u %t \&amp;quot;%r\&amp;quot; %&amp;gt;s %b \&amp;quot;%{Referer}i\&amp;quot; \&amp;quot;%{User-Agent}i\&amp;quot; %I %O&amp;quot; combinedio
    &amp;lt;/IfModule&amp;gt;
    CustomLog &amp;quot;logs/access_log&amp;quot; combined
&amp;lt;/IfModule&amp;gt;
如果log_config_module加载了，内部指令生效，全局，可覆盖；可引用日志格式；
定义全局accesslog路径、格式，可覆盖
设置虚拟主机时，可以自定义自己的日志路径，级别，若不设置，默认都在该全局日志文件中

&amp;lt;IfModule alias_module&amp;gt;
    ScriptAlias /cgi-bin/ &amp;quot;/var/www/cgi-bin/&amp;quot;
&amp;lt;/IfModule&amp;gt;
如果alias_module加载了 内部指令生效；将对uri的访问，/cgi-bin/定向到文件系统的/var/www/cgi-bin/路径下寻找！
如访问www.a.com/cgi-bin/1.cgi时，寻找到的文件为文件系统上/var/www/cgin-bin/1.cgi


&amp;lt;Directory &amp;quot;/var/www/cgi-bin&amp;quot;&amp;gt;
    AllowOverride None
    Options None
    Require all granted
&amp;lt;/Directory&amp;gt;
对文件系统目录/var/www/cgi-bin的放行，directory指令层面放行；

&amp;lt;IfModule mime_module&amp;gt;
    TypesConfig /etc/mime.types
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
    AddType text/html .shtml
    AddOutputFilter INCLUDES .shtml
&amp;lt;/IfModule&amp;gt;
若mime_module模块加载了，内部指令生效；
定义httpd支持，识别的文件类型

AddDefaultCharset UTF-8
默认编码

&amp;lt;IfModule mime_magic_module&amp;gt;
    MIMEMagicFile conf/magic
&amp;lt;/IfModule&amp;gt;


EnableSendfile on
开启sendfile，用于零复制，加速响应

IncludeOptional conf.d/*.conf
导入其他配置，如虚拟主机的配置
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;导入模块的配置文件，所在的目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf.modules.d]# pwd
/etc/httpd/conf.modules.d
[root@host2 conf.modules.d]# ll
total 28
-rw-r--r-- 1 root root 3739 Nov 27  2019 00-base.conf
-rw-r--r-- 1 root root  139 Nov 27  2019 00-dav.conf
-rw-r--r-- 1 root root   41 Nov 27  2019 00-lua.conf
-rw-r--r-- 1 root root  742 Nov 27  2019 00-mpm.conf
-rw-r--r-- 1 root root  957 Nov 27  2019 00-proxy.conf
-rw-r--r-- 1 root root   88 Nov 27  2019 00-systemd.conf
-rw-r--r-- 1 root root  451 Nov 27  2019 01-cgi.conf
都是导入模块的配置文件；注意依赖性；分类写在不同的配置文件中；

conf.d下welcome.conf文件定义了默认的欢迎页面；
在/usr/share/httpd/noindex下；
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;[root@host2 ~]# httpd -M |wc -l
83
3个静态，80个动态的，且启用的；
[root@host2 ~]# httpd -l
Compiled in modules:
  core.c
  mod_so.c
  http_core.c
[root@host2 ~]# 
l选项列出静态的模块，即：核心模块；so模块支持DSO动态模块的模块；http模块
[root@host2 conf.modules.d]# ll /usr/lib64/httpd/modules/ | grep -v &amp;quot;total&amp;quot;| wc -l
100
yum安装版本一共编译进了100个动态模块；3个静态的不在此目录；在主程序内部

LoadModule 指令，加载需要的模块，采用相对路径，不需要重启生效；模块有依赖关系；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;prefork参数&#34;&gt;prefork参数&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;StartServers 8 启动时启动几个子进程；
MinSpareServers 5 最少空闲子进程
MaxSpareServers 30 最多空闲的子进程
ServerLimit 256 最多能开启的进程数
MaxClients 256 最大并发连接数；
MaxRequestsPerchild 4000 每个子进程处理最多4000次请求后就杀死，重启一个，为了稳定；

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;worker参数&#34;&gt;worker参数&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ServerLimit 16最多进程数
StartServers 2 启动时启动的进程数；
MaxRequestWorkers 150 官方解释；
The MaxRequestWorkers directive sets the limit on the number of simultaneous requests that will be served. Any connection attempts over the MaxRequestWorkers limit will normally be queued, up to a number based on the ListenBacklog directive. Once a child process is freed at the end of a different request, the connection will then be serviced.

MinSpareThreads 25 整体最少空闲线程
MaxSpareThreads 75 整体最多空闲线程
ThreadsPerChild 25 每个worker子进程启动的线程数
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置文件常见指令&#34;&gt;配置文件常见指令&lt;/h2&gt;
&lt;p&gt;【配置文件中的常见指令是由一个个模块提供的代码实现，语法：指令：值——directive：values】&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listen 监听端口&lt;/li&gt;
&lt;li&gt;ServerRoot 程序根目录&lt;/li&gt;
&lt;li&gt;DocumentRoot 网页文件根目录&lt;/li&gt;
&lt;li&gt;Directoryindex 访问uri为目录时，默认返回的页面文件&lt;/li&gt;
&lt;li&gt;ServerName 、ServerAlias 虚拟主机的主机名，别名；&lt;/li&gt;
&lt;li&gt;Include 导入哪些配置文件&lt;/li&gt;
&lt;li&gt;Define 、UnDefine  定义变量&lt;/li&gt;
&lt;li&gt;VirtualHost 虚拟主机配置段&lt;/li&gt;
&lt;li&gt;Options 、AllowOverride 定义目录属性等信息&lt;/li&gt;
&lt;li&gt;Require&lt;/li&gt;
&lt;li&gt;长连接相关指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Listen&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;配置httpd监听的端口，可以加地址，不加默认是本机所有ip的端口；

 38 # Change this to Listen on specific IP addresses as shown below to 
 39 # prevent Apache from glomming onto all bound IP addresses.
 40 #
 41 #Listen 12.34.56.78:80
 42 Listen 80

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ServerRoot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ServerRoot 是指httpd程序的家目录，如果是编译安装，一般是在/usr/local/apache/
目录下有log，module等目录；

yum安装的默认是在/etc/httpd

 22 # ServerRoot: The top of the directory tree under which the server&#39;s
 23 # configuration, error, and log files are kept.
 24 #
 25 # Do not add a slash at the end of the directory path.  If you point
 26 # ServerRoot at a non-local disk, be sure to specify a local disk on the
 27 # Mutex directive, if file-based mutexes are used.  If you wish to share the
 28 # same ServerRoot for multiple httpd daemons, you will need to change at
 29 # least PidFile.
 30 #
 31 ServerRoot &amp;quot;/etc/httpd&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DocumentRoot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;是指静态页面文件所在的目录，yum安装的,默认主机的目录默认在 /var/www/html

每个虚拟主机都可以配置自己的DocumentRoot

/var/www/html是默认虚拟主机的网页文件根目录

115 # DocumentRoot: The directory out of which you will serve your
116 # documents. By default, all requests are taken from this directory, but
117 # symbolic links and aliases may be used to point to other locations.
118 #
119 DocumentRoot &amp;quot;/var/www/html&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Directoryindex&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;配置的是：当url访问路径是以/结尾时，web会显示该目录下的那个具体文件；即访问的不是具体文件，是目录时，默认找该目录下哪个文件返回给客户端，可定义多个，根据次序寻找，找到即返回；

如访问http://1.1.1.1/dir1/时；


160 # DirectoryIndex: sets the file that Apache will serve if a directory
161 # is requested.
162 #
163 &amp;lt;IfModule dir_module&amp;gt;
164     DirectoryIndex  index.php index.xyz index.html
165 &amp;lt;/IfModule&amp;gt;

会依次寻找在${documentroot}目录下的dir1目录下的index.php index.xyz index.html，找到哪个就显示哪个


---
如果directoryindex定义的文件都没找到，此时又设置了 Options Indexes ，会列出当前目录的所有文件，仅限于充当下载服务器时，不然有安全隐患；
要点：
	1，要加入Options Indexes选项；
	2，该目录下要不存在定义的默认文件，index.html index.php index.htm等；
和nginx类似
	1，开启autoindex on选项；
	2，目录下不存在定义的默认文件，index.html index.php index.htm等；

&amp;lt;directory /usr/local/apache/htdocs/dir1&amp;gt;
	Options Indexes
	DirectoryIndex index.php index.html index.xyz
&amp;lt;/directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ServerName 、ServerAlias&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 89 # ServerName gives the name and port that the server uses to identify itself.
 90 # This can often be determined automatically, but we recommend you specify
 91 # it explicitly to prevent problems during startup.
 92 #
 93 # If your host doesn&#39;t have a registered DNS name, enter its IP address here.
 94 #
 95 #ServerName www.example.com:80

定义虚拟主机的主机名；没明确指定时，httpd默认的虚拟主机会集成当前主机的主机名
如localhost.localdomain

---
一般基于主机头的每个虚拟主机都会设置一个ServerName，至于ServerAlias是其小名；
&amp;lt;VirtualHost *:80&amp;gt;
	ServerName pc.bo.com
	ServerAlias pc pc-name
&amp;lt;/VirtualHost&amp;gt;



&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Include&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ---
 45 # Dynamic Shared Object (DSO) Support
 46 #
 47 # To be able to use the functionality of a module which was built as a DSO you
 48 # have to place corresponding `LoadModule&#39; lines at this location so the
 49 # directives contained in it are actually available _before_ they are used.
 50 # Statically compiled modules (those listed by `httpd -l&#39;) do not need
 51 # to be loaded here.
 52 #
 53 # Example:
 54 # LoadModule foo_module modules/mod_foo.so
 55 #
 56 Include conf.modules.d/*.conf
 
将模块相关的配置文件导入进来，支持*的通配符，但要注意文件导入的顺序，有时可能会出错；模块之间有依赖性；


---
352 # Load config files in the &amp;quot;/etc/httpd/conf.d&amp;quot; directory, if any.
353 IncludeOptional conf.d/*.conf

IncludeOptional 在要导入的文件不存在时不报错，Include就不行，会报错；

httpd启动之前，会把include包含的文件，都合并在一起，再运行；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Define 、UnDefine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义一个变量，【向后】全局范围生效；
配置文件的 Define 等同于httpd 启动时的 -D name命令行参数；
-D 命令行定义的参数由于配置文件，

Define param [value] 定义

${param} 引用

UnDefine param 取消定义
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;VirtualHost&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost 1.1.1.1:80&amp;gt;  # ip选择*为监听本机所有ip，端口可以自定义实现基于端口的虚拟主机
	ServerName pc.bo.com # 定义虚拟主机主机名；
	DocumentRoot &amp;quot;/var/www/html/pc&amp;quot; # 该虚拟主机的网页文件根目录，【注意Directory指令放行】
	ErrorLog &amp;quot;logs/pc.bo.error.log&amp;quot; # 定义错误日志
	TransferLog &amp;quot;logs/pc.bo.access.log&amp;quot; # 定义访问日志；
	
	
&amp;lt;/VirtualHost&amp;gt;
虚拟主机，根据最多匹配原则，请求被转发给能匹配最多的虚拟主机上
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Options 、AllowOverride&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
Options 指令可以启动或禁用其所在目录的某些特性；该指令的值有：
	All
	None
	ExecCGI
	FollowSymLinks
	Includes
	IncludesNOEXEC
	Indexes 展示当前目录下文件，下载服务时需要
	MultiViews
	SymLinksIFOwnerMatch
不指定options，默认为all，一般除了下载服务会开启indexes选择，其他都禁用；
用Options None



---
allowoverride指令用于控制是否读取.htaccess配置文件；
。。没懂；

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Require&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用于控制对目录的访问权限；主要功能由mod_authz_core模块提供；

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;长连接相关指令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;KeepAlive on/off

没有长连接时，客户端请求建立了一个tcp连接后，发一个http请求，服务端响应后，就把该连接关闭；
开启长连接时，允许客户端和服务端建立的一个tcp连接期间，客户端可以向服务器发起多次http请求；2个请求之间的时间间隔超过设定的超时时间后，就会断开，客户端需求再发起请求的话，需要再次发起建立tcp连接请求；
长连接内，每发一个新请求，计时器会归零重新计时；若设置了一次长连接最大可发的请求数，即便请求间隔不超时超时时间，达到上限次数后，也会关闭；

KeepAliveTimeout 60 2次请求间隔超过60s就断开
MaxKeepAliveRequests 500 一次长连接最多500个请求，多于500个后，即使超时时间不到，也会断开长连接；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;容器类指令&#34;&gt;容器类指令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Directory&gt; 、&lt;Files&gt;、&lt;DirectoryMatch&gt;、&lt;FilesMatch&gt; # 针对的是文件系统&lt;/li&gt;
&lt;li&gt;&lt;Location&gt; &lt;Location&gt; # 针对的是uri&lt;/li&gt;
&lt;li&gt;&lt;IfDefine&gt;、&lt;IfModule&gt;、&lt;IfVersion&gt;判断&lt;/li&gt;
&lt;li&gt;&lt;If&gt; &lt;ElseIf&gt; &lt;Else&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;Directory&gt; 
&lt;pre&gt;&lt;code&gt;
---
&amp;lt;Directory&amp;gt;指令，作用是对于匹配到的目录，封装一组指令，改指令对该目录递归生效；
一般是绝对路径，目录指的是根文件系统的目录，一般以&amp;quot;/“开头，使用相对路径也是相对于根
&amp;lt;Directory dir1&amp;gt; 等价于&amp;lt;Directory /dir1&amp;gt; 匹配的是主机上的 /dir1

示例：禁止根下所有的访问，但是放开/var/www的访问；
---
禁止：
102 &amp;lt;Directory /&amp;gt;
103     AllowOverride none
104     Require all denied 禁止
105 &amp;lt;/Directory&amp;gt;
表示主机的根文件系统从根开始不给访问；先从大范围禁止，逐步放开小范围，安全！

放开
122 # Relax access to content within /var/www.
123 #
124 &amp;lt;Directory &amp;quot;/var/www&amp;quot;&amp;gt;
125     AllowOverride None
126     # Allow open access:
127     Require all granted 拒绝
128 &amp;lt;/Directory&amp;gt;

Options 可以跟多个值；
Indexes 该项开放文件列表给用户；
FollowSymLinks 允许访问符号连接源文件；
#
AllowOverride
控制.htaccess文件中的访问控制相关指令；能否覆盖主配置文件；
AllowOverride All; .htaccess指令都有效；
AllowOverride None；.htaccess 文件整个无效
AllowOverride AuthConfig .htaccess 除了authcofig，.htaccess文件中其他指令无效；
&lt;/code&gt;&lt;/pre&gt;&lt;Files&gt;
&lt;pre&gt;&lt;code&gt;files匹配的是单个，或一写文件，生效范围是限于它所在的外层标签；
如下：/usr/local/apache/htdocs目录下，都可以访问，除了其下的private.html文件（递归生效）

&amp;lt;Directory /usr/local/apache/htdocs&amp;gt;
    require all granted
    &amp;lt;Files private.html&amp;gt;
        required all denied
    &amp;lt;/Files&amp;gt;
    
&amp;lt;/Directory&amp;gt;


---
directory 和files指令支持 * ？ [a-Z]等通配符，但是通配符，【不能匹配/符号】即不能跨目录
例如：
&amp;lt;Directory /*/public.html&amp;gt; 不能匹配 /home/wang/public.html
&amp;lt;Directory /home/*/public.html&amp;gt; 才能匹配；

--- 支持正则表达式，用~符号
&amp;lt;Directory ~ /usr/local/apache/htdocs/dir[1-9]&amp;gt;
&amp;lt;/Directory&amp;gt;
等价于
&amp;lt;DirectoryMatch /usr/local/apache/htdocs/dir[1-9]&amp;gt;
&amp;lt;/Directory&amp;gt;

&amp;lt;Files&amp;gt;指令也支持正则；
&lt;/code&gt;&lt;/pre&gt;&lt;Location&gt;
&lt;pre&gt;&lt;code&gt;Directory和Files匹配的都是 本机主机的根文件系统上的路径！

而Location匹配的是URL后面的路径；

相同：都是对匹配到的路径，封装一组指令，只在该匹配路径内生效；

示例：
http://1.1.1.1/dir1/index.html
匹配的location是：
&amp;lt;Location &amp;quot;/dir1&amp;quot;&amp;gt;
	...
&amp;lt;/Location&amp;gt;

---
location 三种模式：
1，location精确匹配url路径
2，location末尾加/ 只匹配该目录下的文件
3，location末尾不加/ 匹配该目录下的文件和目录本身

示例：
&amp;lt;Location &amp;quot;/dir1/&amp;quot;&amp;gt;
&amp;lt;/Location&amp;gt;
匹配  /dir1/ /dir1/1.txt

&amp;lt;Location &amp;quot;/dir1&amp;quot;&amp;gt;
&amp;lt;/Location&amp;gt;
匹配 /dir1 /dir1/ dir1/1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;IfDefine&gt;、&lt;IfModule&gt;、&lt;IfVersion&gt;判断&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;都为条件判断容器，且都只在httpd启动时进行判断，
为真，封装在内的指令生效，否则忽略，
条件前加！表否定；

---
ifmodule，启动时加载了某模块的话，那么该容器内的指令就生效；
可以是静态加载模块，或LoadModule加载的模块，(此时，LoadModule指令需要在IfModule之前)
eg：
LoadModule status_module modules/mod_status.so

&amp;lt;IfModule &amp;quot;status_module&amp;quot;&amp;gt;
	&amp;lt;Location &amp;quot;/server_status&amp;quot;&amp;gt;
		SetHandler server-status
		Require all granted
	&amp;lt;/Location&amp;gt;
&amp;lt;/IfModule&amp;gt;

---
IfDefine param判断参数是否定义，定义了，为真，其内部指令生效；否则忽略；
条件前加！表否定；

httpd启动时，加的-D选项，和配置文件的Define指令都可定义参数；
Define指令要在IfDefine之前；
eg：
httpd -DReverserProxy -DUserCache -DMemCache ...
&amp;lt;IfDefine ReverseProxy&amp;gt;
	LoadModule proxy_module modules/mod_proxy.so
	LoadModule proxy_http_module modules/mode_proxy_http.so
	
	&amp;lt;IfDefine UseCache&amp;gt;
		LoadModule cache_module modules/mod_cache.so
		&amp;lt;IfDefine MemCache&amp;gt;
			LoadModule mem_cache_module modules/mod_mem_cache.so
		&amp;lt;/IfDefine&amp;gt;
		&amp;lt;IfDefine !MemCache&amp;gt;
			LoadModule cache_disk_module modules/mod_cache_disk.so
		&amp;lt;/IfDefine&amp;gt;
	&amp;lt;/IfDefine&amp;gt;
	
&amp;lt;/IfDefine&amp;gt;

---
&amp;lt;IfVersion &amp;gt;=2.4&amp;gt;
	...
&amp;lt;/IfVersion&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;If&gt; &lt;ElseIf&gt; &lt;Else&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eg:
判断请求主机地址是8位还是16位掩码；
&amp;lt;If &amp;quot;-R &#39;1.1.0.0/16&#39;&amp;quot;&amp;gt;
	...
&amp;lt;/If&amp;gt;
&amp;lt;ElseIf &amp;quot;-R &#39;1.0.0.0/8&#39;&amp;quot;&amp;gt;
	...
&amp;lt;/ElseIf&amp;gt;
&amp;lt;Else&amp;gt;
	...
&amp;lt;/Else&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置文件合并规则&#34;&gt;配置文件合并规则&lt;/h2&gt;
&lt;p&gt;先把所有配置include进来，然后根据合并顺序处理&lt;/p&gt;
&lt;p&gt;合并顺序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;directory：&lt;/li&gt;
&lt;li&gt;directorymatch&lt;/li&gt;
&lt;li&gt;files和filesmatch等级别&lt;/li&gt;
&lt;li&gt;location和locationmatch等级别&lt;/li&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【directory之间处理顺序，先匹配离/近的，如：/var/web/dir 优于/var/web/dir/subdir】&lt;/p&gt;
&lt;p&gt;【其余4个，根据出现在配置文件中顺序处理，如：/foo请求，location &amp;quot;/foo/bar&amp;quot; location &amp;quot;/foo&amp;quot;，2个location谁在前，就匹配到谁去处理】&lt;/p&gt;
&lt;p&gt;【virtualhost，在外部配置处理后，再处理，所以可以覆盖外部配置】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eg：请求的是/example/index.html
&amp;lt;Directory &amp;quot;/&amp;quot;&amp;gt;
    Header set CustomHeaderName one
    &amp;lt;FilesMatch &amp;quot;.*&amp;quot;&amp;gt;
        Header set CustomHeaderName three
        不能继续匹配的原因，是通配符不能跨目录符号/，应该是？
    &amp;lt;/FilesMatch&amp;gt;
&amp;lt;/Directory&amp;gt;

&amp;lt;Directory &amp;quot;/example&amp;quot;&amp;gt;
    Header set CustomHeaderName two
&amp;lt;/Directory&amp;gt;
最终首部值是three，
one-》two-》three





---
&amp;lt;Location &amp;quot;/&amp;quot;&amp;gt;
    E
&amp;lt;/Location&amp;gt;

&amp;lt;Files &amp;quot;f.html&amp;quot;&amp;gt;
    D
&amp;lt;/Files&amp;gt;

&amp;lt;VirtualHost *&amp;gt;
&amp;lt;Directory &amp;quot;/a/b&amp;quot;&amp;gt;
    B
&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;DirectoryMatch &amp;quot;^.*b$&amp;quot;&amp;gt;
    C
&amp;lt;/DirectoryMatch&amp;gt;

&amp;lt;Directory &amp;quot;/a/b&amp;quot;&amp;gt;
    A
&amp;lt;/Directory&amp;gt;

E，location在最后
D，file次之
C，DirectoryMatch再次
B在virtualhost内部，后处理
所以顺序是：A B C D E



---
&amp;lt;Location &amp;quot;/&amp;quot;&amp;gt;
    Require all granted
&amp;lt;/Location&amp;gt;

# Whoops!  This &amp;lt;Directory&amp;gt; section will have no effect
&amp;lt;Directory &amp;quot;/&amp;quot;&amp;gt;
    &amp;lt;RequireAll&amp;gt;
        Require all granted
        Require not host badguy.example.com
    &amp;lt;/RequireAll&amp;gt;
&amp;lt;/Directory&amp;gt;

directory顺序在前；
directory设置不生效，被location后续覆盖了！
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/httpd/" term="httpd" label="httpd" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx之LNMP环境</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%B9%8Blnmp%E7%8E%AF%E5%A2%83/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%B9%8Blnmp%E7%8E%AF%E5%A2%83/</id>
            <updated>2020-10-19T18:15:01&#43;08:00</updated>
            <published>2020-09-06T14:10:18&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">lnmp环境搭建以及wordpress和discuz的部署笔记...</summary>
            
                <content type="html">&lt;h1 id=&#34;lnmp&#34;&gt;LNMP&lt;/h1&gt;
&lt;h2 id=&#34;环境说明&#34;&gt;环境说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CentOS Linux release 7.5.1804 (Core) minimal install版本&lt;/li&gt;
&lt;li&gt;192.168.80.101：nginx 1.14.2&lt;/li&gt;
&lt;li&gt;192.168.80.102：mysql 5.7.30&lt;/li&gt;
&lt;li&gt;192.168.80.103：php 5.5.38&lt;/li&gt;
&lt;li&gt;全部为分离部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nginx编译安装&#34;&gt;nginx编译安装&lt;/h2&gt;
&lt;p&gt;1，安装依赖包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y lrzsz gcc gcc++ pcre-devel openssl-devel zlib-devel

# lrzsz用来上传本地下载好的源码包
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，下载源码包，解压，进入解压后目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@nginx src]# ll
total 992
-rw-r--r-- 1 root root 1015384 Aug 24 09:23 nginx-1.14.2.tar.gz
[root@nginx src]# tar -xf nginx-1.14.2.tar.gz 
[root@nginx src]# cd nginx-1.14.2
[root@nginx nginx-1.14.2]# pwd
/usr/local/src/nginx-1.14.2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，三步走&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#configure，根据需要启动或禁用相应的模块，指定worker进程的用户为nignx，指定安装目录为/usr/local/nginx

[root@nginx nginx-1.14.2]# ./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio --with-stream_realip_module --with-stream_ssl_module --with-stream --with-pcre --with-http_gzip_static_module --with-http_realip_module


#make

#make install

#安装后目录
[root@nginx nginx]# pwd
/usr/local/nginx
[root@nginx nginx]# ll
total 0
drwxr-xr-x 2 root root 333 Aug 30 16:35 conf
drwxr-xr-x 2 root root  40 Aug 30 16:35 html
drwxr-xr-x 2 root root   6 Aug 30 16:35 logs
drwxr-xr-x 2 root root  19 Aug 30 16:35 sbin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，安装完成后&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户创建
[root@nginx nginx]# groupadd -g 2000 nginx
[root@nginx nginx]# useradd -u 2000 nginx -g nginx
[root@nginx nginx]# id nginx
uid=2000(nginx) gid=2000(nginx) groups=2000(nginx)


环境变量配置
[root@nginx nginx]# vim /etc/profile.d/nginx.sh
[root@nginx nginx]# cat /etc/profile.d/nginx.sh
export PATH=/usr/local/nginx/sbin:$PATH

[root@nginx nginx]# source /etc/profile.d/nginx.sh 
[root@nginx nginx]# echo $PATH
/usr/local/nginx/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

启动测试               
[root@nginx nginx]# nginx
[root@nginx nginx]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:80                                                                             *:*  

[root@nginx nginx]# curl localhost
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;php编译安装&#34;&gt;php编译安装&lt;/h2&gt;
&lt;p&gt;1，安装依赖包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y bzip2-devel libmcrypt-devel openssl-devel libxml2-devel gcc gcc++ 
devel包不要写成level，写错过！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，下载源码包，解压，进入解压后目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php src]# ll
total 17372
-rw-r--r-- 1 root root 17785731 Aug 19 15:26 php-5.5.38.tar.gz
[root@php src]# tar -xf php-5.5.38.tar.gz 
[root@php src]# cd php-5.5.38
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，三步走&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#configure：启用php-fpm方式，用mysqlnd连接数据库，指定安装目录，等，

[root@php php-5.5.38]# ./configure --prefix=/usr/local/php --with-openssl --with-mbstring --enable-sockets --with-freetype-dir --with-jpeg-dir --with-png-dir --with-libxml-dir=/usr --enable-xml --with-zlib --with-mcrypt --with-bz2 --with-mhash --with-config-file-path=/etc \--with-config-file-scan-dir=/etc/php.d --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --enable-fpm

#make

#make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php的configure脚本一些参数说明；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;

SAPI modules:

  --with-apxs2=FILE       Build shared Apache 2.0 Handler module. FILE is the optional
                          pathname to the Apache apxs tool apxs
php编译为apache模式的方式时，指定，模块的路径
  --enable-fpm            Enable building of the fpm SAPI executable
php单独运行为fpm格式；

General settings:

  --with-config-file-path=PATH
                          Set the path in which to look for php.ini [PREFIX/lib]
php解释器的配置文件                        
  --with-config-file-scan-dir=PATH
                          Set the path where to scan for configuration files
php-fpm的配置文件夹

---
php连接mysql方式2种；libmysql驱动连接、mysqlnd连接
# libmysql时：需先安装mysql，mysql-devel
# --with-mysql指定mysql安装路径
# with-mysqli mysql_config 脚本路径
# with-pdo-mysql mysql安装路径
# 例如：
./configure --prefix=/usr/local/php --with-mysql=/usrlocal/mysql --with-mysqli=/usr/local/mysql/bin/mysql_cofig 
--with-pdo-mysql=/usr/local/mysql


 --with-pdo-mysql=DIR    PDO: MySQL support. DIR is the MySQL base directory
                          If no value or mysqlnd is passed as DIR, the
                         directory /usr/local/freetds
  --with-mysql=DIR        Include MySQL support.  DIR is the MySQL base
                          directory, if no DIR is passed or the value is
                          mysqlnd the MySQL native driver will be used

  --with-mysqli=FILE      Include MySQLi support.  FILE is the path
                          to mysql_config.  If no value or mysqlnd is passed
                          as FILE, the MySQL native driver will be used
                          
                          
# mysqlnd驱动连接时，不需提前安装mysql mysql-devel
mysqlnd作为上面3项的值，然后enable-mysqlnd
# 例子
./configure --prefix=/usr/local/php --enable-mysqld --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd


 --enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly
                          when required by other extensions

建议用mysqlnd

# 扩展php支持类型的
  --with-vpx-dir=DIR      GD: Set the path to libvpx install prefix
  --with-jpeg-dir=DIR     GD: Set the path to libjpeg install prefix
  --with-png-dir=DIR      GD: Set the path to libpng install prefix
  --with-zlib-dir=DIR     GD: Set the path to libz install prefix
  --with-xpm-dir=DIR      GD: Set the path to libXpm install prefix
  --with-freetype-dir=DIR GD: Set the path to FreeType 2 install prefix
加密，安装，压缩，等；
  --with-libxml-dir=DIR   LIBXML: libxml2 install prefix
  --with-openssl=DIR      Include OpenSSL support (requires OpenSSL &amp;gt;= 0.9.6)
  --with-kerberos=DIR     OPENSSL: Include Kerberos support
  --with-pcre-regex=DIR   Include Perl Compatible Regular Expressions support.
                          DIR is the PCRE install prefix BUNDLED
  --without-sqlite3=DIR   Do not include SQLite3 support. DIR is the prefix to
                          SQLite3 installation directory.
  --with-zlib=DIR         Include ZLIB support (requires zlib &amp;gt;= 1.0.9)
  --with-zlib-dir=&amp;lt;DIR&amp;gt;   Define the location of zlib install directory
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，安装后配置&lt;/p&gt;
&lt;p&gt;php的配置文件php.ini&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;准备php的配置文件；php的一般还有个/etc/php.d/目录

[root@php php-5.5.38]# cp php.ini-production /etc/php.ini
[root@php php-5.5.38]# pwd
/usr/local/src/php-5.5.38
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php-fpmd服务脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;准备php-fpm的服务脚本，加入执行权限

[root@php php-5.5.38]# cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpmd
[root@php php-5.5.38]# chmod +x /etc/init.d/php-fpmd 
[root@php php-5.5.38]# chkconfig php-fpmd on

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;php-fpmd的配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;准备php-fpm的配置文件；【和php的配置文件不一回事，类比java配置和tomcat的配置】

[root@php php-5.5.38]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf

注意：/usr/local/php是编译安装的目录；根据情况修改；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改监听端口为本机所有地址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php php-5.5.38]# cd /usr/local/php/
[root@php php]# ll
total 0
drwxr-xr-x 2 root root 132 Aug 30 16:54 bin
drwxr-xr-x 2 root root  71 Aug 30 16:58 etc
drwxr-xr-x 3 root root  17 Aug 30 16:54 include
drwxr-xr-x 3 root root  17 Aug 30 16:54 lib
drwxr-xr-x 4 root root  28 Aug 30 16:54 php
drwxr-xr-x 2 root root  21 Aug 30 16:54 sbin
drwxr-xr-x 4 root root  28 Aug 30 16:54 var
[root@php php]# vim etc/php-fpm.conf

# 取消127.0.0.1，即改成监听所有地址

[root@php php]# service php-fpmd start
Starting php-fpm  done
[root@php php]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:9000                                                                           *:*                  
LISTEN     0      128                                                                *:22                                                                             *:*        

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改php-fpm的进程用户&lt;/p&gt;
&lt;p&gt;​	nginx配置转发时，需要2者进程用户一致，避免权限问题；&lt;strong&gt;uid不同时，测试也可以，但最好保持一致&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php php]# groupadd -g 2000 nginx
[root@php php]# useradd -u 2000 nginx -g nginx
[root@php php]# id nginx
uid=2000(nginx) gid=2000(nginx) groups=2000(nginx)
# 添加nginx用户，uid最好一致，

[root@php php]# vim etc/php-fpm.conf
[root@php php]# service php-fpmd restart
Gracefully shutting down php-fpm . done
Starting php-fpm  done

# 改为nginx用户启动

[root@php php]# ps aux|grep php
root      81399  0.0  0.4  74912  4196 ?        Ss   17:02   0:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)
nginx     81400  0.0  0.3  74912  3744 ?        S    17:02   0:00 php-fpm: pool www
nginx     81401  0.0  0.3  74912  3744 ?        S    17:02   0:00 php-fpm: pool www

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mysql二进制安装&#34;&gt;mysql二进制安装&lt;/h2&gt;
&lt;p&gt;1，下载二进制压缩包&lt;/p&gt;
&lt;p&gt;2，解压，解压后目录做软链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# tar -xf mysql-5.7.30-el7-x86_64.tar.gz 
[root@mysql local]# ll
...
drwxr-xr-x  9 root root       129 Aug 30 17:10 mysql-5.7.30-el7-x86_64
-rw-r--r--  1 root root 727333633 Aug 20 16:16 mysql-5.7.30-el7-x86_64.tar.gz
...
[root@mysql local]# ln -sv mysql-5.7.30-el7-x86_64 mysql
‘mysql’ -&amp;gt; ‘mysql-5.7.30-el7-x86_64’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，配置环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# vim /etc/profile.d/mysql.sh
[root@mysql local]# source /etc/profile.d/mysql.sh
[root@mysql local]# cat /etc/profile.d/mysql.sh 
export PATH=/usr/local/mysql/bin:$PATH

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，创建数据目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# mkdir /data/mysql -pv
mkdir: created directory ‘/data’
mkdir: created directory ‘/data/mysql’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，创建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql local]# useradd mysql
[root@mysql local]# chown -R mysql.mysql /data/mysql/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6，服务脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql mysql]# cp support-files/mysql.server /etc/init.d/mysqld
[root@mysql mysql]# pwd
/usr/local/mysql

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7，配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 将原有配置文件备份，并修改
[root@mysql mysql]# cp /etc/my.cnf{,.bak}

[root@mysql mysql]# ll /etc/my.cnf*
-rw-r--r--. 1 root root 570 Jun  8  2017 /etc/my.cnf
-rw-r--r--  1 root root 570 Aug 30 17:27 /etc/my.cnf.bak

# 修改如下
[root@mysql mysql]# vim /etc/my.cnf
[root@mysql mysql]# cat /etc/my.cnf
[mysqld]

datadir=/data/mysql
socket=/data/mysql/mysql.sock

symbolic-links=0

skip_name_resolve=on
[mysqld_safe]
log-error=/data/mysql/mariadb.log
pid-file=/data/mysql/mariadb.pid

#
# include all files from the config directory
#
!includedir /etc/my.cnf.d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6，执行数据库初始化脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql mysql]# mysql_install_db --datadir=/data/mysql --user=mysql
2020-08-30 17:31:00 [WARNING] mysql_install_db is deprecated. Please consider switching to mysqld --initialize
2020-08-30 17:31:00 [ERROR]   Child process: /usr/local/mysql-5.7.30-el7-x86_64/bin/mysqldterminated prematurely with errno= 32
2020-08-30 17:31:00 [ERROR]   Failed to execute /usr/local/mysql-5.7.30-el7-x86_64/bin/mysqld --bootstrap --datadir=/data/mysql --lc-messages-dir=/usr/share/mysql --lc-messages=en_US
-- server log begin --
/usr/local/mysql-5.7.30-el7-x86_64/bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory


# 数据库初始化脚本会报错，需要libaio库，安装即可
[root@mysql mysql]# yum install -y libaio

# mysql_install_db脚本废弃，仍会报错，改用mysqld --initialize，会生成随机密码
[root@mysql mysql]# mysqld --initialize
...
[Note] A temporary password is generated for root@localhost: u5qu((8Cp&amp;gt;xs


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7，本地连入，配置远程连接用户权限，建库，建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@mysql mysql]# service mysqld status
 ERROR! MySQL is not running
[root@mysql mysql]# chkconfig mysqld on

[root@mysql mysql]# service mysqld start
Starting MySQL.Logging to &#39;/data/mysql/mariadb.log&#39;.
 SUCCESS! 
[root@mysql mysql]# ss -nlt
                                                                       :::*        
# 连接，用初始化时，生成的随机密码；-S指定通信的socket，默认的/tmp/mysql.sock替换为了/data/mysql/mysql.sock

[root@mysql mysql]# mysql -p&amp;quot;u5qu((8Cp&amp;gt;xs&amp;quot; -S /data/mysql/mysql.sock

# 需先修改密码
mysql&amp;gt; alter user root@&#39;localhost&#39; identified by &#39;wang&#39;;
Query OK, 0 rows affected (0.01 sec)

# 建立远程连接用户
mysql&amp;gt; grant all on *.* to root@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置nginx到php-fpm的转发&#34;&gt;配置nginx到php-fpm的转发&lt;/h2&gt;
&lt;p&gt;1，配置转发的虚拟主机&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@nginx conf]# cat vhosts/lnmp.conf 
server {
	listen 80;
	server_name www.pc.com;
	
	location ~* \.php$ {
		fastcgi_pass 192.168.80.103:9000;
		fastcgi_param SCRIPT_FILENAME /php$fastcgi_script_name;
		fastcgi_index index.php;
		include fastcgi_params;
	}

}

# 注意主配置文件中要include引入
# ping和status转发未配置，php-fpm也未启用
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，配置php-fpm环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 改php-fpm进程用户为nginx，上面已经完成
# 监听本机所有ip，上面已经完成
user = nginx
group = nginx

# 允许nginx主机的ip连接
listen.allowed_clients = 192.168.80.101


# 重启
[root@php php]# service php-fpmd restart
Gracefully shutting down php-fpm . done
Starting php-fpm  done

# 写入index.php文件
mkdir /php
[root@php php]# cat /php/index.php 
&amp;lt;?php
	phpinfo()

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830183739288.png&#34; alt=&#34;image-20200830183739288&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;至此，lnmp环境搭建完成&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;discuz&#34;&gt;Discuz&lt;/h1&gt;
&lt;h2 id=&#34;单机部署&#34;&gt;单机部署&lt;/h2&gt;
&lt;p&gt;nginx和php-fpm在同一台主机部署；&lt;strong&gt;nginx的【网页根目录文件】，和php-fpm的【脚本文件根目录文件】是同一个目录&lt;/strong&gt;，此时页面正常，discuz正常搭建；&lt;/p&gt;
&lt;p&gt;1，下载程序包，解压，到网页根目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# nginx配置，分离部署失败时，采用单机部署，
[root@php upload]# vim /etc/nginx/conf.d/lnmp.conf 
server {
        listen 80;
        server_name www.test.com;

        location / {
                root /php; # /php是nginx的这个虚拟主机的网页文件根目录
                index index.php index.html;
        }
        location ~* \.php$ {
                fastcgi_pass 192.168.80.103:9000;
                # 103就是本机地址，改为127.0.0.1也行，
                # 注意php-fpm配置文件要允许192.168.80.103的自己的连接
                fastcgi_param SCRIPT_FILENAME /php$fastcgi_script_name;
                # /php也是转发php文件的存放php脚本文件的根目录
                # 单机部署时，2者必须是同一个目录！！
                fastcgi_index index.php;
                include fastcgi_params;
        }

}

# 网页目录，和脚本目录，/php
# 将discuz解压后的upload该/php目录下
[root@php upload]# pwd
/php/upload
[root@php upload]# ll
total 76
-rw-r--r--  1 root root 2739 May 31  2016 admin.php
drwxr-xr-x 11 root root  163 May 31  2016 api
-rw-r--r--  1 root root  727 May 31  2016 api.php
drwxr-xr-x  2 root root   23 May 31  2016 archiver
drwxrwxrwx  2 root root  141 Aug 30 19:32 config
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，浏览器打开http://www.test.com/uplaod&lt;/p&gt;
&lt;p&gt;会有下图错误，根据提示创建对应目录，文件，修改权限即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830185005646.png&#34; alt=&#34;image-20200830185005646&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据页面报错，做对应修改即可，命令如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch config/config_{global,ucenter}.php
chmod a+w config/config_{global,ucenter}.php
chmod a+w  data config data/{cache,avatar,plugindata,download,addonmd5,template,threadcache,attachment,log} data/attachment/{album,forum,group}
chmod a+w uc_client/data/cache
chmod a+w uc_server/data uc_server/data/{cache,avatar,backup,logs,tmp,view}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改后即可通过检查，根据提示，填入mysql的地址，即可成功安装；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830192059314.png&#34; alt=&#34;image-20200830192059314&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830193406260.png&#34; alt=&#34;image-20200830193406260&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;多机分离部署&#34;&gt;多机分离部署&lt;/h2&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx和php-fpm同一个主机部署时， nginx的网页文件目录，和转发的php-fpm的脚本文件根目录是同一个！&lt;/li&gt;
&lt;li&gt;分开时：&lt;/li&gt;
&lt;li&gt;需要nginx和php-fpm主机，各在自己的网页根目录，放一份discuz的upload目录，&lt;/li&gt;
&lt;li&gt;都需要根据页面提示，创建文件，修改权限；&lt;/li&gt;
&lt;li&gt;但是，打开后，动静资源分离不当，页面混乱如下图：&lt;/li&gt;
&lt;li&gt;待解决；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NFS！&lt;/li&gt;
&lt;li&gt;既然必须要求nginx的网页根目录，和php的脚本文件根目录必须是同一个目录；&lt;/li&gt;
&lt;li&gt;那么，nginx和php-fpm分离的情况下，&lt;strong&gt;nfs就可以实现！！！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注意点：
&lt;ul&gt;
&lt;li&gt;本来转发时，就要求，php-fpm的进程用户和nginx的worker进程用户一致，都是nginx，同理若是apache，那都要是apache，&lt;/li&gt;
&lt;li&gt;做nfs共享目录时，2者nginx用户的uid必须保持一致！&lt;/li&gt;
&lt;li&gt;一般php做nfs共享，让nginx去挂载；discuz的程序目录选一边放置即可；&lt;/li&gt;
&lt;li&gt;nfs共享出的目录和客户端挂载的目录，要保持一致！&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830192528355.png&#34; alt=&#34;image-20200830192528355&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;wordpress&#34;&gt;Wordpress&lt;/h1&gt;
&lt;h2 id=&#34;wordpress临时笔记&#34;&gt;wordpress临时笔记&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;wordpress采用多机分离部署：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;nginx和php-fpm分离部署；&lt;/p&gt;
&lt;p&gt;1，下载源码包&lt;/p&gt;
&lt;p&gt;2，解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xf wordpress-3.9.32.tar.gz
drwxr-xr-x   5 nobody nfsnobody     4096 Jun 11 06:14 wordpress
-rw-r--r--   1 root   root       5795310 Aug 30 21:01 wordpress-3.9.32.tar.gz
chown -R nginx.nginx /wordpress/

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，创建数据库，和用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create database wordpress;
mysql&amp;gt; grant all on wordpress.* to wp@’192.168.80.%&#39; identified by &#39;wp&#39;;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，遇到问题，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1，是wordpress解压后目录，所放目录位置；
&lt;ul&gt;
&lt;li&gt;1种是解压后wordpress目录下的内容，直接网站根目录——访问的是http://ip/&lt;/li&gt;
&lt;li&gt;还1种是网站子目录，解压后wordpress目录放在网站根目录——访问的是http://ip/wordpress&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2，还有就是版本兼容问题，一开始高版本的wordpress不兼容低版本的php，换成低版本的wordpress之后就可以了，或者把php换成高版本，&lt;strong&gt;总之版本要匹配；兼容&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;官方描述：
1种是直接网站根目录
1种是网站子目录

Upload the WordPress files to the desired location on your web server:

If you want to integrate WordPress into the root of your domain (e.g. http://example.com/), move or upload all contents of the unzipped WordPress directory (excluding the WordPress directory itself) into the root directory of your web server.
If you want to have your WordPress installation in its own subdirectory on your website (e.g. http://example.com/blog/), create the blog directory on your server and upload the contents of the unzipped WordPress package to the directory via FTP.

Note: If your FTP client has an option to convert file names to lower case, make sure it’s disabled.
Run the WordPress installation script by accessing the URL in a web browser. This should be the URL where you uploaded the WordPress files.
If you installed WordPress in the root directory, you should visit: http://example.com/
If you installed WordPress in its own subdirectory called blog, for example, you should visit: http://example.com/blog/
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;报错，显示，根据报错，怀疑为语法不兼容，换成低版本之后，即可；
从5.4.2，换成3.9.32后即可；

-rw-r--r--   1 root   root       5795310 Aug 30 21:01 wordpress-3.9.32.tar.gz
-rw-r--r--   1 root   root      12872547 Aug 30 20:12 wordpress-5.4.2-zh_CN.tar.gz

2020/08/30 20:53:11 [error] 10164#10164: *131 FastCGI sent in stderr: &amp;quot;PHP message: PHP Parse error:  syntax error, unexpected &#39;.&#39;, expecting &#39;&amp;amp;&#39; or variable (T_VARIABLE) in /wordpress/blog/wp-includes/functions.php on line 1081&amp;quot; while reading response header from upstream, client: 192.168.80.1, server: www.pc.com, request: &amp;quot;GET /blog/ HTTP/1.1&amp;quot;, upstream: &amp;quot;fastcgi://192.168.80.103:9000&amp;quot;, host: &amp;quot;www.pc.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，访问测试，访问http://www.pc.com/blog即打开wordpress的安装目录，填入数据库信息，一步步安装即可；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830210607405.png&#34; alt=&#34;image-20200830210607405&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200830210913321.png&#34; alt=&#34;image-20200830210913321&#34;&gt;&lt;/p&gt;
&lt;p&gt;1，php-fpm，部署，nfs服务，开放给nginx挂载，用于存放一份程序；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php ~]# mkdir /www
[root@php ~]# vim /etc/exports
[root@php ~]# cat /etc/exports
/wordpress 192.168.80.0/24(rw,no_root_squash,sync)
/www 192.168.80.0/24(rw,no_root_squash,sync)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，nginx挂载，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount.nfs 192.168.80.103:/www /www
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，nginx配置转发的虚拟主机&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name www.word.com;

        location / {
                root /www;
                index index.php index.html index.htm;
        }
        location ~* \.php$ {
                fastcgi_pass 192.168.80.103:9000;
                fastcgi_param SCRIPT_FILENAME /www$fastcgi_script_name;
                fastcgi_index index.php;
                include fastcgi_params;
        }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，解压wordpress目录带合适目录，选择网站根目录，或子目录；&lt;/p&gt;
&lt;p&gt;5，数据库，建立用户，建立数据库&lt;/p&gt;
&lt;p&gt;6，浏览器打开&lt;/p&gt;
&lt;p&gt;根据步骤，安装即可；&lt;/p&gt;
&lt;h2 id=&#34;wordpress笔记梳理后&#34;&gt;wordpress笔记梳理后&lt;/h2&gt;
&lt;p&gt;1，建立wordpress用到的数据库，和用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; create database word;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; grant all on word.* to word@&#39;192.168.80.%&#39; identified by &#39;word&#39;;
Query OK, 0 rows affected, 1 warning (0.01 sec)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，在php-fpm主机上，配置nfs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y nfs-utils
systemctl start nfs

[root@php ~]# mkdir /data
[root@php ~]# chown -R nginx.nginx /data/
[root@php ~]# vim /etc/exports

[root@php ~]# systemctl restart nfs
[root@php ~]# showmount -e 192.168.80.103
Export list for 192.168.80.103:
/data      192.168.80.0/24

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，nginx主机上，挂载php-fpm共享出的目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@nginx ~]# mkdir /data
#创建挂载点，和nfs共享出来的要相同
[root@nginx ~]# yum install -y mount.nfs
[root@nginx ~]# mount.nfs 192.168.80.103:/data /data
[root@nginx ~]# 
#下载mount.nfs工具，然后挂载；

[root@nginx ~]# groupadd -g 2000 nginx
[root@nginx ~]# useradd -u 2000 -g nginx nginx
[root@nginx ~]# id nginx
uid=2000(nginx) gid=2000(nginx) groups=2000(nginx)
# 创建同id的nginx用户
[root@nginx ~]# chown -R nginx.nginx /data/
[root@nginx ~]# ll /data/ -d
drwxr-xr-x 2 nginx nginx 6 Aug 31 11:00 /data/
# 改为nginx属主

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，nginx配置转发，虚拟主机为www.word.com，该虚拟主机网页文件根目录为/data，也是phpfpm读取php脚本文件的根目录，2者是同一个目录，为php-fpm主机nfs共享给nginx所用；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@nginx conf.d]# cat word.conf 
server {

	listen 80;
	server_name www.word.com;
	
	root /data;
	index index.php index.html;

	location ~* \.php$ {
		fastcgi_pass 192.168.80.103:9000;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME /data$fastcgi_script_name;
		include fastcgi_params;
	}
}
[root@nginx conf.d]# pwd
/etc/nginx/conf.d
# 为nginx仓库yum安装的版本；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，php-fpm修改配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php etc]# vim php-fpm.conf
[root@php etc]# grep -v &amp;quot;^;&amp;quot; php-fpm.conf
[global]
[www]
user = nginx
group = nginx

listen = 9000
listen.allowed_clients = 192.168.80.101,192.168.80.103

pm = dynamic
pm.max_children = 5
pm.start_servers = 2
pm.min_spare_servers = 1
pm.max_spare_servers = 3

[root@php etc]# pwd
/usr/local/php/etc
[root@php etc]# service php-fpmd restart
Gracefully shutting down php-fpm . done
Starting php-fpm  done

# 主要修改，用户，组为nginx，监听本机所有ip，运行nginx的ip的连接；重启
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6，写入测试页面，在网页文件根目录下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php data]# pwd
/data
[root@php data]# cat test.php 
&amp;lt;?php 
	phpinfo()
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7，改hosts文件，访问测试；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831142234788.png&#34; alt=&#34;image-20200831142234788&#34;&gt;&lt;/p&gt;
&lt;p&gt;8，下载wordpress，解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php ~]# tar -xf wordpress-3.9.32.tar.gz 
[root@php ~]# ll
drwxr-xr-x  5 nobody nfsnobody     4096 Jun 11 06:14 wordpress
-rw-r--r--  1 root   root       5795310 Aug 30 21:01 wordpress-3.9.32.tar.gz
-rw-r--r--  1 root   root      12872547 Aug 30 20:12 wordpress-5.4.2-zh_CN.tar.gz
[root@php ~]# cp -a wordpress /data/

[root@php ~]# chown -R nginx.nginx /data/wordpress/
[root@php ~]# ll /data/
total 4
drwxr-xr-x 5 nginx nginx 4096 Jun 11 06:14 wordpress

# php版本较低，改用低版本的wordpress
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9，访问，安装&lt;/p&gt;
&lt;p&gt;访问的是带有wordpress目录的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831164716663.png&#34; alt=&#34;image-20200831164716663&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831164943370.png&#34; alt=&#34;image-20200831164943370&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831165018605.png&#34; alt=&#34;image-20200831165018605&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831165031312.png&#34; alt=&#34;image-20200831165031312&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装discuz&#34;&gt;安装discuz&lt;/h2&gt;
&lt;p&gt;1，解压discz，将解压后的upload目录放到网站根目录/data目录下；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php ~]# unzip Discuz_X3.2_SC_UTF8.zip 
[root@php ~]# ll
total 30444
-rw-------.  1 root   root          1391 Aug  8 12:02 anaconda-ks.cfg
-rw-r--r--   1 root   root      12486773 Aug 20 17:00 Discuz_X3.2_SC_UTF8.zip
drwxr-xr-x   2 root   root           102 May 31  2016 readme
-rw-r--r--   1 root   root            21 Aug 31 14:20 test.php
drwxr-xr-x  12 root   root          4096 May 31  2016 upload
drwxr-xr-x   4 root   root            72 May 31  2016 utility
drwxr-xr-x   5 nobody nfsnobody     4096 Jun 11 06:14 wordpress
-rw-r--r--   1 root   root       5795310 Aug 30 21:01 wordpress-3.9.32.tar.gz
-rw-r--r--   1 root   root      12872547 Aug 30 20:12 wordpress-5.4.2-zh_CN.tar.gz


[root@php ~]# cp -a upload/ /data/
[root@php ~]# ll /data/
total 8
drwxr-xr-x 12 root  root  4096 May 31  2016 upload
drwxr-xr-x  5 nginx nginx 4096 Aug 31 16:49 wordpress

#改属主
[root@php ~]# chown -R nginx.nginx /data/upload/
[root@php ~]# ll /data/
total 8
drwxr-xr-x 12 nginx nginx 4096 May 31  2016 upload
drwxr-xr-x  5 nginx nginx 4096 Aug 31 16:49 wordpress

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，浏览器访问，执行安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831165308995.png&#34; alt=&#34;image-20200831165308995&#34;&gt;&lt;/p&gt;
&lt;p&gt;填写数据库ip，数据库root的用户名和密码，指定数据库，稍后会在mysql里创建该库，用作discuz的数据库&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831165716969.png&#34; alt=&#34;image-20200831165716969&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831165857837.png&#34; alt=&#34;image-20200831165857837&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装成功&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;要点&#34;&gt;要点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;单机部署时（nginx和php-fpm同一个主机）数据库无所谓，网通就行；
&lt;ul&gt;
&lt;li&gt;nginx的虚拟主机的网站根目录要和php-fpm的脚本根目录是同一个目录！&lt;/li&gt;
&lt;li&gt;主语nginx的worker进程和php-fpm的进程用户是不是相同，都为nginx或apache（LAMP时）&lt;/li&gt;
&lt;li&gt;网站根目录下的文件属主要改为nginx，避免权限问题&lt;/li&gt;
&lt;li&gt;php-fpm要允许本机的连接，默认行为；&lt;/li&gt;
&lt;li&gt;然后在网站根目录下，放置解压后的wordpress或discuz的upload目录&lt;/li&gt;
&lt;li&gt;访问：http://域名/ [wordpress| upload]，执行wordpress或discuz的安装程序即可；&lt;/li&gt;
&lt;li&gt;wordpress需要提前创建数据库和用户&lt;/li&gt;
&lt;li&gt;discuz需提供数据库的root用户密码，在安装时创建；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多机部署时（nginx和php-fpm不同主机）
&lt;ul&gt;
&lt;li&gt;nginx的虚拟主机的网站根目录要和php-fpm的脚本根目录是同一个目录！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;因此，通过nfs服务实现，2者挑一台做nfs服务端，另一端挂载&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;进程属主，目录权限，和单机类似&lt;/li&gt;
&lt;li&gt;nfs服务情况下，两端nignx或apache用户uid最好也保持一致&lt;/li&gt;
&lt;li&gt;php-fpm要监听本机所有ip，开放nginx主机过来的连接；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;powerdns&#34;&gt;powerdns&lt;/h2&gt;
&lt;p&gt;1，下载程序包，解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xf poweradmin-2.1.7.tgz 

mv poweradmin-2.1.7 poweradmin

cp -a poweradmin /data/

chown -R nginx.nginx /data/poweradmin/

# 
解压
改解压后的目录名，去掉版本号
复制到网站根目录
改属主
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，访问安装&lt;/p&gt;
&lt;p&gt;访问到install目录，报错；错误提示如下，估计又是php版本和程序包版本不兼容；&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.word.com/poweradmin/install/&#34;&gt;http://www.word.com/poweradmin/install/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2020/08/31 17:16:19 [error] 4395#4395: *76 FastCGI sent in stderr: &amp;quot;PHP message: PHP Fatal error:  Call to undefined function _() in /data/poweradmin/inc/error.inc.php on line 25&amp;quot; while reading response header from upstream, client: 192.168.80.1, server: www.word.com, request: &amp;quot;GET /poweradmin/install/ HTTP/1.1&amp;quot;, upstream: &amp;quot;fastcgi://192.168.80.103:9000&amp;quot;, host: &amp;quot;www.word.com&amp;quot;
[root@nginx ~]# tail /var/log/nginx/error.log 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;phpmyadmin&#34;&gt;phpmyadmin&lt;/h2&gt;
&lt;p&gt;1，下载程序包，解压，将解压后目录放到网页文件根目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  503  unzip phpMyAdmin-4.0.10.20-all-languages.zip 
  505  mv phpMyAdmin-4.0.10.20-all-languages phpmyadmin
  506  cp -a phpmyadmin/ /data/

解压，改目录名去掉版本号，复制到网页根目录

  512  cd phpmyadmin/
  514  cp config.sample.inc.php config.inc.php 
  521  chown -R nginx.nginx /data/
准备config.inc.php问，改属主

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，浏览器访问，执行安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200831173227975.png&#34; alt=&#34;image-20200831173227975&#34;&gt;&lt;/p&gt;
&lt;p&gt;php缺少mbstring扩展，在php.ini里取消mbstring扩展的注释，重启报错，原因在于php编译安装时，未编译该扩展；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@php phpmyadmin]# vim /etc/php.ini 
[root@php phpmyadmin]# service php-fpmd restart
Gracefully shutting down php-fpm . done
Starting php-fpm [31-Aug-2020 17:29:07] NOTICE: PHP message: PHP Warning:  PHP Startup: Unable to load dynamic library &#39;/usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/php_mbstring.dll&#39; - /usr/local/php/lib/php/extensions/no-debug-non-zts-20121212/php_mbstring.dll: cannot open shared object file: No such file or directory in Unknown on line 0
 done

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;lnmp环境应用部署总结&#34;&gt;lnmp环境、应用部署总结&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;lnmp环境部署（lamp同理，无非是用httpd配置一个fastcgi的转发虚拟主机）
&lt;ul&gt;
&lt;li&gt;单机部署&lt;/li&gt;
&lt;li&gt;多机分离部署&lt;/li&gt;
&lt;li&gt;需注意问题：见上面要点整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用部署
&lt;ul&gt;
&lt;li&gt;wordpress&lt;/li&gt;
&lt;li&gt;discuz&lt;/li&gt;
&lt;li&gt;powerdns&lt;/li&gt;
&lt;li&gt;phpmyadmin&lt;/li&gt;
&lt;li&gt;需注意问题：程序包版本和php的版本兼容问题；程序包需要的php扩展问题，&lt;strong&gt;编译安装php时尤其注意有无编译需要的扩展&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;遇到的问题有如：wordpress高版本需要高版本的php，phpmyadmin需要php有mbstring扩展；&lt;/li&gt;
&lt;li&gt;多看程序官方文档；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/lnmp/" term="lnmp" label="lnmp" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">tomcat之图形管理与身份认证</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/" />
            <id>https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E5%9B%BE%E5%BD%A2%E7%AE%A1%E7%90%86%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</id>
            <updated>2020-10-19T19:28:48&#43;08:00</updated>
            <published>2020-09-06T14:10:03&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">tomcat配置启用管理用webapp界面...</summary>
            
                <content type="html">&lt;h1 id=&#34;tomcat的管理用webapp&#34;&gt;tomcat的管理用webapp&lt;/h1&gt;
&lt;p&gt;官方doc：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tomcat.apache.org/tomcat-8.5-doc/manager-howto.html&#34;&gt;http://tomcat.apache.org/tomcat-8.5-doc/manager-howto.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tomcat.apache.org/tomcat-8.5-doc/host-manager-howto.html&#34;&gt;http://tomcat.apache.org/tomcat-8.5-doc/host-manager-howto.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	tomcat安装后，自带3个webapp用于管理，查看状态的；管理webapp的，管理host的；如下图，点击后， 默认是403页面，&lt;strong&gt;因为默认没有授权，需要配置用户及其对应权限才可以；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200904134634994.png&#34; alt=&#34;image-20200904134634994&#34;&gt;&lt;/p&gt;
&lt;p&gt;1，默认自带的webapp如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# ll webapps/
drwxr-x--- 16 root root 4096 Sep  2 14:56 docs # docs的webapp，本地离线访问tomcat文档
drwxr-x---  6 root root   83 Sep  2 14:56 examples # 3个示例页面
drwxr-x---  5 root root   87 Sep  2 14:56 host-manager # 管理虚拟主机的
drwxr-x---  5 root root  103 Sep  2 14:56 manager # 管理webapps和server状态的
drwxr-x---  3 root root  283 Sep  2 14:56 ROOT # 访问192.168.80.101:8080/时提供该目录下的index.jsp文件，因为默认虚拟主机localhost没有提供path=&amp;quot;&amp;quot;的context
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;三个webapp管理页面&#34;&gt;三个webapp管理页面&lt;/h2&gt;
&lt;p&gt;​	tomcat自带3个webapp分别用来管理webapp、管理虚拟主机、查看状态；详见配置过程：&lt;/p&gt;
&lt;h3 id=&#34;host-manager&#34;&gt;host-manager&lt;/h3&gt;
&lt;h3 id=&#34;manager&#34;&gt;manager&lt;/h3&gt;
&lt;h3 id=&#34;status&#34;&gt;status&lt;/h3&gt;
&lt;h2 id=&#34;配置过程&#34;&gt;配置过程&lt;/h2&gt;
&lt;p&gt;0，检查角色定义，&lt;/p&gt;
&lt;p&gt;在host-manager和manager的WEB-INF目录下，都由web.xml定义了各类role-name，在tomcat-users.xml文件中定义用户时，可以直接引用这些角色；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 webapps]# grep role-name host-manager/WEB-INF/web.xml
       &amp;lt;role-name&amp;gt;admin-script&amp;lt;/role-name&amp;gt;
       &amp;lt;role-name&amp;gt;admin-gui&amp;lt;/role-name&amp;gt;
    &amp;lt;role-name&amp;gt;admin-gui&amp;lt;/role-name&amp;gt;
    &amp;lt;role-name&amp;gt;admin-script&amp;lt;/role-name&amp;gt;
[root@host2 webapps]# grep role-name manager/WEB-INF/web.xml 
       &amp;lt;role-name&amp;gt;manager-gui&amp;lt;/role-name&amp;gt;
       &amp;lt;role-name&amp;gt;manager-script&amp;lt;/role-name&amp;gt;
       &amp;lt;role-name&amp;gt;manager-jmx&amp;lt;/role-name&amp;gt;
       &amp;lt;role-name&amp;gt;manager-gui&amp;lt;/role-name&amp;gt;
       &amp;lt;role-name&amp;gt;manager-script&amp;lt;/role-name&amp;gt;
       &amp;lt;role-name&amp;gt;manager-jmx&amp;lt;/role-name&amp;gt;
       &amp;lt;role-name&amp;gt;manager-status&amp;lt;/role-name&amp;gt;
    &amp;lt;role-name&amp;gt;manager-gui&amp;lt;/role-name&amp;gt;
    &amp;lt;role-name&amp;gt;manager-script&amp;lt;/role-name&amp;gt;
    &amp;lt;role-name&amp;gt;manager-jmx&amp;lt;/role-name&amp;gt;
    &amp;lt;role-name&amp;gt;manager-status&amp;lt;/role-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1，修改tomcat-user.xml文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;犯错，直接习惯性放在文件最底部，没在tomcat-users这个标签内部！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;xml文件，注意，标签的闭合，和匹配；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;manager-gui&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;status页面&lt;/li&gt;
&lt;li&gt;webapp 管理页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;admin-gui&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host-manager管理页面&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# vim conf/tomcat-users.xml
&amp;lt;tomcat-users xmlns=&amp;quot;http://tomcat.apache.org/xml&amp;quot;
              xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
              xsi:schemaLocation=&amp;quot;http://tomcat.apache.org/xml tomcat-users.xsd&amp;quot;
              version=&amp;quot;1.0&amp;quot;&amp;gt;
...

&amp;lt;!--
  &amp;lt;role rolename=&amp;quot;tomcat&amp;quot;/&amp;gt;
  &amp;lt;role rolename=&amp;quot;role1&amp;quot;/&amp;gt;
  &amp;lt;user username=&amp;quot;tomcat&amp;quot; password=&amp;quot;&amp;lt;must-be-changed&amp;gt;&amp;quot; roles=&amp;quot;tomcat&amp;quot;/&amp;gt;
  &amp;lt;user username=&amp;quot;both&amp;quot; password=&amp;quot;&amp;lt;must-be-changed&amp;gt;&amp;quot; roles=&amp;quot;tomcat,role1&amp;quot;/&amp;gt;
  &amp;lt;user username=&amp;quot;role1&amp;quot; password=&amp;quot;&amp;lt;must-be-changed&amp;gt;&amp;quot; roles=&amp;quot;role1&amp;quot;/&amp;gt;
--&amp;gt;
# 参考注释部分，添加一行如下，指定了用户名，密码，角色为manager-gui和admin-gui，分别对应status、app manager和host-manger的权限，
# 角色的定义在cat webapps/{manager|host-manager}/WEB-INF/web.xml里有定义，这里直接引用即可
# 犯错，直接习惯性放在文件最底部，没在tomcat-users这个标签内部！！！！
# 找半天没找到错误，恢复快照重做的时候，才注意到标签的问题；

  &amp;lt;user username=&amp;quot;tomcat&amp;quot; password=&amp;quot;wang&amp;quot; roles=&amp;quot;manager-gui,admin-gui&amp;quot;/&amp;gt;
  
&amp;lt;/tomcat-users&amp;gt;


[root@host2 tomcat]# catalina.sh stop;catalina.sh start
此时重启仍然无法访问
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，对需要的ip进行放行&lt;/p&gt;
&lt;p&gt;默认只可以本机访问，因此需要用访问控制的valve进行来源ip放行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# cat conf/Catalina/localhost/manager.xml 
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;Context docBase=&amp;quot;${catalina.home}/webapps/manager&amp;quot; 
        antiResourceLocking=&amp;quot;false&amp;quot; privileged=&amp;quot;true&amp;quot; &amp;gt;
  &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.RemoteAddrValve&amp;quot;
         allow=&amp;quot;^.*$&amp;quot; /&amp;gt;
&amp;lt;/Context&amp;gt;


[root@host2 tomcat]# cat conf/Catalina/localhost/host-manager.xml 
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;Context docBase=&amp;quot;${catalina.home}/webapps/host-manager&amp;quot; 
        antiResourceLocking=&amp;quot;false&amp;quot; privileged=&amp;quot;true&amp;quot; &amp;gt;
  &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.RemoteAddrValve&amp;quot;
         allow=&amp;quot;^.*$&amp;quot; /&amp;gt;
&amp;lt;/Context&amp;gt;

# 路径为&amp;lt;prefix&amp;gt;/conf/engine名/虚拟主机名/webapp.xml 
# 此xml默认不存在，需创建
# 设置为所有ip可访问，生产中，自然要严格设置
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，再次重启，访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;status页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200904165358465.png&#34; alt=&#34;image-20200904165358465&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webapp管理页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200904165408164.png&#34; alt=&#34;image-20200904165408164&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟主机管理页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200904165423923.png&#34; alt=&#34;image-20200904165423923&#34;&gt;&lt;/p&gt;
&lt;p&gt;4，另一种放行ip的配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# vim webapps/manager/META-INF/context.xml 
[root@host2 tomcat]# vim webapps/host-manager/META-INF/context.xml 

# 不用创建conf/Catalina/localhost/manager.xml和host-manager.xml
# 分别修改对应webapp下的META-INF/context.xml
# 将默认的允许本地，改为如下，允许所有即可
# 不需要重启，等待一会儿即可生效
...
 allow=&amp;quot;^.*$&amp;quot; /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/tomcat/" term="tomcat" label="tomcat" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">tomcat之web配置与主配置文件详解</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/tomcat%E4%B9%8Bweb%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%B8%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/" />
            <id>https://latteStudio.github.io/posts/tomcat%E4%B9%8Bweb%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%B8%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</id>
            <updated>2020-10-19T18:55:05&#43;08:00</updated>
            <published>2020-09-06T14:09:52&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">tomcat基础web配置和主配置文件server.xml文件详解...</summary>
            
                <content type="html">&lt;h1 id=&#34;tomcat做web服务&#34;&gt;tomcat做web服务&lt;/h1&gt;
&lt;h2 id=&#34;虚拟主机示例&#34;&gt;虚拟主机示例&lt;/h2&gt;
&lt;p&gt;1，定义2个虚拟主机&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 在server.xml中，找到默认的localhost虚拟主机，在其上面位置，即engine下一层，定义2个虚拟主机
# pc 网页目录放在webapps/pc之下，采用相对路径，相对&amp;lt;prefix&amp;gt;/webapps/目录，本例是在/usr/local/tomcat/webapps/pc目录下
# pc和bbs都定义了2个context，类比：nginx的location
# 定义valve，valve类比nginx的指令；AccessLogValve类比：nginx的log_format,access_log的指令，还定义了日志的格式，日志文件位置，前缀，后缀；
# appBase定义了虚拟主机的网页文件根目录
# path对应了uri的路径
# docBase定义了每个context即uri对应的网页文件存放在文件系统的路径
# 均可采用相对路径，绝对路径，相对路径相对于&amp;lt;prefix&amp;gt;/webapps，绝对路径注意权限问题；
# 日志路径，采用相对路径，&amp;lt;prefix&amp;gt;/logs 

# bbs 网页目录放在单独的/www/bbs之下，不在默认的webapps目录下，需注意权限问题；
[root@host2 conf]# cat server.xml
  &amp;lt;Host name=&amp;quot;www.pc.com&amp;quot; appBase=&amp;quot;webapps/pc&amp;quot;
                unpackWARs=&amp;quot;true&amp;quot; autoDeploy=&amp;quot;true&amp;quot;&amp;gt;

                &amp;lt;Context path=&amp;quot;&amp;quot; docBase=&amp;quot;&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;
                &amp;lt;Context path=&amp;quot;/img&amp;quot; docBase=&amp;quot;img&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;

        &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.AccessLogValve&amp;quot; directory=&amp;quot;logs&amp;quot;
                prefix=&amp;quot;pc_access_log&amp;quot; sufffix=&amp;quot;.txt&amp;quot;
                pattern=&amp;quot;%h %l %t &amp;amp;quot;%r&amp;amp;quot; %s %b&amp;quot; /&amp;gt;
      &amp;lt;/Host&amp;gt;

     &amp;lt;Host name=&amp;quot;www.bbs.com&amp;quot; appBase=&amp;quot;/www/bbs&amp;quot;
                unpackWARs=&amp;quot;true&amp;quot; autoDeply=&amp;quot;true&amp;quot;&amp;gt;
                &amp;lt;Context path=&amp;quot;&amp;quot; docBase=&amp;quot;&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;
                &amp;lt;Context path=&amp;quot;/img&amp;quot; docBase=&amp;quot;img&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;
                
                # path类比nginx的uri路径；
                # docbase类比nginx中的uri对应的文件系统路径


        &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.AccessLogValve&amp;quot; directory=&amp;quot;logs&amp;quot;
                prefix=&amp;quot;bbs_access_log&amp;quot; sufffix=&amp;quot;.txt&amp;quot;
                pattern=&amp;quot;%h %l %t &amp;amp;quot;%r&amp;amp;quot; %s %b&amp;quot; /&amp;gt;
     &amp;lt;/Host&amp;gt;

# 语法测试
[root@host2 conf]# catalina.sh configtest

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，创建对应网页文件目录，并写入不同的.jsp网页文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# mkdir -pv /www/bbs/img
mkdir: created directory ‘/www’
mkdir: created directory ‘/www/bbs’
mkdir: created directory ‘/www/bbs/img’
[root@host2 conf]# mkdir -pv /usr/local/tomcat/webapps/pc/img
mkdir: created directory ‘/usr/local/tomcat/webapps/pc’
mkdir: created directory ‘/usr/local/tomcat/webapps/pc/img’

# 写入不同网页文件
[root@host2 conf]# vim /www/bbs/index.jsp
[root@host2 conf]# vim /www/bbs/img/index.jsp
[root@host2 conf]# vim /usr/local/tomcat/webapps/pc/index.jsp
[root@host2 conf]# vim /usr/local/tomcat/webapps/pc/img/index.jsp

# 如下jsp文件，只是把println输出改为不同内容，用于稍后区分；
# 分别改为：
bbs root index
bbs img index
pc root index
pc img index

[root@host2 conf]# cat /usr/local/tomcat/webapps/pc/img/index.jsp
&amp;lt;%@ page language=&amp;quot;java&amp;quot; %&amp;gt;
&amp;lt;%@ page import=&amp;quot;java.util.*&amp;quot; %&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;% out.println(&amp;quot;pc img index&amp;quot;); %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，语法测试，重启&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# catalina.sh configtest
[root@host2 conf]# catalina.sh stop
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/java/latest
Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
[root@host2 conf]# catalina.sh start
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/java/latest
Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
Tomcat started.

# 查看对应的日志生成
[root@host2 logs]# pwd
/usr/local/tomcat/logs
[root@host2 logs]# ll
-rw-r----- 1 root root   290 Sep  3 16:04 pc_access_log.2020-09-03
-rw-r----- 1 root root   290 Sep  3 16:04 bbs_access_log.2020-09-03
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，访问测试如下：2个虚拟主机的2个主页都生效；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200903160409293.png&#34; alt=&#34;image-20200903160409293&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200903160424203.png&#34; alt=&#34;image-20200903160424203&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200903160444114.png&#34; alt=&#34;image-20200903160444114&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200903160458645.png&#34; alt=&#34;image-20200903160458645&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;tomcat体系结构&#34;&gt;tomcat体系结构&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;下图为2张tomcat体系结构图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/733013-20180124210257803-102897279.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/733013-20180203101937937-1936575013.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;tomcat组件功用&#34;&gt;tomcat组件功用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;server：对应tomcat实例&lt;/li&gt;
&lt;li&gt;service：逻辑组件，封装多个connector和一个engine&lt;/li&gt;
&lt;li&gt;container：逻辑组件，engine，host，context，wrapper是四类容器组件&lt;/li&gt;
&lt;li&gt;connector：
&lt;ul&gt;
&lt;li&gt;监听套接字&lt;/li&gt;
&lt;li&gt;和客户端建立连接&lt;/li&gt;
&lt;li&gt;protoctolHandler处理协议信息，如http，或ajp，发给自己的engine&lt;/li&gt;
&lt;li&gt;接收响应数据，传回客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;engine：
&lt;ul&gt;
&lt;li&gt;service内唯一&lt;/li&gt;
&lt;li&gt;从connector处接收客户端请求，&lt;/li&gt;
&lt;li&gt;分析客户端请求并传给对应的虚拟主机，&lt;strong&gt;层级上类似nginx的http&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;engine处，可指定默认的虚拟主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;host：
&lt;ul&gt;
&lt;li&gt;定义虚拟主机，每个host都是一个虚拟主机，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;context：
&lt;ul&gt;
&lt;li&gt;通过docbase 和path匹配对应的请求的uri，并交给内部的wrapper处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;wrapper：
&lt;ul&gt;
&lt;li&gt;context内部唯一，一般context内部不配置，采用默认的wrapper处理请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;excutor：
&lt;ul&gt;
&lt;li&gt;为service组件提供线程池，确切的说是：为service内部的engine提供线程池&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;客户端请求处理流程&#34;&gt;客户端请求处理流程&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;client（发请求）-&amp;gt;connector(接收建立连接，分析协议请求，发给engine)-&amp;gt;engine（转发给对应的虚拟主机）-&amp;gt;host(匹配对应的context)-context(被匹配到的context交给其内wrapper处理)-&amp;gt;wrapper(构建响应数据)-&amp;gt;connector(加上响应头)-&amp;gt;clinet（客户端接收到数据）&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;tomcat和nginx层次结构对比&#34;&gt;tomcat和nginx层次结构对比&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# tomcat
&amp;lt;server&amp;gt;
	&amp;lt;service&amp;gt;
		&amp;lt;connector&amp;gt;
		&amp;lt;/connector&amp;gt;
		
		&amp;lt;engine&amp;gt;
			&amp;lt;host name=&amp;quot;xx&amp;quot; appBase=&amp;quot;xx&amp;quot;&amp;gt;
				&amp;lt;context path=&amp;quot;xx&amp;quot; docBase=&amp;quot;xx&amp;quot;/&amp;gt;
		
			&amp;lt;/host&amp;gt;
		&amp;lt;/engine&amp;gt;
	&amp;lt;/service&amp;gt;
&amp;lt;/server&amp;gt;

# nginx
server {	# server类比host
	listen 80; # 类比connector，指定监听端口
	server_name www.pc.com; # host的name属性，指定主机名
	
	location / { # location类比context，/类比path，root或alias指令类比docBase
		root /data/pc; # valve类比nginx的各种指令，提供各种功能配置，如日志配置，认证配置等；
	}
	location /img {
		root /data/pc/img;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;appbasedocbase&#34;&gt;appBase、docBase&lt;/h2&gt;
&lt;p&gt;一个context是一个webapp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 logs]# ll /usr/local/tomcat/webapps/
total 4
drwxr-x--- 16 root root 4096 Sep  2 14:56 docs
drwxr-x---  6 root root   83 Sep  2 14:56 examples
drwxr-x---  5 root root   87 Sep  2 14:56 host-manager
drwxr-x---  5 root root  103 Sep  2 14:56 manager
drwxr-x---  3 root root  283 Sep  2 14:56 ROOT
# 默认虚拟主配置
  &amp;lt;Host name=&amp;quot;localhost&amp;quot;  appBase=&amp;quot;webapps&amp;quot;
            unpackWARs=&amp;quot;true&amp;quot; autoDeploy=&amp;quot;true&amp;quot;&amp;gt;
 &amp;lt;/Host&amp;gt;
 
# 默认的虚拟主机localhost的appbase是&amp;lt;prefix&amp;gt;/webapps
# 那其下每个目录docs host-manager manager...都是一个context了，都是一个webapp，
# 类比nginx一个虚拟主机搭建多个lnmp应用，http://www.bbs.com/wordpress是wordpress，../upload是discuz
# tomcat一个虚拟主机多个webapp应用，http://www.bbs.com:8080/manager 是一个，../examples也是一个
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;0，appBase和docBase定义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;host name=&amp;quot;www.pc.com&amp;quot; appBase=&amp;quot;webapps/pc&amp;quot;&amp;gt;
	&amp;lt;context path=“” docBase=&amp;quot;&amp;quot;/&amp;gt;
&amp;lt;/host&amp;gt;

&amp;lt;context path=“” docBase=&amp;quot;&amp;quot;/&amp;gt;
等同于nginx的
location / {

}
#定义的是访问虚拟主机的默认主页

没有&amp;lt;context path=“” docBase=&amp;quot;&amp;quot;/&amp;gt;这行时，访问的默认主页路径会是appBase/ROOT/index.jsp
有的话，访问的默认主页路径会是appBase/index.jsp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1，定义2个不同路径index.jsp；appBase都是/www/bbs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cat /www/bbs/index.jsp 
&amp;lt;%@ page language=&amp;quot;java&amp;quot; %&amp;gt;
&amp;lt;%@ page import=&amp;quot;java.util.*&amp;quot; %&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;% out.println(&amp;quot;/www/bbs/index.jsp&amp;quot;); %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

---
[root@host2 conf]# cat /www/bbs/ROOT/index.jsp 
&amp;lt;%@ page language=&amp;quot;java&amp;quot; %&amp;gt;
&amp;lt;%@ page import=&amp;quot;java.util.*&amp;quot; %&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;% out.println(&amp;quot;/www/bbs/ROOt/index.jsp&amp;quot;); %&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
[root@ho
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，注释掉path=&amp;quot;&amp;quot;的context，重启访问，访问的是/www/bbs/ROOT/index.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;Host name=&amp;quot;www.bbs.com&amp;quot; appBase=&amp;quot;/www/bbs&amp;quot;
                unpackWARs=&amp;quot;true&amp;quot; autoDeply=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;!--            &amp;lt;Context path=&amp;quot;&amp;quot; docBase=&amp;quot;&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt; --&amp;gt;
                &amp;lt;Context path=&amp;quot;/img&amp;quot; docBase=&amp;quot;img&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200903173435591.png&#34; alt=&#34;image-20200903173435591&#34;&gt;&lt;/p&gt;
&lt;p&gt;3，取消注释，重启访问，访问的是/www/bbs/index.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Host name=&amp;quot;www.bbs.com&amp;quot; appBase=&amp;quot;/www/bbs&amp;quot;
                unpackWARs=&amp;quot;true&amp;quot; autoDeply=&amp;quot;true&amp;quot;&amp;gt;
                &amp;lt;Context path=&amp;quot;&amp;quot; docBase=&amp;quot;&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;
                &amp;lt;Context path=&amp;quot;/img&amp;quot; docBase=&amp;quot;img&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200903173509219.png&#34; alt=&#34;image-20200903173509219&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;webapp目录结构&#34;&gt;webapp目录结构&lt;/h2&gt;
&lt;h3 id=&#34;官方示例&#34;&gt;官方示例&lt;/h3&gt;
&lt;p&gt;1，下载war包到webapps目录下，重启tomcat，会自动展开war包为目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 下载
[root@host2 webapps]# wget https://tomcat.apache.org/tomcat-8.5-doc/appdev/sample/sample.war 

# 重启
[root@host2 webapps]# catalina.sh stop
[root@host2 webapps]# catalina.sh start

# 展开后目录为sample
[root@host2 webapps]# ll
total 12
drwxr-x--- 16 root root 4096 Sep  2 14:56 docs
drwxr-x---  6 root root   83 Sep  2 14:56 examples
drwxr-x---  5 root root   87 Sep  2 14:56 host-manager
drwxr-x---  5 root root  103 Sep  2 14:56 manager
drwxr-xr-x  3 root root   34 Sep  3 11:24 pc
drwxr-x---  3 root root  283 Sep  2 14:56 ROOT
drwxr-x---  5 root root   86 Sep  3 18:33 sample
-rw-r--r--  1 root root 4606 May  1  2018 sample.war

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，浏览器访问&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200903184543682.png&#34; alt=&#34;image-20200903184543682&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;一般目录结构&#34;&gt;一般目录结构&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;/WEB-INF，该webapp下私有资源目录，浏览器无法访问，通常包含web.xml&lt;/li&gt;
&lt;li&gt;/WEB-INF/classes，该webapp自有类&lt;/li&gt;
&lt;li&gt;/WEB-INF/lib，该webapp能打包成jar格式的类&lt;/li&gt;
&lt;li&gt;/META-INF，非标准webapp目录，可以有自定义的context.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 webapps]# ll sample
total 8
-rw-r----- 1 root root 376 Jul 30  2007 hello.jsp
drwxr-x--- 2 root root  24 Sep  3 18:33 images
-rw-r----- 1 root root 636 Jul 30  2007 index.html
drwxr-x--- 2 root root  44 Sep  3 18:33 META-INF
drwxr-x--- 4 root root  47 Sep  3 18:33 WEB-INF
# sample例子的展开后目录结构，
[root@host2 webapps]# ll sample/WEB-INF/
total 4
drwxr-x--- 3 root root  23 Sep  3 18:33 classes
drwxr-x--- 2 root root   6 Sep  3 18:33 lib
-rw-r----- 1 root root 813 Jul 30  2007 web.xml
# 类和jar包目录 web.xml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;部署webapp方式&#34;&gt;部署webapp方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将打好的war包，防止webapps目录下，重启tomcat，war包会自动展开（因为unpackWARs=&amp;quot;true&amp;quot;配置）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在webapps下，根据目录结构创建对应的目录文件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 webapps]# ls pc/
img  index.jsp
[root@host2 webapps]# mkdir pc/WEB-INF/{classes,lib} -pv
mkdir: created directory ‘pc/WEB-INF’
mkdir: created directory ‘pc/WEB-INF/classes’
mkdir: created directory ‘pc/WEB-INF/lib’
      
[root@host2 webapps]# tree pc
pc
├── img
│   └── index.jsp
├── index.jsp
└── WEB-INF
    ├── classes
    └── lib
img为实验时目录    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;serverxml配置文件&#34;&gt;server.xml配置文件&lt;/h1&gt;
&lt;p&gt;官方配置文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://tomcat.apache.org/tomcat-8.5-doc/config/index.html&#34;&gt;http://tomcat.apache.org/tomcat-8.5-doc/config/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;tomcat配置都是xml文件，&lt;/p&gt;
&lt;h2 id=&#34;catalina_home与catalina_base&#34;&gt;catalina_home与catalina_base&lt;/h2&gt;
&lt;p&gt;单tomcat实例时，两者一致&lt;/p&gt;
&lt;p&gt;多实例时，区别参见http://tomcat.apache.org/tomcat-8.5-doc/RUNNING.txt&lt;/p&gt;
&lt;h2 id=&#34;默认配置&#34;&gt;默认配置&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cat server.xml 
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the &amp;quot;License&amp;quot;); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--&amp;gt;
&amp;lt;!-- Note:  A &amp;quot;Server&amp;quot; is not itself a &amp;quot;Container&amp;quot;, so you may not
     define subcomponents such as &amp;quot;Valves&amp;quot; at this level.
     Documentation at /docs/config/server.html
 --&amp;gt;
&amp;lt;Server port=&amp;quot;8005&amp;quot; shutdown=&amp;quot;SHUTDOWN&amp;quot;&amp;gt;
# 定义管理端口，定义关闭指令

  &amp;lt;Listener className=&amp;quot;org.apache.catalina.startup.VersionLoggerListener&amp;quot; /&amp;gt;
  &amp;lt;!-- Security listener. Documentation at /docs/config/listeners.html
  &amp;lt;Listener className=&amp;quot;org.apache.catalina.security.SecurityListener&amp;quot; /&amp;gt;
  --&amp;gt;
  &amp;lt;!--APR library loader. Documentation at /docs/apr.html --&amp;gt;
  &amp;lt;Listener className=&amp;quot;org.apache.catalina.core.AprLifecycleListener&amp;quot; SSLEngine=&amp;quot;on&amp;quot; /&amp;gt;
  &amp;lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&amp;gt;
  &amp;lt;Listener className=&amp;quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&amp;quot; /&amp;gt;
  &amp;lt;Listener className=&amp;quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&amp;quot; /&amp;gt;
  &amp;lt;Listener className=&amp;quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&amp;quot; /&amp;gt;
# 在server之下，定义多个listener

  &amp;lt;!-- Global JNDI resources
       Documentation at /docs/jndi-resources-howto.html
  --&amp;gt;
  &amp;lt;GlobalNamingResources&amp;gt;
    &amp;lt;!-- Editable user database that can also be used by
         UserDatabaseRealm to authenticate users
    --&amp;gt;
    &amp;lt;Resource name=&amp;quot;UserDatabase&amp;quot; auth=&amp;quot;Container&amp;quot;
              type=&amp;quot;org.apache.catalina.UserDatabase&amp;quot;
              description=&amp;quot;User database that can be updated and saved&amp;quot;
              factory=&amp;quot;org.apache.catalina.users.MemoryUserDatabaseFactory&amp;quot;
              pathname=&amp;quot;conf/tomcat-users.xml&amp;quot; /&amp;gt;
  &amp;lt;/GlobalNamingResources&amp;gt;
# 用户管理页认证相关

  &amp;lt;!-- A &amp;quot;Service&amp;quot; is a collection of one or more &amp;quot;Connectors&amp;quot; that share
       a single &amp;quot;Container&amp;quot; Note:  A &amp;quot;Service&amp;quot; is not itself a &amp;quot;Container&amp;quot;,
       so you may not define subcomponents such as &amp;quot;Valves&amp;quot; at this level.
       Documentation at /docs/config/service.html
   --&amp;gt;
  &amp;lt;Service name=&amp;quot;Catalina&amp;quot;&amp;gt;
# 定义一个catalina的service

    &amp;lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&amp;gt;
    &amp;lt;!--
    &amp;lt;Executor name=&amp;quot;tomcatThreadPool&amp;quot; namePrefix=&amp;quot;catalina-exec-&amp;quot;
        maxThreads=&amp;quot;150&amp;quot; minSpareThreads=&amp;quot;4&amp;quot;/&amp;gt;
    --&amp;gt;


    &amp;lt;!-- A &amp;quot;Connector&amp;quot; represents an endpoint by which requests are received
         and responses are returned. Documentation at :
         Java HTTP Connector: /docs/config/http.html
         Java AJP  Connector: /docs/config/ajp.html
         APR (HTTP/AJP) Connector: /docs/apr.html
         Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
    --&amp;gt;
    &amp;lt;Connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot;
               connectionTimeout=&amp;quot;20000&amp;quot;
               redirectPort=&amp;quot;8443&amp;quot; /&amp;gt;
    &amp;lt;!-- A &amp;quot;Connector&amp;quot; using the shared thread pool--&amp;gt;
    &amp;lt;!--
    &amp;lt;Connector executor=&amp;quot;tomcatThreadPool&amp;quot;
               port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot;
               connectionTimeout=&amp;quot;20000&amp;quot;
               redirectPort=&amp;quot;8443&amp;quot; /&amp;gt;
    --&amp;gt;
    &amp;lt;!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443
         This connector uses the NIO implementation. The default
         SSLImplementation will depend on the presence of the APR/native
         library and the useOpenSSL attribute of the
         AprLifecycleListener.
         Either JSSE or OpenSSL style configuration may be used regardless of
         the SSLImplementation selected. JSSE style configuration is used below.
    --&amp;gt;
    &amp;lt;!--
    &amp;lt;Connector port=&amp;quot;8443&amp;quot; protocol=&amp;quot;org.apache.coyote.http11.Http11NioProtocol&amp;quot;
               maxThreads=&amp;quot;150&amp;quot; SSLEnabled=&amp;quot;true&amp;quot;&amp;gt;
        &amp;lt;SSLHostConfig&amp;gt;
            &amp;lt;Certificate certificateKeystoreFile=&amp;quot;conf/localhost-rsa.jks&amp;quot;
                         type=&amp;quot;RSA&amp;quot; /&amp;gt;
        &amp;lt;/SSLHostConfig&amp;gt;
    &amp;lt;/Connector&amp;gt;
 
 # 上面在catalina的service内，定义了3个connector
 
    --&amp;gt;
    &amp;lt;!-- Define an SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
         This connector uses the APR/native implementation which always uses
         OpenSSL for TLS.
         Either JSSE or OpenSSL style configuration may be used. OpenSSL style
         configuration is used below.
    --&amp;gt;
    &amp;lt;!--
    &amp;lt;Connector port=&amp;quot;8443&amp;quot; protocol=&amp;quot;org.apache.coyote.http11.Http11AprProtocol&amp;quot;
               maxThreads=&amp;quot;150&amp;quot; SSLEnabled=&amp;quot;true&amp;quot; &amp;gt;
        &amp;lt;UpgradeProtocol className=&amp;quot;org.apache.coyote.http2.Http2Protocol&amp;quot; /&amp;gt;
        &amp;lt;SSLHostConfig&amp;gt;
            &amp;lt;Certificate certificateKeyFile=&amp;quot;conf/localhost-rsa-key.pem&amp;quot;
                         certificateFile=&amp;quot;conf/localhost-rsa-cert.pem&amp;quot;
                         certificateChainFile=&amp;quot;conf/localhost-rsa-chain.pem&amp;quot;
                         type=&amp;quot;RSA&amp;quot; /&amp;gt;
        &amp;lt;/SSLHostConfig&amp;gt;
    &amp;lt;/Connector&amp;gt;
 # 又定义个ssl的connector
 
    --&amp;gt;

    &amp;lt;!-- Define an AJP 1.3 Connector on port 8009 --&amp;gt;
    &amp;lt;!--
    &amp;lt;Connector protocol=&amp;quot;AJP/1.3&amp;quot;
               address=&amp;quot;::1&amp;quot;
               port=&amp;quot;8009&amp;quot;
               redirectPort=&amp;quot;8443&amp;quot; /&amp;gt;
    --&amp;gt;
# 定义ajp的connector
    &amp;lt;!-- An Engine represents the entry point (within Catalina) that processes
         every request.  The Engine implementation for Tomcat stand alone
         analyzes the HTTP headers included with the request, and passes them
         on to the appropriate Host (virtual host).
         Documentation at /docs/config/engine.html --&amp;gt;

    &amp;lt;!-- You should set jvmRoute to support load-balancing via AJP ie :
    &amp;lt;Engine name=&amp;quot;Catalina&amp;quot; defaultHost=&amp;quot;localhost&amp;quot; jvmRoute=&amp;quot;jvm1&amp;quot;&amp;gt;
    --&amp;gt;
    &amp;lt;Engine name=&amp;quot;Catalina&amp;quot; defaultHost=&amp;quot;localhost&amp;quot;&amp;gt;
# 定义一个engine
      &amp;lt;!--For clustering, please take a look at documentation at:
          /docs/cluster-howto.html  (simple how to)
          /docs/config/cluster.html (reference documentation) --&amp;gt;
      &amp;lt;!--
      &amp;lt;Cluster className=&amp;quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&amp;quot;/&amp;gt;
      --&amp;gt;

      &amp;lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack --&amp;gt;
      &amp;lt;Realm className=&amp;quot;org.apache.catalina.realm.LockOutRealm&amp;quot;&amp;gt;
        &amp;lt;!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key &amp;quot;UserDatabase&amp;quot;.  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  --&amp;gt;
        &amp;lt;Realm className=&amp;quot;org.apache.catalina.realm.UserDatabaseRealm&amp;quot;
               resourceName=&amp;quot;UserDatabase&amp;quot;/&amp;gt;
      &amp;lt;/Realm&amp;gt;

      &amp;lt;Host name=&amp;quot;localhost&amp;quot;  appBase=&amp;quot;webapps&amp;quot;
            unpackWARs=&amp;quot;true&amp;quot; autoDeploy=&amp;quot;true&amp;quot;&amp;gt;
# 定义个虚拟主机，localhost，appBase定义网页目录的位置，uppackwars是否自动解压war包，autoDeploy是否自动部署

        &amp;lt;!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html --&amp;gt;
        &amp;lt;!--
        &amp;lt;Valve className=&amp;quot;org.apache.catalina.authenticator.SingleSignOn&amp;quot; /&amp;gt;
        --&amp;gt;
# 定义单点登陆sso相关的valve
        &amp;lt;!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern=&amp;quot;common&amp;quot; --&amp;gt;
        &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.AccessLogValve&amp;quot; directory=&amp;quot;logs&amp;quot;
               prefix=&amp;quot;localhost_access_log&amp;quot; suffix=&amp;quot;.txt&amp;quot;
               pattern=&amp;quot;%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b&amp;quot; /&amp;gt;
# 日志相关valve
      &amp;lt;/Host&amp;gt; # 一个engine内部多个host
    &amp;lt;/Engine&amp;gt; # 一个service内部唯一的engine
    		  # service内部，定义多个connector和唯一的engine
  &amp;lt;/Service&amp;gt; # 一个server内可以有多个service
&amp;lt;/Server&amp;gt; #定义server，一个tomcat实例

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;server&#34;&gt;server&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Server port=&amp;quot;8005&amp;quot; shutdown=&amp;quot;SHUTDOWN&amp;quot;&amp;gt;
...
&amp;lt;/Server&amp;gt;
# 定义8005为管理端口；
# 关闭信号对应字符串为SHUTDOWN，telnet连接后可发送该字串关闭tomcat
# 向下，可以有多个service
# 一些属性
className，实现server的类，没写就是默认的org.apache.catalina.core.StandardServer
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;service&#34;&gt;service&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;Service name=&amp;quot;Catalina&amp;quot;&amp;gt;
  ...
  &amp;lt;Service&amp;gt;
# 定义一个service，名为Catalina，向下，可以封装多个connector和一个engine
# 一些属性
className，实现service的类，没写就是默认的org.apache.catalina.core.StandardService
name 是名字
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;excutor&#34;&gt;excutor&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Executor name=&amp;quot;tomcatThreadPool&amp;quot; namePrefix=&amp;quot;catalina-exec-&amp;quot;
    maxThreads=&amp;quot;150&amp;quot; minSpareThreads=&amp;quot;4&amp;quot;/&amp;gt;

# 在service下一级，位置在connector之上，方便connector引用
# connector可以自己定义线程池
# 给service内部其他组件，提供线程池
# 默认没有写明，
# 默认配置如上
一些属性：
className 实现excutor的类名
默认是org.apache.catalina.core.StandardThreadExecutor
name 该线程池名字，其他组件用名字引用

threadPriority 线程优先级，默认5
daemon 线程是否daemon方式运行
namePrefix 线程的名称前缀，线程名：namePrefix+线程序号
maxThreads 最大线程数
minSpareThreads 
maxIdleTime 空闲超过该时间的线程会被杀掉
maxQueueSize 可执行任务最大队列
prestartminSpareThreads 启动excutor是否立刻创建最小空闲个数的线程，默认为false，即需要时创建



# connector中引用上步线程池
&amp;lt;Connector executor=&amp;quot;tomcatThreadPoll&amp;quot; .../&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;connector&#34;&gt;connector&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个engine内部可以有多个connector&lt;/li&gt;
&lt;li&gt;如http1.1 http2 ajp，都定义一个connector&lt;/li&gt;
&lt;li&gt;通过connector接收请求，并返回&lt;/li&gt;
&lt;li&gt;ajp通信协议 专用于前端是apache做web的情况&lt;/li&gt;
&lt;li&gt;tomcat可以同时担当静态web和动态应用服务器&lt;/li&gt;
&lt;li&gt;但为了效率，一般只处理动态，静态交给前端的静态web服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一、定义http1.1的connector&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	详细连接器属性见官网：http://tomcat.apache.org/tomcat-8.5-doc/config/http.html&lt;/p&gt;
&lt;p&gt;​	定义该connector表示tomcat可以接收http的web请求，每个请求由一个独立线程服务，并发超过maxtreads时，会排队，超过acceptCount指定的值后会拒绝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Connector port=&amp;quot;8080&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; connectionTimeout=&amp;quot;200000&amp;quot; redirectPort=&amp;quot;8443&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	常用的http连接器属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;address 监听地址，默认为所有地址&lt;/li&gt;
&lt;li&gt;maxThreads 最大并发数，因为一个并发请求占用一个线程&lt;/li&gt;
&lt;li&gt;acceptCount 等待队列最大长度，所有线程繁忙时，再发的请求会放在队列等候&lt;/li&gt;
&lt;li&gt;port 监听端口&lt;/li&gt;
&lt;li&gt;protocol 默认http1.1&lt;/li&gt;
&lt;li&gt;redirectport，请求是https流量，就转发到改端口&lt;/li&gt;
&lt;li&gt;connectionTimeout 连接超时时间&lt;/li&gt;
&lt;li&gt;keepAliveTimeout 长连接超时时间&lt;/li&gt;
&lt;li&gt;enableLookups 是否反解出客户端主机名，默认true，应为false，没必要&lt;/li&gt;
&lt;li&gt;compression 是否压缩&lt;/li&gt;
&lt;li&gt;usesendfile 是否启用sendfile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;二、启用ssl属性的连接器&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Connector port=&amp;quot;8443&amp;quot;
	maxThreads=&amp;quot;150&amp;quot; minSpareThreads=&amp;quot;25&amp;quot; enableLookups=&amp;quot;false&amp;quot; ... scheme=&amp;quot;https&amp;quot; secure=&amp;quot;true&amp;quot; clientAuth=&amp;quot;false&amp;quot; sslProtocol=&amp;quot;TLS&amp;quot; /&amp;gt;
	
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;engine&#34;&gt;engine&lt;/h2&gt;
&lt;p&gt;​	engine属于容器类，是分析协议的引擎，通过一个或多个connector接收请求，转发给对应的虚拟主机，并最终返回响应数据给connector，由connector转给客户端&lt;/p&gt;
&lt;p&gt;​	一个service只能由一个engine，需定义在connector后面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1，示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Engine name=&amp;quot;Catalina&amp;quot; defaultHost=&amp;quot;localhost&amp;quot; jvmRoute=&amp;quot;tomcat1&amp;quot;&amp;gt;
&amp;lt;/Engine&amp;gt;
#定义了而ngine的名字，和默认的虚拟主机
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2，常用属性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;className 实现engine的类，默认为org.apache.catalina.core.StandardEngine&lt;/li&gt;
&lt;li&gt;defaultHost 指定默认虚拟主机&lt;/li&gt;
&lt;li&gt;name engine的名字&lt;/li&gt;
&lt;li&gt;jvmRoute 多个tomcat组成负载均衡集群时，该属性指定了该tomcat的标识符，会追加在session尾部，前端通过该标识符转发到对应的tomcat实例上，&lt;strong&gt;需在tomcat实例之间具有唯一性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;host&#34;&gt;host&lt;/h2&gt;
&lt;p&gt;​	一个engine之下，可以定义多个host，每个host就是一个虚拟主机，被匹配到的host从engine处接收请求，进行处理；&lt;strong&gt;必须定义一个默认虚拟主机，其名字和engine里defaultHost指定的名字一致&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、示例&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Host name=&amp;quot;www.pc.com&amp;quot; appBase=&amp;quot;/www/pc&amp;quot; unpackWARs=&amp;quot;true&amp;quot; autoDeploy=&amp;quot;true&amp;quot;&amp;gt;

&amp;lt;Alias&amp;gt; pc.com &amp;lt;/Alias&amp;gt; # 主机名别名
...
&amp;lt;/Host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、常用属性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;className 实现host容器的类，默认org.apache.catalina.core.StandardHost&lt;/li&gt;
&lt;li&gt;name 虚拟主机主机名，支持通配符*&lt;/li&gt;
&lt;li&gt;appBase 此虚拟主机的webapps存放目录&lt;/li&gt;
&lt;li&gt;autoDeploy 是否自动部署程序包&lt;/li&gt;
&lt;li&gt;unpackWARS 是否展开war包&lt;/li&gt;
&lt;li&gt;workDir 该虚拟主机的临时工作目录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;context&#34;&gt;context&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注：一个context就是一个webapp！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webapp部署方式：1、打成war包；2、依据目录结构创建对应目录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个虚拟主机中，必须有一个path=&amp;quot;&amp;quot;的context，&lt;strong&gt;代表了该虚拟主机的默认webapp，&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Host name=&amp;quot;www.pc.com&amp;quot; appBase=&amp;quot;/www/pc&amp;quot;&amp;gt;
	&amp;lt;Context path=&amp;quot;&amp;quot; docBase=&amp;quot;&amp;quot;/&amp;gt; 
	# 有该context，访问www.pc.com时，响应的是/www/pc/index.jsp
	# 无该context时，访问www.pc.com时，响应的是/www/pc/ROOT/index.jsp
	&amp;lt;Context .../&amp;gt;
&amp;lt;/Host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;常见属性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;className：实现context的类，&lt;/li&gt;
&lt;li&gt;cookies：启用cookie标识session&lt;/li&gt;
&lt;li&gt;path：请求的uri，类似nginx的location后的路径&lt;/li&gt;
&lt;li&gt;docBase：该webapp的所在目录&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;嵌套类realm&#34;&gt;嵌套类realm&lt;/h2&gt;
&lt;p&gt;​	定义的是如何验证用户和组的身份，常见的实现有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JAASRealm：基于java authintication and authorization service实现&lt;/li&gt;
&lt;li&gt;JDBCRealm：基于jdbc访问某关系型数据库实现用户认证&lt;/li&gt;
&lt;li&gt;UserDatabaseRealm：基于userdatabase文件实现用户认证，一般是tomcat-user.xml&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Realm className=&amp;quot;org.apache.catalina.realm.LockOutRealm&amp;quot;&amp;gt;
        &amp;lt;!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key &amp;quot;UserDatabase&amp;quot;.  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  --&amp;gt;
        &amp;lt;Realm className=&amp;quot;org.apache.catalina.realm.UserDatabaseRealm&amp;quot;
               resourceName=&amp;quot;UserDatabase&amp;quot;/&amp;gt;
      &amp;lt;/Realm&amp;gt;
# 默认定义的realm为userdatabase
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;嵌套类valve&#34;&gt;嵌套类valve&lt;/h2&gt;
&lt;p&gt;官方：http://tomcat.apache.org/tomcat-8.5-doc/config/valve.html&lt;/p&gt;
&lt;p&gt;valve意为阀门，类比nginx的指令，通过配置valve可以实现像nginx指令类似的日志定义，访问控制，并发限制等&lt;/p&gt;
&lt;p&gt;常用的valve：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AccessLogValve 访问日志相关&lt;/li&gt;
&lt;li&gt;JDBCAccessLogValve 将日志通过jdbc发送到数据库&lt;/li&gt;
&lt;li&gt;RemoteAddrValve 基于远程主机的访问控制&lt;/li&gt;
&lt;li&gt;RemoteHostValve 基于主机名的访问控制&lt;/li&gt;
&lt;li&gt;SingleSingOn 单点登陆相关&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;remoteaddrvalve示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Context privileges=&amp;quot;true&amp;quot; path=&amp;quot;/pc&amp;quot; docBase=&amp;quot;pc&amp;quot;&amp;gt;
	&amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.RemoteAddrValve&amp;quot; allow=&amp;quot;127\.0\.0\.1&amp;quot;/&amp;gt;
&amp;lt;/Context&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认的日志valve示例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.AccessLogValve&amp;quot; directory=&amp;quot;logs&amp;quot;
               prefix=&amp;quot;localhost_access_log&amp;quot; suffix=&amp;quot;.txt&amp;quot;
               pattern=&amp;quot;%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b&amp;quot; /&amp;gt;

# 定义了日志的路径、格式、前缀，后缀
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/tomcat/" term="tomcat" label="tomcat" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">tomcat之处理连接过程</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/" />
            <id>https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B/</id>
            <updated>2020-10-19T19:18:23&#43;08:00</updated>
            <published>2020-09-06T14:04:08&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">tomcat处理http静态，和jsp动态请求的处理过程...</summary>
            
                <content type="html">&lt;h1 id=&#34;tomcat与nginxhttpd处理请求的区别&#34;&gt;tomcat与nginx/httpd处理请求的区别&lt;/h1&gt;
&lt;h2 id=&#34;nginxhttpd&#34;&gt;nginx/httpd&lt;/h2&gt;
&lt;p&gt;​	nginx于httpd都是先有监听进程或线程监听请求，建立连接，&lt;strong&gt;对于建立好的连接，放到已连接的队列，等待工作线程去消费，即处理该连接，之后的通信是工作进程/线程通过该已经建立的连接套接字直接和客户端通信&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	即请求建立是通过监听套接字，实际数据通信是通过连接套接字&lt;/p&gt;
&lt;h2 id=&#34;tomcat&#34;&gt;tomcat&lt;/h2&gt;
&lt;p&gt;​	connector负责监听请求，建立连接，请求时，通过connector经过engine、host、context、wrapper的层次处理，生成响应数据，最后再经由wraper、context、host、engine，最后再经由connector返回给客户端；&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;即connector是唯一的关口，请求与响应都经过该connector&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;tomcat处理jsp动态请求&#34;&gt;tomcat处理jsp动态请求&lt;/h1&gt;
&lt;p&gt;请求www.pc.com/img/index.jsp时处理过程；&lt;/p&gt;
&lt;p&gt;配置如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Server&amp;gt;
	&amp;lt;Service&amp;gt;
		&amp;lt;Connector .../&amp;gt;
		&amp;lt;Engine name=&amp;quot;Catalina&amp;quot; defaultHost=&amp;quot;localhost&amp;quot;&amp;gt;

		 &amp;lt;Host name=&amp;quot;www.pc.com&amp;quot; appBase=&amp;quot;webapps/pc&amp;quot;
                unpackWARs=&amp;quot;true&amp;quot; autoDeploy=&amp;quot;true&amp;quot;&amp;gt;

                &amp;lt;Context path=&amp;quot;&amp;quot; docBase=&amp;quot;&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;
                &amp;lt;Context path=&amp;quot;/img&amp;quot; docBase=&amp;quot;img&amp;quot; reloadable=&amp;quot;true&amp;quot;/&amp;gt;

        &amp;lt;Valve className=&amp;quot;org.apache.catalina.valves.AccessLogValve&amp;quot; directory=&amp;quot;logs&amp;quot;
                prefix=&amp;quot;pc_access_log&amp;quot; sufffix=&amp;quot;.txt&amp;quot;
                pattern=&amp;quot;%h %l %t &amp;amp;quot;%r&amp;amp;quot; %s %b&amp;quot; /&amp;gt;
      &amp;lt;/Host&amp;gt;
	
		&amp;lt;/Engine&amp;gt;
	&amp;lt;/Service&amp;gt;
&amp;lt;/Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;connector接收后，procotolhandler分析协议，processor处理并交给绑定的engine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;engine分析后，找到对应的host，找不到就发给定义的默认host&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;host接收后，根据path匹配，交给对应context处理，找不到就用默认的path=&amp;quot;&amp;quot;的context处理，没定义path=&amp;quot;&amp;quot;时，就用&lt;appBase&gt;/ROOT/目录去响应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;context接收后，以www.pc.com/img/index.jsp为例，img的context被匹配，然后先找webapps/pc/WEB-INF/web.xml文件，根据其文件定义匹配index.jsp决定如何处理该文件，如果没有定义webapps私有的web.xml，就找&lt;prefix&gt;/conf/web.xml的默认配置；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;根据&amp;lt;prefix&amp;gt;/conf/web.xml定义：被匹配到的servlet-name是jsp，进而找到下方对应的servlet，其内部指定的类是org.apache.jasper.servlet.JspServlet
   
&amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;jsp&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;*.jsp&amp;lt;/url-pattern&amp;gt;
        &amp;lt;url-pattern&amp;gt;*.jspx&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
       
#
       &amp;lt;servlet&amp;gt;
        &amp;lt;servlet-name&amp;gt;jsp&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;org.apache.jasper.servlet.JspServlet&amp;lt;/servlet-class&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;fork&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;xpoweredBy&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
        &amp;lt;load-on-startup&amp;gt;3&amp;lt;/load-on-startup&amp;gt;
    &amp;lt;/servlet&amp;gt;
   
# 于是采用lib/jasper.jar进行处理，jar展开后，依据org.apache.jasper.servlet.JspServlet找到对应类，于是就用该类处理index.jsp文件
[root@host2 tomcat]# pwd
/usr/local/tomcat
[root@host2 tomcat]# ll lib/jasper.jar 
-rw-r----- 1 root root 599412 Jul  1 05:50 lib/jasper.jar
   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200904124708342.png&#34; alt=&#34;image-20200904124708342&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jspSerlet将jsp文件翻译为java源代码，再编译为.class文件，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译后目录及文件，在&lt;prefix&gt;/work目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# pwd
/usr/local/tomcat
[root@host2 tomcat]# ll work/Catalina/www.pc.com/img/org/apache/jsp/
total 16
-rw-r----- 1 root root 5462 Sep  3 11:24 index_jsp.class
-rw-r----- 1 root root 4825 Sep  3 11:24 index_jsp.java
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;index_jsp.class就是要执行的servlet程序，包含输出数据和html代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;tomcat处理静态资源&#34;&gt;tomcat处理静态资源&lt;/h1&gt;
&lt;p&gt;对于静态资源，也是采用servlet进行处理，下方是&lt;prefix&gt;/conf/web.xml的有关静态资源处理的类定义：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 静态资源文件匹配到的default的servlet-name
&amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
    
# 名为default的servlet由org.apache.catalina.servlets.DefaultServlet实现
  &amp;lt;servlet&amp;gt;
        &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;org.apache.catalina.servlets.DefaultServlet&amp;lt;/servlet-class&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;debug&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;0&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
        &amp;lt;init-param&amp;gt;
            &amp;lt;param-name&amp;gt;listings&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;false&amp;lt;/param-value&amp;gt;
        &amp;lt;/init-param&amp;gt;
        &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
    &amp;lt;/servlet&amp;gt;
    
# 对应jar包为lib/catalina.jar
[root@host2 tomcat]# ll lib/catalina.jar 
-rw-r----- 1 root root 1703845 Jul  1 05:50 lib/catalina.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;展开catalina.jar包后，找到对应的DefaultServlet.class即为处理静态资源的servlet&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200904130126922.png&#34; alt=&#34;image-20200904130126922&#34;&gt;&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;www.pc.com/img/index.jsp 由动态的servlet处理

www.pc.com/img/index.html
www.pc.com/img/index.htm
www.pc.com/img/index.txt
www.pc.com/img/index.js 都是由静态servlet处理
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/tomcat/" term="tomcat" label="tomcat" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">tomcat之简介与安装</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/" />
            <id>https://latteStudio.github.io/posts/tomcat%E4%B9%8B%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
            <updated>2020-10-19T19:42:57&#43;08:00</updated>
            <published>2020-09-06T14:03:58&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">tomcat简介与安装步骤...</summary>
            
                <content type="html">&lt;h1 id=&#34;tomcat简介&#34;&gt;tomcat简介&lt;/h1&gt;
&lt;h2 id=&#34;java与jdk&#34;&gt;java与jdk&lt;/h2&gt;
&lt;p&gt;c/c++程序针对特定的硬件平台编译为cpu直接运行的二进制；而java程序面向的是jvm，由中间层jvm代为翻译为特定硬件平台的集群语言，通过中间层实现了&lt;code&gt;write once, run anywhere&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c/c++类的语言，需要自己针对不同硬件平台做对应修改，而java不需要，方便各平台之间的移植，适合大型程序，牺牲了一定效率，但减少了针对不同硬件平台的开发工作；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、java程序执行过程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;java程序被java编译器javac编译为java字节码：.class文件；&lt;/li&gt;
&lt;li&gt;字节码文件，再由java虚拟机jvm翻译为二进制的机器语言；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-.java源码-》（经由javac编译）-》.class字节码文件-》（经由jvm执行）-》特定cpu能执行的二进制机器语言；&#34; data-lang=&#34;.java源码-》（经由javac编译）-》.class字节码文件-》（经由jvm执行）-》特定cpu能执行的二进制机器语言；&#34;&gt;.java源码-》（经由javac编译）-》.class字节码文件-》（经由jvm执行）-》特定cpu能执行的二进制机器语言；

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2、jvm、jre、jdk&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jvm是java虚拟机，负责将java字节码翻译成对应硬件平台的语言；&lt;/li&gt;
&lt;li&gt;jre，jvm+运行时依赖的库&lt;/li&gt;
&lt;li&gt;jdk，jvm+运行时依赖的库+开发调试工具&lt;/li&gt;
&lt;li&gt;jave se：java标准版，包含jdk&lt;/li&gt;
&lt;li&gt;jave ee：java企业版，java标准版基础上+企业应用用到的类库；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jsp与servlet&#34;&gt;jsp与servlet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;applet：
&lt;ul&gt;
&lt;li&gt;早期，java实现web，是由客户端将程序下载到本机执行，1，不安全；&lt;/li&gt;
&lt;li&gt;2，客户端需要java环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;servlet
&lt;ul&gt;
&lt;li&gt;改进，servlet将应用程序放在服务端，客户端向服务端发请求，由服务端执行后返回结果，servlet的类库可以解析处理http协议&lt;/li&gt;
&lt;li&gt;1，servlet方式：java应用代码和html代码组合在一起，组织方式较差&lt;/li&gt;
&lt;li&gt;2，需要开发懂java和html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;jsp
&lt;ul&gt;
&lt;li&gt;再改进，jsp是继承了servlet类库的类库，但能够使得html和java代码结合较好&lt;/li&gt;
&lt;li&gt;1，java代码嵌入到html代码，组合为.jsp文件，&lt;/li&gt;
&lt;li&gt;2，通过jasper组件，再翻译为servlet代码执行&lt;/li&gt;
&lt;li&gt;3，jsp本质还是servlet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;java程序进程
&lt;ul&gt;
&lt;li&gt;一个java程序进程需要一个jvm进程；java程序进程自己是线程的&lt;/li&gt;
&lt;li&gt;tomcat，利用servlet可以处理动态和静态请求，但为了效率，一般将静态请求前置到前端的静态web服务：httpd和nginx等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web服务器与应用程序服务器&#34;&gt;web服务器与应用程序服务器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;web服务器：一般指处理http协议，提供静态请求的服务；如httpd，nginx&lt;/li&gt;
&lt;li&gt;应用程序服务器：一般指接收前面web转发来的动态请求，处理后交由web服务器，和静态内容一起封装后，返回给客户端；如tomcat、jboss、weblogic，php的有php-fpm等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tomcat体系结构&#34;&gt;tomcat体系结构&lt;/h2&gt;
&lt;p&gt;**tomcat组成：**jdk加上jsp和servlet类库实现的java ee；主要用于web应用开发；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server：tomcat实例，定义服务监听端口
&lt;ul&gt;
&lt;li&gt;service1，封装conector和container，
&lt;ul&gt;
&lt;li&gt;connector1：连接器，接收客户端请求，转给container处理，并返回container处理后数据给客户端，【请求与响应的中转站，唯一出入口】&lt;/li&gt;
&lt;li&gt;connector2...&lt;/li&gt;
&lt;li&gt;container：【上级容器范围内唯一】包含4个子容器，用于分析、处理请求、构建响应给connector进而转给客户端
&lt;ul&gt;
&lt;li&gt;engine：【唯一】定义servlet引擎，
&lt;ul&gt;
&lt;li&gt;host：定义虚拟主机，类比nginx虚拟主机；
&lt;ul&gt;
&lt;li&gt;context：定义webapp，一个context就是一个webapp，类比nginx的location，【如nginx有2个location分别为wordpress和discuz，分别配置后端tomcat的2个webapp为wordpress和discuz，】
&lt;ul&gt;
&lt;li&gt;wrapper：【唯一】最底层的容器，负责管理一个servlet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;service2&lt;/li&gt;
&lt;li&gt;service3&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结构图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/733013-20171023161736816-1039069357.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;server&amp;gt; # 一个tomcat实例，就是一个server
	&amp;lt;service&amp;gt; # 一个server内部，可以有多个service
		&amp;lt;connector /&amp;gt;
		&amp;lt;connector /&amp;gt;
		... # 一个service内可以有多个connector

		&amp;lt;engine&amp;gt; # 一个service内有唯一的engine
			&amp;lt;host&amp;gt; # 一个engine内可有多个host---虚拟主机
				&amp;lt;context&amp;gt; # 一个host可以有多个context
					wrapper # 一个context唯一的一个wrapper
				&amp;lt;/context&amp;gt;
				
				&amp;lt;context&amp;gt;
				&amp;lt;/contex&amp;gt;
				
			&amp;lt;/host&amp;gt;
			
			&amp;lt;host&amp;gt;
			&amp;lt;/host&amp;gt;
		&amp;lt;/engine&amp;gt;
	&amp;lt;/service&amp;gt;
	
	&amp;lt;service&amp;gt;
		...
	&amp;lt;/service&amp;gt;
	
	&amp;lt;service&amp;gt;
		...
	&amp;lt;/service&amp;gt;
&amp;lt;/server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;tomcat安装&#34;&gt;tomcat安装&lt;/h1&gt;
&lt;h2 id=&#34;安装jdk&#34;&gt;安装jdk&lt;/h2&gt;
&lt;h3 id=&#34;jdk安装方法&#34;&gt;jdk安装方法&lt;/h3&gt;
&lt;p&gt;jdk有2大版本，开源的openjdk，以及oracle公司的oraclejdk；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用yum源，安装yum源中的openjdk&lt;/li&gt;
&lt;li&gt;下载oracle官方的oraclejdk，直接用其rpm包安装；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;tomcat自身是java程序，需要jdk环境支撑运行；即tomcat依赖jdk环境；&lt;/p&gt;
&lt;p&gt;安装版本选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;openjdk
&lt;ul&gt;
&lt;li&gt;yum直接安装&lt;/li&gt;
&lt;li&gt;官方rpm包安装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;oracle jdk
&lt;ul&gt;
&lt;li&gt;官方rpm包安装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;实验采用，oraclejdk 8，tomcat 8.5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1，下载oracle官方的rpm包，直接安装即可&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html&#34;&gt;https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# yum localinstall -y jdk-8u261-linux-x64.rpm 

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，安装后目录&lt;/p&gt;
&lt;p&gt;默认安装目录为/usr/java，通过2个软连接，可以方便实现版本的切换；版本为jdk8的第261次更新；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# cd /usr/java/
[root@host2 java]# ll
total 0
lrwxrwxrwx 1 root root  16 Sep  2 14:40 default -&amp;gt; /usr/java/latest
drwxr-xr-x 9 root root 286 Sep  2 14:40 jdk1.8.0_261-amd64
lrwxrwxrwx 1 root root  28 Sep  2 14:40 latest -&amp;gt; /usr/java/jdk1.8.0_261-amd64

[root@host2 default]# ll
total 25648
drwxr-xr-x 2 root root     4096 Sep  2 14:40 bin
-rw-r--r-- 1 root root     3244 Jun 18 14:55 COPYRIGHT
drwxr-xr-x 3 root root      132 Sep  2 14:40 include
-rw-r--r-- 1 root root  5219010 Jun 18 12:03 javafx-src.zip
-rw-r--r-- 1 root root      195 Jun 18 14:55 jmc.txt
drwxr-xr-x 6 root root      198 Sep  2 14:40 jre
drwxr-xr-x 4 root root       31 Sep  2 14:40 legal
drwxr-xr-x 4 root root      223 Sep  2 14:40 lib
-rw-r--r-- 1 root root       44 Jun 18 14:55 LICENSE
drwxr-xr-x 4 root root       47 Sep  2 14:40 man
-rw-r--r-- 1 root root      159 Jun 18 14:55 README.html
-rw-r--r-- 1 root root      424 Jun 18 14:55 release
-rw-r--r-- 1 root root 21005583 Jun 18 14:55 src.zip
-rw-r--r-- 1 root root      190 Jun 18 12:03 THIRDPARTYLICENSEREADME-JAVAFX.txt
-rw-r--r-- 1 root root      190 Jun 18 14:55 THIRDPARTYLICENSEREADME.txt


# 查看版本信息；
[root@host2 java]# java -version
java version &amp;quot;1.8.0_261&amp;quot;
Java(TM) SE Runtime Environment (build 1.8.0_261-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，配置java_home等环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装后即可以找到java命令的原因，安装过程中自动做了软链接到默认PATH路径下
[root@host2 default]# which java
/usr/bin/java
[root@host2 default]# ll /usr/bin/java
java            javadoc         javah           javapackager    javaws
javac           javafxpackager  javap           java-rmi.cgi    
[root@host2 default]# ll /usr/bin/java
lrwxrwxrwx 1 root root 22 Sep  2 14:40 /usr/bin/java -&amp;gt; /etc/alternatives/java
[root@host2 default]# ll /etc/alternatives/java
lrwxrwxrwx 1 root root 37 Sep  2 14:40 /etc/alternatives/java -&amp;gt; /usr/java/jdk1.8.0_261-amd64/bin/java

# 配置变量
[root@host2 default]# cat /etc/profile.d/java.sh 
export JAVA_HOME=/usr/java/latest
export PATH=$JAVA_HOME/bin/:$PATH

[root@host2 default]# source /etc/profile.d/java.sh 
[root@host2 default]# which java
/usr/java/latest/bin/java
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装tomcat&#34;&gt;安装tomcat&lt;/h2&gt;
&lt;p&gt;1，下载官网8.5版本的最新二进制版本，在安装jdk后，解压，做软链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# tar -xf apache-tomcat-8.5.57.tar.gz -C /usr/local/
[root@host2 src]# ll /usr/local/
total 0
drwxr-xr-x  9 root root 220 Sep  2 14:56 apache-tomcat-8.5.57
drwxr-xr-x. 2 root root   6 Apr 11  2018 bin
drwxr-xr-x. 2 root root   6 Apr 11  2018 etc
drwxr-xr-x. 2 root root   6 Apr 11  2018 games
drwxr-xr-x. 2 root root   6 Apr 11  2018 include
drwxr-xr-x. 2 root root   6 Apr 11  2018 lib
drwxr-xr-x. 2 root root   6 Apr 11  2018 lib64
drwxr-xr-x. 2 root root   6 Apr 11  2018 libexec
drwxr-xr-x. 2 root root   6 Apr 11  2018 sbin
drwxr-xr-x. 5 root root  49 Aug  8 11:58 share
drwxr-xr-x. 2 root root  72 Sep  2 14:39 src
[root@host2 src]# ln -sv /usr/local/apache-tomcat-8.5.57/ /usr/local/tomcat
‘/usr/local/tomcat’ -&amp;gt; ‘/usr/local/apache-tomcat-8.5.57/’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，程序目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# ll /usr/local/tomcat/
total 124
drwxr-x--- 2 root root  4096 Sep  2 14:56 bin # 启停脚本，有linux平台的.sh脚本，也又windows平台的.bat脚本
-rw-r----- 1 root root 19318 Jul  1 05:53 BUILDING.txt
drwx------ 2 root root   238 Jul  1 05:53 conf
-rw-r----- 1 root root  5408 Jul  1 05:53 CONTRIBUTING.md
drwxr-x--- 2 root root  4096 Sep  2 14:56 lib
-rw-r----- 1 root root 57011 Jul  1 05:53 LICENSE
drwxr-x--- 2 root root     6 Jul  1 05:49 logs # 日志目录
-rw-r----- 1 root root  1726 Jul  1 05:53 NOTICE
-rw-r----- 1 root root  3255 Jul  1 05:53 README.md
-rw-r----- 1 root root  7136 Jul  1 05:53 RELEASE-NOTES
-rw-r----- 1 root root 16262 Jul  1 05:53 RUNNING.txt
drwxr-x--- 2 root root    30 Sep  2 14:56 temp # 临时目录
drwxr-x--- 7 root root    81 Jul  1 05:50 webapps # 放web程序的根目录
drwxr-x--- 2 root root     6 Jul  1 05:49 work # 存放编译后的class文件的目录

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，启停脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin下的catalina.sh可以管理tomcat的启停

[root@host2 bin]# ./catalina.sh -h
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/java/latest
...

[root@host2 bin]# ./catalina.sh start
# 监听在8080端口
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，conf配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# ll conf/
total 224
drwxr-x--- 3 root root     23 Sep  2 15:04 Catalina
-rw------- 1 root root  13446 Jul  1 05:53 catalina.policy
-rw------- 1 root root   7661 Jul  1 05:53 catalina.properties
-rw------- 1 root root   1338 Jul  1 05:53 context.xml
-rw------- 1 root root   1149 Jul  1 05:53 jaspic-providers.xml
-rw------- 1 root root   2313 Jul  1 05:53 jaspic-providers.xsd
-rw------- 1 root root   3916 Jul  1 05:53 logging.properties
-rw------- 1 root root   7588 Jul  1 05:53 server.xml
# 主配置文件
-rw------- 1 root root   2164 Jul  1 05:53 tomcat-users.xml
# 监控界面用户登陆认证配置
-rw------- 1 root root   2558 Jul  1 05:53 tomcat-users.xsd
-rw------- 1 root root 171879 Jul  1 05:53 web.xml
# webapp提供默认属性配置文件，启动tomcat时，会先找对应webapp目录下的/WEB-INF/web.xml文件加载属性信息，找不到的话，会利用该文件做默认配置，

# web.xml文件定义了默认页面
[root@host2 tomcat]# grep -C 1 index conf/web.xml 
    &amp;lt;welcome-file-list&amp;gt;
        &amp;lt;welcome-file&amp;gt;index.html&amp;lt;/welcome-file&amp;gt;
        &amp;lt;welcome-file&amp;gt;index.htm&amp;lt;/welcome-file&amp;gt;
        &amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt;
    &amp;lt;/welcome-file-list&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，设置环境变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@host2 tomcat&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# cat /etc/profile.d/tomcat.sh &lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CATALINA_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/tomcat
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$CATALINA_HOME&lt;/span&gt;/bin:&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;root@host2 tomcat&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# source /etc/profile.d/tomcat.sh &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;6，检查版本信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# version.sh 
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/java/latest
Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
Server version: Apache Tomcat/8.5.57
Server built:   Jun 30 2020 21:49:10 UTC
Server number:  8.5.57.0
OS Name:        Linux
OS Version:     3.10.0-862.el7.x86_64
Architecture:   amd64
JVM Version:    1.8.0_261-b12
JVM Vendor:     Oracle Corporation

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7，启动测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 tomcat]# catalina.sh start
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /usr/java/latest
Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar
Tomcat started.

# 默认监听8080端口
# 以及8005，管理端口；
[root@host2 tomcat]# curl -I http://localhost:8080
HTTP/1.1 200 
Content-Type: text/html;charset=UTF-8
Transfer-Encoding: chunked
Date: Wed, 02 Sep 2020 07:23:06 GMT
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/tomcat/" term="tomcat" label="tomcat" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/tomcat%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/" term="tomcat体系结构" label="tomcat体系结构" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx之四层通用代理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%B9%8B%E9%80%9A%E7%94%A8%E5%9B%9B%E5%B1%82%E4%BB%A3%E7%90%86/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%B9%8B%E9%80%9A%E7%94%A8%E5%9B%9B%E5%B1%82%E4%BB%A3%E7%90%86/</id>
            <updated>2020-10-19T17:10:59&#43;08:00</updated>
            <published>2020-09-06T14:01:31&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">nginx做四层通用代理相关配置...</summary>
            
                <content type="html">&lt;h1 id=&#34;四层代理&#34;&gt;四层代理&lt;/h1&gt;
&lt;p&gt;ngx_stream_xx_module&lt;/p&gt;
&lt;p&gt;具体可以参考官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-udp-load-balancer/#&#34;&gt;https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-udp-load-balancer/#&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;四层代理内容&#34;&gt;四层代理内容&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;tcp&lt;/li&gt;
&lt;li&gt;udp&lt;/li&gt;
&lt;li&gt;健康监测&lt;/li&gt;
&lt;li&gt;调度算法&lt;/li&gt;
&lt;li&gt;后端节点属性设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tcp的redis示例&#34;&gt;tcp的redis示例&lt;/h2&gt;
&lt;p&gt;1,定义stream段，在主配置文件；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stream {
	upstream redisback1 {
		server 192.168.80.102:6379;
		server 192.168.80.103:6379 down;
	}
include stream/*.conf;

}
定义一个redis主机组，同样可以指定，调度算法、权重、主机状态；超时时间，失败尝试次数等；
include导入虚拟主机的配置文件；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，定义虚拟主机，转发redis请求&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cat stream/redis.conf 
server {
	listen 192.168.80.101:6379;
	proxy_pass redisback1;

}
单独建立文件夹，放四层的代理配置，定义server虚拟主机，
监听的本机地址，转发到哪个四层的主机组；
# udp时，listen要加一个udp的参数表明是udp协议
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，定义2个后端redis服务；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install -y redis
vim /etc/redis.conf
	取消bind的注释，改为监听本机所有ip
重启
	
redis-cli 本机连入
config set protected-mode no
取消保护默认，没设置密码，且允许外部ip连接时，redis处于保护模式，需取消才能正常操作；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;100客户端
101nginx代理
102redis服务器

redis-cli -h 192.168.80.101
在nginx上查看，建立连接的有，101到102真实redis服务器的连接；
即，nginx对客户端100建立一个连接；对后端redis，建立一个连接，一次有效反代，消耗2个连接；

State      Recv-Q Send-Q                       Local Address:Port             Peer Address:Port
ESTAB      0      0                            192.168.80.101:6379         192.168.80.100:39624   
ESTAB      0      0                            192.168.80.101:47232           192.168.80.102:6379                                                
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;listen指令语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Syntax:	listen address:port [ssl] [udp] [proxy_protocol] [backlog=number] [rcvbuf=size] [sndbuf=size] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];
Default:	—
Context:	server


proxy_pass 主机组名称;
proxy_timeout time; 无数据传输时，多久断开，默认10m
proxy_connect_timeout time;nginx和后端服务器尝试建立连接的超时时长；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官方eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stream {
    upstream backend {
        hash $remote_addr consistent;

        server backend1.example.com:12345 weight=5;
        server 127.0.0.1:12345            max_fails=3 fail_timeout=30s;
        server unix:/tmp/backend3;
    }

    upstream dns {
       server 192.168.0.1:53535;
       server dns.example.com:53;
    }

    server {
        listen 12345;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;
        proxy_pass backend;
    }

    server {
        listen 127.0.0.1:53 udp reuseport;
        proxy_timeout 20s;
        proxy_pass dns;
    }

    server {
        listen [::1]:12345;
        proxy_pass unix:/tmp/stream.socket;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx之web服务</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%B9%8Bweb%E6%9C%8D%E5%8A%A1/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%B9%8Bweb%E6%9C%8D%E5%8A%A1/</id>
            <updated>2020-10-19T16:50:10&#43;08:00</updated>
            <published>2020-09-06T13:32:53&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">nginx做web服务时相关配置实验笔记...</summary>
            
                <content type="html">&lt;h1 id=&#34;虚拟主机&#34;&gt;虚拟主机&lt;/h1&gt;
&lt;h2 id=&#34;配置虚拟主机&#34;&gt;配置虚拟主机&lt;/h2&gt;
&lt;p&gt;1，定义虚拟主机文件，主配置中引入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cat vhosts/bbs.conf 
server {
	listen 80;
	server_name www.bbs.com;
	
	root /data/nginx/bbs;
	index index.html;

	location / {
		root /data/nginx/bbs;
		
	}
}
# 写入网页文件
[root@host2 conf]# cat /data/nginx/bbs/index.html 
bbs-index

# nginx.conf中引入，注意位置，和默认的localhost的server同级别，在http内部
http {
...
include vhosts/*.conf;
...
}

# nginx -t ; nginx -s reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：默认虚拟主机是配置文件排位置第一的虚拟，所以为避免影响，include放在http段最下方，在主配置文件中最上方定义一个默认虚拟主机；&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# curl www.bbs.com
nginx-default-html
# 没reload时，nginx还没启用bbs虚机，此时访问，默认的虚拟主机会匹配到处理
# nginx默认虚拟主机，的默认首页
[root@host2 conf]# cat /usr/local/nginx/html/index.html
nginx-default-html

# 重启后，
[root@host1 ~]# curl www.bbs.com
bbs-index
[root@host1 ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.80.101 www.pc.com www.bbs.com www.load1.com
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;三种虚拟主机&#34;&gt;三种虚拟主机&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# 三种定义方式
[root@host2 conf]# cat vhosts/*
server {
	listen 80;
	server_name www.bbs.com;
	
	root /data/nginx/bbs;
	index index.html;

	location / {
		root /data/nginx/bbs;
		
	}
}
基于主机头
server {
	listen 8080;
	root /data/nginx/blog;
	index index.html;
}
基于端口
server {
	listen 192.168.10.101:80;
	root /data/nginx/mobile;
	index index.html;
}
基于不同ip的
server {
	listen 80;
	server_name www.pc.com;
	root /data/nginx/pc;
	index index.html;

	location / {
		
	}

}
基于主机头

# 写入主页
-----------------
[root@host2 conf]# ll /data/nginx/
total 0
drwxr-xr-x 2 root root 24 Aug 28 15:22 bbs
drwxr-xr-x 2 root root 24 Aug 28 17:59 blog
drwxr-xr-x 2 root root 24 Aug 28 17:59 mobile
drwxr-xr-x 2 root root 24 Aug 28 17:15 pc
[root@host2 conf]# cat /data/nginx/*/index.html
bbs-index
blog-index
mobile-index
pc-index

# 访问测试
------------------
[root@host1 ~]# curl 192.168.10.101
mobile-index
[root@host1 ~]# curl 192.168.80.101:8080
blog-index
[root@host1 ~]# curl www.pc.com
pc-index
[root@host1 ~]# curl www.bbs.com
bbs-index
[root@host1 ~]# 

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;网页访问控制&#34;&gt;网页访问控制&lt;/h3&gt;
&lt;p&gt;模块：http_access：https://nginx.org/en/docs/http/ngx_http_access_module.html&lt;/p&gt;
&lt;p&gt;可基于ip，cidr的ip形式，unix socket做访问控制，一般先allow需要的小范围，最后deny大范围；&lt;/p&gt;
&lt;p&gt;基于ip的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        server_name www.bbs.com;

        root /data/nginx/bbs;
        index index.html;
        allow 192.168.80.100;
        deny all;
...
对bbs做限制配置


[root@host3 ~]# curl www.bbs.com
bbs-index
[root@host3 ~]# curl www.bbs.com
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;403 Forbidden&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor=&amp;quot;white&amp;quot;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;403 Forbidden&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.14.2&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
# 只有100可以正常访问，其余ip不行
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;网页认证&#34;&gt;网页认证&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;利用htpasswd工具，生成用户名，及密码；在需要的context配置，启用网页认证和用户密码文件，&lt;/p&gt;
&lt;p&gt;1，下载httpd-tools包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# rpm -ql httpd-tools
/usr/bin/ab
/usr/bin/htdbm
/usr/bin/htdigest
/usr/bin/htpasswd
...
[root@host2 conf]# yum install -y httpd-tools
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，生成用户密码文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;htpasswd -h
查看用法

[root@host2 conf]# htpasswd -cb nginx.user wang wang
Adding password for user wang
[root@host2 conf]# htpasswd -b nginx.user li li
Adding password for user li
[root@host2 conf]# cat nginx.user 
wang:$apr1$kQLDR3lH$IxgAN1BpoCms8Q2iWjFyz0
li:$apr1$SjOumK8J$vPIPEMN4CY3lBgED9Uwst/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，在context中引用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; location /stat {
        auth_basic           &amp;quot;need auth!&amp;quot;;
        auth_basic_user_file nginx.user;
        stub_status;
#       access_log logs/bbs-stat.log log1;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，访问网页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829135432750.png&#34; alt=&#34;image-20200829135432750&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;状态页&#34;&gt;状态页&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_stub_status_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_stub_status_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  location /stat {
                stub_status;
        }
# 加一个stat的location，启用stub_status指令；

[root@host1 ~]# curl www.bbs.com/stat
Active connections: 1 
server accepts handled requests
 7 7 7 
Reading: 0 Writing: 1 Waiting: 0 
# 访问
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;日志格式定义&#34;&gt;日志格式定义&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_log_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_log_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方eg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log_format compression &#39;$remote_addr - $remote_user [$time_local] &#39;
                       &#39;&amp;quot;$request&amp;quot; $status $bytes_sent &#39;
                       &#39;&amp;quot;$http_referer&amp;quot; &amp;quot;$http_user_agent&amp;quot; &amp;quot;$gzip_ratio&amp;quot;&#39;;

access_log /spool/logs/nginx-access.log compression buffer=32k;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;日志格式一般在http段定义，用名字标识，默认全局生效，下级范围如server，location默认继承http段日志的格式和路径，亦可以自定义格式和路径；日志组成一般是内建变量，&lt;/p&gt;
&lt;p&gt;在需要的上下文，如server，location，都可以引用http中定义的格式，自定义位置；&lt;/p&gt;
&lt;p&gt;默认的main日志格式和access.log日志位置对http下所有server，location等生效，当然可以被覆盖；&lt;/p&gt;
&lt;p&gt;1，定义格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http {
...
    log_format log1 &#39;$remote_addr $remote_user&#39;
			&#39;$status &amp;quot;$http_referer&amp;quot;&#39;
			&#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;;
			
注意写多行时，两边用&#39;&#39;引起来			
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，引用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 在bbs虚拟主机的stat的location引用，注意要先建立对应日志存放目录，
# 此后只有访问bbs的stat的请求，会被单独记录到bbs-stat.log，
# 其他虚拟主机的访问，包括bbs其他location的访问，仍是记录在默认的access.log中

	location /stat {
		stub_status;
	access_log logs/bbs-stat.log log1;
	}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;json格式日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	定义log_format时，自拼凑为json格式日志，即自定义key，然后value是引用的内建变量，自然日志就为json格式了；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http段定义：
【注意：1,json的key和值都用双引号引起来；2、每一对key-value后的逗号，除了最后一个；3，换行写时，每一行都用单引号引起来；】

    log_format myjsonlog &#39;{&amp;quot;@timestamp&amp;quot;:&amp;quot;$time_iso8601&amp;quot;,&#39;
        &#39;&amp;quot;clientip&amp;quot;:&amp;quot;$remote_addr&amp;quot;,&#39;
        &#39;&amp;quot;host&amp;quot;:&amp;quot;$server_addr&amp;quot;,&#39;

        &#39;&amp;quot;status&amp;quot;:&amp;quot;$status&amp;quot;}&#39;;
...
虚拟主机pc 的 upload的location引用

        location /upload {
                root /data/html/pc/;
                index index.html;
                access_log  logs/pc-json-upload.log myjsonlog;
...
重载
nginx -t ; nginx -s reload

查看
[root@host2 ~]# cat /usr/local/nginx/logs/pc-json-upload.log 
{&amp;quot;@timestamp&amp;quot;:&amp;quot;2020-08-25T11:18:49+08:00&amp;quot;,&amp;quot;clientip&amp;quot;:&amp;quot;192.168.80.100&amp;quot;,&amp;quot;host&amp;quot;:&amp;quot;192.168.80.101&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;200&amp;quot;}
{&amp;quot;@timestamp&amp;quot;:&amp;quot;2020-08-25T11:18:49+08:00&amp;quot;,&amp;quot;clientip&amp;quot;:&amp;quot;192.168.80.100&amp;quot;,&amp;quot;host&amp;quot;:&amp;quot;192.168.80.101&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;200&amp;quot;}
{&amp;quot;@timestamp&amp;quot;:&amp;quot;2020-08-25T11:18:50+08:00&amp;quot;,&amp;quot;clientip&amp;quot;:&amp;quot;192.168.80.100&amp;quot;,&amp;quot;host&amp;quot;:&amp;quot;192.168.80.101&amp;quot;,&amp;quot;status&amp;quot;:&amp;quot;200&amp;quot;}

json格式日志：
	方便：elk处理，脚本统计处理等；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;防盗链&#34;&gt;防盗链&lt;/h3&gt;
&lt;p&gt;用户每个请求的请求头，一般都有referers字段，表示是从哪个网址跳转过来的，	一般网站图片等资源都要做放盗链，禁止小网站直接链接自己的资源，消耗自己带宽；&lt;/p&gt;
&lt;p&gt;valid_referers定义合法的来源目标，如谷歌，百度等搜索引擎，自己网站内部的跳转，其余的一般都禁止；&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;p&gt;1，pc上定义合法的referer，只有bbs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cat vhosts/pc.conf 
server {
	listen 80;
	server_name www.pc.com;
	root /data/nginx/pc;
	index index.html;
valid_referers *.bbs.com;
	location / {
		if ($invalid_referer) {
			return 403;
		}
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，bbs和blog上写入网页，链接到pc.com&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cat /data/nginx/bbs/index.html 
bbs-index
&amp;lt;a href=&amp;quot;http://www.pc.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;pc.com&amp;lt;/a&amp;gt;

[root@host2 conf]# cat /data/nginx/blog/index.html 
blog-index
&amp;lt;a href=&amp;quot;http://www.pc.com&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;pc.com&amp;lt;/a&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829125930510.png&#34; alt=&#34;image-20200829125930510&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829130706120.png&#34; alt=&#34;image-20200829130706120&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图，是点击链接，从blog.com跳转的请求，被拒绝；&lt;strong&gt;不仅如此，直接访问也不行了，因为只定义了从bbs跳转的为合法referer，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829130050689.png&#34; alt=&#34;image-20200829130050689&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829130620762.png&#34; alt=&#34;image-20200829130620762&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图，从bbs.com跳转的请求可以；&lt;/p&gt;
&lt;h3 id=&#34;配置faviconico&#34;&gt;配置favicon.ico&lt;/h3&gt;
&lt;p&gt;真实浏览器访问网站首页时，&lt;strong&gt;会自动请求favicon.ico图标&lt;/strong&gt;，若没有，日志会记录一条404；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;192.168.80.1 - - [29/Aug/2020:13:13:48 +0800] &amp;quot;GET / HTTP/1.1&amp;quot; 200 66 &amp;quot;-&amp;quot; &amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&amp;quot;
192.168.80.1 - - [29/Aug/2020:13:13:48 +0800] &amp;quot;GET /favicon.ico HTTP/1.1&amp;quot; 404 571 &amp;quot;http://www.bbs.com/&amp;quot; &amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置一个favicon.ico&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;加个favicon.ico的location
    location = /favicon.ico {
                root /data/nginx/bbs;
        }


[root@host2 conf]# cp /usr/share/backgrounds/day.jpg /data/nginx/bbs/
[root@host2 conf]# mv /data/nginx/bbs/day.jpg /data/nginx/bbs/favicon.ico
[root@host2 conf]# nginx -t
nginx: the configuration file /usr/local/nginx-1.14/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx-1.14/conf/nginx.conf test is successful
[root@host2 conf]# nginx -s reload


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;reload，浏览器访问，标签页上即有图标；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829131811128.png&#34; alt=&#34;image-20200829131811128&#34;&gt;&lt;/p&gt;
&lt;p&gt;或直接取消favicon找不到的报错；并不记录该日志&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location = /favicon.ico {
	log_not_found off;
	access_log off;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gzip压缩&#34;&gt;gzip压缩&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_gzip_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_gzip_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1，准备稍大文件做网页文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cp /var/log/messages /data/nginx/bbs/mess.html
[root@host2 conf]# ll -h !$
ll -h /data/nginx/bbs/mess.html
-rw------- 1 root root 279K Aug 29 13:28 /data/nginx/bbs/mess.html

注意nginx用户的读权限
[root@host2 conf]# chmod a+r /data/nginx/bbs/mess.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，在需要的上下文配置启用压缩，及压缩比等属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; location / {
                root /data/nginx/bbs;
#       access_log logs/bbs-json.log myjsonlog;

        gzip on;
        gzip_comp_level 3;
        gzip_disable &amp;quot;fire&amp;quot;;
        gzip_min_length 200;
        gzip_vary on;

        }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，访问测试，查看响应头部信息&lt;/p&gt;
&lt;p&gt;压缩前：头部信息；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829133155082.png&#34; alt=&#34;image-20200829133155082&#34;&gt;&lt;/p&gt;
&lt;p&gt;压缩后访问，多了gzip标识头部，多了vary字段，大小从280多k变为40多k&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829133249076.png&#34; alt=&#34;image-20200829133249076&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件下载服务&#34;&gt;文件下载服务&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_autoindex_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_autoindex_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用autoindex指令&lt;/strong&gt;可以在&lt;strong&gt;找不到默认的index.html情况下&lt;/strong&gt;，展示该目录下所有文件，并可以提供下载；&lt;/p&gt;
&lt;p&gt;1，配置download的loaction&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  location /download {
                root /data/nginx/bbs; 
                autoindex on;
                autoindex_exact_size on;
                autoindex_localtime on;
                autoindex_format html;
        }  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，放入文件，注意：一定不能有index.html，否则刷出的是首页文件，&lt;strong&gt;只有不存在首页文件时，才会显示目录，提供下载功能&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# ll /data/nginx/bbs/download
total 8
-rw-r--r-- 1 root root 1077 Aug 29 18:06 fastcgi.conf
-rw-r--r-- 1 root root 3099 Aug 29 18:06 nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829181353322.png&#34; alt=&#34;image-20200829181353322&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;启用缓存&#34;&gt;启用缓存&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Syntax:	open_file_cache off;
open_file_cache max=N [inactive=time];
Default:	
open_file_cache off;
Context:	http, server, location

eg:
open_file_cache          max=1000 inactive=20s;
open_file_cache_valid    30s;
open_file_cache_min_uses 2;
open_file_cache_errors   on;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;客户端限制&#34;&gt;客户端限制&lt;/h1&gt;
&lt;h2 id=&#34;速率限制&#34;&gt;速率限制&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ngx_http_limit_req_module&lt;/code&gt; module (0.7.21) is used to limit the request processing rate per a defined key, in particular, the processing rate of requests coming from a single IP address. The limitation is done using the “leaky bucket” method.&lt;/p&gt;
&lt;h2 id=&#34;并发限制&#34;&gt;并发限制&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_limit_req_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ngx_http_limit_conn_module&lt;/code&gt; module is used to limit the number of connections per the defined key, in particular, the number of connections from a single IP address.&lt;/p&gt;
&lt;h1 id=&#34;url重写&#34;&gt;URL重写&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&#34;&gt;https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;rewritelastbreak&#34;&gt;rewrite、last、break&lt;/h2&gt;
&lt;p&gt;rewrite有四种标志；permanent类似return加301；redirect类似return加302；last表示匹配到继续执行匹配循环；break表示匹配到就跳出匹配循环；&lt;/p&gt;
&lt;p&gt;last配置不当容易造成死循环，但nginx默认限制了最大循环10次，然后返回500error；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Syntax:	rewrite regex replacement [flag];
Default:	—
Context:	server, location, if
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、&lt;strong&gt;rewrite做http到https跳转&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   if ($scheme = http) {
        #       return 301 https://www.pc.com;
                rewrite / https://www.pc.com break;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829204455962.png&#34; alt=&#34;image-20200829204455962&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;break&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2者对比发现：break是做了rewrite之后，不再理会其他的location，直接在本机找rewrite后的文件，本例中是找/2.txt，由于没有该文件，所以返回是404；&lt;/p&gt;
&lt;p&gt;而last，是做了rewrite之后，用rewrite后新的uri和各个location的配置再匹配一遍，如果匹配到了，就用匹配到后的配置处理，此例中：1.txt改写后变为2.txt，改写后的2.txt又匹配到了另外的2.txt的location，所以执行里面的指令，返回666给客户端；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; location /1.txt {
                rewrite /1.txt /2.txt break;
        }
        location /2.txt {
                return 666;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829205736810.png&#34; alt=&#34;image-20200829205736810&#34;&gt;&lt;/p&gt;
&lt;p&gt;存在/2.txt文件的情况下，会直接得到相应页面；&lt;strong&gt;注意：调试窗口，只有一个发起1.txt的请求，并无发起2.txt的请求，也就是说，是nginx内部完成重写，nginx找到改写后文件直接返回客户端，不需要客户端得到改写后的uri并重新发起请求！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下图为rewrite情况，return不同！见下方对比；&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; location /1.txt {
                rewrite /1.txt /2.txt break;
        }
break标记位，在改成为2.txt后，直接找到本地的2.txt返回客户端；
改写后的uri不会再和其他location做再次比较；
不会返回客户端新的url或uri链接，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829211730744.png&#34; alt=&#34;image-20200829211730744&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;return和rewrite区别&#34;&gt;&lt;strong&gt;return和rewrite区别&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;return
&lt;ul&gt;
&lt;li&gt;return主要使用于外部完整url链接的重定向&lt;/li&gt;
&lt;li&gt;服务器会返回客户端新的url，浏览器会对返回的url重新发起请求，地址栏url会变&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;code不可以随意写&lt;/strong&gt;，一般是301,302，写的随便的如233，后面的url会被当初return的文本参数返回，而不是被当作url对待&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rewrite
&lt;ul&gt;
&lt;li&gt;rewrite主要适用于内部部分uri变更的重定向，如video路径改成了mp4路径&lt;/li&gt;
&lt;li&gt;服务端不会返回客户端新的url，浏览器不会得到url并发新请求，地址栏地址不会变&lt;/li&gt;
&lt;li&gt;nginx内部完成路径的重写，并找到重写后的文件，直接返回给客户端；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;下图为return情况：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  location /1.txt {
                return 301 http://www.pc.com/3.txt;
                301的code不能随便写，一开始写的233，后面的url不会当成url，而是当成文本；
        }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829212910994.png&#34; alt=&#34;image-20200829212910994&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;last&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        location /2.txt {
                return 666;
        }
        # location的顺序位置无所谓，都会从头再跟各个location比较一下；
         location /1.txt {
                rewrite /1.txt /2.txt last;
        }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829205629478.png&#34; alt=&#34;image-20200829205629478&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、last的死循环&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    location /2.txt {
                rewrite /2.txt /1.txt last;
        }
        location /1.txt {
                rewrite /1.txt /2.txt last;
        }
        
        
 # error.log给出了明显的报错；  
2020/08/29 21:12:45 [error] 2334#2334: *210 rewrite or internal redirection cycle while processing &amp;quot;/2.txt&amp;quot;, client: 192.168.80.1, server: www.pc.com, request: &amp;quot;GET /1.txt HTTP/1.1&amp;quot;, host: &amp;quot;www.pc.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829211127225.png&#34; alt=&#34;image-20200829211127225&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;returnif&#34;&gt;return、if&lt;/h2&gt;
&lt;p&gt;可以返回301永久重定向，或：302临时重定向；&lt;/p&gt;
&lt;p&gt;1，pc虚拟配置，加一段location&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; location /return {
                if ($scheme = http) {
                        return 302 https://www.baidu.com;
                }
        }

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，访问测试，访问return的uri时，会返回302状态码，返回百度的网址，然后&lt;strong&gt;浏览器会自己主动&lt;/strong&gt;向百度发起请求；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829201719078.png&#34; alt=&#34;image-20200829201719078&#34;&gt;&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;p&gt;访问http://www.taobao.com网址，会被重定向到https://www.taobao.com，实现全部https加密访问；&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829202206145.png&#34; alt=&#34;image-20200829202206145&#34;&gt;&lt;/p&gt;
&lt;p&gt;实现类型效果：&lt;/p&gt;
&lt;p&gt;1，同时配置http和https监听&lt;/p&gt;
&lt;p&gt;2，然后，对http的请求做return重定向到https；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        listen 443 ssl;
        server_name www.pc.com;
        root /data/nginx/pc;
        index index.html;

        ssl_certificate_key ssl/bbs.key;
        ssl_certificate     ssl/bbs.crt;
        ssl_session_cache shared:sslcache:20m;
        ssl_session_timeout 10m;

        if ($scheme = http) {
                return 301 https://www.pc.com;
        }
        location /return {
                if ($scheme = http) {
                        return 302 https://www.baidu.com;
                }
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829202917980.png&#34; alt=&#34;image-20200829202917980&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;https加密&#34;&gt;https加密&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://nginx.org/en/docs/http/ngx_http_ssl_module.html&#34;&gt;https://nginx.org/en/docs/http/ngx_http_ssl_module.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;真实公网证书，需到证书提供商申请，有单一域名、和通配域名，如*.gitee.io就是通配域名证书，所有gitee.io结尾的网站都可以被同一套证书加密；&lt;/p&gt;
&lt;p&gt;1，生成自签名ca，然后给需要的虚拟主机或这个nginx实例生成证书和key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl genrsa -out bbs.key 1024
openssl req -new -x509 -days 365 -key bbs.key -out bbs.crt
# 生成key，然后直接自签名；

mkdir /usr/local/nginx/conf/ssl
[root@host2 ssl]# pwd
/usr/local/nginx/conf/ssl
[root@host2 ssl]# ll
total 8
-rw-r--r-- 1 root root 1001 Aug 29 17:43 bbs.crt
-rw-r--r-- 1 root root  891 Aug 29 17:40 bbs.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，配置到bbs上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        listen 443 ssl;
        server_name www.bbs.com;

        ssl_certificate_key ssl/bbs.key; # 采用的是conf的相对路径
        ssl_certificate     ssl/bbs.crt;
        ssl_session_cache shared:sslcache:20m;
        ssl_session_timeout 10m;

...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，重载访问&lt;/p&gt;
&lt;p&gt;已经完成了https的访问，然后将根证书导入浏览器信任的根列表，&lt;strong&gt;再次访问显示证书无问题，但仍有红色警告&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ssl]# ss -lnt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:80                             *:*                  
LISTEN     0      128                *:22                             *:*                  
LISTEN     0      100        127.0.0.1:25                             *:*                  
LISTEN     0      128                *:443                            *:*   
# 443端口同时监听；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200829174851967.png&#34; alt=&#34;image-20200829174851967&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ansible基础介绍与安装</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/ansible%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/" />
            <id>https://latteStudio.github.io/posts/ansible%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
            <updated>2021-03-09T12:32:21&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">ansible的基础介绍与安装</summary>
            
                <content type="html">&lt;h1 id=&#34;运维介绍&#34;&gt;运维介绍&lt;/h1&gt;
&lt;h2 id=&#34;运维日常工作&#34;&gt;运维日常工作&lt;/h2&gt;
&lt;p&gt;1、&lt;strong&gt;云计算运维工程师核心职能：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;平台架构组建：负责参与并审核架构设计和合理性、可运维性；利用开源方案搭建运维平台技术架构，确保产品发布之后高效稳定的运行，保障并不断提升服务的可用性，确保用户数据安全，提升用户体验；&lt;/li&gt;
&lt;li&gt;日常运营保障：负责运维技术或运维平台可保障产品高效的发布上线，负责保障产品的7*24h稳定运行，出现问题时可以快速定位并解决，不断优化架构，以提升系统整体的稳定性&lt;/li&gt;
&lt;li&gt;性能、效率优化：利用自动化的工具、平台，不断优化系统架构，提升部署效率，提升性能，稳定性，高可用性，安全性，可扩展性，可伸缩性等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2、&lt;strong&gt;运维职能划分：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201007102610952.png&#34; alt=&#34;image-20201007102610952&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;企业实际应用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;dev开发环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者：开发人员&lt;/li&gt;
&lt;li&gt;功能：开发软件，调试bug&lt;/li&gt;
&lt;li&gt;管理者：开发人员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;测试环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者：QA测试人员&lt;/li&gt;
&lt;li&gt;功能：测试开发提交的代码&lt;/li&gt;
&lt;li&gt;管理者：运维人员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发布环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者：运维人员&lt;/li&gt;
&lt;li&gt;功能：发布通过测试的代码到生产环境&lt;/li&gt;
&lt;li&gt;管理者：运维&lt;/li&gt;
&lt;li&gt;发布机：2台以上（主备）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生产环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者：运维人员&lt;/li&gt;
&lt;li&gt;功能：运行正式代码，对外提供服务&lt;/li&gt;
&lt;li&gt;管理者：运维&lt;/li&gt;
&lt;li&gt;特点：服务器数量较多，都需要自动化工具提升效率，较少人为失误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;灰度环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用者：运维&lt;/li&gt;
&lt;li&gt;功能：代码版本变更时，只对线上部分主机做修改，新老版本并存，新版本一般只引流给部分用户，如申请游戏新版本的内测用户&lt;/li&gt;
&lt;li&gt;管理者：运维&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、&lt;strong&gt;程序发布要求&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能导致系统故障，&lt;/li&gt;
&lt;li&gt;不能影响用户体验&lt;/li&gt;
&lt;li&gt;预发布验证：
&lt;ol&gt;
&lt;li&gt;新版本发布到服务器测试，（和线上环境相同，只是没接入前方调度器）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;灰度发布划分标准：
&lt;ol&gt;
&lt;li&gt;主机&lt;/li&gt;
&lt;li&gt;用户&lt;/li&gt;
&lt;li&gt;业务&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;每个版本要带版本号，通过修改软链接切换
&lt;ol&gt;
&lt;li&gt;/webapp/myapp&lt;/li&gt;
&lt;li&gt;/webapp/myapp1-1&lt;/li&gt;
&lt;li&gt;/webapp/myapp1-2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;发布过程
&lt;ol&gt;
&lt;li&gt;调度器：lvs或haproxy，分批下线机器，更新代码，测试正常，重新上线，直到全部机器更新完成&lt;/li&gt;
&lt;li&gt;脚本、或自动化平台，辅助完成&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是运维自动化&#34;&gt;什么是运维自动化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件传输&lt;/li&gt;
&lt;li&gt;应用编排&lt;/li&gt;
&lt;li&gt;配置管理&lt;/li&gt;
&lt;li&gt;任务流编排&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;运维自动化常用工具&#34;&gt;运维自动化常用工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ansible：python，agentless，中小型环境&lt;/li&gt;
&lt;li&gt;saltstack：python，需要agent，&lt;/li&gt;
&lt;li&gt;puppet：ruby，适合大型环境&lt;/li&gt;
&lt;li&gt;fabric：python&lt;/li&gt;
&lt;li&gt;chef：ruby&lt;/li&gt;
&lt;li&gt;cfengine&lt;/li&gt;
&lt;li&gt;func&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ansible&#34;&gt;ansible&lt;/h1&gt;
&lt;h2 id=&#34;学习文档&#34;&gt;学习文档：&lt;/h2&gt;
&lt;p&gt;官方文档：https://docs.ansible.com/&lt;/p&gt;
&lt;p&gt;有ansible，ansible tower，ansible galaxy，ansible network四大类的官方文档；&lt;/p&gt;
&lt;p&gt;ansible galaxy:社区贡献的role，可以下载，学习，参考，甚至可以直接用&lt;/p&gt;
&lt;p&gt;ansible network:ansible管理网络设备相关文档&lt;/p&gt;
&lt;p&gt;ansible tower:可以理解为红帽对ansible的商业发行版，一个集成的解决方案，基于web，更易用；&lt;/p&gt;
&lt;p&gt;中文翻译官方文档：http://ansible.com.cn/index.html&lt;/p&gt;
&lt;p&gt;wikipedia介绍：https://en.wikipedia.org/wiki/Ansible_(software)&lt;/p&gt;
&lt;p&gt;​	作者：michael dehaan（cobbler 和 func作者）后被红帽收购&lt;/p&gt;
&lt;h2 id=&#34;ansible基础与特性&#34;&gt;ansible基础与特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模块化：通过调用特定的模块，完成特定类型的任务&lt;/li&gt;
&lt;li&gt;关键模块：paramiko、pyyaml、jinja2&lt;/li&gt;
&lt;li&gt;支持自定义模块&lt;/li&gt;
&lt;li&gt;基于python&lt;/li&gt;
&lt;li&gt;部署简单，无需agent，通过openssh管理主机&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;支持playbook编排任务&lt;/li&gt;
&lt;li&gt;幂等性，任务执行多次，结果一致&lt;/li&gt;
&lt;li&gt;yaml格式，编排任务，易读&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ansible架构&#34;&gt;ansible架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201007105347093.png&#34; alt=&#34;image-20201007105347093&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ansible工作原理&#34;&gt;ansible工作原理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201007105713064.png&#34; alt=&#34;image-20201007105713064&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ansible软件组成&#34;&gt;ansible软件组成&lt;/h2&gt;
&lt;p&gt;ansible playbook：定义任务流的配置文件，ansible读取并顺序执行，通常为json格式的yaml文件&lt;/p&gt;
&lt;p&gt;inventory：主机清单：/etc/ansible/hosts&lt;/p&gt;
&lt;p&gt;modules：ansible执行命令的功能模块，多为内置核心模块，可自定义模块&lt;/p&gt;
&lt;p&gt;plugins：插件，连接型插件、循环插件、变量插件、过滤插件等&lt;/p&gt;
&lt;p&gt;api：供第三方程序调用的编程接口&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;ansible命令执行来源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;user、普通用户，系统管理员&lt;/p&gt;
&lt;p&gt;cmdb、通过api调用，一般取出其中主机清单&lt;/p&gt;
&lt;p&gt;public/private cloud、api调用&lt;/p&gt;
&lt;p&gt;user、ansible playbook、ansible&lt;/p&gt;
&lt;p&gt;2、&lt;strong&gt;ansible实现管理的方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ad-hoc即ansible命令行，临时场景&lt;/p&gt;
&lt;p&gt;ansible-playbook，长期的，事先规则的，大型项目，可重复利用，&lt;/p&gt;
&lt;p&gt;3、&lt;strong&gt;ansible-playbook执行过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将编排好的任务写入playbook，ansible读取，按照顺序执行，不同类型的任务通过调用不同的模块来完成；&lt;/p&gt;
&lt;p&gt;4、&lt;strong&gt;ansible管理对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机&lt;/li&gt;
&lt;li&gt;网络设备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5、&lt;strong&gt;ansible注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行ansible主机为控制端&lt;/li&gt;
&lt;li&gt;控制端python版本，2.6及以上&lt;/li&gt;
&lt;li&gt;被控制端python小于2.4需安装python-simplejson&lt;/li&gt;
&lt;li&gt;被控制端若开启selinux需要安装libselinux-python&lt;/li&gt;
&lt;li&gt;windows不能作为控制端&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ansible安装&#34;&gt;ansible安装&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/installation_guide/index.html&#34;&gt;https://docs.ansible.com/ansible/latest/installation_guide/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方文档：ansible具有多种安装方式&lt;/p&gt;
&lt;h3 id=&#34;yum安装&#34;&gt;yum安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#配置epel源后，直接安装

[root@host2 ~]# yum list ansible
Available Packages
ansible.noarch                               2.9.10-1.el7                               epel
[root@host2 ~]# yum install -y ansible
[root@host2 ~]# ansible --version
ansible 2.9.13
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u&#39;/root/.ansible/plugins/modules&#39;, u&#39;/usr/share/ansible/plugins/modules&#39;]
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.5 (default, Apr 11 2018, 07:36:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-28)]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;编译安装&#34;&gt;编译安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#安装依赖包
[root@host3 ansible-1.5.4]# yum install -y python-jinja2 PyYAML python-paramiko python-babel python-crypto

#解压源码包，编译安装
[root@host3 ansible-1.5.4]# tar -xf ansible-1.5.4.tar.gz -C /usr/local/
[root@host3 ansible-1.5.4]# cd /usr/local/ansible-1.5.4/
[root@host3 ansible-1.5.4]# python setup.py build
[root@host3 ansible-1.5.4]# python setup.py install


[root@host3 ansible-1.5.4]# mkdir /etc/ansible
[root@host3 ansible-1.5.4]# cp -r examples/* /etc/ansible/
[root@host3 ansible-1.5.4]# ansible --version
ansible 1.5.4
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git安装&#34;&gt;git安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host4 ~]# git clone https://github.com/ansible/ansible.git --recursive

[root@host4 ~]# cd ansible/
[root@host4 ansible]# ll
total 92
drwxr-xr-x 2 root root   243 Oct  7 14:42 bin
drwxr-xr-x 3 root root    85 Oct  7 14:42 changelogs
-rw-r--r-- 1 root root 35148 Oct  7 14:42 COPYING
drwxr-xr-x 6 root root    60 Oct  7 14:42 docs
drwxr-xr-x 3 root root   191 Oct  7 14:42 examples
drwxr-xr-x 7 root root  4096 Oct  7 14:42 hacking
drwxr-xr-x 3 root root    21 Oct  7 14:42 lib
drwxr-xr-x 2 root root   104 Oct  7 14:42 licenses
-rw-r--r-- 1 root root  9913 Oct  7 14:42 Makefile
-rw-r--r-- 1 root root  1755 Oct  7 14:42 MANIFEST.in
drwxr-xr-x 8 root root    90 Oct  7 14:42 packaging
-rw-r--r-- 1 root root  5754 Oct  7 14:42 README.rst
-rw-r--r-- 1 root root   361 Oct  7 14:42 requirements.txt
-rw-r--r-- 1 root root 15418 Oct  7 14:42 setup.py
-rw-r--r-- 1 root root  4426 Oct  7 14:42 shippable.yml
drwxr-xr-x 9 root root   111 Oct  7 14:42 test
[root@host4 ansible]# source ./hacking/env-setup
Ansible now needs setuptools in order to build. Install it using your package manager (usually python-setuptools) or via pip (pip install setuptools).

Setting up Ansible to run out of checkout...

PATH=/root/ansible/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
PYTHONPATH=/root/ansible/lib
MANPATH=/root/ansible/docs/man:/usr/local/share/man:/usr/share/man

Remember, you may wish to specify your host file with -i

Done!

[root@host4 ansible]# echo $?
0
[root@host4 ansible]# ansible --version
Traceback (most recent call last):
  File &amp;quot;/root/ansible/bin/ansible&amp;quot;, line 62, in &amp;lt;module&amp;gt;
    import ansible.constants as C
  File &amp;quot;/root/ansible/lib/ansible/constants.py&amp;quot;, line 12, in &amp;lt;module&amp;gt;
    from jinja2 import Template
ImportError: No module named jinja2

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;pip安装&#34;&gt;pip安装&lt;/h3&gt;
&lt;p&gt;利用pip命令安装，pip为python程序包的管理程序，类比yum&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# yum install -y python-pip python-devel
[root@host1 ~]# yum install -y gcc glibc-devel zlib-devel rpm-build openssl-devel 
[root@host1 ~]# pip install --upgrade pip
[root@host1 ~]# pip install ansible --upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible配置文件&#34;&gt;ansible配置文件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#yum安装后目录结构：

[root@host2 ~]# rpm -ql ansible |less
/etc/ansible
/etc/ansible/ansible.cfg
主配置文件，配置ansible的工作特性
/etc/ansible/hosts
主机清单
/etc/ansible/roles
存放角色的目录

/usr/bin/ansible
/usr/bin/ansible-2
/usr/bin/ansible-2.7
主程序，临时命令行工具，用于临时任务


/usr/bin/ansible-config
/usr/bin/ansible-connection

/usr/bin/ansible-console
/usr/bin/ansible-console-2
/usr/bin/ansible-console-2.7
基于console界面和用户交互工具

/usr/bin/ansible-doc
/usr/bin/ansible-doc-2
/usr/bin/ansible-doc-2.7
查看配置文档，模块功能，类比于man


/usr/bin/ansible-galaxy
/usr/bin/ansible-galaxy-2
/usr/bin/ansible-galaxy-2.7
下载上传，官网上roles模块的工具

/usr/bin/ansible-inventory


/usr/bin/ansible-playbook
/usr/bin/ansible-playbook-2
/usr/bin/ansible-playbook-2.7
编排任务流的命令


inventory主机清单：
ansible是批量操作主机，为了区分，可以在inventory file中为主机分组，如web组，数据库组，app组，调度器组等


&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;etcansiblehosts&#34;&gt;/etc/ansible/hosts&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#下为yum安装时，默认的配置文件，
#[group_name] 可以对主机进行归类分组；
#没有[group_name]的可以不分
#支持类似通配符的匹配多台主机，用[]表示，
#ip，主机名均可

[root@host2 ~]# vim /etc/ansible/hosts 

# This is the default ansible &#39;hosts&#39; file.
#
# It should live in /etc/ansible/hosts
#
#   - Comments begin with the &#39;#&#39; character
#   - Blank lines are ignored
#   - Groups of hosts are delimited by [header] elements
#   - You can enter hostnames or ip addresses
#   - A hostname/ip can be a member of multiple groups

# Ex 1: Ungrouped hosts, specify before any group headers.
# This is the default ansible &#39;hosts&#39; file.
#
# It should live in /etc/ansible/hosts
#
#   - Comments begin with the &#39;#&#39; character
#   - Blank lines are ignored
#   - Groups of hosts are delimited by [header] elements
#   - You can enter hostnames or ip addresses
#   - A hostname/ip can be a member of multiple groups

# Ex 1: Ungrouped hosts, specify before any group headers.

## green.example.com
## blue.example.com
## 192.168.100.1
## 192.168.100.10

# Ex 2: A collection of hosts belonging to the &#39;webservers&#39; group

## [webservers]
## alpha.example.org
## beta.example.org
## 192.168.1.100
## 192.168.1.110

# If you have multiple hosts following a pattern you can specify
# them like this:

## www[001:006].example.com

# Ex 3: A collection of database servers in the &#39;dbservers&#39; group

## [dbservers]
## 
## db01.intranet.mydomain.net
## db02.intranet.mydomain.net
## 10.25.1.56
## 10.25.1.57

# Here&#39;s another example of host ranges, this time there are no
# leading 0s:

## db-[99:101]-node.example.com

#ssh服务非标准22端口，可以加端口指定
ntp.magedu.com 
[webservers] 
www1.magedu.com:2222  www2.magedu.com  
[dbservers]  
db1.magedu.com 
db2.magedu.com 
db3.magedu.com 

#列表方式通配主机名
[websrvs]
www[1:100].example.com 
 
[dbsrvs] 
db-[a:f].example.com 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;etcansibleansiblecfg&#34;&gt;/etc/ansible/ansible.cfg&lt;/h3&gt;
&lt;p&gt;一般保持默认&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  1 # config file for ansible -- https://ansible.com/
  2 # ===============================================
  3 
  4 # nearly all parameters can be overridden in ansible-playbook
  5 # or with command line flags. ansible will read ANSIBLE_CONFIG,
  6 # ansible.cfg in the current working directory, .ansible.cfg in
  7 # the home directory or /etc/ansible/ansible.cfg, whichever it
  8 # finds first
  9 
 10 [defaults]
 11 
 12 # some basic default values...
 13 
 14 #inventory      = /etc/ansible/hosts
 15 #library        = /usr/share/my_modules/
 16 #module_utils   = /usr/share/my_module_utils/
 17 #remote_tmp     = ~/.ansible/tmp
 18 #local_tmp      = ~/.ansible/tmp
 19 #plugin_filters_cfg = /etc/ansible/plugin_filters.yml
 20 #forks          = 5
 21 #poll_interval  = 15
 22 #sudo_user      = root
 23 #ask_sudo_pass = True
 24 #ask_pass      = True
 25 #transport      = smart
 26 #remote_port    = 22
 27 #module_lang    = C
 28 #module_set_locale = False
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/" term="自动化部署" label="自动化部署" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ansible/" term="ansible" label="ansible" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">ansible模块与基础命令</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/ansible%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/" />
            <id>https://latteStudio.github.io/posts/ansible%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</id>
            <updated>2021-03-09T12:32:26&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">ansible基础命令，与常用模块介绍</summary>
            
                <content type="html">&lt;h1 id=&#34;基础命令&#34;&gt;基础命令&lt;/h1&gt;
&lt;p&gt;​	常用命令有ansible、ansible-doc、ansible-playbook、ansible-vault、ansible-console、ansible-galaxy、ansible-pull&lt;/p&gt;
&lt;h2 id=&#34;ansible-doc&#34;&gt;ansible-doc&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ansible-doc -l
列出所有模块

ansible-doc ping
查看ping模块的用户
ansible-doc -s ping
查看ping模块的

[root@host2 ~]# ansible-doc -l |grep yum
yum                                                           Manages packages with the...
yum_repository                                                Add or remove YUM reposit...
[root@host2 ~]# ansible-doc -s yum

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible-galaxy&#34;&gt;ansible-galaxy&lt;/h2&gt;
&lt;p&gt;连接https://galaxy.ansible.com下载官方模版的roles&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-galaxy list
列出所有已经安装的galaxy

ansible-galaxy install geerlingguy.redis
安装特定的role

ansible-galaxy remove geerlingguy.redis
删除特定的role

[root@host2 ~]# ansible-galaxy install geerlingguy.redis
- downloading role &#39;redis&#39;, owned by geerlingguy
- downloading role from https://github.com/geerlingguy/ansible-role-redis/archive/1.6.0.tar.gz
- extracting geerlingguy.redis to /root/.ansible/roles/geerlingguy.redis
- geerlingguy.redis (1.6.0) was installed successfully

[root@host2 ~]# ansible-galaxy list
# /root/.ansible/roles
- geerlingguy.redis, 1.6.0
# /usr/share/ansible/roles
# /etc/ansible/roles
[root@host2 ~]# ansible-galaxy remove geerlingguy.redis
- successfully removed geerlingguy.redis
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible-pull&#34;&gt;ansible-pull&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ansible-pull -h

pulls playbooks from a VCS repo and executes them for the local host
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible-playbook&#34;&gt;ansible-playbook&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;支持playbook的命令
ansible-playbook hello.yaml

#示例：
[root@host2 ~]# ansible-playbook hello.yaml 

PLAY [192.168.80.102] **********************************************************************

TASK [Gathering Facts] *********************************************************************
ok: [192.168.80.102]

TASK [hello] *******************************************************************************
changed: [192.168.80.102]

PLAY RECAP *********************************************************************************
192.168.80.102             : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

[root@host2 ~]# cat hello.yaml 
# hello yaml file for test
- hosts: 192.168.80.102
  remote_user: root
  tasks:
   - name: hello 
     command: /usr/bin/wall hello
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible-vault&#34;&gt;ansible-vault&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#加密，解密 yaml文件

[root@host2 ~]# ansible-vault -h
usage: ansible-vault [-h] [--version] [-v]
                     {create,decrypt,edit,view,encrypt,encrypt_string,rekey}
                     ...

encryption/decryption utility for Ansible data files
#加密，解密hello.yaml
[root@host2 ~]# ansible-vault encrypt hello.yaml 
New Vault password: 
Confirm New Vault password: 
Encryption successful
[root@host2 ~]# cat hello.yaml 
$ANSIBLE_VAULT;1.1;AES256
34626336666535313962643166333633633238393130373036313563626263666439643930643666
3962623939393332373939396435643766613935346166340a653230333165373562333333613637
64393738396539356266613933333738353565313038333734336363326637666565393437303964
3330626562303732380a313366396461326563633736323033383534636630356465323133376361
33633964633533646262333430333030663534303133636131643539663937303566373363393930
36363362383363333361616632613264323934663530663532333465303138313361643539393332
39366430333839336662336266363864313130663062613631353565633134613430396232383266
37323737363465356633313664306165326165366533623065636131333632633335613436356131
34313334616264313265396161323137306335346437303939393261613538353564356237366231
31333635343262616262636232366435396631343033393031326631313439653461313163613132
393332363334356634666633323030383861

[root@host2 ~]# ansible-vault decrypt hello.yaml 
Vault password: 
Decryption successful
[root@host2 ~]# cat hello.yaml 
# hello yaml file for test
- hosts: 192.168.80.102
  remote_user: root
  tasks:
   - name: hello 
     command: /usr/bin/wall hello
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible-console&#34;&gt;ansible-console&lt;/h2&gt;
&lt;p&gt;2.0后新增的交互式窗口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]#  ansible-console
Welcome to the ansible console.
Type help or ? to list commands.
#分别表示为
当前执行任务的身份@主机组	当前主机数 并发数5 

#修改并发为10
root@all (2)[f:5]$ forks 10

#切换主机组为all
root@all (2)[f:10]$ cd all

#列出所有主机
root@all (2)[f:10]$ list
192.168.80.102
192.168.80.103

#查看帮助
root@all (2)[f:10]$ ?

交互式窗口，执行ansible任务，以root身份，对所有主机，执行安装httpd操作，并发为10
root@all (2)[f:10]$ yum name=httpd state=present
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible&#34;&gt;ansible&lt;/h2&gt;
&lt;p&gt;ansible通过ssh服务连接各个被管理端，&lt;strong&gt;实现配置管理、应用部署、任务执行等，因此各个被管理端应该做ansible节点的免密登陆&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible --help

-m 指定使用的模块，默认为command
--list-hosts 列出主机列表
-C ，检查，不实际执行
-u 执行远程命令的用户
-b sudo切换的用户身份
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、ansible的host-pattern&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;all表示主机清单中所有主机
ansible all -m ping
#对主机清单中所有主机用命令模块的ping测试连通性

*通配符
ansible “*” -m ping
ansible 192.168.80.* -m ping
ansible &amp;quot;*webservers&amp;quot; -m ping
#利用通配符匹配一批主机

或
ansible &amp;quot;web1:app1&amp;quot; -m ping
ansible &amp;quot;192.168.80.1:192.168.80.2&amp;quot; -m ping

与：
ansible &amp;quot;webs:&amp;amp;dbs&amp;quot; -m ping
在webs组和在dbs组的主机

非：
ansible &amp;quot;webs:!dbs&amp;quot; -m ping
在webs组，但不在dbs组的机器

正则：
ansible &amp;quot;~(web|db).*\.magedu\.com&amp;quot; -m ping

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ansible命令执行过程&#34;&gt;ansible命令执行过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;加载自己的配置文件，默认/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;li&gt;加载对应模块文件，如command&lt;/li&gt;
&lt;li&gt;通过ansible将模块生成的临时py文件，将将其传输到远程服务器的对应执行用户的目录：$HOME/.ansible/tmp/ansible-tmp-数字/xxx.py文件&lt;/li&gt;
&lt;li&gt;给文件+x执行权限&lt;/li&gt;
&lt;li&gt;执行并返回结果&lt;/li&gt;
&lt;li&gt;删除临时py文件，退出&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;执行状态&#34;&gt;执行状态&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;绿色：执行成功，不需要改变目标主机&lt;/li&gt;
&lt;li&gt;黄色：执行成功，需要改变目标主机状态&lt;/li&gt;
&lt;li&gt;红色：执行失败&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ansible命令行示例&#34;&gt;ansible命令行示例&lt;/h2&gt;
&lt;p&gt;1、对all所有主机做ping探测，以root用户身份，若以其他身份如wang，则需要各个主机上存在该用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 添加2台主机：
[root@host2 ~]# vim /etc/ansible/hosts 
[test]
192.168.80.102
192.168.80.103


[root@host2 ~]# ansible all -m ping -u root
192.168.80.102 | SUCCESS =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
    }, 
    &amp;quot;changed&amp;quot;: false, 
    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
192.168.80.103 | SUCCESS =&amp;gt; {
    &amp;quot;ansible_facts&amp;quot;: {
        &amp;quot;discovered_interpreter_python&amp;quot;: &amp;quot;/usr/bin/python&amp;quot;
    }, 
    &amp;quot;changed&amp;quot;: false, 
    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、以wang sudo到root身份，做ping检测&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ansible all -m ping -u wang -k -b

#节点上要有wang用户，且设置了密码，且设置了sudo权限，和sudo密码 -k是提示输入密码，-b是sudo，默认为root用户
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、以wang身份，连接80.102并sudo为root，执行ls命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ansible 192.168.80.102 -m command -u wang -a &amp;quot;ls /root&amp;quot; -b --become-user=root -k -K
SSH password: 
先问的是wang用户的ssh登陆密码，（不能免密是因为只做root间的信任，wang用户没做）
BECOME password[defaults to SSH password]: 
再问的是wang sudo到root用户的密码
192.168.80.102 | CHANGED | rc=0 &amp;gt;&amp;gt;
anaconda-ks.cfg
ansible-1.5.4.tar.gz

#-k是wang用户的ssh连接密码，-K是问wang用户sudo到root用户的密码，（一般一样）

#对80.102的wang用户做了信任后，-k选项即可省略
root@host2 ~]# ssh-copy-id wang@192.168.80.102

[root@host2 ~]# ansible 192.168.80.102 -m command -u wang -a &amp;quot;ls /root&amp;quot; -b --become-user=root  -K
BECOME password: 
192.168.80.102 | CHANGED | rc=0 &amp;gt;&amp;gt;
anaconda-ks.cfg
ansible-1.5.4.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;ansible常用模块&#34;&gt;ansible常用模块&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;command：在远程主机上执行linux命令，&lt;strong&gt;默认模块&lt;/strong&gt;，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible web1 -m command -a &amp;quot;service mysqld restart&amp;quot;
    
ansible web1 -m command -a &amp;quot;echo wang |passwd --stdin wang&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shell：和command类似，远程主机用shell执行命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;shell和comman模块，不具备幂等性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible web1 -m shell -a &amp;quot;ls /root&amp;quot;
    
复杂命令，一般写为脚本，分发到各个节点上，再执行，将结果拉回本地即可
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;script：远程主机上执行ansible服务器上的脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible web1 -m script -a /path/to/1.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;copy模块：将文件从ansible节点复制到其他主机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible web1 -m copy -a &amp;quot;src=/root/1.sh dest=/tmp/2.sh owner=wang mode=600 backup=yes&amp;quot;
    
若2.sh存在，则先备份，默认会覆盖
    
ansible web1 -m copy -a &amp;quot;content= &#39;hellow\n&#39; dest=/tmp/1.txt&amp;quot;
源为一段字符串
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fetch模块：从远程主机将文件拉取回本地&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible web1 -m fetch -a &amp;quot;src=/root/1.sh dest=/data/1.sh&amp;quot;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;file模块：设置文件属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible web1 -m file -a &amp;quot;path=/root/1.sh owner=wang mode=777&amp;quot;
    
ansible web1 -m file -a &amp;quot;src=/root/1.sh dest=/roto/1.sh state=link&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unarchive模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;copy=yes将ansible主机上的压缩比解压缩后传到远程主机上，默认为yes
    
copy=no将远程主机的某个压缩包解压到某路径
    
src源路径，可以是ansible主机，可以是远程 主机，远程主机时搭配copy=no
    
dest解压的目的路径
    
mode解压缩后权限
    
ansible srv -m unarchive -a &amp;quot;src=1.tar.gz dest=/var/lib/ copy=yes mode=777&amp;quot;
    
ansible srv -m unarchive -a &amp;quot;src=1.tar.gz dest=/tmp copy=no mode=0777&amp;quot;
    
ansible srv -m unarchive -a &amp;quot;src=https://www.b.com/1.tar.gz dest=/tmp copy=no mode=0777&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;archive模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m archive -a &amp;quot;path=/etc/sysconfig dest=/tmp/sysconfig.tar.gz format=gz owner =wang mode=0777&amp;quot;
    
    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hostname，管理主机名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible server1 -m hostname -a &amp;quot;name=node1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cron计划任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m cron -a &amp;quot;minute=*/5 job=&#39;/usr/sbin/ntpdate 172.16.0.1 &amp;amp;&amp;gt; /dev/null name=synctime&#39;&amp;quot;
创建任务
    
ansible all -m cron -a &amp;quot;state=absent name=synctime&amp;quot;
删除任务
    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yum等包管理模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m yum -a &#39;name=httpd state=present&#39;
    
ansible all -m yum -a &#39;name=httpd state=absent&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;service模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m service -a &#39;name=httpd state=stopped&#39;
    
ansible all  -m service -a &#39;name=httpd state=started enabled=yes&#39;
    
ansible all -m service -a &#39;name=httpd state=restarted&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;user管理用户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m user -a &#39;name=user1 comment=&amp;quot;test user&amp;quot; uid=1000 home=/app/user1 group=root&#39;
    
ansible all -m user -a &#39;name=user1 state=absent remove=yes&#39;
    
ansible all -m user -a &#39;name=user1 system=yes home=/home/user1&#39;
创建系统账户
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible all -m group -a &#39;name=group1 system=yes&#39;
    
ansible all -m group -a &#39;name=group1 state=absent&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;debug：输出自定义信息，变量值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fetch：从远端主机抓取模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cron：计划任务定义&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;system：systemd风格服务管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wait_for：用于判断某些任务执行前提的，如端口是否开始，文件是否存在等条件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get_url：下载http或ftp的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scripts：将本地的脚本，复制到远端，再执行，利用的是远端的shell环境；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;ansible -l |grep 你需要的模块
# 可根据关键词过滤需要的模块
  
ansible -s 你需要的模块
# 模块语法，支持的参数值
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/" term="自动化部署" label="自动化部署" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/ansible/" term="ansible" label="ansible" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql之sql基础与mysql对象</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E4%B9%8Bsql%E5%9F%BA%E7%A1%80%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1/" />
            <id>https://latteStudio.github.io/posts/mysql%E4%B9%8Bsql%E5%9F%BA%E7%A1%80%E4%B8%8Emysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1/</id>
            <updated>2021-03-09T12:31:41&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">sql语句与mysql常用对象</summary>
            
                <content type="html">&lt;h1 id=&#34;sql简介&#34;&gt;sql简介&lt;/h1&gt;
&lt;p&gt;​	structure query language ，结构化查询语言，sql语句由dbms中的sql解释器进行解释执行，属于应用层协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c/s架构
&lt;ul&gt;
&lt;li&gt;server，监听套接字，等待客户端请求&lt;/li&gt;
&lt;li&gt;client，
&lt;ul&gt;
&lt;li&gt;人操作接口：cli、gui&lt;/li&gt;
&lt;li&gt;编程操作接口：jdbc（java database connectivity），odbc等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql标准&#34;&gt;sql标准&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ANSI SQL(国际标准)
&lt;ul&gt;
&lt;li&gt;sql-1986&lt;/li&gt;
&lt;li&gt;sql-1989&lt;/li&gt;
&lt;li&gt;sql-1992&lt;/li&gt;
&lt;li&gt;sql-1999&lt;/li&gt;
&lt;li&gt;sql-2003&lt;/li&gt;
&lt;li&gt;sql-2008&lt;/li&gt;
&lt;li&gt;sql-2011&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;微软和sybase的T-sql&lt;/li&gt;
&lt;li&gt;Oracle的PL/sql&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关系型数据库术语&#34;&gt;关系型数据库术语：&lt;/h2&gt;
&lt;h3 id=&#34;约束&#34;&gt;约束&lt;/h3&gt;
&lt;p&gt;​	填入表格中的数据，必须要遵守的格式，规则的集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键primary key：一张表中可以唯一标识一行的一个字段或多个字段的组合，&lt;strong&gt;即该字段的值在此表中有且唯一&lt;/strong&gt;，不允许为空Not Null，即必须有值，&lt;strong&gt;一张表只能有一个主键！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;唯一键uniq key：一张表中一个字段或多个字段的组合，允许为空，即可以不填入值，该字段的值在此表中必须唯一，&lt;strong&gt;一张表可有多个唯一键&lt;/strong&gt;；&lt;strong&gt;因此主键才是能唯一代表一条数据的标识&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;检查：填入表中的数据，数据类型、占用空间大小，必须符合表字段的定义，才允许填入！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引&#34;&gt;索引&lt;/h3&gt;
&lt;p&gt;​	给表中某个字段复制一份，&lt;strong&gt;按照一定规则排序后进行存储；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	比如：&lt;strong&gt;给表的性别字段做索引，建好后利用性别查询时如男，只需检索性别为男的数据条目即可；（男女数据量相等时，减少了一半的查询量）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	比如：&lt;strong&gt;给某数字类型字段建立索引，按照大小顺序排列，建好后根据该字段查询，如socre=666，根据2分查找可以很快找到score=666的索引数据，之后根据和该索引一起存储的“指针”，由指针指向找到对应的一整条数据&lt;/strong&gt;提高了查询效率，避免了全表扫描&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;直接索引：一般是用主键做索引当作直接索引，索引的指针，直接指向对应的一条数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;间接索引：其他字段建立索引，其指针指向的是直接索引的数据项，然后再根据直接索引的指针最终找到对应的一条数据&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;数据库database&#34;&gt;数据库database&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;database，一个数据库实例，可以有多个database数据库，每个库在数据目录下都是一个文件夹；

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;表table&#34;&gt;表table&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;由行和列组成；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;视图view&#34;&gt;视图view&lt;/h3&gt;
&lt;p&gt;对实际存储的表抽离出一定的字段组成的特殊表，实际不占用存储空间，只是表数据的截取，与拼接；如可以剥离一些敏感字段，组成一个视图开放给某用户&lt;/p&gt;
&lt;h3 id=&#34;用户user&#34;&gt;用户user&lt;/h3&gt;
&lt;p&gt;可以登陆连入mysql实例的用户，分为root用户和普通用户；&lt;/p&gt;
&lt;h3 id=&#34;权限privilege&#34;&gt;权限privilege&lt;/h3&gt;
&lt;p&gt;用户对数据库对象，如：表、数据库、函数、等的权限，权限有：读、修改、执行等；&lt;/p&gt;
&lt;h3 id=&#34;存储过程procedure&#34;&gt;存储过程procedure&lt;/h3&gt;
&lt;p&gt;用户定义的一段执行逻辑，具有一定功能&lt;/p&gt;
&lt;h3 id=&#34;存储函数function&#34;&gt;存储函数function&lt;/h3&gt;
&lt;p&gt;用户定义的一段执行逻辑，和procedure的区别，可以接收参数，具有返回值&lt;/p&gt;
&lt;h3 id=&#34;触发器trigger&#34;&gt;触发器trigger&lt;/h3&gt;
&lt;p&gt;定义在某字段的触发器，如该字段的输入的值大于某值，就触发某个操作；&lt;/p&gt;
&lt;h3 id=&#34;事件调度器event-scheduler&#34;&gt;事件调度器event scheduler&lt;/h3&gt;
&lt;p&gt;​	类似于linux的任务计划&lt;/p&gt;
&lt;h1 id=&#34;sql语句分类&#34;&gt;sql语句分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;DDL：数据定义语言
&lt;ul&gt;
&lt;li&gt;创建或删除&lt;strong&gt;库、表&lt;/strong&gt;，或者改变它们的属性定义&lt;/li&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;drop&lt;/li&gt;
&lt;li&gt;alter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DML：数据管理语言
&lt;ul&gt;
&lt;li&gt;插入、修改、删除，表中某行的数据&lt;/li&gt;
&lt;li&gt;insert&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DCL：数据控制语言
&lt;ul&gt;
&lt;li&gt;权限的授予和收回；事务的提交和回滚；&lt;/li&gt;
&lt;li&gt;grant&lt;/li&gt;
&lt;li&gt;revoke&lt;/li&gt;
&lt;li&gt;commit&lt;/li&gt;
&lt;li&gt;rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DQL：数据查询语言
&lt;ul&gt;
&lt;li&gt;数据查询&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;select查询&#34;&gt;select查询&lt;/h2&gt;
&lt;h3 id=&#34;单表查询&#34;&gt;单表查询&lt;/h3&gt;
&lt;h3 id=&#34;多表查询&#34;&gt;多表查询&lt;/h3&gt;
&lt;h2 id=&#34;查看帮助&#34;&gt;查看帮助&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;help&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	help查看的时客户端sql命令行的帮助信息，非mysql的；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; help

General information about MariaDB can be found at
http://mariadb.org

List of all MySQL commands:
Note that all text commands must be first on line and end with &#39;;&#39;
?         (\?) Synonym for `help&#39;.
clear     (\c) Clear the current input statement.
connect   (\r) Reconnect to the server. Optional arguments are db and host.
delimiter (\d) Set statement delimiter.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;help可以查看的帮助&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	help后加不同的子句，可以查看对应的帮助信息，如create的建库、建表语法；show的查看已经存在的库、表的定义时属性；（字符编码、字段类型、表结构定义等）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; help create
Many help items for your request exist.
To make a more specific request, please type &#39;help &amp;lt;item&amp;gt;&#39;,
where &amp;lt;item&amp;gt; is one of the following
topics:
   CREATE DATABASE
   CREATE EVENT
   CREATE FUNCTION
   CREATE FUNCTION UDF
   CREATE INDEX
   CREATE PROCEDURE
   CREATE SERVER
   CREATE TABLE
   CREATE TABLESPACE
   CREATE TRIGGER
   CREATE USER
   CREATE VIEW
   SHOW
   SHOW CREATE DATABASE
   SHOW CREATE EVENT
   SHOW CREATE FUNCTION
   SHOW CREATE PROCEDURE
   SHOW CREATE TABLE
   SPATIAL
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;建表语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; help create table
Name: &#39;CREATE TABLE&#39;
Description:
Syntax:
CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
    (create_definition,...)
    [table_options]
    [partition_options]

Or:

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
    [(create_definition,...)]
    [table_options]
    [partition_options]
    select_statement
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;插入数据语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	每个帮助下面会给出官网更详细的语法介绍，地址；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; help insert
Name: &#39;INSERT&#39;
Description:
Syntax:
INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name [(col_name,...)]
    {VALUES | VALUE} ({expr | DEFAULT},...),(...),...
    [ ON DUPLICATE KEY UPDATE
      col_name=expr
        [, col_name=expr] ... ]

Or:

INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
    [INTO] tbl_name
    SET col_name={expr | DEFAULT}, ...
    [ ON DUPLICATE KEY UPDATE
      col_name=expr
        [, col_name=expr] ... ]
INSERT inserts new rows into an existing table. The INSERT ... VALUES
and INSERT ... SET forms of the statement insert rows based on
explicitly specified values. The INSERT ... SELECT form inserts rows
selected from another table or tables. INSERT ... SELECT is discussed
further in [HELP INSERT SELECT].

URL: https://mariadb.com/kb/en/insert/

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建数据库&#34;&gt;创建数据库&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; create database db1;
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db1                |
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
4 rows in set (0.00 sec)

MariaDB [(none)]&amp;gt; show create database db1;
+----------+----------------------------------------------------------------+
| Database | Create Database                                                |
+----------+----------------------------------------------------------------+
| db1      | CREATE DATABASE `db1` /*!40100 DEFAULT CHARACTER SET latin1 */ |
+----------+----------------------------------------------------------------+
1 row in set (0.00 sec)

MariaDB [(none)]&amp;gt; alter database db1 character set utf8;
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&amp;gt; show create database db1;
+----------+--------------------------------------------------------------+
| Database | Create Database                                              |
+----------+--------------------------------------------------------------+
| db1      | CREATE DATABASE `db1` /*!40100 DEFAULT CHARACTER SET utf8 */ |
+----------+--------------------------------------------------------------+
1 row in set (0.00 sec)
# 创建库db1，默认编码英文，修改为utf8以支持中文；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建表&#34;&gt;创建表&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 切换到db1库，创建stu1表，共有3个字段，分别为id name age，其中id为主键；
# create table tb_name(字段名 类型 修饰符,字段名 类型 修饰符,...);
# 修饰符为定义为主键，非空，无符号整数，取值范围等一系列该字段填充数据应该遵守的约束！

MariaDB [(none)]&amp;gt; use db1;
Database changed

MariaDB [db1]&amp;gt; create table stu1 (id int UNSIGNED NOT NULL PRIMARY KEY,name VARCHAR(20) NOT NULL, age tinyint UNSIGNED);
Query OK, 0 rows affected (0.02 sec)


MariaDB [db1]&amp;gt; show tables;
+---------------+
| Tables_in_db1 |
+---------------+
| stu1          |
+---------------+
1 row in set (0.00 sec)

MariaDB [db1]&amp;gt; show create table stu1;
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table | Create Table                                                                                                                                                                               |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| stu1  | CREATE TABLE `stu1` (
  `id` int(10) unsigned NOT NULL,
  `name` varchar(20) NOT NULL,
  `age` tinyint(3) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;数据类型&#34;&gt;数据类型&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/data-types/&#34;&gt;https://mariadb.com/kb/en/data-types/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据类型包含2方面定义：数据的分类是数字还是日期等，数据占用的空间大小是多少；如int（）表示存储的是整数数值，默认磁盘上占据4个字节大小；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型&lt;/li&gt;
&lt;li&gt;浮点型&lt;/li&gt;
&lt;li&gt;字符型&lt;/li&gt;
&lt;li&gt;字符串型&lt;/li&gt;
&lt;li&gt;日期&lt;/li&gt;
&lt;li&gt;用户自定义数据类型&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/sql/" term="sql" label="sql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql介绍与安装</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/" />
            <id>https://latteStudio.github.io/posts/mysql%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
            <updated>2021-03-09T12:31:18&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql介绍与安装</summary>
            
                <content type="html">&lt;h1 id=&#34;关系型数据库&#34;&gt;关系型数据库&lt;/h1&gt;
&lt;h2 id=&#34;数据存储发展过程&#34;&gt;数据存储发展过程&lt;/h2&gt;
&lt;p&gt;​	文件系统-》网状/层次型数据库-》关系型数据库-》分布式数据库/noSQL&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;文件系统是对磁盘的抽象，将磁盘的地址空间抽象给可理解，易操作的文件；关系型数据库dbms是堆文件系统的进一步抽象，进一步抽象为数据之间关系更有逻辑，更清楚的表，数据库文件都是存在于文件系统之上的文件，只是需要dbms软件才能打开识别&lt;/strong&gt;，也有直接去掉文件系统，直接在裸设备上存储数据库数据的，去掉一层更快，&lt;/p&gt;
&lt;h2 id=&#34;关系型数据库范式&#34;&gt;关系型数据库范式&lt;/h2&gt;
&lt;p&gt;​	共有6种范式：1NF、2NF、3NF、BCNF、4NF、5NF；一般关系型数据库满足3NF即可；详见wikipedia&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Category:Database_normalization&#34;&gt;https://en.wikipedia.org/wiki/Category:Database_normalization&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;mysql安装&#34;&gt;mysql安装&lt;/h1&gt;
&lt;h2 id=&#34;mysql简介&#34;&gt;mysql简介&lt;/h2&gt;
&lt;p&gt;作者：Michael Widenius&lt;/p&gt;
&lt;p&gt;相关官网：分别是mysql，mariadb，percona第三方发行版服务商&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;https://www.mysql.com/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/&#34;&gt;https://dev.mysql.com/doc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.org/&#34;&gt;https://mariadb.org/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mariadb.org/documentation/&#34;&gt;https://mariadb.org/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/&#34;&gt;https://www.percona.com/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.percona.com/doc/percona-distribution-mysql/8.0/index.html&#34;&gt;https://www.percona.com/doc/percona-distribution-mysql/8.0/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;特性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插件式存储引擎，支持多种存储引擎，常用myisam和innodb（mysql5.5.5后默认）&lt;/li&gt;
&lt;li&gt;单进程、多线程&lt;/li&gt;
&lt;li&gt;开源&lt;/li&gt;
&lt;li&gt;诸多扩展、新特性&lt;/li&gt;
&lt;li&gt;提供较多测试组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;安装方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;yum仓库安装：版本较落后，适合测试&lt;/li&gt;
&lt;li&gt;二进制安装，采用官方编译后二进制文件，简单配置即可；（类似与windows的绿色免安装软件）&lt;/li&gt;
&lt;li&gt;编译安装，从源码从头编译安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yum安装&#34;&gt;yum安装&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;安装、启动：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# yum list all |grep mariadb
Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast
mariadb-libs.x86_64                      1:5.5.56-2.el7                @anaconda
mariadb.x86_64                           1:5.5.65-1.el7                base     
mariadb-bench.x86_64                     1:5.5.65-1.el7                base     
mariadb-devel.i686                       1:5.5.65-1.el7                base     
mariadb-devel.x86_64                     1:5.5.65-1.el7                base     
mariadb-embedded.i686                    1:5.5.65-1.el7                base     
mariadb-embedded.x86_64                  1:5.5.65-1.el7                base     
mariadb-embedded-devel.i686              1:5.5.65-1.el7                base     
mariadb-embedded-devel.x86_64            1:5.5.65-1.el7                base     
mariadb-libs.i686                        1:5.5.65-1.el7                base     
mariadb-libs.x86_64                      1:5.5.65-1.el7                base     
mariadb-server.x86_64                    1:5.5.65-1.el7                base     
mariadb-test.x86_64                      1:5.5.65-1.el7                base   
# centos7采用阿里云的yum源，带的mariadb默认版本5.5，
# mariadb-server是包含服务器软件的包

# 直接安装即可，会自动安装依赖包，更新依赖包，
[root@host3 ~]# yum install -y mariadb-server

# 启动后查看进程状态，
[root@host3 ~]# systemctl start mariadb
[root@host3 ~]# systemctl status mariadb
● mariadb.service - MariaDB database server
   Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; vendor preset: disabled)
   Active: active (running) since Fri 2020-09-18 11:48:10 CST; 2s ago
  Process: 1263 ExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID (code=exited, status=0/SUCCESS)
  Process: 1179 ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n (code=exited, status=0/SUCCESS)
 Main PID: 1262 (mysqld_safe)
   CGroup: /system.slice/mariadb.service
           ├─1262 /bin/sh /usr/bin/mysqld_safe --basedir=/usr
           └─1424 /usr/libexec/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib64/mysql/plugin --log-error=/var/log/mariadb/mariadb.log --pid-file=/var/run/mariadb/m...
           
[root@host3 ~]# ss -nlt                                                                
默认3306端口

# 免密连接
[root@host3 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 2
Server version: 5.5.65-MariaDB MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.00 sec)

MariaDB [(none)]&amp;gt; 

# 启动后生成的数据文件
[root@host3 ~]# ll /var/lib/mysql/
total 37852
-rw-rw---- 1 mysql mysql    16384 Sep 18 11:48 aria_log.00000001
-rw-rw---- 1 mysql mysql       52 Sep 18 11:48 aria_log_control
-rw-rw---- 1 mysql mysql 18874368 Sep 18 11:48 ibdata1
-rw-rw---- 1 mysql mysql  5242880 Sep 18 11:48 ib_logfile0
-rw-rw---- 1 mysql mysql  5242880 Sep 18 11:48 ib_logfile1
drwx------ 2 mysql mysql     4096 Sep 18 11:48 mysql
srwxrwxrwx 1 mysql mysql        0 Sep 18 11:48 mysql.sock
drwx------ 2 mysql mysql     4096 Sep 18 11:48 performance_schema
drwx------ 2 mysql mysql        6 Sep 18 11:48 test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;安装后目录结构：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# rpm -ql mariadb-server
/etc/logrotate.d/mariadb
/etc/my.cnf.d/server.cnf
配置文件
/usr/bin/mysqld_multi
/usr/bin/mysqld_safe 启动脚本，通过该脚本调用启动主程序/usr/libexec/mysqld
/usr/bin/mysqld_safe_helper
各类程序文件
/usr/lib/systemd/system/mariadb.service
服务脚本
/usr/lib/tmpfiles.d/mariadb.conf
/usr/lib64/mysql/INFO_BIN
/usr/lib64/mysql/INFO_SRC
/usr/lib64/mysql/mysqlbug
/usr/lib64/mysql/plugin
/usr/lib64/mysql/plugin/adt_null.so
/usr/lib64/mysql/plugin/auth_0x0100.so
...
插件目录，下的各类插件，有些需要显示启用才行

/usr/libexec/mariadb-prepare-db-dir
/usr/libexec/mariadb-wait-ready
/usr/libexec/mysqld
主程序
/usr/share/man/man1/innochecksum.1.gz
/usr/share/man/man1/msql2mysql.1.gz
/usr/share/man/man1/myisam_ftdump.1.gz
...
帮助文件手册、示例sql、配置文件模版等


/var/lib/mysql
/var/log/mariadb
/var/log/mariadb/mariadb.log
/var/run/mariadb
数据目录，日志目录，pid文件目录
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;进程结构&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# pstree -p |grep mysql
           |-mysqld_safe(1262)---mysqld(1424)-+-{mysqld}(1428)
           |                                  |-{mysqld}(1429)
           |                                  |-{mysqld}(1430)
           |                                  |-{mysqld}(1431)
           |                                  |-{mysqld}(1432)
           |                                  |-{mysqld}(1433)
           |                                  |-{mysqld}(1434)
           |                                  |-{mysqld}(1435)
           |                                  |-{mysqld}(1436)
           |                                  |-{mysqld}(1437)
           |                                  |-{mysqld}(1438)
           |                                  |-{mysqld}(1439)
           |                                  |-{mysqld}(1440)
           |                                  |-{mysqld}(1441)
           |                                  |-{mysqld}(1442)
           |                                  |-{mysqld}(1443)
           |                                  |-{mysqld}(1451)
           |                                  `-{mysqld}(1452)
可以看出，由mysqld_safe脚本启动的mysqld主进程，派生多个子线程；
符合单进程，多线程特性；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二进制安装&#34;&gt;二进制安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载适合版本、适合平台的二进制软件包；&lt;/li&gt;
&lt;li&gt;解压到需要的目录，可选择做软链接，方便版本更新&lt;/li&gt;
&lt;li&gt;创建mysql用户、数据目录，改数据目录属主&lt;/li&gt;
&lt;li&gt;准备配置文件、服务脚本、&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;/li&gt;
&lt;li&gt;数据库初始化脚本，初始化数据目录&lt;/li&gt;
&lt;li&gt;测试启停数据库&lt;/li&gt;
&lt;li&gt;安装后配置操作&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;1、下载适合版本、适合平台的二进制软件包；以mariadb-10.2.25为例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# ll
total 517536
-rw-r--r-- 1 root root 457955398 Oct 29  2019 mariadb-10.2.25-linux-x86_64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、解压到需要的目录，可选择做软链接，方便版本更新&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# tar -xf mariadb-10.2.25-linux-x86_64.tar.gz -C /usr/local/

# 注意，软连接名字一定要是/usr/local/mysql，不能是/usr/local/mariadb，
# 否则，启动时，官方提供的服务脚本默认去找/usr/local/mysql的文件，其他的路径，会报错找不到！
[root@host2 mariadb]# ln -sv /usr/local/mariadb-10.2.25-linux-x86_64/ /usr/local/mysql
‘/usr/local/mysql’ -&amp;gt; ‘/usr/local/mariadb-10.2.25-linux-x86_64/’
[root@host2 mariadb]# ll /usr/local/
total 0
drwxr-xr-x.  2 root root    6 Apr 11  2018 bin
drwxr-xr-x.  2 root root    6 Apr 11  2018 etc
drwxr-xr-x.  2 root root    6 Apr 11  2018 games
drwxr-xr-x.  2 root root    6 Apr 11  2018 include
drwxr-xr-x.  2 root root    6 Apr 11  2018 lib
drwxr-xr-x.  2 root root    6 Apr 11  2018 lib64
drwxr-xr-x.  2 root root    6 Apr 11  2018 libexec
drwxrwxr-x  12 root mysql 282 Jun 15  2019 mariadb-10.2.25-linux-x86_64
lrwxrwxrwx   1 root root   40 Sep 18 14:49 mysql -&amp;gt; /usr/local/mariadb-10.2.25-linux-x86_64/
drwxr-xr-x.  2 root root    6 Apr 11  2018 sbin
drwxr-xr-x.  5 root root   49 Aug  8 11:58 share
drwxr-xr-x.  2 root root   79 Sep 18 13:13 src

[root@host2 mariadb]# chown -R root:mysql /usr/local/mariadb-10.2.25-linux-x86_64/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、创建mysql用户、数据目录，改数据目录属主&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# mkdir /data/mysql -pv
mkdir: created directory ‘/data’
mkdir: created directory ‘/data/mysql’
[root@host2 src]# groupadd mysql -g 306
[root@host2 src]# useradd -g mysql -u 306 mysql
[root@host2 src]# id mysql
uid=306(mysql) gid=306(mysql) groups=306(mysql)
[root@host2 src]# chown -R mysql.mysql /data/mysql/

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、准备配置文件、服务脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mysql读取配置文件顺序第一位是/etc/my.cnf，属于mariadb-libs包，二进制安装时，默认配置文件不适合，可选择官方提供的配置文件，并做修改；

[root@host2 mariadb]# rpm -qf /etc/my.cnf
mariadb-libs-5.5.56-2.el7.x86_64
[root@host2 mariadb]# cp /etc/my.cnf{,.bak}
[root@host2 mariadb]# cp support-files/my-medium.cnf /etc/my.cnf
cp: overwrite ‘/etc/my.cnf’? y
# 修改配置文件，
[mysqld]
port            = 3306
socket          = /tmp/mysql.sock
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M
在mysqld配置段，加入如下3项，datadir根据情况修改，innodb存储引擎性能相关；禁止反解客户端名字，因为没必要
datadir=/data/mysql
innodb_file_per_table=on
skip_name_resolve=on


# 解压后目录的support-files目录下，有服务脚本，sysV风格，centos7可用
[root@host2 mariadb]# pwd
/usr/local/mariadb
[root@host2 mariadb]# ls support-files/
binary-configure  my-innodb-heavy-4G.cnf  my-small.cnf         mysql.server  wsrep_notify
magic             my-large.cnf            mysqld_multi.server  policy
my-huge.cnf       my-medium.cnf           mysql-log-rotate     wsrep.cnf

[root@host2 mariadb]# cp support-files/mysql.server /etc/init.d/mysqld
[root@host2 mariadb]# chkconfig --add mysqld
[root@host2 mariadb]# chkconfig mysqld on
[root@host2 mariadb]# chkconfig --list

mysqld         	0:off	1:off	2:on	3:on	4:on	5:on	6:off
netconsole     	0:off	1:off	2:off	3:off	4:off	5:off	6:off
network        	0:off	1:off	2:on	3:on	4:on	5:on	6:off

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、配置环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 mysql]# cat /etc/profile.d/mysql.sh
export PATH=/usr/local/mysql/bin:$PATH

source /etc/profile.d/mysql.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6、数据库初始化脚本，初始化数据目录&lt;/p&gt;
&lt;p&gt;注：不同版本，数据目录初始化，和安全加固脚本，步骤和实现脚本会有变化，以官网为准；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 mariadb]# ./scripts/mysql_install_db --datadir=/data/mysql/ --user=mysql
Installing MariaDB/MySQL system tables in &#39;/data/mysql/&#39; ...
./bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory

[root@host2 mariadb]# yum install -y libaio
# 初始化时，缺失libaio.so.1，安装对应的包即可

[root@host2 mariadb]# ./scripts/mysql_install_db --datadir=/data/mysql/ --user=mysql
# 提示的后续操作：
# 准备服务脚本
# 改root密码
# 安全加固脚本

To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system


PLEASE REMEMBER TO SET A PASSWORD FOR THE MariaDB root USER !
To do so, start the server, then issue the following commands:

&#39;./bin/mysqladmin&#39; -u root password &#39;new-password&#39;
&#39;./bin/mysqladmin&#39; -u root -h host2.b.com password &#39;new-password&#39;

Alternatively you can run:
&#39;./bin/mysql_secure_installation&#39;

# 再次安装即可，并在数据目录，生成如下数据文件；
[root@host2 mariadb]# ll /data/mysql/
total 110660
-rw-rw---- 1 mysql mysql    16384 Sep 18 14:42 aria_log.00000001
-rw-rw---- 1 mysql mysql       52 Sep 18 14:42 aria_log_control
-rw-rw---- 1 mysql mysql      938 Sep 18 14:42 ib_buffer_pool
-rw-rw---- 1 mysql mysql 12582912 Sep 18 14:42 ibdata1
-rw-rw---- 1 mysql mysql 50331648 Sep 18 14:42 ib_logfile0
-rw-rw---- 1 mysql mysql 50331648 Sep 18 14:42 ib_logfile1
drwx------ 2 mysql mysql     4096 Sep 18 14:42 mysql
-rw-rw---- 1 mysql mysql    29277 Sep 18 14:42 mysql-bin.000001
-rw-rw---- 1 mysql mysql       19 Sep 18 14:42 mysql-bin.index
-rw-rw---- 1 mysql mysql        7 Sep 18 14:42 mysql-bin.state
drwx------ 2 mysql mysql       20 Sep 18 14:42 performance_schema
drwx------ 2 mysql mysql       20 Sep 18 14:42 test

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7、测试启停数据库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 mysql]# service mysqld status
 ERROR! MariaDB is not running
[root@host2 mysql]# service mysqld start
Starting mysqld (via systemctl):                           [  OK  ]
[root@host2 mysql]# service mysqld status
 SUCCESS! MariaDB running (5561)
[root@host2 mysql]# service mysqld restart
Restarting mysqld (via systemctl):                         [  OK  ]
[root@host2 mysql]# service mysqld status
 SUCCESS! MariaDB running (6050)


[root@host2 mysql]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      128                                                                *:22                                                                             *:*                  
LISTEN     0      100                                                        127.0.0.1:25                                                                             *:*                  
LISTEN     0      80                                                                :::3306                                                                          :::*           

# 查看进程信息，利用mysqld_safe脚本启动mysqld二进制主程序，pid文件，不指定时，默认在数据目录下，以主机名加.pid后缀，为文件名，最好指定；

[root@host2 mysql]# ps aux
root       4461  0.0  0.1 115432  1724 ?        S    14:52   0:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/host2.b.com.pid
mysql      4585  0.8  4.8 1598104 48460 ?       Sl   14:52   0:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --us
root       4621  0.0  0.1 155324  1868 pts/1    R+   14:52   0:00 ps aux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8、安装后配置操作，安全加固脚本！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 mysql]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 10
Server version: 10.2.25-MariaDB-log MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.00 sec)
# 默认本机，免密直接连入，因此需执行自带的安全加固脚本；

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装后配置&#34;&gt;安装后配置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;执行安全增强脚本：
&lt;ol&gt;
&lt;li&gt;设置数据库root用户口令&lt;/li&gt;
&lt;li&gt;禁止root远程登陆&lt;/li&gt;
&lt;li&gt;删除anonymous账户&lt;/li&gt;
&lt;li&gt;删除test数据库&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;
[root@host2 mysql]# mysql_secure_installation 
# 按照提示进行即可；
# 分别是：
1. 设置数据库root用户口令
2. 禁止root远程登陆
3. 删除anonymous账户
4. 删除test数据库


[root@host2 mysql]# mysql -uroot -p
Enter password: 
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 23
Server version: 10.2.25-MariaDB-log MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.00 sec)
# 此时需要口令才能登陆
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安装编译工具、依赖包&lt;/li&gt;
&lt;li&gt;下载需要版本的源码包，解压&lt;/li&gt;
&lt;li&gt;创建用户、数据目录，改数据目录属主&lt;/li&gt;
&lt;li&gt;cmake编译，添加自己需要的编译选项&lt;/li&gt;
&lt;li&gt;make &amp;amp;&amp;amp; make install&lt;/li&gt;
&lt;li&gt;执行数据库数据文件初始化脚本&lt;/li&gt;
&lt;li&gt;准备配置文件、服务脚本&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;/li&gt;
&lt;li&gt;测试启停数据库进程&lt;/li&gt;
&lt;li&gt;安装后配置&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;1、安装编译工具、依赖包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 src]#  yum install bison bison-devel  zlib-devel libcurl-devel libarchive-devel  boostdevel  gcc  gcc-c++  cmake ncurses-devel gnutls-devel libxml2-devel openssldevel libevent-devel libaio-devel

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、下载需要版本的源码包，解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 src]# tar -xf mariadb-10.2.25.tar.gz
[root@host3 src]# ll
total 87692
drwxrwxr-x 33 1001 1001     4096 Jun 15  2019 mariadb-10.2.25
-rw-r--r--  1 root root 71997847 Sep 21 16:00 mariadb-10.2.25.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、创建用户、数据目录，改数据目录属主&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 src]# mkdir /data/mysql
[root@host3 src]# id mysql
uid=27(mysql) gid=27(mysql) groups=27(mysql)
[root@host3 src]# chown -R mysql.mysql /data/mysql/
[root@host3 src]# ll /data/mysql/ -d
drwxr-xr-x 2 mysql mysql 6 Sep 21 16:04 /data/mysql/
# 本机之前安装后mariadb，所以存在安装过程中脚本创建好的mysql用户
# 正常情况下，仍需手动创建mysql用户，如下：

[root@host2 src]# groupadd mysql -g 306
[root@host2 src]# useradd -g mysql -u 306 mysql
[root@host2 src]# id mysql
uid=306(mysql) gid=306(mysql) groups=306(mysql)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、cmake编译，添加自己需要的编译选项&lt;/p&gt;
&lt;p&gt;​	利用cmake工具指定编译选项，会生成一系列文件和目录；编译选项参数官网：https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmake . \
-DCMAKE_INSTALL_PREFIX=/app/mysql \
-DMYSQL_DATADIR=/data/mysql/ \
-DSYSCONFDIR=/etc/ \
-DMYSQL_USER=mysql \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DWITH_ARCHIVE_STORAGE_ENGINE=1 \
-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
-DWITH_PARTITION_STORAGE_ENGINE=1 \
-DWITHOUT_MROONGA_STORAGE_ENGINE=1 \
-DWITH_DEBUG=0 \
-DWITH_READLINE=1 \
-DWITH_SSL=system \
-DWITH_ZLIB=system \
-DWITH_LIBWRAP=0 \
-DENABLED_LOCAL_INFILE=1 \
-DMYSQL_UNIX_ADDR=/data/mysql/mysql.sock \
-DDEFAULT_CHARSET=utf8 \
-DDEFAULT_COLLATION=utf8_general_ci
# 指定了：安装目录、配置文件目录、进程用户、启用ssl，zlib、编码utf8、unix套接字文件等信息；

-- Looking for event.h - found
-- Configuring done
-- Generating done
-- Build files have been written to: /usr/local/src/mariadb-10.2.25
[root@host3 mariadb-10.2.25]# echo $?
0
# 过程中未报错！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5、make &amp;amp;&amp;amp; make install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 mariadb-10.2.25]# make &amp;amp;&amp;amp; make install
# 时间较长，根据性能和分配的cpu数量而定；

# 安装后，程序目录文件如下，数据目录仍为空，需要初始化；
[root@host3 mariadb-10.2.25]# ll /app/mysql/
total 176
drwxr-xr-x  2 root root  4096 Sep 21 16:58 bin
-rw-r--r--  1 root root 17987 Jun 15  2019 COPYING
-rw-r--r--  1 root root  2354 Jun 15  2019 CREDITS
drwxr-xr-x  3 root root    18 Sep 21 16:58 data
drwxr-xr-x  2 root root    81 Sep 21 16:58 docs
-rw-r--r--  1 root root  8245 Jun 15  2019 EXCEPTIONS-CLIENT
drwxr-xr-x  3 root root    19 Sep 21 16:58 include
-rw-r--r--  1 root root  8694 Jun 15  2019 INSTALL-BINARY
drwxr-xr-x  4 root root   235 Sep 21 16:58 lib
drwxr-xr-x  4 root root    30 Sep 21 16:58 man
drwxrwxr-x 11 root root  4096 Sep 21 16:58 mysql-test
-rw-r--r--  1 root root  2843 Jun 15  2019 README.md
-rw-r--r--  1 root root 19477 Jun 15  2019 README-wsrep
drwxr-xr-x  2 root root    30 Sep 21 16:58 scripts
drwxr-xr-x 29 root root  4096 Sep 21 16:58 share
drwxr-xr-x  4 root root  4096 Sep 21 16:58 sql-bench
drwxr-xr-x  3 root root   275 Sep 21 16:58 support-files
-rw-r--r--  1 root root 86263 Jun 15  2019 THIRDPARTY

[root@host3 mariadb-10.2.25]# ll /data/mysql/
total 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6、执行数据库数据文件初始化脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 mariadb-10.2.25]# ll scripts/mysql_install_db
-rwxrwxr-x 1 root root 19257 Sep 21 16:13 scripts/mysql_install_db
# 利用自带的数据目录初始化脚本；

[root@host3 mariadb-10.2.25]# mysql_install_db --datadir=/data/mysql/ --user=mysql


# 遇到的错误；
# 参数写错，reslove改为resolve，修改后，删除生成的一半的数据目录文件，再次执行脚本即可；
[root@host3 mariadb-10.2.25]# mysql_install_db --datadir=/data/mysql/ --user=mysql
Installing MariaDB/MySQL system tables in &#39;/data/mysql/&#39; ...
200921 17:02:39 [Warning] &#39;THREAD_CONCURRENCY&#39; is deprecated and will be removed in a future release.
200921 17:02:39 [Note] /usr/libexec/mysqld (mysqld 5.5.65-MariaDB) starting as process 29524 ...
200921 17:02:39 [ERROR] /usr/libexec/mysqld: unknown variable &#39;skip_name_reslove=on&#39;

[root@host3 mariadb-10.2.25]# rm  -rf /data/mysql/*


# 初始化后的目录
[root@host3 mariadb-10.2.25]# ll /data/mysql/
total 1076
-rw-rw---- 1 mysql mysql   16384 Sep 21 17:03 aria_log.00000001
-rw-rw---- 1 mysql mysql      52 Sep 21 17:03 aria_log_control
drwx------ 2 mysql root     4096 Sep 21 17:03 mysql
-rw-rw---- 1 mysql mysql   28409 Sep 21 17:03 mysql-bin.000001
-rw-rw---- 1 mysql mysql 1038814 Sep 21 17:03 mysql-bin.000002
-rw-rw---- 1 mysql mysql      38 Sep 21 17:03 mysql-bin.index
drwx------ 2 mysql mysql    4096 Sep 21 17:03 performance_schema
drwx------ 2 mysql root        6 Sep 21 17:03 test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7、准备配置文件、服务脚本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 源码包提供的配置文件，复制到对应目录，覆盖掉mariadb-libs包里自带的配置文件，并适当修改；
[root@host3 mariadb-10.2.25]# cp support-files/my-large.cnf /etc/my.cnf
cp: overwrite ‘/etc/my.cnf’? y
[root@host3 mariadb-10.2.25]# vim /etc/my.cnf
...
[mysqld]
port            = 3306
socket          = /data/mysql/mysql.sock
# 加入下2行；
datadir=/data/mysql
skip_name_reslove=1



# 将源码包提供的服务脚本，复制到对应目录，并添加为开机启动
[root@host3 mariadb-10.2.25]# cp support-files/mysql.server /etc/init.d/mysqld
[root@host3 mariadb-10.2.25]# chkconfig --add mysqld 
[root@host3 mariadb-10.2.25]# chkconfig mysqld on
[root@host3 mariadb-10.2.25]# chmod +x /etc/init.d/mysqld # 注意执行权限；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8、配置环境变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 mariadb-10.2.25]# vim /etc/profile.d/mysql.sh
[root@host3 mariadb-10.2.25]# source /etc/profile.d/mysql.sh 
[root@host3 mariadb-10.2.25]# cat !$
cat /etc/profile.d/mysql.sh
export PATH=/app/mysql/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9、测试启停数据库进程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 mariadb-10.2.25]# service mysqld status
 ERROR! MariaDB is not running
[root@host3 mariadb-10.2.25]# service mysqld start
Reloading systemd:                                         [  OK  ]
Starting mysqld (via systemctl):  ^[[A^[[A                 [  OK  ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;10、安装后配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 mariadb-10.2.25]# ll scripts/mysql_secure_installation
-rwxrwxr-x 1 root root 12539 Sep 21 16:13 scripts/mysql_secure_installation
# 利用自带的安全加固脚本；

[root@host3 mariadb-10.2.25]# /app/mysql/bin/mysql_secure_installation 
# 根据提示执行即可；

# 问题：
# 采用的sock文件路径不对，which发现默认的路径是yum安装mariadb的脚本路径，和编译安装的路径不同
# 实验机器，之前用yum安装了mariadb-server包；
# 用绝对路径即可解决
# 干净机器，没有用yum安装过mariadb的机器不会出现；
[root@host3 mariadb-10.2.25]# mysql_secure_installation 
Enter current password for root (enter for none): 
ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39; (2)

[root@host3 mariadb-10.2.25]# which mysql_secure_installation
/usr/bin/mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mariadb&#34;&gt;mariadb&lt;/h2&gt;
&lt;p&gt;​	和mysql同一个作者，mysql归属oracle后的另写的开源数据库管理软件DBMS，和mysql基本兼容；&lt;/p&gt;
&lt;h3 id=&#34;mariadb与mysql版本演变&#34;&gt;mariadb与mysql版本演变&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mysql：
&lt;ul&gt;
&lt;li&gt;5.1-》5.5-》5.6-》5.7-》8.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mariadb：
&lt;ul&gt;
&lt;li&gt;5.5-》10.0-》10.1-》10.2-》10.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mysql安装脚本&#34;&gt;mysql安装脚本&lt;/h1&gt;
&lt;p&gt;​	根据如下步骤，将二进制安装mysql的步骤，写到脚本里即可；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解压二进制包到指定目录；&lt;/li&gt;
&lt;li&gt;做解压后程序目录软链接；改目录属主，属组为root.mysql&lt;/li&gt;
&lt;li&gt;配置环境变量，并source；&lt;/li&gt;
&lt;li&gt;复制服务脚本到指定目录；&lt;/li&gt;
&lt;li&gt;准备好的配置文件my.cnf复制到指定目录；&lt;/li&gt;
&lt;li&gt;创建mysql用户，&lt;/li&gt;
&lt;li&gt;创建数据目录&lt;/li&gt;
&lt;li&gt;改数据目录属主为mysql&lt;/li&gt;
&lt;li&gt;数据目录初始化，mysql_install_db或mysqld --initiale （mysql5.7）（不同发行版，或不同版本不同）&lt;/li&gt;
&lt;li&gt;启动数据库实例&lt;/li&gt;
&lt;li&gt;安全加固脚本my_secure_installtion&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql备份还原</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/" />
            <id>https://latteStudio.github.io/posts/mysql%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</id>
            <updated>2021-03-09T12:30:39&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql备份还原实验，</summary>
            
                <content type="html">&lt;h1 id=&#34;为什么备份&#34;&gt;为什么备份&lt;/h1&gt;
&lt;h2 id=&#34;why&#34;&gt;why&lt;/h2&gt;
&lt;p&gt;为了应对灾难恢复，&lt;strong&gt;人工一定会出错，软硬件一定会故障&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬件如磁盘故障&lt;/li&gt;
&lt;li&gt;软件崩溃&lt;/li&gt;
&lt;li&gt;自然灾害&lt;/li&gt;
&lt;li&gt;黑客攻击&lt;/li&gt;
&lt;li&gt;管理员误操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;要点&#34;&gt;要点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;考虑成本，&lt;/li&gt;
&lt;li&gt;业务允许丢失多少数据&lt;/li&gt;
&lt;li&gt;恢复数据需要多久完成&lt;/li&gt;
&lt;li&gt;要做还原测试&lt;/li&gt;
&lt;li&gt;定期还原演练&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;备份分类&#34;&gt;备份分类&lt;/h2&gt;
&lt;p&gt;按照对业务影响分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;热备：备份过程中，可读可写，业务无感知，正常运行&lt;/li&gt;
&lt;li&gt;温备：备份中，可读，不可写，业务写操作阻塞&lt;/li&gt;
&lt;li&gt;冷备：数据库停机，将磁盘数据全部copy一份，业务会停机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照数据完整性分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全备份：假设周一库有1w数据，对整库做完全的数据镜像，即完全备份；&lt;/li&gt;
&lt;li&gt;差异备份：之后每天增加100数据，每天的零点，备份和周一全备相比增加的部分，即周二备份100，周三备份200，周四备份300...&lt;strong&gt;还原简单，全备+最近的差异备份+现在点的binlog即可恢复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;增量备份：之后每天增加100数据，每天的零点，备份和前一天相比增加的部分，即周三，周四，都只需备份100数据；&lt;strong&gt;还原复杂，全备+每次的增量备份依次恢复+现在点的binglog才可恢复，中间的有一份增量备份损坏即无法恢复！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200924171133428.png&#34; alt=&#34;image-20200924171133428&#34;&gt;&lt;/p&gt;
&lt;p&gt;按照数据层次分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理备份；直接导致磁盘上的二进制数据，速度快，和存储引擎有关，占用一倍存储空间&lt;/li&gt;
&lt;li&gt;逻辑备份：导出数据相关的sql，如mysqldump导出的就是各种sql语句，恢复时，就是把sql重新执行一遍，和存储引擎无关，甚至是语法兼容的其他数据库，都可以用此种形式做迁移恢复；备份的是文本的sql语句，占用空间较小&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;备份什么&#34;&gt;备份什么&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数据，毫无疑问&lt;/li&gt;
&lt;li&gt;日志，binlog，事务日志redo，undo，日志可以重现或回滚数据库的状态，&lt;/li&gt;
&lt;li&gt;配置文件，服务器的配置文件，如/etc/my.cnf&lt;/li&gt;
&lt;li&gt;程序，procedure，function，trigger，event scheduler&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;备份工具&#34;&gt;备份工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cp，tar等命令行，用于物理文件的备份；只适合冷备；&lt;/li&gt;
&lt;li&gt;lvm的快照，先加锁，然后瞬间快照，后解锁，由于速度快相当于热备，&lt;strong&gt;本质借助了支持快照的文件系统进行备份&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;mysqldump：逻辑备份，适合所有存储引擎，结合innodb引擎实现热备，再结合binlog可以做主从复制；可以全备，可以对某库某表做部分备份；&lt;/li&gt;
&lt;li&gt;xtrabackup：percona提供的对innodb做热备的工具，&lt;strong&gt;物理备份，速度快，支持全备，增量备份&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;mariadb backup：mariadb 10.1.26后集成，基于xtrabackup&lt;/li&gt;
&lt;li&gt;mysqlbackup：热备，mysql 企业版组件&lt;/li&gt;
&lt;li&gt;mysqlhotcopy：perl实现，使用于myisam，使用lock tables，flush tables，最后cp或scp实现备份，几乎算是冷备了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;实验&#34;&gt;实验&lt;/h1&gt;
&lt;h2 id=&#34;基于lvm的备份&#34;&gt;基于lvm的备份&lt;/h2&gt;
&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;​	借助具有快照功能的文件系统如lvm，zfs实现备份，快照速度极快，原理就是数据的多副本，快照就相当于给快照一刻的数据集合做了个规定，&lt;strong&gt;后续数据修改都是将对应数据复制一份再做修改，被修改的数据都存在多副本，没被修改的数据只有一份，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;快照后，对快照复制一份，就可以删除快照了，此时数据就不会有多副本了&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;备份&#34;&gt;备份：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;添加新磁盘，并安装lvm2工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建pv，vg，lv，并将某lv做mysql的数据目录，（binlog应该单独存放）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化数据库目录，导入一批实验数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始备份：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;连入mysql实例，加全局读锁；&lt;/li&gt;
&lt;li&gt;滚动日志，生成新的日志文件，并记录此刻日志位置；&lt;/li&gt;
&lt;li&gt;shell命令行中做lv的快照；&lt;/li&gt;
&lt;li&gt;在mysql命令行，取消全局读锁&lt;/li&gt;
&lt;li&gt;之后数据库正常读写，&lt;strong&gt;数据量较大时，加全局读锁的时间可能较长，全局读锁期间数据库只能读不能写，因此数据时完整且一致，无更改的，快照几乎瞬间完成&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;挂载lv的快照卷到某目录，&lt;/li&gt;
&lt;li&gt;将目录下所有文件拷贝到备份存储目录，（可远程，可本地）&lt;/li&gt;
&lt;li&gt;取消快照卷挂载，删除快照卷，完成备份；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加新磁盘，并安装lvm2工具&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# yum install -y lvm2
安装lvm管理工具
   
#添加新磁盘，重新扫描总线，不重启实现识别新磁盘
[root@host2 ~]# for i in /sys/class/scsi_host/host*/scan;do echo &amp;quot;- - -&amp;quot; &amp;gt;$i;done
[root@host2 ~]# fdisk -l
...
Disk /dev/sdb: 21.5 GB, 21474836480 bytes, 41943040 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建pv，vg，lv，并将某lv做mysql的数据目录，（binlog应该单独存放）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   
# 用新磁盘，创建pv，vg，lv
root@host2 ~]# pvcreate /dev/sdb 
  Physical volume &amp;quot;/dev/sdb&amp;quot; successfully created.
[root@host2 ~]# vgcreate mysql_vg /dev/sdb 
  Volume group &amp;quot;mysql_vg&amp;quot; successfully created
   
# 创建了名为mysqldata的lv，将要挂载到mysql的数据目录下；
[root@host2 ~]# lvcreate -n mysqldata -L 3G mysql_vg
  Logical volume &amp;quot;mysqldata&amp;quot; created.
[root@host2 ~]# lvdisplay 
  --- Logical volume ---
  LV Path                /dev/mysql_vg/mysqldata
  LV Name                mysqldata
  VG Name                mysql_vg
  LV UUID                7YQ4T7-JQWz-06Li-L2sC-UPzc-gONk-keJW1J
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化数据库目录，导入一批实验数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 格式化lv，找出uuid，写入fstab文件
   
[root@host2 ~]# mkfs.ext4 /dev/vg1/mysqldata 
[root@host2 ~]# blkid /dev/vg1/mysqldata 
/dev/vg1/mysqldata: UUID=&amp;quot;c95a64d3-0bff-4a1d-a81b-5eb0f692c831&amp;quot; TYPE=&amp;quot;ext4&amp;quot; 
   
   
# 挂载
   
[root@host2 ~]# cat /etc/fstab 
UUID=&amp;quot;c95a64d3-0bff-4a1d-a81b-5eb0f692c831&amp;quot; /data/mysql ext4 defaults 0 0
[root@host2 mariadb-10.2.25-linux-x86_64]# mount -a
[root@host2 ~]# df -h
/dev/mapper/vg1-mysqldata  2.9G  9.0M  2.8G   1% /data/mysql
   
# 重新初始化数据目录
./scripts/mysql_install_db --datadir=/data/mysql/ --user=mysql
   
# 导入一个库
[root@host2 ~]# mysql &amp;lt; hellodb_innodb.sql 
[root@host2 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始备份：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;1. 连入mysql实例，加全局读锁；
MariaDB [(none)]&amp;gt; flush tables with read lock;
Query OK, 0 rows affected (0.00 sec
      
2. 滚动日志，生成新的日志文件，并记录此刻日志位置；
MariaDB [(none)]&amp;gt; flush logs;
Query OK, 0 rows affected (0.00 sec)
      
MariaDB [(none)]&amp;gt; show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000003 |      385 |              |                  |
+------------------+----------+--------------+------------------+
[root@host2 ~]# mysql -e &amp;quot;show master status&amp;quot; &amp;gt; binlog-position.txt
[root@host2 ~]# cat binlog-position.txt 
File	Position	Binlog_Do_DB	Binlog_Ignore_DB
mysql-bin.000003	385	
      
3. shell命令行中做lv的快照；此时生成了一个快照卷
[root@host2 ~]# lvcreate --snapshot /dev/vg1/mysqldata -n mysqlback --size 1G --permission r  Logical volume &amp;quot;mysqlback&amp;quot; created.
      
[root@host2 ~]# ll /dev/vg1/mysql*
lrwxrwxrwx 1 root root 7 Sep 27 11:10 /dev/vg1/mysqlback -&amp;gt; ../dm-3
lrwxrwxrwx 1 root root 7 Sep 27 11:10 /dev/vg1/mysqldata -&amp;gt; ../dm-0
      
4. 在mysql命令行，取消全局读锁，
创建一个库，模拟快照后数据变更；
      
MariaDB [(none)]&amp;gt; unlock tables;
Query OK, 0 rows affected (0.01 sec)
      
MariaDB [(none)]&amp;gt; create database db1;
Query OK, 1 row affected (0.00 sec)
      
      
5. 之后数据库正常读写，**数据量较大时，加全局读锁的时间可能较长，全局读锁期间数据库只能读不能写，因此数据时完整且一致，无更改的，快照几乎瞬间完成**
      
6. 挂载lv的快照卷到某目录，
[root@host2 ~]# mkdir /tmp1
[root@host2 ~]# mount /dev/vg1/mysqlback /tmp1/
mount: /dev/mapper/vg1-mysqlback is write-protected, mounting read-only
[root@host2 ~]# ll /tmp1/
total 122980
-rw-rw---- 1 mysql mysql    16384 Sep 27 10:41 aria_log.00000001
-rw-rw---- 1 mysql mysql       52 Sep 27 10:41 aria_log_control
drwx------ 2 mysql mysql     4096 Sep 27 11:01 hellodb
-rw-rw---- 1 mysql mysql     2543 Sep 27 11:01 host2.b.com.err
-rw-rw---- 1 mysql mysql        5 Sep 27 11:01 host2.b.com.pid
-rw-rw---- 1 mysql mysql      938 Sep 27 10:41 ib_buffer_pool
-rw-rw---- 1 mysql mysql 12582912 Sep 27 11:01 ibdata1
-rw-rw---- 1 mysql mysql 50331648 Sep 27 11:01 ib_logfile0
-rw-rw---- 1 mysql mysql 50331648 Sep 27 10:41 ib_logfile1
-rw-rw---- 1 mysql mysql 12582912 Sep 27 11:01 ibtmp1
-rw-rw---- 1 mysql mysql        0 Sep 27 11:01 multi-master.info
drwx------ 2 mysql mysql     4096 Sep 27 10:41 mysql
-rw-rw---- 1 mysql mysql    29277 Sep 27 10:41 mysql-bin.000001
-rw-rw---- 1 mysql mysql     9007 Sep 27 11:08 mysql-bin.000002
-rw-rw---- 1 mysql mysql      385 Sep 27 11:08 mysql-bin.000003
-rw-rw---- 1 mysql mysql       57 Sep 27 11:08 mysql-bin.index
drwx------ 2 mysql mysql     4096 Sep 27 10:41 performance_schema
drwx------ 2 mysql mysql     4096 Sep 27 10:41 test
      
7. 将目录下所有文件拷贝到备份存储目录，（可远程，可本地）
cp 的-a选项保证文件的权限等属性信息在复制中保持完全一致；
      
[root@host2 ~]# mkdir /archdir
[root@host2 ~]# cp -ar /tmp1/* /archdir/
[root@host2 ~]# ll /archdir/
total 122968
-rw-rw---- 1 mysql mysql    16384 Sep 27 10:41 aria_log.00000001
-rw-rw---- 1 mysql mysql       52 Sep 27 10:41 aria_log_control
drwx------ 2 mysql mysql      272 Sep 27 11:01 hellodb
-rw-rw---- 1 mysql mysql     2543 Sep 27 11:01 host2.b.com.err
-rw-rw---- 1 mysql mysql        5 Sep 27 11:01 host2.b.com.pid
-rw-rw---- 1 mysql mysql      938 Sep 27 10:41 ib_buffer_pool
-rw-rw---- 1 mysql mysql 12582912 Sep 27 11:01 ibdata1
-rw-rw---- 1 mysql mysql 50331648 Sep 27 11:01 ib_logfile0
-rw-rw---- 1 mysql mysql 50331648 Sep 27 10:41 ib_logfile1
-rw-rw---- 1 mysql mysql 12582912 Sep 27 11:01 ibtmp1
-rw-rw---- 1 mysql mysql        0 Sep 27 11:01 multi-master.info
drwx------ 2 mysql mysql     4096 Sep 27 10:41 mysql
-rw-rw---- 1 mysql mysql    29277 Sep 27 10:41 mysql-bin.000001
-rw-rw---- 1 mysql mysql     9007 Sep 27 11:08 mysql-bin.000002
-rw-rw---- 1 mysql mysql      385 Sep 27 11:08 mysql-bin.000003
-rw-rw---- 1 mysql mysql       57 Sep 27 11:08 mysql-bin.index
drwx------ 2 mysql mysql       20 Sep 27 10:41 performance_schema
drwx------ 2 mysql mysql       20 Sep 27 10:41 test
      
      
8. 取消快照卷挂载，删除快照卷，完成备份；
[root@host2 ~]# umount /tmp1/
[root@host2 ~]# lvremove /dev/vg1/mysqlback 
Do you really want to remove active logical volume vg1/mysqlback? [y/n]: y
  Logical volume &amp;quot;mysqlback&amp;quot; successfully removed
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;恢复&#34;&gt;恢复：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;删除所有数据目录下文件，停止mysql进程，模拟数据损坏；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将所有备份数据文件拷贝回数据目录，注意权限一致；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动mysql进程，检查数据，此时已经恢复到快照时状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重放备份时记录日志位置到最新一刻的日志位置的binlog，（binlog应单独存储）使得数据恢复到崩溃前一刻；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除所有数据目录下文件，停止mysql进程，模拟数据损坏；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 将binlog复制一份用作备份点后的数据重放恢复；
# 实际中，binlog应单独存储，
   
[root@host2 ~]# cp -a /data/mysql/mysql-bin.* /tmp1/
[root@host2 ~]# ll /tmp1/
total 52
-rw-rw---- 1 mysql mysql 29277 Sep 27 10:41 mysql-bin.000001
-rw-rw---- 1 mysql mysql  9007 Sep 27 11:08 mysql-bin.000002
-rw-rw---- 1 mysql mysql   515 Sep 27 11:12 mysql-bin.000003
-rw-rw---- 1 mysql mysql    57 Sep 27 11:08 mysql-bin.index
   
# 因连同pid文件一起删除，所以mysql无法正常停止，生产中pid应和数据文件分开存放；
# 使用kill命令强行停止mysql进程；
   
[root@host2 ~]# rm -rf /data/mysql/*
[root@host2 ~]# ss -nlt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:22                             *:*                  
LISTEN     0      100        127.0.0.1:25                             *:*                  
LISTEN     0      80                :::3306                          :::*                  
LISTEN     0      128               :::22                            :::*                  
LISTEN     0      100              ::1:25                            :::*                  
[root@host2 ~]# service mysqld status
 ERROR! MariaDB is not running, but lock file (/var/lock/subsys/mysql) exists
   
# kill掉mysql进程；
[root@host2 ~]# ps -ef|grep msyql
root       2575   1335  0 11:21 pts/0    00:00:00 grep --color=auto msyql
[root@host2 ~]# ps -ef|grep mysql
root       2237      1  0 11:01 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/host2.b.com.pid
mysql      2364   2237  0 11:01 ?        00:00:01 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/host2.b.com.err --pid-file=/data/mysql/host2.b.com.pid --socket=/tmp/mysql.sock --port=3306
root       2577   1335  0 11:21 pts/0    00:00:00 grep --color=auto mysql
[root@host2 ~]# kill -9 2237
[root@host2 ~]# kill -9 2364
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将所有备份数据文件拷贝回数据目录，注意权限一致；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 注意原先快照时，将pid文件，一起快照备份了，应该删除原来的pid文件，锁文件，再重启msyql进程
# 生产中，锁文件，pid文件都应该单独存储；
[root@host2 ~]# cp -ar /archdir/* /data/mysql/
[root@host2 ~]# ll /data/mysql/
total 122980
-rw-rw---- 1 mysql mysql    16384 Sep 27 10:41 aria_log.00000001
-rw-rw---- 1 mysql mysql       52 Sep 27 10:41 aria_log_control
drwx------ 2 mysql mysql     4096 Sep 27 11:01 hellodb
-rw-rw---- 1 mysql mysql     2543 Sep 27 11:01 host2.b.com.err
-rw-rw---- 1 mysql mysql        5 Sep 27 11:01 host2.b.com.pid
-rw-rw---- 1 mysql mysql      938 Sep 27 10:41 ib_buffer_pool
-rw-rw---- 1 mysql mysql 12582912 Sep 27 11:01 ibdata1
-rw-rw---- 1 mysql mysql 50331648 Sep 27 11:01 ib_logfile0
-rw-rw---- 1 mysql mysql 50331648 Sep 27 10:41 ib_logfile1
-rw-rw---- 1 mysql mysql 12582912 Sep 27 11:01 ibtmp1
-rw-rw---- 1 mysql mysql        0 Sep 27 11:01 multi-master.info
drwx------ 2 mysql mysql     4096 Sep 27 10:41 mysql
-rw-rw---- 1 mysql mysql    29277 Sep 27 10:41 mysql-bin.000001
-rw-rw---- 1 mysql mysql     9007 Sep 27 11:08 mysql-bin.000002
-rw-rw---- 1 mysql mysql      385 Sep 27 11:08 mysql-bin.000003
-rw-rw---- 1 mysql mysql       57 Sep 27 11:08 mysql-bin.index
drwx------ 2 mysql mysql     4096 Sep 27 10:41 performance_schema
drwx------ 2 mysql mysql     4096 Sep 27 10:41 test
[root@host2 ~]# service mysqld status
 ERROR! MariaDB is not running, but PID file exists
[root@host2 ~]# rm -rf /data/mysql/host2.b.com.pid 
[root@host2 ~]# service mysqld status
 ERROR! MariaDB is not running, but lock file (/var/lock/subsys/mysql) exists
[root@host2 ~]# rm -rf /var/lock/subsys/mysql 
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动mysql进程，检查数据，此时已经恢复到快照时状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# service mysqld status
 ERROR! MariaDB is not running
[root@host2 ~]# service mysqld start
Starting mysqld (via systemctl):                           [  OK  ]
[root@host2 ~]# ss -nlt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:22                             *:*                  
LISTEN     0      100        127.0.0.1:25                             *:*                  
LISTEN     0      80                :::3306                          :::*                  
LISTEN     0      128               :::22                            :::*                  
LISTEN     0      100              ::1:25                            :::*                  
[root@host2 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 10
Server version: 10.2.25-MariaDB-log MariaDB Server
   
Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.
   
Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.
   
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
# 此时已经恢复到了快照时刻的数据；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重放备份时记录日志位置到最新一刻的日志位置的binlog，（binlog应单独存储）使得数据恢复到崩溃前一刻；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# cat binlog-position.txt 
File	Position	Binlog_Do_DB	Binlog_Ignore_DB
mysql-bin.000003	385		
   
[root@host2 ~]# ll /tmp1/
total 52
-rw-rw---- 1 mysql mysql 29277 Sep 27 10:41 mysql-bin.000001
-rw-rw---- 1 mysql mysql  9007 Sep 27 11:08 mysql-bin.000002
-rw-rw---- 1 mysql mysql   515 Sep 27 11:12 mysql-bin.000003
-rw-rw---- 1 mysql mysql    57 Sep 27 11:08 mysql-bin.index
   
# 根据快照之前日志位置的记录，从那一时刻开始向后重放mysql的binlog，
# 可以看到快照后的数据变化，创建了一个库，也已经恢复
[root@host2 ~]# mysqlbinlog /tmp1/mysql-bin.000003 --start-position=385 |mysql
[root@host2 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 12
Server version: 10.2.25-MariaDB-log MariaDB Server
   
Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.
   
Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.
   
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db1                |
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mysqldump&#34;&gt;mysqldump&lt;/h2&gt;
&lt;h3 id=&#34;介绍-1&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;​	属于逻辑备份，备份的是一个文本文件，内容为数据库所有的库，表，表中数据的sql语句，不受存储引擎的限制，结合innodb引擎的事务和mvcc机制可以实现热备；&lt;/p&gt;
&lt;p&gt;​	适合数据量较小的时候，速度较慢，也由于备份的是sql，对应sql兼容的其他数据库，可以做不同数据库软件的迁移；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysqldump --help
mysqldump  Ver 10.16 Distrib 10.2.25-MariaDB, for Linux (x86_64)
Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Dumping structure and contents of MySQL databases and tables.
Usage: mysqldump [OPTIONS] database [tables]
OR     mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]
OR     mysqldump [OPTIONS] --all-databases [OPTIONS]

-A 备份所有数据库，等价于--all-databases，备份中的语句包含create database 和 use database
--databases 后跟的是要备份的某几个库
database 后跟的是某库里的某几个表
-F 【锁表后，备份前会滚动一次日志文件】，使得备份后的数据修改从新一个日志文件的某位置开启，重放时，从改位置重放即可；【mysqldump会加全局读锁，结合innodb的mvcc的话就不用咯】【结合master-data使用，只滚动一次，不然每备份一个库就滚动一次】

-E,--events 备份所有的事件调度器
-R,--routines 备份所有存储过程和函数

--triggers备份表的触发器，默认选项
--default-charachter-set=utf8 指定字符集

--master-data=[1|2]，会在备份出的文件中加入change master语句，记录备份开始时的binlog日志位置，不用人为再执行语句进行记录，2选项会加入注释符，该语句不生效，1没有注释符；【前提是开启binlog】

  --single-transaction 使得整个备份过程在一个事务里，这样，在默认隔离等级，可重复读的情况下，备份中数据看到的是备份开始那一刻的快照，实现数据一致性；前提需是innodb引擎；
  
                      Creates a consistent snapshot by dumping all tables in a
                      single transaction. Works ONLY for tables stored in
                      storage engines which support multiversioning (currently
                      only InnoDB does);
                      
 -f 忽略sql错误，继续执行
 -q 不查缓存，直接输出，加快备份
 --hexo-blob 十六进制格式存储二进制列，有bin，blob，bit数据类型时使用，避免乱码；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;myisam&#34;&gt;myisam&lt;/h3&gt;
&lt;p&gt;​	存储引擎是myisam时，只能温备，因为备份前要加全局读锁，期间只读不能写，&lt;strong&gt;属于温备&lt;/strong&gt; --lock-all-tables&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生产中建议备份选项：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqldump -uroot -A -F -E -R -x --master-data=1 --flush-privileges --triggers --defautl-character-set=utf8 --hex-blob &amp;gt; $BACK_DIR/fullbak_$BACKUP_TIME.sql

就是将innodb引擎时的--single-transaction换成了-x全局锁表，因为innodb有mvcc，支持可重复读事务等级，不需要锁表哦
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;innodb&#34;&gt;innodb&lt;/h3&gt;
&lt;p&gt;​	存储引擎是innodb时，--single-tracation，使得备份在一个事务内部，&lt;strong&gt;事务隔离等级可重复读，再加上mvcc的机制，实现了热备，备份期间可以继续读写，修改的是数据的多个副本，后续根据事务日志，binlog可以逐步重放数据，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生产中备份选项：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqldump -uroot -A -F -E -R --single-transaction --master-data=1 --flush-privileges --triggers --default-character-set=utf8 --hexo-blob &amp;gt; $BACK_DIR/fullbak_$BACK_TIME.sql

# 全库备份，刷新日志，备份event scheduler，procedure，function，开始备份事务，记录binlog位置，刷新权限，备份触发器，字符集utf8，十六进制转存二进制避免乱码，
# 热备，不影响数据库读写，不影响业务，需要开启binlog
# 备份出文件，一般是变量表示的带时间，备份位置的.sql文件
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;备份-1&#34;&gt;备份：&lt;/h3&gt;
&lt;p&gt;1、连入mysql，可本地，可选程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysqldump -uroot -A -F -E -R --single-transaction --master-data=1 --flush-privileges --default-character-set=utf8 --hex-blob &amp;gt; /root/`date +%F`.sql

# 设置需要的选项，用msyqldump命令直接备份出sql文件，sql文件可以防止网络文件系统上，异机存储；
# 导出的是备份开始前一刻的数据镜像，
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、查看导出的sql文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- MySQL dump 10.16  Distrib 10.2.25-MariaDB, for Linux (x86_64)
--
-- Host: localhost    Database: 
-- ------------------------------------------------------
-- Server version       10.2.25-MariaDB-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE=&#39;+00:00&#39; */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Position to start replication or point-in-time recovery from
--

CHANGE MASTER TO MASTER_LOG_FILE=&#39;mysql-bin.000006&#39;, MASTER_LOG_POS=385;
# change master，记录了备份开始前，滚动日志后，新日志文件的文件名和位置；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;恢复-1&#34;&gt;恢复：&lt;/h3&gt;
&lt;p&gt;1、模拟损坏&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 直接删除数据目录下所有文件，模拟数据损坏；
[root@host2 ~]# rm -rf /data/mysql/*

# pid文件因为单独存放，仍可以通过pid文件停止实例，
[root@host2 ~]# service mysql stop
Redirecting to /bin/systemctl stop mysql.service

# 但启动报错
[root@host2 ~]# service mysql start
Redirecting to /bin/systemctl start mysql.service
Job for mysqld.service failed because the control process exited with error code. See &amp;quot;systemctl status mysqld.service&amp;quot; and &amp;quot;journalctl -xe&amp;quot; for details.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、在一个新安装的数据库实例中恢复，（此处是同一个实例，重新初始化数据目录）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# /usr/local/mysql/scripts/mysql_install_db --datadir=/data/mysql/ --user=mysql
# 启动后，可以看出，此为一个完全初始化数据库，没有任务业务数据
[root@host2 ~]# service mysqld start
Starting mysqld (via systemctl):                           [  OK  ]
[root@host2 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、用全备sql文件恢复，并重放binlog&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 实际是把sql文件中sql全部执行了一遍，生成和原库一样的数据；
# 看到，已经恢复到了快照一刻的数据；

[root@host2 ~]# mysql &amp;lt; 2020-09-27.sql 
[root@host2 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db1                |
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test               |

# 根据change master记录的日志位置，开始重放binlog，可以看到快照后的数据也恢复
# 快照后，create database db2，创建了一个库；
[root@host2 ~]# mysqlbinlog --start-position=385 mysql-bin.000006 | mysql
[root@host2 ~]# mysql
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db1                |
| db2                |
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;xtrabackup有问题暂略&#34;&gt;xtrabackup（有问题，暂略）&lt;/h2&gt;
&lt;p&gt;暂定是xtrabackup和mariadb版本兼容问题，用mariadbackup试试；&lt;/p&gt;
&lt;h3 id=&#34;介绍-2&#34;&gt;介绍&lt;/h3&gt;
&lt;p&gt;percona公司开源的对innodb和xtardb存储引擎做物理层数据备份的工具，percona是mysql数据库的发行版公司，xtradb是基于innodb&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/software/mysql-database/percona-xtrabackup&#34;&gt;https://www.percona.com/software/mysql-database/percona-xtrabackup&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;特点&#34;&gt;&lt;strong&gt;特点：&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;热备&lt;/li&gt;
&lt;li&gt;速度快，可靠性高&lt;/li&gt;
&lt;li&gt;可压缩，节省存储空间和流量&lt;/li&gt;
&lt;li&gt;具有备份检验功能&lt;/li&gt;
&lt;li&gt;开源，free&lt;/li&gt;
&lt;li&gt;不和mysql server进程交互，直接备份物理数据层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;h4 id=&#34;程序组成&#34;&gt;程序组成&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;2.2版本之前&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;innobackupex  		perl脚本
xtrabackup:c/c++ 	二进制程序
xbcrypt				加解密
xbstream			支持并发写的流文件

xtrabackup 用来备份innodb表，和xtradb表，
innnobackupex 脚本备份非innodb表，同时调用xtrabackup备份innodb表，该脚本是对xtrabackup的一层封装；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2.4之后&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;将脚本innobackupex功能集成到xtrabackup二进制程序中，
向下兼容，原脚本做成了二进制程序的软链接
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;安装方式&#34;&gt;安装方式&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# yum install -y percona-xtrabackup

[root@host2 ~]# rpm -ql !$
rpm -ql percona-xtrabackup
/usr/bin/innobackupex
/usr/bin/xbcrypt
/usr/bin/xbstream
/usr/bin/xtrabackup
/usr/share/doc/percona-xtrabackup-2.3.6
/usr/share/doc/percona-xtrabackup-2.3.6/COPYING
/usr/share/doc/percona-xtrabackup-2.3.6/README
/usr/share/doc/percona-xtrabackup-2.3.6/VERSION
/usr/share/man/man1/innobackupex.1.gz
/usr/share/man/man1/xbcrypt.1.gz
/usr/share/man/man1/xbstream.1.gz
/usr/share/man/man1/xtrabackup.1.gz

[root@host2 ~]# file /usr/bin/innobackupex 
/usr/bin/innobackupex: symbolic link to `xtrabackup&#39;
[root@host2 ~]# file /usr/bin/xtrabackup 
/usr/bin/xtrabackup: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=2afaaf839107c7e1e47a80f3c314481b888b5778, stripped
# 四个程序文件，以及对应man手册
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;# epel源
[root@host2 ~]# yum list percona-xtrabackup
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.aliyun.com
 * extras: mirrors.aliyun.com
 * updates: mirrors.aliyun.com
Available Packages
percona-xtrabackup.x86_64                          2.3.6-1.el7                          epel

yum install -y percona-xtarbackup epel源

# 官方下载
https://www.percona.com/downloads/Percona-XtraBackup-LATEST/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;xtrabackup备份过程解析&#34;&gt;xtrabackup备份过程解析&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200927192059049.png&#34; alt=&#34;image-20200927192059049&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;全备与恢复&#34;&gt;全备与恢复&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;备份&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在原数据库做全备；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;恢复&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在要恢复的主机（一般是其他主机上的新的实例）
&lt;ol&gt;
&lt;li&gt;预准备阶段：回滚未完成的事务，已完成事务未应用到数据上的，将数据做对应修改&lt;/li&gt;
&lt;li&gt;复制到数据库目录：&lt;strong&gt;数据库目录要空，mysql进程不启动&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;复制后的数据文件，修改属性&lt;/li&gt;
&lt;li&gt;启动mysql进程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;全备增量备份与恢复&#34;&gt;全备、增量备份与恢复&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;备份&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首次全备&lt;/li&gt;
&lt;li&gt;模拟第一次修改数据，&lt;/li&gt;
&lt;li&gt;第一次增量备份&lt;/li&gt;
&lt;li&gt;模拟第二次修改数据&lt;/li&gt;
&lt;li&gt;第二次增量备份&lt;/li&gt;
&lt;li&gt;将全备、增量1、增量2的3次备份的三个文件都拷贝要目标主机，&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;还原&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预准备阶段，&lt;/li&gt;
&lt;li&gt;合并第一次增量备份到全备&lt;/li&gt;
&lt;li&gt;合并第二次增量备份到全备&lt;/li&gt;
&lt;li&gt;将全部合并完成的数据文件，拷贝到数据目录，改权限，&lt;/li&gt;
&lt;li&gt;修改属主为myslq&lt;/li&gt;
&lt;li&gt;启动新实例mysql&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/%E7%96%91/" term="疑" label="疑" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql复制集群</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E5%A4%8D%E5%88%B6%E9%9B%86%E7%BE%A4/" />
            <id>https://latteStudio.github.io/posts/mysql%E5%A4%8D%E5%88%B6%E9%9B%86%E7%BE%A4/</id>
            <updated>2021-03-09T12:31:03&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql复制集群实验，包括主从复制、级联主从复制、级联主从半同步复制、gtid复制、复制加密等...</summary>
            
                <content type="html">&lt;h1 id=&#34;mysql分库分表&#34;&gt;mysql分库分表&lt;/h1&gt;
&lt;h2 id=&#34;分库&#34;&gt;分库&lt;/h2&gt;
&lt;p&gt;业务涉及较大的表时，数据表分库方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垂直切分&lt;/li&gt;
&lt;li&gt;水平切分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;垂直&#34;&gt;垂直&lt;/h3&gt;
&lt;p&gt;将存放不同业务数据的表，分到不同数据库中，且不同的数据库可以是在不同的数据库实例中，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200928162959704.png&#34; alt=&#34;image-20200928162959704&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;水平&#34;&gt;水平&lt;/h3&gt;
&lt;p&gt;按照时间或地区等标准做水平切分，如电商的交易数据，按照不同的省市地区或时间划分，分别存储不同于不同的库，（也可以是在不同的实例）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200928163206599.png&#34; alt=&#34;image-20200928163206599&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;分表&#34;&gt;&lt;strong&gt;分表&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;一张表数据量较大时，数据表切分方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垂直切分&lt;/li&gt;
&lt;li&gt;水平切分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;垂直-1&#34;&gt;垂直&lt;/h3&gt;
&lt;p&gt;对于数据量较大的表，可以将不常用字段切分，单独放在一个表中&lt;/p&gt;
&lt;h3 id=&#34;水平-1&#34;&gt;水平&lt;/h3&gt;
&lt;p&gt;对于数据量较大的表，可以按照时间，id取模等方式做水平的切分，分别存储于不同的数据表中；&lt;/p&gt;
&lt;h2 id=&#34;路由&#34;&gt;路由&lt;/h2&gt;
&lt;p&gt;分库分表之后，不同于单实例单库单表的查询，需要有一个sql路由，在php或java等发起数据读写请求时，根据某些条件，将查询路由到一个个被分开的数据库实例上；&lt;/p&gt;
&lt;p&gt;路由本身也要做高可用；&lt;/p&gt;
&lt;p&gt;类似dns查询，可以选择迭代或递归查询2种方式；&lt;/p&gt;
&lt;p&gt;可以做mysql路由中间件的有，mysql router、mycat、proxysql&lt;/p&gt;
&lt;h1 id=&#34;mysql常用复制架构&#34;&gt;mysql常用复制架构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;主从复制&lt;/li&gt;
&lt;li&gt;级联主从复制&lt;/li&gt;
&lt;li&gt;主主复制&lt;/li&gt;
&lt;li&gt;半同步复制&lt;/li&gt;
&lt;li&gt;基于gitd的复制&lt;/li&gt;
&lt;li&gt;复制相关配置
&lt;ul&gt;
&lt;li&gt;复制过滤器&lt;/li&gt;
&lt;li&gt;复制加密&lt;/li&gt;
&lt;li&gt;复制集群的监控与维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读写分离
&lt;ul&gt;
&lt;li&gt;常用的读写分离路由软件&lt;/li&gt;
&lt;li&gt;proxy sql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;主从复制&#34;&gt;主从复制&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/setting-up-replication/&#34;&gt;https://mariadb.com/kb/en/setting-up-replication/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/replication-configuration.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主从架构图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主节点数据更新时，相关操作会写入binlog&lt;/li&gt;
&lt;li&gt;主节点开启slave线程将自己的binlog发送给从节点的io线程&lt;/li&gt;
&lt;li&gt;从节点io线程接收到主节点的binlog之后，写入自己本地的中继日志，本质也算是binlog，&lt;/li&gt;
&lt;li&gt;从节点的sql线程，读取本地relay log中继日志，应用到数据库中，形成和主库一样的数据更新&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200928161748067.png&#34; alt=&#34;image-20200928161748067&#34;&gt;&lt;/p&gt;
&lt;p&gt;相关线程&lt;/p&gt;
&lt;p&gt;主节点：&lt;/p&gt;
&lt;p&gt;dump thread：主节点会为每一个从节点启动一个dump线程，发送自己的binlog&lt;/p&gt;
&lt;p&gt;master.info：保存了各个从节点连过来时的信息，如账户，密码，ip等&lt;/p&gt;
&lt;p&gt;从节点：&lt;/p&gt;
&lt;p&gt;io thread：向主节点请求binlog，并接收到本地，保存为relay log&lt;/p&gt;
&lt;p&gt;sql thread：从relay log中读取日志中sql，在本地重放&lt;/p&gt;
&lt;p&gt;relay-log.info：保存了当前salve节点已经复制的binlog和本地relay log的对应关系&lt;/p&gt;
&lt;p&gt;主从结构特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;异步复制：主从数据同步有延时，数据不一致&lt;/li&gt;
&lt;li&gt;一主多从&lt;/li&gt;
&lt;li&gt;一从多主：一个实例做多个主节点的从&lt;/li&gt;
&lt;li&gt;级联复制&lt;/li&gt;
&lt;li&gt;主主&lt;/li&gt;
&lt;li&gt;环形复制&lt;/li&gt;
&lt;li&gt;复制时，binlog选择的格式：row，statements，mixed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200928165418205.png&#34; alt=&#34;image-20200928165418205&#34;&gt;&lt;/p&gt;
&lt;p&gt;配置过程&lt;/p&gt;
&lt;p&gt;主节点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用binlog&lt;/li&gt;
&lt;li&gt;设置唯一的server_id&lt;/li&gt;
&lt;li&gt;创建具有复制数据权限的账户&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在创建了用户后再备份&lt;/strong&gt;，这样从库恢复后就带有该用户，不必再手动创建&lt;/li&gt;
&lt;li&gt;创建2个库，模拟备份后数据修改；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
...
log-bin=master-bin
server_id=1
[root@host2 ~]# service mysqld restart

MariaDB [(none)]&amp;gt; grant replication slave on *.* to repl@&#39;192.168.80.102&#39; identified by &#39;wang&#39;;
Query OK, 0 rows affected (0.00 sec)


[root@host2 ~]#  mysqldump -uroot -pwangbo  -A -F -E -R --single-transaction --master-data=1 --flush-privileges --default-character-set=utf8 --hex-blob &amp;gt; /root/`date +%F`.sql
[root@host2 ~]# ll
total 492
-rw-r--r--  1 root root 490508 Sep 28 18:17 2020-09-28.sql

Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&amp;gt; create database test2;
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db3                |
| db4                |
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test1              |
| test2              |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从节点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置全局唯一server_id&lt;/li&gt;
&lt;li&gt;设置数据库只读&lt;/li&gt;
&lt;li&gt;设置relay log路径&lt;/li&gt;
&lt;li&gt;设置relay log 的index文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用主节点全备sql文件恢复&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在从节点用change master命令配置主节点的信息，如ip，端口，刚刚创建的账户等；（此时从节点就配置好了主节点信息）&lt;/li&gt;
&lt;li&gt;但从节点相关线程还没开启，所有主从同步没开始；&lt;/li&gt;
&lt;li&gt;从节点启动2个相关线程，&lt;/li&gt;
&lt;li&gt;检查线程状态，查看同步是否正常；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# The MariaDB server
[mysqld]
server_id=2
read_only=on
relay_log=relay-log
relay_log_index=relay-log.index

[root@host3 ~]# vim /etc/my.cnf
[root@host3 ~]# service mysqld restart
Restarting mysqld (via systemctl):                         [  OK  ]
# 设置后重启服务器

# 应用全备sql，从节点恢复到了主节点备份时刻状态；
[root@host3 ~]# mysql &amp;lt; 2020-09-28.sql 
[root@host3 ~]# mysql -uroot -pwangbo
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db3                |
| db4                |
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
+--------------------+

# 此时还没有slave线程信息；
MariaDB [(none)]&amp;gt; show slave status;
Empty set (0.00 sec)

# 在从节点上配置主节点信息，ip，端口，从哪个位置应用binlog等
MariaDB [(none)]&amp;gt; CHANGE MASTER TO
    -&amp;gt;   MASTER_HOST=&#39;192.168.80.101&#39;,
    -&amp;gt;   MASTER_USER=&#39;repl&#39;,
    -&amp;gt;   MASTER_PASSWORD=&#39;wang&#39;,
    -&amp;gt;   MASTER_PORT=3306,
    -&amp;gt;   MASTER_LOG_FILE=&#39;mysql-bin.000011&#39;, 
    -&amp;gt;   MASTER_LOG_POS=385,
    -&amp;gt;   MASTER_CONNECT_RETRY=10;
    
# 此时因为2个线程没启动，尚未开始同步    
MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: 
                  Master_Host: 192.168.80.101
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mysql-bin.000011
          Read_Master_Log_Pos: 385
               Relay_Log_File: relay-log.000001
                Relay_Log_Pos: 4
        Relay_Master_Log_File: mysql-bin.000011
             Slave_IO_Running: No
            Slave_SQL_Running: No

# 启动2个线程
MariaDB [(none)]&amp;gt; start slave;
Query OK, 0 rows affected (0.00 sec)

# 错误：因为主从节点一致，配置文件了设置了没生效；
MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: 
                  Master_Host: 192.168.80.101
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mysql-bin.000011
          Read_Master_Log_Pos: 385
               Relay_Log_File: relay-log.000001
                Relay_Log_Pos: 4
        Relay_Master_Log_File: mysql-bin.000011
             Slave_IO_Running: No
            Slave_SQL_Running: Yes
         Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids; these ids must be different for replication to work (or the --replicate-same-server-id option must be used on slave but this does not always make sense; please check the manual before using it).
               Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it


# 命令行临时修改生效了
MariaDB [(none)]&amp;gt; set global server_id=22;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show variables like &#39;%server%&#39;;
+---------------------------------+-----------------+
| Variable_name                   | Value           |
+---------------------------------+-----------------+
| character_set_server            | utf8            |
| collation_server                | utf8_general_ci |
| innodb_ft_server_stopword_table |                 |
| server_id                       | 22              |


# 重启slave的2个线程；
MariaDB [(none)]&amp;gt; stop slave;
Query OK, 0 rows affected (0.00 sec)
MariaDB [(none)]&amp;gt; start slave;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.80.101
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mysql-bin.000012
          Read_Master_Log_Pos: 342
               Relay_Log_File: relay-log.000005
                Relay_Log_Pos: 641
        Relay_Master_Log_File: mysql-bin.000012
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes

# 此时已经和主节点数据一致了；
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db3                |
| db4                |
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test1              |
| test2              |
+--------------------+

# 主节点数据修改测试
# 主节点删除2个库
MariaDB [(none)]&amp;gt; drop database db4;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; drop database db3;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test1              |
| test2              |
+--------------------+

# 从节点也随之删除，此时主从节点已经成功同步；
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| hellodb            |
| information_schema |
| mysql              |
| performance_schema |
| test1              |
| test2              |
+--------------------+
6 rows in set (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;serverid设置不生效原因&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 打印mysqld的启动参数发现，有2个server-id，
[root@host3 ~]# mysqld --print-defaults
mysqld would have been started with the following arguments:
--server_id=2 --read_only=on --relay_log=relay-log --relay_log_index=relay-log.index --port=3306 --socket=/data/mysql/mysql.sock --skip-external-locking --key_buffer_size=256M --max_allowed_packet=1M --table_open_cache=256 --sort_buffer_size=1M --read_buffer_size=1M --read_rnd_buffer_size=4M --myisam_sort_buffer_size=64M --thread_cache_size=8 --query_cache_size=16M --thread_concurrency=8 --datadir=/data/mysql --skip_name_resolve=on --log-bin=mysql-bin --binlog_format=mixed --server-id=1 

# 检查配置文件发现，原本配置文件默认有一个server-id=1，后来自己添加的server-id就没生效，将其注释，手动添加的server-id就会生效；
[root@host3 ~]# vim /etc/my.cnf
# required unique id between 1 and 2^32 - 1
# defaults to 1 if master-host is not set
# but will not function as a master if omitted
#server-id      = 1

[root@host3 ~]# service mysqld restart
Restarting mysqld (via systemctl):                         [  OK  ]
[root@host3 ~]# mysqld --print-defaults
mysqld would have been started with the following arguments:
--server_id=2 --read_only=on --relay_log=relay-log --relay_log_index=relay-log.index --port=3306 --socket=/data/mysql/mysql.sock --skip-external-locking --key_buffer_size=256M --max_allowed_packet=1M --table_open_cache=256 --sort_buffer_size=1M --read_buffer_size=1M --read_rnd_buffer_size=4M --myisam_sort_buffer_size=64M --thread_cache_size=8 --query_cache_size=16M --thread_concurrency=8 --datadir=/data/mysql --skip_name_resolve=on --log-bin=mysql-bin --binlog_format=mixed 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主从复制注意点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从服务器应该只读，避免有写操作，避免主从数据不一致：read-only=on&lt;/li&gt;
&lt;li&gt;reset slave&lt;/li&gt;
&lt;li&gt;reset salve all清楚所有从服务器信息&lt;/li&gt;
&lt;li&gt;sql_slave_skip_counter=N，从服务器忽略N个主服务器的复制事件，避免因几个sql错误阻塞了后续的主从复制；&lt;/li&gt;
&lt;li&gt;主节点数据量已经较大时，可以先用mysqldump备份出来，恢复到从节点，再从change master记录的binlog位置开始做主从同步，上步实验即是如此；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主从复制中事务安全参数设置（一般是刷盘频率相关参数设置，）&lt;/p&gt;
&lt;p&gt;主节点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sync_binlog=1 每次写后同步二进制日志到磁盘，性能差

结合innodb引擎时：
innodb_flush_log_at_trx_commit=1 每次事务提交后同步日志到磁盘
sync_master_info=N N次事务后master.info同步到磁盘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从节点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;skip_slave_start=on 
sync_relay_log=N
sync_relay_log_info=N 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;级联主从复制&#34;&gt;级联主从复制&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;一主多从架构时，主节点会为每个从节点都开启一个dump线程，来发送自己的binlog，从节点较多的情况下，会加大主节点的压力，因此更合理的做法为，一主挂一从，再由从节点向其他从节点进行复制，以此减轻主节点的压力；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实验步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前提：
&lt;ol&gt;
&lt;li&gt;在配置好一主一从的情况下；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;从节点：
&lt;ol&gt;
&lt;li&gt;从节点修改服务器参数；开启binlog，log_slave_updates，去掉read-only&lt;/li&gt;
&lt;li&gt;从节点做全备，并记录binlog位置；（可利用mysqldump）&lt;/li&gt;
&lt;li&gt;若用mysqldump做全备，将从节点的全备sql文件，复制到新加入的末端从节点，可以有多个&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;末端从节点：
&lt;ol&gt;
&lt;li&gt;利用中间从节点的全备做恢复；&lt;/li&gt;
&lt;li&gt;修改my.cnf，加入从节点配置参数；serverid、read-only，relay-log&lt;/li&gt;
&lt;li&gt;利用change master命令，连接到从节点，从备份时记录的日志位置开始做同步；&lt;/li&gt;
&lt;li&gt;启动末端从节点的slave进程；start slave&lt;/li&gt;
&lt;li&gt;检查slave线程和日志同步状态；&lt;/li&gt;
&lt;li&gt;在主节点做数据修改，检查主节点-》中间从节点-》末端从节点的数据是否能正常同步；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1、&lt;strong&gt;配置主节点：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改主节点配置文件，并重启生效
[root@host2 ~]# vim /etc/my.cnf
[mysqld]
server_id=2
log-bin=on

[root@host2 ~]# systemctl restart mariadb
[root@host2 ~]# ll /var/lib/mysql/
-rw-rw---- 1 mysql mysql      245 Oct  5 14:17 on.000001
-rw-rw---- 1 mysql mysql       12 Oct  5 14:17 on.index

#备份现有主节点数据
[root@host2 ~]# mysqldump -uroot -A -F -E -R --single-transaction --master-data=1 --flush-privileges --default-character-set=utf8 --hex-blob &amp;gt; /root/`date +%F`.sql

#创建复制用的用户账户
MariaDB [(none)]&amp;gt; grant replication slave on *.* to repl@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、&lt;strong&gt;配置中间从节点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改配置文件并重启
[root@host3 ~]# vim /etc/my.cnf
[mysqld]
server_id=3
log-bin
read-only=on
relay-log=on

[root@host3 ~]# systemctl restart mariadb

#从主节点复制过来备份的sql文件，并恢复，使其达到主节点备份时刻的数据状态
[root@host2 ~]# scp 2020-10-05.sql 192.168.80.102:/root/

[root@host3 ~]# mysql &amp;lt; 2020-10-05.sql 
[root@host3 ~]# mysql
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| hellodb            |
| mysql              |
| performance_schema |
| test               |
+--------------------+

#配置主节点信息，使其从备份时刻的binlog位置开始读取binlog并应用到本地
MariaDB [(none)]&amp;gt; CHANGE MASTER TO
    -&amp;gt;   MASTER_HOST=&#39;192.168.80.101&#39;,
    -&amp;gt;   MASTER_USER=&#39;repl&#39;,
    -&amp;gt;   MASTER_PASSWORD=&#39;wang&#39;,
    -&amp;gt;   MASTER_PORT=3306,
    -&amp;gt;   MASTER_LOG_FILE=&#39;on.000002&#39;, 
    -&amp;gt;   MASTER_LOG_POS=245,
    -&amp;gt;   MASTER_CONNECT_RETRY=10;
Query OK, 0 rows affected (0.01 sec)

#配置好主节点信息，此时尚未开始复制，需要手动启动复制线程，启动后，io和sql线程状态变为yes即正常
MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: 
                  Master_Host: 192.168.80.101
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: on.000002
          Read_Master_Log_Pos: 245
               Relay_Log_File: on.000001
                Relay_Log_Pos: 4
        Relay_Master_Log_File: on.000002
             Slave_IO_Running: No
            Slave_SQL_Running: No

MariaDB [(none)]&amp;gt; start slave;            
MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.80.101
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: on.000002
          Read_Master_Log_Pos: 394
               Relay_Log_File: on.000002
                Relay_Log_Pos: 671
        Relay_Master_Log_File: on.000002
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes

# 主节点做数据修改，验证数据同步，主节点创建db1库，从节点可以看到db1随之创建，【主从配置成功】
MariaDB [(none)]&amp;gt; create database db1;
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| hellodb            |
| mysql              |
| performance_schema |
| test               |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、&lt;strong&gt;末端从节点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#修改中间从节点配置文件，关闭read-only选项，加入log_slave_updates选项，重启
[root@host3 ~]# vim /etc/my.cnf
[mysqld]
server_id=3
log-bin
# read-only=on
relay-log=on
log_slave_updates
[root@host3 ~]# systemctl restart mariadb

#修改末端从节点参数文件
[root@host4 ~]# vim /etc/my.cnf
[mysqld]
server_id=4
log-bin
read-only=on
relay-log=on
[root@host4 ~]# systemctl start mariadb

#中间从节点，备份，并拷贝到末端节点上，然后恢复到末端节点
[root@host3 ~]# mysqldump -uroot -A -F -E -R --single-transaction --master-data=1 --flush-privileges --default-character-set=utf8 --hex-blob &amp;gt; /root/`date +%F`.sql
[root@host3 ~]# scp 2020-10-05.sql 192.168.80.103:/root/
[root@host4 ~]# mysql &amp;lt; 2020-10-05.sql 


#末端节点将中间节点指为主，并开启复制线程
MariaDB [(none)]&amp;gt; CHANGE MASTER TO
    -&amp;gt;   MASTER_HOST=&#39;192.168.80.102&#39;,
    -&amp;gt;   MASTER_USER=&#39;repl&#39;,
    -&amp;gt;   MASTER_PASSWORD=&#39;wang&#39;,
    -&amp;gt;   MASTER_PORT=3306,
    -&amp;gt;   MASTER_LOG_FILE=&#39;mariadb-bin.000003&#39;, 
    -&amp;gt;   MASTER_LOG_POS=245,
    -&amp;gt;   MASTER_CONNECT_RETRY=10;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: 
                  Master_Host: 192.168.80.102
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mariadb-bin.000003
          Read_Master_Log_Pos: 245
               Relay_Log_File: on.000001
                Relay_Log_Pos: 4
        Relay_Master_Log_File: mariadb-bin.000003
             Slave_IO_Running: No
            Slave_SQL_Running: No

MariaDB [(none)]&amp;gt; start slave;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.80.102
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mariadb-bin.000003
          Read_Master_Log_Pos: 245
               Relay_Log_File: on.000002
                Relay_Log_Pos: 531
        Relay_Master_Log_File: mariadb-bin.000003
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、&lt;strong&gt;测试&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#建库后，主节点、中间节点，末端节点都出现了testdb，【级联配置成功】
MariaDB [(none)]&amp;gt; create database testdb;
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| hellodb            |
| mysql              |
| performance_schema |
| test               |
| testdb             |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;主主复制&#34;&gt;主主复制&lt;/h2&gt;
&lt;p&gt;要注意的问题&lt;/p&gt;
&lt;p&gt;​	主主复制：2个节点互为主从，2个节点都可以写，每个节点的写操作都会同步到对方节点，&lt;strong&gt;容易造成数据不一致问题，因此较少使用；&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自动增长id设置，从而避免2个节点写入相同一行的数据，导致数据冲突不一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写入数据时，一个节点使用奇数 id&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;auto_increment_offset=1
auto_increment_increment=2
# 从1开始增长，步长是2,1 3 5 7
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另一个节点使用偶数id&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;auto_increment_offset=2
auto_increment_increment=2
# 从2开始增长，步长是2 ，2 4 6 8...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各节点使用唯一的server id；&lt;/li&gt;
&lt;li&gt;都启动bin log和relay log&lt;/li&gt;
&lt;li&gt;创建用于复制权限的账户&lt;/li&gt;
&lt;li&gt;启动自动增长的id各为奇偶，避免冲突；&lt;/li&gt;
&lt;li&gt;都把对方指定为主节点，都启动复制线程；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;半同步复制&#34;&gt;半同步复制&lt;/h2&gt;
&lt;h3 id=&#34;半同步工作模型&#34;&gt;半同步工作模型&lt;/h3&gt;
&lt;p&gt;​	默认情况下，mysql复制是异步的，即主库发送日志后即返回，可以提交事务做数据持久化变更，不关心从库是否正确接收并应用到本地，&lt;strong&gt;性能好，但是主库挂掉，从库又没来得及接受对应binlog的情况，就会丢失一部分数据，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;半同步复制，主库的数据变更至少发送到一个从库上，并确认从库成功接收并应用后再返回，才能进行事务的提交，即数据变更至少保存2份，在2个节点上，从而提高了数据的安全性&lt;/strong&gt;，常结合mha做高可用集群&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201005152444759.png&#34; alt=&#34;image-20201005152444759&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;半同步配置&#34;&gt;半同步配置&lt;/h3&gt;
&lt;p&gt;​	1、&lt;strong&gt;配置主节点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#默认没有开启半同步相关参数
MariaDB [(none)]&amp;gt; show global variables like &#39;%semi%&#39;;
Empty set (0.00 sec)

#半同步相关的2个so模块
[root@host4 ~]# rpm -ql mariadb-server |grep so |grep semi
/usr/lib64/mysql/plugin/semisync_master.so
/usr/lib64/mysql/plugin/semisync_slave.so

#加载安装半同步复制的主节点模块，设置为启用，设置超时时间为1000毫秒
MariaDB [(none)]&amp;gt; install plugin rpl_semi_sync_master soname &#39;semisync_master.so&#39;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; set global rpl_semi_sync_master_enabled=1;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; set global rpl_semi_sync_master_timeout=1000;
Query OK, 0 rows affected (0.00 sec)

#此时查看相关变量，显示为on
MariaDB [(none)]&amp;gt; show global variables like &#39;%semi%&#39;;
+------------------------------------+-------+
| Variable_name                      | Value |
+------------------------------------+-------+
| rpl_semi_sync_master_enabled       | ON    |
| rpl_semi_sync_master_timeout       | 1000  |
| rpl_semi_sync_master_trace_level   | 32    |
| rpl_semi_sync_master_wait_no_slave | ON    |
+------------------------------------+-------+
4 rows in set (0.00 sec)

#此时从节点个数为0，需要配置从节点
MariaDB [(none)]&amp;gt; show global status like &#39;%semi%&#39;;
+--------------------------------------------+-------+
| Variable_name                              | Value |
+--------------------------------------------+-------+
| Rpl_semi_sync_master_clients               | 0     |
| Rpl_semi_sync_master_net_avg_wait_time     | 0     |
| Rpl_semi_sync_master_net_wait_time         | 0     |
| Rpl_semi_sync_master_net_waits             | 0     |
| Rpl_semi_sync_master_no_times              | 0     |
| Rpl_semi_sync_master_no_tx                 | 0     |
| Rpl_semi_sync_master_status                | ON    |
| Rpl_semi_sync_master_timefunc_failures     | 0     |
| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |
| Rpl_semi_sync_master_tx_wait_time          | 0     |
| Rpl_semi_sync_master_tx_waits              | 0     |
| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |
| Rpl_semi_sync_master_wait_sessions         | 0     |
| Rpl_semi_sync_master_yes_tx                | 0     |
+--------------------------------------------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	2、&lt;strong&gt;配置从节点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#加载安装半同步复制模块的从节点模块，启用，重启复制线程使得配置生效
MariaDB [(none)]&amp;gt; install plugin rpl_semi_sync_slave soname &#39;semisync_slave.so&#39;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; set global rpl_semi_sync_slave_enabled=1;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; stop slave;
Query OK, 0 rows affected (0.00 sec)
MariaDB [(none)]&amp;gt; start slave;
Query OK, 0 rows affected (0.00 sec)

#此时从节点半同步模块开启，主节点显示有1个从节点连接
MariaDB [(none)]&amp;gt; show global status like &#39;%semi%&#39;;
+----------------------------+-------+
| Variable_name              | Value |
+----------------------------+-------+
| Rpl_semi_sync_slave_status | ON    |
+----------------------------+-------+

MariaDB [(none)]&amp;gt; show global status like &#39;%semi%&#39;;
+--------------------------------------------+-------+
| Variable_name                              | Value |
+--------------------------------------------+-------+
| Rpl_semi_sync_master_clients               | 1     |
| Rpl_semi_sync_master_net_avg_wait_time     | 0     |
| Rpl_semi_sync_master_net_wait_time         | 0     |
| Rpl_semi_sync_master_net_waits             | 0     |
| Rpl_semi_sync_master_no_times              | 0     |
| Rpl_semi_sync_master_no_tx                 | 0     |
| Rpl_semi_sync_master_status                | ON    |
| Rpl_semi_sync_master_timefunc_failures     | 0     |
| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |
| Rpl_semi_sync_master_tx_wait_time          | 0     |
| Rpl_semi_sync_master_tx_waits              | 0     |
| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |
| Rpl_semi_sync_master_wait_sessions         | 0     |
| Rpl_semi_sync_master_yes_tx                | 0     |
+--------------------------------------------+-------+

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;半同步验证&#34;&gt;半同步验证&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#半同步正常时，创建数据库立即完成
MariaDB [(none)]&amp;gt; create database semi1;
Query OK, 1 row affected (0.00 sec)

#此时显示半同步的从连接有1个
MariaDB [(none)]&amp;gt; show global status like &#39;%semi%&#39;;
+--------------------------------------------+-------+
| Variable_name                              | Value |
+--------------------------------------------+-------+
| Rpl_semi_sync_master_clients               | 1     |
| Rpl_semi_sync_master_net_avg_wait_time     | 671   |
| Rpl_semi_sync_master_net_wait_time         | 1342  |
| Rpl_semi_sync_master_net_waits             | 2     |
| Rpl_semi_sync_master_no_times              | 0     |
| Rpl_semi_sync_master_no_tx                 | 0     |
| Rpl_semi_sync_master_status                | ON    |
| Rpl_semi_sync_master_timefunc_failures     | 0     |
| Rpl_semi_sync_master_tx_avg_wait_time      | 734   |
| Rpl_semi_sync_master_tx_wait_time          | 1469  |
| Rpl_semi_sync_master_tx_waits              | 2     |
| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |
| Rpl_semi_sync_master_wait_sessions         | 0     |
| Rpl_semi_sync_master_yes_tx                | 2     |
+--------------------------------------------+-------+
14 rows in set (0.00 sec)


#关闭从节点的半同步参数，重启复制线程后，才能生效
MariaDB [(none)]&amp;gt; set global rpl_semi_sync_slave_enabled=0;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; stop slave;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; start slave;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show global status like &#39;%semi%&#39;;
+----------------------------+-------+
| Variable_name              | Value |
+----------------------------+-------+
| Rpl_semi_sync_slave_status | OFF   |
+----------------------------+-------+

#此时创建库，会经历1s的超时时长，超过设置的1s超时时间后，会自动降级为异步复制，【避免了从库挂掉，卡住，影响主库的正常写入】
MariaDB [(none)]&amp;gt; create database semi3;
Query OK, 1 row affected (1.01 sec)
#将从库重新开启半同步复制，创建库又立刻完成，【自动恢复为半同步复制】
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基于gitd的复制&#34;&gt;基于gitd的复制&lt;/h2&gt;
&lt;h3 id=&#34;gtid简介&#34;&gt;gtid简介&lt;/h3&gt;
&lt;p&gt;​	global transaction id全局事务标识符；mysql5.6开始支持，&lt;strong&gt;不同于传统的复制方式，需要找到binlog的position，只需要配置主节点的ip，端口，账户，密码即可，会自动寻找同步点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gitd组成：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	server_uuid:transaction_id，一组复制集群中，全局位置，server_uuid来源于auto.cnf&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gtid服务器相关选项&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gtid_mode 开启gtid模式
enfore_gtid_consistency 保证gtid安全的参数

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gtid架构配置&#34;&gt;gtid架构配置&lt;/h3&gt;
&lt;p&gt;MariaDB has supported global transaction IDs (GTIDs) for replication since version 10.0.2.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/gtid/#setting-up-a-new-slave-with-an-empty-server&#34;&gt;https://mariadb.com/kb/en/gtid/#setting-up-a-new-slave-with-an-empty-server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/en//replication-gtids-howto.html&#34;&gt;https://dev.mysql.com/doc/refman/5.6/en//replication-gtids-howto.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文档，mariadb和mysql的gitd实现机制和配置方式均不同&lt;/p&gt;
&lt;p&gt;注意配置10.0.2以后的yum源，centos7默认的mariadb5.5不支持&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;gt; /etc/yum.repos.d/mariadb.repo &amp;lt;&amp;lt;&#39;EOF&#39;
[mariadb]  
name = MariaDB  
baseurl =https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadb-10.3.23/yum/centos7-amd64/
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB  
gpgcheck=1  
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主节点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# vim /etc/my.cnf.d/server.cnf 
# this is only for the mysqld standalone daemon
[mysqld]
server_id=2
log-bin
[root@host2 ~]# systemctl restart mariadb

MariaDB [(none)]&amp;gt; grant replication slave on *.* to repl@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;
#修改配置文件，创建复制用户
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从节点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# vim /etc/my.cnf.d/server.cnf 
# this is only for the mysqld standalone daemon
[mysqld]
server_id=3
[root@host2 ~]# systemctl restart mariadb
#修改配置文件，指明主节点信息

MariaDB [(none)]&amp;gt;   CHANGE MASTER TO master_host=&amp;quot;192.168.80.101&amp;quot;, master_port=3306, master_user=&amp;quot;repl&amp;quot;, master_password = &#39;wang&#39;,master_use_gtid=current_pos;
Query OK, 0 rows affected (0.006 sec)

MariaDB [(none)]&amp;gt; start slave;
Query OK, 0 rows affected (0.004 sec)

MariaDB [(none)]&amp;gt; show slave status\G;

#之后，主库创建数据库，测试主从库的数据同步，测试正常，截图略
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;复制相关增强配置&#34;&gt;复制相关增强配置&lt;/h2&gt;
&lt;h3 id=&#34;复制过滤器&#34;&gt;复制过滤器&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;让从节点仅仅复制指定的数据库，或指定的表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主节点端：主节点上，设置只对特定的库做binlog的记录，&lt;strong&gt;没有binlog记录的库，崩溃时无法恢复&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;--binlog-ignore-db=db_name
--binlog-do-db=db_name
#相关配置参数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从节点端：主节点仍对所有的库的数据更改做binlog记录，从库也全都收，但sql thread读取relay log时，只读取特定的库或表的事件进行重放，&lt;strong&gt;缺点是：会造成网络io和磁盘存储的浪费&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;--replicate-do-db=db_name
--replicate-ignore-db=db_name
--replicate-do-table=db_name.tbl_name
--replicate-ignore-table=db_name.tbl_name
--replicate-wild-do-table=db_name.tbl_name
--replicate-wild-ignore-table=db_name.tbl_name
#从节点配置时，相关配置参数
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;配置方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、配置主从&lt;/p&gt;
&lt;p&gt;​	略&lt;/p&gt;
&lt;p&gt;2、采用主库忽略特定库的binlog方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#主节点创建3个库
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| mysql              |
| performance_schema |
| test1              |
| test2              |
| test23             |
+--------------------+

#修改主节点配置文件，主库不记录test1库的binlog，并重启
[mysqld]
...
binlog-ignore-db=test1


#主节点删除库
MariaDB [(none)]&amp;gt; drop database test23;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; drop database test2;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; drop database test1;
Query OK, 0 rows affected (0.00 sec)

#从节点对应的test1库没有删除，因为主节点设置了忽略
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| performance_schema |
| test1              |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、采用从库忽略的方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#主库选择db1库，并创建2个表
MariaDB [db1]&amp;gt; create table t1(id int);
Query OK, 0 rows affected (0.00 sec)

MariaDB [db1]&amp;gt; create table t2(id int);
Query OK, 0 rows affected (0.00 sec)

MariaDB [db1]&amp;gt; show tables;
+---------------+
| Tables_in_db1 |
+---------------+
| t1            |
| t2            |
+---------------+

# 修改从节点的配置文件，配置忽略db1.t1的数据变化
[root@host3 ~]# cat /etc/my.cnf
[mysqld]
server_id=3
log-bin
read-only=on
relay-log=on
replicate-ignore-table=db1.t1
[root@host3 ~]# systemctl restart mariadb

# 主库做数据修改，检查从库的数据变化
#创建了2个表，向表中插入数据后，
MariaDB [db1]&amp;gt; create table t1(id int);
Query OK, 0 rows affected (0.01 sec)
MariaDB [db1]&amp;gt; create table t2(id int);
Query OK, 0 rows affected (0.01 sec)

MariaDB [db1]&amp;gt; insert into t1 values(2);
Query OK, 1 row affected (0.00 sec)

MariaDB [db1]&amp;gt; insert into t2 values(2);
Query OK, 1 row affected (0.00 sec)

#从库上，t1没有随之变化，因为设置了忽略
MariaDB [db1]&amp;gt; select * from t1;
Empty set (0.00 sec)

MariaDB [db1]&amp;gt; select * from t2;
+------+
| id   |
+------+
|    2 |
+------+
1 row in set 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;复制加密&#34;&gt;复制加密&lt;/h3&gt;
&lt;p&gt;​	默认情况下，复制的通信连接是明文的，具有安全隐患，因为可以采用ssl证书加密通信的方式来加强安全性；&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/replication-solutions-encrypted-connections.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/replication-solutions-encrypted-connections.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/replication-with-secure-connections/&#34;&gt;https://mariadb.com/kb/en/replication-with-secure-connections/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置实现：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主服务器开启ssl认证，配置ca和自己的证书和自己的私钥路径；&lt;/li&gt;
&lt;li&gt;创建的replication salve复制账户要求使用ssl连接&lt;/li&gt;
&lt;li&gt;从服务器使用change master to时指明ssl选项，包括自己的从服务器的一套证书，私钥&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生成证书和私钥：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#主节点上，创建存储证书，私钥的目录
[root@host2 ~]# mkdir /etc/my.cnf.d/ssl
[root@host2 ~]# cd /etc/my.cnf.d/ssl/
[root@host2 ssl]# ll
total 0

#生成ca的私钥
[root@host2 ssl]# (umask 066;openssl genrsa 2048 &amp;gt; cakey.pem)
Generating RSA private key, 2048 bit long modulus
......+++
........................................................+++
e is 65537 (0x10001)
[root@host2 ssl]# ll
total 4
-rw------- 1 root root 1679 Oct  6 13:44 cakey.pem

#生成ca的自签名证书
[root@host2 ssl]# openssl req -new -x509 -key cakey.pem -out cacert.pem -days 3650

#分别对主和从节点生成私钥和证书请求文件
[root@host2 ssl]# openssl req -newkey rsa:2048 -days 365 -nodes -keyout master.key &amp;gt; master.csr
[root@host2 ssl]# openssl req -newkey rsa:2048 -days 365 -nodes -keyout slave.key &amp;gt; slave.csr

#对主和从节点的2个证书请求文件进行签发
[root@host2 ssl]#  openssl x509 -req -in master.csr  -CA cacert.pem -CAkey cakey.pem -set_serial 01 &amp;gt; master.crt
Signature ok

Getting CA Private Key
[root@host2 ssl]# openssl x509 -req -in slave.csr  -CA cacert.pem -CAkey cakey.pem -set_serial 02 &amp;gt; slave.crt
Signature ok

#将从节点的私钥，证书，ca证书发到从节点上
[root@host2 ssl]# scp slave.key slave.crt cacert.pem 192.168.80.102:/etc/my.cnf.d/ssl/

[root@host3 ~]# mkdir /etc/my.cnf.d/ssl
[root@host3 ~]# cd !$
cd /etc/my.cnf.d/ssl
[root@host3 ssl]# ll
total 0
[root@host3 ssl]# ll
total 12
-rw-r--r-- 1 root root 1334 Oct  6 13:55 cacert.pem
-rw-r--r-- 1 root root 1200 Oct  6 13:55 slave.crt
-rw-r--r-- 1 root root 1704 Oct  6 13:55 slave.key
[root@host3 ssl]# 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主节点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#配置证书路径，并创建带有ssl选项的复制账户，require ssl
[root@host2 ssl]# vim /etc/my.cnf
[mysqld]
...
ssl
ssl-ca=/etc/my.cnf.d/ssl/cacert.pem
ssl-cert=/etc/my.cnf.d/ssl/master.crt
ssl-key=/etc/my.cnf.d/ssl/master.key
[root@host2 ssl]# systemctl restart mariadb

MariaDB [(none)]&amp;gt; grant replication slave on *.* to repl@&#39;192.168.80.%&#39; identified by &#39;wang&#39; require ssl;
Query OK, 0 rows affected (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从节点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#从库修改配置文件，添加ssl选项，和从库相关的证书文件路径
[root@host3 ssl]# vim /etc/my.cnf
[mysqld]
ssl
ssl-ca=/etc/my.cnf.d/ssl/cacert.pem
ssl-cert=/etc/my.cnf.d/ssl/slave.crt
ssl-key=/etc/my.cnf.d/ssl/slave.key
[root@host3 ssl]# systemctl restart mariadb

#连入mysql，清空原有的主从配置
MariaDB [(none)]&amp;gt; stop slave;
Query OK, 0 rows affected (0.01 sec)

MariaDB [(none)]&amp;gt; reset slave all;
Query OK, 0 rows affected (0.01 sec)

MariaDB [(none)]&amp;gt; show slave status\G;
Empty set (0.00 sec)

#change master to添加ssl选项，并指明证书的路径
MariaDB [(none)]&amp;gt; CHANGE MASTER TO
    -&amp;gt;   MASTER_HOST=&#39;192.168.80.101&#39;,
    -&amp;gt;   MASTER_USER=&#39;repl&#39;,
    -&amp;gt;   MASTER_PASSWORD=&#39;wang&#39;,
    -&amp;gt;   MASTER_PORT=3306,
    -&amp;gt;   MASTER_LOG_FILE=&#39;on.000006&#39;, 
    -&amp;gt;   MASTER_LOG_POS=406,
    -&amp;gt;   MASTER_SSL=1,
    -&amp;gt;   MASTER_SSL_CA=&#39;/etc/my.cnf.d/ssl/cacert.pem&#39;,
    -&amp;gt;   MASTER_SSL_CERT=&#39;/etc/my.cnf.d/ssl/slave.crt&#39;,
    -&amp;gt;   MASTER_SSL_KEY=&#39;/etc/my.cnf.d/ssl/slave.key&#39;,
    -&amp;gt;   MASTER_CONNECT_RETRY=10;
Query OK, 0 rows affected (0.00 sec)

#启动线程，查看状态，
MariaDB [(none)]&amp;gt; start slave;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.80.101
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: on.000006
          Read_Master_Log_Pos: 406
               Relay_Log_File: on.000002
                Relay_Log_Pos: 522
        Relay_Master_Log_File: on.000006
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: 
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: db1.t1
                Until_Log_Pos: 0
#指明了ssl选项在用，以及证书路径                
           Master_SSL_Allowed: Yes
           Master_SSL_CA_File: /etc/my.cnf.d/ssl/cacert.pem
           Master_SSL_CA_Path: 
              Master_SSL_Cert: /etc/my.cnf.d/ssl/slave.crt
            Master_SSL_Cipher: 
               Master_SSL_Key: /etc/my.cnf.d/ssl/slave.key
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;复制的监控与维护&#34;&gt;复制的监控与维护&lt;/h3&gt;
&lt;p&gt;清理日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;purge {binary|master} logs {to &#39;log_name&#39; | before datetime_expr}
reset master
reset slave all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复制监控：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show master status
show binary logs
show binlog events
show slave status
show processlist

#检查从库是否落后于主库，在show slave stauts中
Seconds_Behind_Master: NULL

#主从数据一致性检查工具
percona-tools
https://www.percona.com/software/database-tools/percona-toolkit

#数据不一致修复方法
删除从库，从头重新复制
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql-replication/" term="mysql-replication" label="mysql-replication" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql日志管理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/" />
            <id>https://latteStudio.github.io/posts/mysql%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</id>
            <updated>2021-03-09T12:31:23&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql的日志管理</summary>
            
                <content type="html">&lt;h1 id=&#34;日志类型&#34;&gt;日志类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;事务日志 transaction log&lt;/li&gt;
&lt;li&gt;错误日志 error log&lt;/li&gt;
&lt;li&gt;通用日志 general log&lt;/li&gt;
&lt;li&gt;慢查询日志 slow query log&lt;/li&gt;
&lt;li&gt;二进制日志 bin log&lt;/li&gt;
&lt;li&gt;中继日志 relay log&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务日志&#34;&gt;事务日志&lt;/h2&gt;
&lt;p&gt;​	由存储引擎管理，事务日志记录了对数据的各种操作，记录了一个个已经完成或未完成的事务，依靠事务日志可以重放或回滚事务操作，应和数据文件分开存储，&lt;strong&gt;数据损坏时，根据事务日志可以进行补救&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;redo log&lt;/li&gt;
&lt;li&gt;undo log&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关变量&#34;&gt;相关变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show variables like &#39;%innodb_log%&#39;;
+-------------------------------+------------+
| Variable_name                 | Value      |
+-------------------------------+------------+
| innodb_log_arch_dir           |            |
| innodb_log_arch_expire_sec    | 0          |
| innodb_log_archive            | OFF        |
| innodb_log_block_size         | 0          |
| innodb_log_buffer_size        | 16777216   |
| innodb_log_checksum_algorithm | DEPRECATED |
| innodb_log_checksums          | ON         |
| innodb_log_compressed_pages   | ON         |
| innodb_log_file_size          | 50331648   |
| innodb_log_files_in_group     | 2          |
| innodb_log_group_home_dir     | ./         |
| innodb_log_optimize_ddl       | ON         |
| innodb_log_write_ahead_size   | 8192       |

# 事务日志有自己的内存buffer区，日志的写盘策略，由参数innodb_flush_log_at_trx_commit决定；
# 0：每秒将buffer区内容刷一次磁盘，刷盘频率不高，性能较好，但崩溃会丢失一秒的事务日志（此处不考虑磁盘崩溃）
# 1，每提交一个事务就写缓存，立刻刷盘一次，大量并发的短事务场景下，刷盘频率较高，不容易丢失事务日志
# 2，每提交一个事务，就写缓存，刷盘是每s刷一次
# 默认是1，容错级别最大

MariaDB [(none)]&amp;gt; select @@global.innodb_flush_log_at_trx_commit;
+-----------------------------------------+
| @@global.innodb_flush_log_at_trx_commit |
+-----------------------------------------+
|                                       1 |
+-----------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;错误日志&#34;&gt;错误日志&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mysqld进程启动、运行、停止时一些信息&lt;/li&gt;
&lt;li&gt;event scheduler 运行event产生的日志信息&lt;/li&gt;
&lt;li&gt;主从复制中，从服务器启动从服务器线程时产生的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关变量-1&#34;&gt;相关变量&lt;/h3&gt;
&lt;p&gt;日志路径：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show global variables like &amp;quot;%log_error%&amp;quot;;
+---------------+-----------------------------+
| Variable_name | Value                       |
+---------------+-----------------------------+
| log_error     | /data/mysql/host2.b.com.err |
+---------------+-----------------------------+
默认在数据目录下的主机名结尾加.err后缀的文件；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;log_warnings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show global variables like &amp;quot;%log_warnings%&amp;quot;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| log_warnings  | 2     |
+---------------+-------+
是否记录警告级别日志
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;通用日志&#34;&gt;通用日志&lt;/h2&gt;
&lt;p&gt;记录了对数据库的通用操作，一般是sql语句，有存储为文件格式和mysql数据库中表的格式；2种方式；&lt;/p&gt;
&lt;h3 id=&#34;相关变量-2&#34;&gt;相关变量&lt;/h3&gt;
&lt;p&gt;通用日志文件路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show global variables like &amp;quot;%general_log%&amp;quot;;
+------------------+-----------+
| Variable_name    | Value     |
+------------------+-----------+
| general_log      | OFF       |
| general_log_file | host2.log |
+------------------+-----------+
默认关闭，默认文件名主机名短格式.log

MariaDB [(none)]&amp;gt; set @@global.general_log=on;
Query OK, 0 rows affected (0.01 sec)

MariaDB [(none)]&amp;gt; show global variables like &amp;quot;%general_log%&amp;quot;;
+------------------+-----------+
| Variable_name    | Value     |
+------------------+-----------+
| general_log      | ON        |
| general_log_file | host2.log |
+------------------+-----------+
开启通用日志，随即生成通用日志文件；

[root@host2 ~]# ll /data/mysql/host2.log 
-rw-rw---- 1 mysql mysql 250 Sep 24 11:26 /data/mysql/host2.log
[root@host2 ~]# tail !$
tail /data/mysql/host2.log
/usr/local/mysql/bin/mysqld, Version: 10.2.25-MariaDB-log (MariaDB Server). started with:
Tcp port: 3306  Unix socket: /tmp/mysql.sock
Time                 Id Command    Argument
200924 11:26:51	   11 Query	show global variables like &amp;quot;%general_log%&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;日志格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show global variables like &amp;quot;%log_output%&amp;quot;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| log_output    | FILE  |
+---------------+-------+
默认文件，有file，table，none三种选项；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;慢查询日志&#34;&gt;慢查询日志&lt;/h2&gt;
&lt;h3 id=&#34;相关变量-3&#34;&gt;相关变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show variables like &#39;%query_log%&#39;;
+---------------------+----------------+
| Variable_name       | Value          |
+---------------------+----------------+
| slow_query_log      | OFF            |
| slow_query_log_file | host2-slow.log |
+---------------------+----------------+
默认没有开启，不支持在线修改，需要修改配置文件，重启；



MariaDB [(none)]&amp;gt; show variables like &#39;%query%&#39;;
+------------------------------+----------------+
| Variable_name                | Value          |
+------------------------------+----------------+
| expensive_subquery_limit     | 100            |
| ft_query_expansion_limit     | 20             |
| have_query_cache             | YES            |
| long_query_time              | 10.000000      |
| query_alloc_block_size       | 16384          |
| query_cache_limit            | 1048576        |
| query_cache_min_res_unit     | 4096           |
| query_cache_size             | 1048576        |
| query_cache_strip_comments   | OFF            |
| query_cache_type             | OFF            |
| query_cache_wlock_invalidate | OFF            |
| query_prealloc_size          | 24576          |
| slow_query_log               | ON             |
| slow_query_log_file          | host2-slow.log |
+------------------------------+----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二进制日志&#34;&gt;二进制日志&lt;/h2&gt;
&lt;p&gt;​	记录了导致数据改变，或可能导致数据改变的sql语句；不依赖存储引擎，&lt;/p&gt;
&lt;h3 id=&#34;作用&#34;&gt;作用&lt;/h3&gt;
&lt;p&gt;​	通过重放，二进制日志文件中的事件，生成数据库数据的一份副本；&lt;strong&gt;二进制日志要和数据文件分开存储，以保证数据丢失时，二进制日志可以帮助恢复数据；&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;中继日志&#34;&gt;中继日志&lt;/h3&gt;
&lt;p&gt;​	主从复制结构中，从服务器中从主节点的二进制日志中读取事件，并存储到本地，就成了中继日志，&lt;strong&gt;本质也属于二进制文件&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;日志记录格式&#34;&gt;日志记录格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;语句，基于statements，记录了改变数据的sql，默认模式；&lt;/li&gt;
&lt;li&gt;行，基于row，记录了改变后的数据，此种模式记录的日志量较大&lt;/li&gt;
&lt;li&gt;混合模式，行和语句，系统综合使用语句和行模式&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show variables like &#39;%binlog%&#39;;
+-----------------------------------------+----------------------+
| Variable_name                           | Value                |
+-----------------------------------------+----------------------+
| binlog_format                           | MIXED                |
| binlog_optimize_thread_scheduling       | ON                   |
| max_binlog_cache_size                   | 18446744073709547520 |
缓存空间大小定义
| max_binlog_size                         | 1073741824           |
每个binlog文件的最大值，达到该值会滚动文件
| max_binlog_stmt_cache_size              | 18446744073709547520 |
| read_binlog_speed_limit                 | 0                    |
| sync_binlog                             | 0                    |
是否立即刷盘，默认0，表示有os进行定期刷盘
| wsrep_forced_binlog_format              | NONE                 |
+-----------------------------------------+----------------------+
默认是mixed模式

MariaDB [(none)]&amp;gt; show variables like &#39;%sql_log_bin%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| sql_log_bin   | ON    |
+---------------+-------+
1 row in set (0.00 sec)
# on表示开启binlog

MariaDB [(none)]&amp;gt; show variables like &#39;%log_bin%&#39;;
+---------------------------------+-----------------------------+
| Variable_name                   | Value                       |
+---------------------------------+-----------------------------+
| log_bin                         | ON                          |
| log_bin_basename                | /data/mysql/mysql-bin       |
| log_bin_compress                | OFF                         |
| log_bin_compress_min_len        | 256                         |
| log_bin_index                   | /data/mysql/mysql-bin.index |
| log_bin_trust_function_creators | OFF                         |
| sql_log_bin                     | ON                          |
+---------------------------------+-----------------------------+
binlog的路径，索引文件路径，不开启压缩；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;日志文件路径&#34;&gt;日志文件路径&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;-rw-rw---- 1 mysql mysql    29277 Sep 18 14:42 mysql-bin.000001
...
-rw-rw---- 1 mysql mysql      342 Sep 24 15:35 mysql-bin.000017
-rw-rw---- 1 mysql mysql      323 Sep 24 15:35 mysql-bin.index
[root@host2 ~]# ll /data/mysql/
# index是索引文件，数字结尾的是二进制文件，会不断滚动；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看binlog&#34;&gt;查看binlog&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show binary logs;
+------------------+-----------+
| Log_name         | File_size |
+------------------+-----------+
| mysql-bin.000001 |     29277 |
| mysql-bin.000002 |       365 |
| mysql-bin.000003 |       365 |
| mysql-bin.000004 |       365 |
| mysql-bin.000005 |      1685 |
| mysql-bin.000006 |       365 |
| mysql-bin.000007 |       365 |
| mysql-bin.000008 |      2592 |
| mysql-bin.000009 |       745 |
| mysql-bin.000010 |       365 |
| mysql-bin.000011 |       365 |
| mysql-bin.000012 |       669 |
| mysql-bin.000013 |      1038 |
| mysql-bin.000014 |       365 |
| mysql-bin.000015 |       365 |
| mysql-bin.000016 |       365 |
| mysql-bin.000017 |       342 |
+------------------+-----------+
查看现有binlog文件，

MariaDB [(none)]&amp;gt; show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000017 |      342 |              |                  |
+------------------+----------+--------------+------------------+
查看现在binlog的文件及当前位置，主从复制是会用到；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mysqlbinlog&#34;&gt;mysqlbinlog&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysqlbinlog --start-position=245 --stop-position=300 /data/mysql/mysql-bin.000017 -v
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
/*!40019 SET @@session.max_insert_delayed_threads=0*/;
/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
DELIMITER /*!*/;
# at 4
#200924 15:35:23 server id 1  end_log_pos 256 CRC32 0x4f6078b5 	Start: binlog v 4, server v 10.2.25-MariaDB-log created 200924 15:35:23 at startup
# Warning: this binlog is either in use or was not closed properly.
ROLLBACK/*!*/;
BINLOG &#39;
O0xsXw8BAAAA/AAAAAABAAABAAQAMTAuMi4yNS1NYXJpYURCLWxvZwAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAA7TGxfEzgNAAgAEgAEBAQEEgAA5AAEGggAAAAICAgCAAAACgoKAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAEEwQADQgICAoKCgG1eGBP
&#39;/*!*/;
mysqlbinlog: Out of memory (Needed 1278955752 bytes)
ERROR: Error in Log_event::read_log_event(): &#39;Out of memory&#39;, data_len: 1278955360, event_type: 10
DELIMITER ;
# End of log file
ROLLBACK /* added by mysqlbinlog */;
/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;

常用选项：
--start-position --stop-position，
--start-datetime --stop-datetime
后跟具体的binlog文件；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;日志滚动&#34;&gt;日志滚动&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000017 |      342 |              |                  |
+------------------+----------+--------------+------------------+
1 row in set (0.00 sec)

MariaDB [(none)]&amp;gt; flush logs;
Query OK, 0 rows affected (0.01 sec)

MariaDB [(none)]&amp;gt; show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000018 |      385 |              |                  |
+------------------+----------+--------------+------------------+
# 主从复制或备份前，一般滚动一下日志文件，使得之后记录的binlog事件，在一个新的文件内；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除日志：可以删除指定日志，或位置之前的日志，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; help purge
Name: &#39;PURGE BINARY LOGS&#39;
Description:
Syntax:
PURGE { BINARY | MASTER } LOGS
    { TO &#39;log_name&#39; | BEFORE datetime_expr }

...

Examples:
PURGE BINARY LOGS TO &#39;mysql-bin.010&#39;;
PURGE BINARY LOGS BEFORE &#39;2008-04-02 22:46:26&#39;;

# 删除所有binlog，
MariaDB [(none)]&amp;gt; reset master;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; show master status;
+------------------+----------+--------------+------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+------------------+----------+--------------+------------------+
| mysql-bin.000001 |      328 |              |                  |
+------------------+----------+--------------+------------------+

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql服务器选项与变量</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E9%A1%B9%E4%B8%8E%E5%8F%98%E9%87%8F/" />
            <id>https://latteStudio.github.io/posts/mysql%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E9%A1%B9%E4%B8%8E%E5%8F%98%E9%87%8F/</id>
            <updated>2021-03-09T12:30:57&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql服务器选项与变量</summary>
            
                <content type="html">&lt;h1 id=&#34;服务器选项options&#34;&gt;服务器选项options&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/server-option-variable-reference.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/server-option-variable-reference.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/full-list-of-mariadb-options-system-and-status-variables/&#34;&gt;https://mariadb.com/kb/en/full-list-of-mariadb-options-system-and-status-variables/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql和mariadb官方手册，每个变量或服务器选项会列出默认值，取值范围、生效范围、是否可以动态修改；&lt;/p&gt;
&lt;p&gt;**生效范围：**全局有效，或本会话有效&lt;/p&gt;
&lt;p&gt;**修改时：**支持运行时修改，或修改后必须重启后生效&lt;/p&gt;
&lt;h2 id=&#34;mysqd选项&#34;&gt;mysqd选项&lt;/h2&gt;
&lt;p&gt;查看mysqld支持的选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysqld --verbose --help

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看运行时mysql的变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[root@host2 ~]# mysqladmin -uroot -pyes variables
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看mysqld启动时将要用到的选项&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysqld --print-defaults
mysqld would have been started with the following arguments:
--port=3306 --socket=/tmp/mysql.sock --skip-external-locking --key_buffer_size=16M --max_allowed_packet=1M --table_open_cache=64 --sort_buffer_size=512K --net_buffer_length=8K --read_buffer_size=256K --read_rnd_buffer_size=512K --myisam_sort_buffer_size=8M --datadir=/data/mysql --innodb_file_per_table=on --skip_name_resolve=on --log-bin=mysql-bin --binlog_format=mixed --server-id=1 
# 是通过读取配置文件获得的
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;系统变量variable&#34;&gt;系统变量variable&lt;/h1&gt;
&lt;p&gt;the scope of the variable (Var Scope) is Global, Session, or both.&lt;/p&gt;
&lt;p&gt;服务器的系统变量，分为全局和会话2种级别；&lt;/p&gt;
&lt;h2 id=&#34;全局&#34;&gt;全局&lt;/h2&gt;
&lt;h3 id=&#34;查看全局变量&#34;&gt;查看全局变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [information_schema]&amp;gt; show global variables\G;
# 查看所有的全局变量


MariaDB [information_schema]&amp;gt; select @@wsrep_sst_method;
+--------------------+
| @@wsrep_sst_method |
+--------------------+
| rsync              |
+--------------------+
1 row in set (0.00 sec)
# 查看某变量的值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改全局变量&#34;&gt;修改全局变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;set global var_name=value;
set @@global.var_name=value;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;会话&#34;&gt;会话&lt;/h2&gt;
&lt;h3 id=&#34;查看会话变量&#34;&gt;查看会话变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [information_schema]&amp;gt; show session variables\G;
# 查看所有系统变量

MariaDB [information_schema]&amp;gt; select @@wsrep_sst_method;
+--------------------+
| @@wsrep_sst_method |
+--------------------+
| rsync              |
+--------------------+
1 row in set (0.00 sec)
# 查看某变量值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;修改会话变量&#34;&gt;修改会话变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;set session var_name=value;
set @@session.var_name=value;

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;状态变量status&#34;&gt;状态变量status&lt;/h1&gt;
&lt;p&gt;状态变量为只读；不像系统变量可以修改（运行时或必须重启）；也分为全局和会话2个级别&lt;/p&gt;
&lt;h2 id=&#34;全局-1&#34;&gt;全局&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [information_schema]&amp;gt; show global status\G;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;会话-1&#34;&gt;会话&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [information_schema]&amp;gt; show session status\G;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;sql_mode&#34;&gt;sql_mode&lt;/h1&gt;
&lt;p&gt;详见：https://mariadb.com/kb/en/sql-mode/&lt;/p&gt;
&lt;p&gt;sql_mode可以对执行的sql语句做一些约束限制；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no_auto_create_user：禁止grant创建密码为空的用户&lt;/li&gt;
&lt;li&gt;no_zero_date 不允许使用0000-00-00的时间&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;默认的sql mode&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [information_schema]&amp;gt; select @@sql_mode;
+-------------------------------------------------------------------------------------------+
| @@sql_mode                                                                                |
+-------------------------------------------------------------------------------------------+
| STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION |
+-------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;查询优化&#34;&gt;查询优化&lt;/h1&gt;
&lt;h2 id=&#34;sql执行过程&#34;&gt;sql执行过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;通过mysql协议连接到mysql服务器端软件；&lt;/li&gt;
&lt;li&gt;通过网络发送sql语句；&lt;/li&gt;
&lt;li&gt;根据sql的hash值对比缓存，若有hash值相同的语句说明相同的sql之前执行过，可以直接返回缓存中结果；&lt;/li&gt;
&lt;li&gt;如果没有命中缓存，则经由语法解析、预处理、等步骤&lt;/li&gt;
&lt;li&gt;再经由查询优化器，对sql做性能上的优化处理&lt;/li&gt;
&lt;li&gt;然后生成执行计划；&lt;/li&gt;
&lt;li&gt;由执行引擎执行生成的执行计划；&lt;/li&gt;
&lt;li&gt;通过存储引擎提供的接口执行执行计划；&lt;/li&gt;
&lt;li&gt;将查询后的结果缓存一份，并返回客户端；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200922162541949.png&#34; alt=&#34;image-20200922162541949&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;查询缓存&#34;&gt;查询缓存&lt;/h2&gt;
&lt;h3 id=&#34;不会被缓存的sql&#34;&gt;不会被缓存的sql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;加了sql_no_cache参数&lt;/li&gt;
&lt;li&gt;查询sql中有自定义函数now(),curdate()等&lt;/li&gt;
&lt;li&gt;对临时表的查询操作&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查询缓存相关变量&#34;&gt;查询缓存相关变量&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;query_cache_min_res_unit
查询缓存内存块的分配单位，默认4k

query_cache_limit
单个缓存能缓存的最大值，默认1m，即单个语句查询结果大于1m的不能缓存

query_cache_size
查询缓存的总大小

query_cache_type
是否开启缓存，取值为on，off，demand

sql_cache
sql_no_cache
查询语句中，明确指定


&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查询缓存相关状态变量&#34;&gt;查询缓存相关状态变量&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show global status like &#39;Qcache%&#39;;
+-------------------------+---------+
| Variable_name           | Value   |
+-------------------------+---------+
| Qcache_free_blocks      | 1       |
| Qcache_free_memory      | 1031336 |
| Qcache_hits             | 0       |
| Qcache_inserts          | 0       |
| Qcache_lowmem_prunes    | 0       |
| Qcache_not_cached       | 0       |
| Qcache_queries_in_cache | 0       |
| Qcache_total_blocks     | 1       |
+-------------------------+---------+

空闲状态的块
空闲状态的内存总量
查询缓存命中次数
向缓存中插入新的缓存次数，即未命中次数
因内存空间不足，比移除的缓存数
没有被cache的sql数
在缓存中sql数
内存中总共块数量

缓存命中率：
qcache_hits/(qcache_hits + qcache_insert)
缓存内存使用率：
(query_cache_size-qcache_free_memory)/query_cache_size
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql用户管理与权限管理</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E5%9F%BA%E7%A1%80%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/" />
            <id>https://latteStudio.github.io/posts/mysql%E5%9F%BA%E7%A1%80%E7%AE%A1%E7%90%86%E6%93%8D%E4%BD%9C/</id>
            <updated>2021-03-09T12:31:14&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">用户管理 用户格式 mysql的用户格式：用户名@&#39;允许该用户可以用来远程登陆的主机ip……</summary>
            
                <content type="html">&lt;h1 id=&#34;用户管理&#34;&gt;用户管理&lt;/h1&gt;
&lt;h2 id=&#34;用户格式&#34;&gt;用户格式&lt;/h2&gt;
&lt;p&gt;mysql的用户格式：用户名@&#39;允许该用户可以用来远程登陆的主机ip或主机名&#39;&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@&#39;localhost&#39; 允许root用户本机登陆
root@&#39;192.168.80.%&#39; 允许root用户在80网段的任务ip的主机上，发起登陆请求
root@&#39;%&#39; 允许root用户在任何地址的主机上登陆

# 一般root用户要禁止远程ip登陆，只允许本机登陆，为了安全
# root是mysql实例的管理员用户，对于各个业务库一般都会建立业务用的用户
# 对于各个业务库才针对需要放行特定的ip和用户名登陆；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;权限管理&#34;&gt;权限管理&lt;/h1&gt;
&lt;h2 id=&#34;相关表&#34;&gt;相关表&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;mysql库是mysql进行权限管理的元数据库；
其中user表是用户信息相关的表
其中用户名，主机，加密后的密码字符串，为创建用户时需要指定的3个字段；
以下默认的值表示，只有root用户存在，且root用户只能在本机登陆，

MariaDB [mysql]&amp;gt; select user,host,authentication_string from user;
+------+-----------+-----------------------+
| user | host      | authentication_string |
+------+-----------+-----------------------+
| root | localhost |                       |
| root | 127.0.0.1 |                       |
| root | ::1       |                       |
+------+-----------+-----------------------+
3 rows in set (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建用户&#34;&gt;创建用户&lt;/h2&gt;
&lt;p&gt;1、创建用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; create user user1;
Query OK, 0 rows affected (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、给用户授权，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; grant all on *.* to user1@&#39;192.168.80.%&#39; identified by &#39;linux&#39;;
Query OK, 0 rows affected (0.00 sec)
# 授权给user1用户所有库的所有表的（*.*）所有权限(all)，并且user1用户在80网段的主机上可以登陆，密码是linux

MariaDB [mysql]&amp;gt; select user,host,authentication_string from user;
+-------+--------------+-----------------------+
| user  | host         | authentication_string |
+-------+--------------+-----------------------+
| root  | localhost    |                       |
| user1 | 192.168.80.% |                       |
| root  | 127.0.0.1    |                       |
| root  | ::1          |                       |
| user1 | %            |                       |
+-------+--------------+-----------------------+

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、访问登陆&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 在102主机上通过网络登陆访问；

[root@host3 mariadb-10.2.25]# mysql -uuser1 -h192.168.80.101 -plinux
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 11
Server version: 10.2.25-MariaDB-log MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| db1                |
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、创建用户授权语句合并；&lt;/p&gt;
&lt;p&gt;​	先建用户再授权，和建立授权合并的，在user表中数据不一致，一般采用后者；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; grant all on *.* to user2@&#39;192.168.80.%&#39; identified by &#39;linux&#39;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [mysql]&amp;gt; select user,host,password from user;
+-------+--------------+-------------------------------------------+
| user  | host         | password                                  |
+-------+--------------+-------------------------------------------+
| root  | localhost    | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| user1 | 192.168.80.% | *6F3CAE7C3BBB2A5B5D933738682953BC21AEBEE7 |
| root  | 127.0.0.1    | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| root  | ::1          | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| user1 | %            |                                           |
| user2 | 192.168.80.% | *6F3CAE7C3BBB2A5B5D933738682953BC21AEBEE7 |
+-------+--------------+-------------------------------------------+
6 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;修改密码3种方法&#34;&gt;修改密码3种方法&lt;/h2&gt;
&lt;p&gt;1、set password命令：&lt;strong&gt;sql命令行&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; set password for user2@&#39;192.168.80.%&#39; = password(&#39;wang&#39;);
Query OK, 0 rows affected (0.00 sec)

MariaDB [mysql]&amp;gt; select user,host,password from user;
+-------+--------------+-------------------------------------------+
| user  | host         | password                                  |
+-------+--------------+-------------------------------------------+
| root  | localhost    | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| user1 | 192.168.80.% | *6F3CAE7C3BBB2A5B5D933738682953BC21AEBEE7 |
| root  | 127.0.0.1    | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| root  | ::1          | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| user1 | %            |                                           |
| user2 | 192.168.80.% | *4DB9D7B9A1EE2F9646C3A6A1CC9A37942588BFBF |
+-------+--------------+-------------------------------------------+

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、update命令修改权限表中对应的字段值！&lt;strong&gt;sql命令行&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; update mysql.user set password=password(&#39;shuai&#39;) where user=&#39;user2&#39; and host=&#39;192.168.80.%&#39;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [mysql]&amp;gt; select user,host,password from user;
+-------+--------------+-------------------------------------------+
| user  | host         | password                                  |
+-------+--------------+-------------------------------------------+
| root  | localhost    | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| user1 | 192.168.80.% | *6F3CAE7C3BBB2A5B5D933738682953BC21AEBEE7 |
| root  | 127.0.0.1    | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| root  | ::1          | *13FDE0EB3CE09F9A02F5F02C7FF07FD6F27B0687 |
| user1 | %            |                                           |
| user2 | 192.168.80.% | *FAD7DBEB59388700AB165A70781CC75F3C75A91B |
+-------+--------------+-------------------------------------------+
6 rows in set (0.00 sec)

MariaDB [mysql]&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、mysqladmin命令：&lt;strong&gt;shell命令行&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 mariadb-10.2.25]# mysqladmin -h192.168.80.101 -uuser2 -pwang password &#39;shuai&#39;
# mysqladmin -hIP可以修改远程的mysql密码 -u要修改的用户名 -p现在用户的密码 password &#39;要修改成的新密码&#39;

[root@host3 mariadb-10.2.25]# mysql -uuser2 -h192.168.80.101 -pshuai
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 32
Server version: 10.2.25-MariaDB-log MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mysql忘记root管理员密码&#34;&gt;mysql忘记root管理员密码&lt;/h2&gt;
&lt;p&gt;1、修改配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysql -uroot -pwfasdf
ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)
# 此时假设忘记密码

# 添加如下2个参数；然后重启；
[root@host2 ~]# vim /etc/my.cnf
[mysqld]
port            = 3306
socket          = /tmp/mysql.sock
skip-grant-tables=1
# 跳过权限表的检查，即可以免密登陆
skip-networking=1
# 由于免密登陆，所以加上此项，禁止网段的连接，此时不可以从网络连接到数据库

[root@host2 ~]# service mysqld restart
Restarting mysqld (via systemctl):                         [  OK  ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、重启后，本机免密进入，修改为新密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 10
Server version: 10.2.25-MariaDB-log MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt; set password for &#39;root&#39;@&#39;localhost&#39; = password(&#39;yes&#39;);
ERROR 1290 (HY000): The MariaDB server is running with the --skip-grant-tables option so it cannot execute this statement

MariaDB [(none)]&amp;gt; update mysql.user set password=password(&#39;yes&#39;) where user=&#39;root&#39; and host=&#39;localhost&#39;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

MariaDB [(none)]&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

# 此时直接免密登陆，仅限本机
# 此时set password命令不可以用，可以用update命令
# 修改后，刷新权限，使之生效
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、去除第一步添加的配置选项，重启，继续使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 注释掉刚2个参数，重启
[mysqld]
port            = 3306
socket          = /tmp/mysql.sock
#skip-grant-tables=1
#skip-networking=1

[root@host2 ~]# service mysqld restart
Restarting mysqld (via systemctl):                         [  OK  ]

# 此时不可以免密登陆，远程也可以继续登陆
[root@host2 ~]# mysql
ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)

# 密码，已经改为新密码
[root@host2 ~]# mysql -uroot -pyes
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 11
Server version: 10.2.25-MariaDB-log MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;授权&#34;&gt;授权&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/grant/&#34;&gt;https://mariadb.com/kb/en/grant/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; help grant;
Name: &#39;GRANT&#39;
Description:
Syntax:
GRANT
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    ON [object_type] priv_level
    TO user_specification [, user_specification] ...
    [REQUIRE {NONE | ssl_option [[AND] ssl_option] ...}]
    [WITH with_option ...]
...

priv_type时权限类型，如update insert select等，all代表所有类型的操作权限；
column_list 表示的是权限加到哪些列上，不加即为所有列
object_type有三种，table，procedure，function
priv_level 即权限的授予范围，如*.* 表示所有库的所有表，db1.* db1库下的所有表，db1.tb1 db1库下的tb1表；

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;回收权限&#34;&gt;回收权限&lt;/h2&gt;
&lt;p&gt;URL: &lt;a href=&#34;https://mariadb.com/kb/en/revoke/&#34;&gt;https://mariadb.com/kb/en/revoke/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; help revoke;
Name: &#39;REVOKE&#39;
Description:
Syntax:
REVOKE
    priv_type [(column_list)]
      [, priv_type [(column_list)]] ...
    ON [object_type] priv_level
    FROM user [, user] ...
和grant相反    
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看某用户授权&#34;&gt;查看某用户授权&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 查看user2@‘192.168.80.%’用户的授权
MariaDB [mysql]&amp;gt; show grants for user2@&#39;192.168.80.%&#39;;
+--------------------------------------------------------------------------------------------------------------------------+
| Grants for user2@192.168.80.%                                                                                            |
+--------------------------------------------------------------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO &#39;user2&#39;@&#39;192.168.80.%&#39; IDENTIFIED BY PASSWORD &#39;*FAD7DBEB59388700AB165A70781CC75F3C75A91B&#39; |
+--------------------------------------------------------------------------------------------------------------------------+

# 利用内置函数，查看当前用户授权信息
MariaDB [mysql]&amp;gt; show grants for current_user;
+----------------------------------------------------------------------------------------------------------------------------------------+
| Grants for root@localhost                                                                                                              |
+----------------------------------------------------------------------------------------------------------------------------------------+
| GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY PASSWORD &#39;*293C17197B3150952CF285A2AD56017E97CA787C&#39; WITH GRANT OPTION |
| GRANT PROXY ON &#39;&#39;@&#39;%&#39; TO &#39;root&#39;@&#39;localhost&#39; WITH GRANT OPTION                                                                          |
+----------------------------------------------------------------------------------------------------------------------------------------+

# mysqld进程启动时会加载所有权限相关的表；
# 修改权限后，一般要flush privileges重载权限表，使之生效！
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;权限类别&#34;&gt;权限类别&lt;/h2&gt;
&lt;p&gt;priv_types代表权限类别，all代表所有类型的权限，也可以精确的只授权需要的类型，只授权创建表授权，只授权查看表的权限等；&lt;/p&gt;
&lt;h3 id=&#34;管理类&#34;&gt;管理类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create user&lt;/li&gt;
&lt;li&gt;create tempprary tables&lt;/li&gt;
&lt;li&gt;show databases&lt;/li&gt;
&lt;li&gt;shutdown&lt;/li&gt;
&lt;li&gt;replication slave&lt;/li&gt;
&lt;li&gt;replication client&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序类&#34;&gt;程序类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;alter&lt;/li&gt;
&lt;li&gt;drop&lt;/li&gt;
&lt;li&gt;excute&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;库和表&#34;&gt;库和表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create&lt;/li&gt;
&lt;li&gt;alter&lt;/li&gt;
&lt;li&gt;drop&lt;/li&gt;
&lt;li&gt;index&lt;/li&gt;
&lt;li&gt;show view&lt;/li&gt;
&lt;li&gt;grant option，自己有权限的相关对象，可以在自己的权限范围内再授予他人&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;字段操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;update&lt;/li&gt;
&lt;li&gt;drop&lt;/li&gt;
&lt;li&gt;delete&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql程序架构和存储引擎</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/" />
            <id>https://latteStudio.github.io/posts/mysql%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</id>
            <updated>2021-03-09T12:30:44&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql服务端的程序架构与存储引擎介绍</summary>
            
                <content type="html">&lt;h1 id=&#34;mysql程序架构&#34;&gt;mysql程序架构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200922101120470.png&#34; alt=&#34;image-20200922101120470&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;连接器&#34;&gt;连接器&lt;/h2&gt;
&lt;p&gt;各种编程语言的编程接口&lt;/p&gt;
&lt;h2 id=&#34;连接池&#34;&gt;连接池&lt;/h2&gt;
&lt;p&gt;负责认证，并发连接数管理，内存检查，缓存等&lt;/p&gt;
&lt;h2 id=&#34;sql接口&#34;&gt;sql接口&lt;/h2&gt;
&lt;p&gt;sql语句的解析、执行、优化、缓存、缓冲等&lt;/p&gt;
&lt;h2 id=&#34;插件式存储引擎&#34;&gt;插件式存储引擎&lt;/h2&gt;
&lt;p&gt;mysql一大特点：支持可插拔的存储引擎，根据不同的业务需要，可以根据安全性、效率、等因素选择不同的存储引擎，常用的是myisam、innodb、现在mariadb和mysql的默认存储引擎都是innodb，&lt;strong&gt;类mysql数据库的各种特性，如事务，都是由存储引擎实现的！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;文件系统&#34;&gt;文件系统&lt;/h2&gt;
&lt;p&gt;关系型数据库管理系统RDMS，是对文件系统做的进一步抽象封装，因此数据库各种对象：表，库，函数，索引等，都表现为文件系统的文件，只是需要rdms才能识别而已；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 mysql]# ll /data/mysql/
drwx------ 2 mysql mysql       52 Sep 21 18:45 db1
drwx------ 2 mysql mysql     4096 Sep 18 14:42 mysql
drwx------ 2 mysql mysql       20 Sep 18 14:42 performance_schema

[root@host2 mysql]# ll /data/mysql/db1/
total 104
-rw-rw---- 1 mysql mysql    61 Sep 21 18:35 db.opt
-rw-rw---- 1 mysql mysql  1027 Sep 21 18:45 stu1.frm
-rw-rw---- 1 mysql mysql 98304 Sep 21 18:45 stu1.ibd

# 如mysql的各个库都表现为文件系统上，mysql数据根目录下的，一个目录
# 库中的表，也根据存储引擎的不同，表现为不同类型的文件，总之都是文件系统上的文件！
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;数据文件&#34;&gt;数据文件&lt;/h2&gt;
&lt;p&gt;mysql中各个表都表现为文件系统上的文件，数据文件也分多种，实际数据文件、索引数据文件等&lt;/p&gt;
&lt;h2 id=&#34;日志文件&#34;&gt;日志文件&lt;/h2&gt;
&lt;p&gt;mysql有各种日志，慢日志，二进制日志，错误日志，redo和undo日志等，也表现为文件系统上的文件&lt;/p&gt;
&lt;h1 id=&#34;存储引擎&#34;&gt;存储引擎&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/storage-engines/&#34;&gt;https://mariadb.com/kb/en/storage-engines/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mysql一大特点：支持可插拔的存储引擎，根据不同的业务需要，可以根据安全性、效率、等因素选择不同的存储引擎，常用的是myisam、innodb、现在mariadb和mysql的默认存储引擎都是innodb，&lt;strong&gt;类mysql数据库的各种特性，如事务，都是由存储引擎实现的！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;存储引擎比较&#34;&gt;存储引擎比较&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Comparison_of_MySQL_database_engines&#34;&gt;https://en.wikipedia.org/wiki/Comparison_of_MySQL_database_engines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200922140759437.png&#34; alt=&#34;image-20200922140759437&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;myisam&#34;&gt;myIsam&lt;/h2&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持事务&lt;/li&gt;
&lt;li&gt;表级锁&lt;/li&gt;
&lt;li&gt;读写相互阻塞&lt;/li&gt;
&lt;li&gt;不支持mvcc多版本并发控制机制&lt;/li&gt;
&lt;li&gt;mysql5.5.5前默认的数据库引擎&lt;/li&gt;
&lt;li&gt;速度很快&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只读场景&lt;/li&gt;
&lt;li&gt;表较少&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ll /data/mysql/mysql/user.*
-rw-rw---- 1 mysql mysql 3191 Sep 18 14:42 /data/mysql/mysql/user.frm
-rw-rw---- 1 mysql mysql  852 Sep 21 19:43 /data/mysql/mysql/user.MYD
-rw-rw---- 1 mysql mysql 4096 Sep 21 19:45 /data/mysql/mysql/user.MYI
# mysql库还是myisam的存储引擎
# 一个表3个文件，分别是表格式文件、数据文件、索引文件

MariaDB [(none)]&amp;gt; show create table mysql.user;
...
 ENGINE=MyISAM DEFAULT CHARSET=utf8
 # 表定义也可查看表用的存储引擎；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;innodb&#34;&gt;innodb&lt;/h2&gt;
&lt;p&gt;innodb支持的系统变量列表：https://mariadb.com/kb/en/innodb-system-variables/#innodb_file_per_table&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行级锁&lt;/li&gt;
&lt;li&gt;支持事务，适合大量短事务场景&lt;/li&gt;
&lt;li&gt;读写阻塞，4种事务隔离等级&lt;/li&gt;
&lt;li&gt;支持mvcc&lt;/li&gt;
&lt;li&gt;crash recover崩溃恢复性好&lt;/li&gt;
&lt;li&gt;mysql5.5.5后的默认引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
[root@host2 ~]# ll /data/mysql/db1/
total 104
-rw-rw---- 1 mysql mysql    61 Sep 21 18:35 db.opt
-rw-rw---- 1 mysql mysql  1027 Sep 21 18:45 stu1.frm
-rw-rw---- 1 mysql mysql 98304 Sep 21 18:45 stu1.ibd

# 默认情况：
ibddata1 ibddata2...所有表的数据索引文件都放在一个文件表空间文件中；

# 启用每个表单独一个表空间文件选项：
innodb_file_per_table=on启用后，
frm为表格式定义文件
ibd为数据、索引存储文件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;管理存储引擎&#34;&gt;管理存储引擎&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 查看支持的存储引擎
MariaDB [(none)]&amp;gt; show engines;


# 查看当前存储引擎
MariaDB [(none)]&amp;gt; show variables like &#39;storage_engine%&#39;;
+----------------+--------+
| Variable_name  | Value  |
+----------------+--------+
| storage_engine | InnoDB |
+----------------+--------+
1 row in set (0.00 sec)

# 修改存储引擎
[mysqld]
default_storage_engine=MYISAM
[root@host2 ~]# service mysqld restart
MariaDB [(none)]&amp;gt; show variables like &#39;storage_engine%&#39;;
+----------------+--------+
| Variable_name  | Value  |
+----------------+--------+
| storage_engine | MyISAM |
+----------------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看某库中所有表的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; show table status from mysql;


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看某表的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [mysql]&amp;gt; show table status like &#39;user&#39;;

MariaDB [mysql]&amp;gt; show create table mysql.user;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建表并指定存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; create table tb1(id int not null primary key) engine=myisam;
Query OK, 0 rows affected (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改表的存储引擎&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; alter table tb1 engine=innodb;

# 可看到对应数据文件格式变为了innodb文件格式
[root@host2 ~]# ll /data/mysql/db1/
total 112
-rw-rw---- 1 mysql mysql    61 Sep 21 18:35 db.opt
-rw-rw---- 1 mysql mysql  1027 Sep 21 18:45 stu1.frm
-rw-rw---- 1 mysql mysql 98304 Sep 21 18:45 stu1.ibd
-rw-rw---- 1 mysql mysql   922 Sep 22 14:46 tb1.frm
-rw-rw---- 1 mysql mysql     0 Sep 22 14:46 tb1.MYD
-rw-rw---- 1 mysql mysql  1024 Sep 22 14:46 tb1.MYI
[root@host2 ~]# ll /data/mysql/db1/
total 204
-rw-rw---- 1 mysql mysql    61 Sep 21 18:35 db.opt
-rw-rw---- 1 mysql mysql  1027 Sep 21 18:45 stu1.frm
-rw-rw---- 1 mysql mysql 98304 Sep 21 18:45 stu1.ibd
-rw-rw---- 1 mysql mysql   922 Sep 22 14:48 tb1.frm
-rw-rw---- 1 mysql mysql 98304 Sep 22 14:48 tb1.ibd

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mysql默认库及作用&#34;&gt;mysql默认库及作用&lt;/h2&gt;
&lt;h3 id=&#34;mysql&#34;&gt;mysql&lt;/h3&gt;
&lt;p&gt;mysql的元数据，存储了用户，权限等元数据信息，一般读较多，写较少，默认myisam引擎&lt;/p&gt;
&lt;h3 id=&#34;performance_schema&#34;&gt;performance_schema&lt;/h3&gt;
&lt;p&gt;存储了mysql的性能参数，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; use performance_schema;
Database changed
MariaDB [performance_schema]&amp;gt; show tables;
+----------------------------------------------------+
| Tables_in_performance_schema                       |
+----------------------------------------------------+
| accounts                                           |
| cond_instances                                     |
| events_stages_current                              |

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;information_schema&#34;&gt;information_schema&lt;/h3&gt;
&lt;p&gt;基于内存的，不存储于磁盘的文件系统，提供了访问数据库元数据的方式；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [performance_schema]&amp;gt; use information_schema
Database changed
MariaDB [information_schema]&amp;gt; show tables;
+---------------------------------------+
| Tables_in_information_schema          |
+---------------------------------------+
| ALL_PLUGINS                           |
| APPLICABLE_ROLES                      |
| CHARACTER_SETS                        |
| CHECK_CONSTRAINTS                     |

&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql索引与事务</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E7%B4%A2%E5%BC%95%E4%B8%8E%E4%BA%8B%E5%8A%A1/" />
            <id>https://latteStudio.github.io/posts/mysql%E7%B4%A2%E5%BC%95%E4%B8%8E%E4%BA%8B%E5%8A%A1/</id>
            <updated>2021-03-09T12:31:31&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql索引与事务</summary>
            
                <content type="html">&lt;h1 id=&#34;index索引&#34;&gt;index索引&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;​	一种特殊的数据组织结构；一般建立在经常作为查询条件的字段上，索引靠存储引擎实现；mysql中索引即index，也称为key；&lt;/p&gt;
&lt;h2 id=&#34;优缺点&#34;&gt;优缺点&lt;/h2&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对合适的数据类型建立合适的索引，并结合合适的查询条件，可以减少表扫描的次数，提高查询效率&lt;/li&gt;
&lt;li&gt;可以将随机io转为顺序io&lt;/li&gt;
&lt;li&gt;帮助服务器避免排序和使用临时表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新数据时，需要对应更新索引，降低了插入速度&lt;/li&gt;
&lt;li&gt;占用额外空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类型&#34;&gt;类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B+树索引、hash索引、r 树索引&lt;/li&gt;
&lt;li&gt;聚集索引、非聚集索引，（数据索引是否存储在一起）&lt;/li&gt;
&lt;li&gt;一级索引，二级索引，（二级索引存储的指针是指向一级索引的数据，再由一级索引指向真实的数据行地址）&lt;/li&gt;
&lt;li&gt;稠密索引、稀疏索引（是否索引了每个数据项&lt;/li&gt;
&lt;li&gt;简单索引、组合索引
&lt;ul&gt;
&lt;li&gt;左前缀索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b树&#34;&gt;b+树&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200923103531749.png&#34; alt=&#34;image-20200923103531749&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;b+树特点：磁盘块根据地址指针，组成成一个向下的树状结构，枝干节点不存储实际数据，只存储向下某范围（小于、之间、大于）三个范围的数据的地址指针，三层节点即可索引百万级别数据，&lt;strong&gt;数据只存储于最底层的叶子节点；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;假设查找数据50，加载第一个根节点，和3个数据5、28、65做比较，在28和65之间，对应p2指针的范围；&lt;/li&gt;
&lt;li&gt;再和二级磁盘块数据范围比较，50在35到56之间，对应该磁盘块的p2指针&lt;/li&gt;
&lt;li&gt;再向下级查找，遍历查找即可找到50所对应的数据内容，&lt;/li&gt;
&lt;li&gt;相比于没有索引时的全表扫描，大大的提高了效率！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;2、适用范围&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;b+树，存储的数据，其索引会按照一定顺序排列，各级别磁盘块都在某个范围内，&lt;strong&gt;因此适合范围查找，精确查询，字符串类型按照顺序排列也适合左前缀查找&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全值精确匹配；如姓名wb&lt;/li&gt;
&lt;li&gt;匹配最左前缀；如姓是wang的&lt;/li&gt;
&lt;li&gt;匹配范围，如姓wang和ma之间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3、不适用&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不适用右后缀索引，如以end结尾的字符串，因为b+树的索引顺序排列字符串型数据时，是按照左前缀的顺序排列，的有后缀是无序的！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ps：同一列，有可能会根据查询条件的不同，建立不同类型的索引&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;b-树&#34;&gt;b-树&lt;/h3&gt;
&lt;h3 id=&#34;红黑树&#34;&gt;红黑树&lt;/h3&gt;
&lt;h3 id=&#34;hash索引&#34;&gt;hash索引&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1、特点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	对查询值做hash处理，不同值具有唯一的hash值，hash索引存储了hash值和对应的数据指针，根据hash值对应可以快速找到对应的一条数据，&lt;strong&gt;因为hash值的散列和唯一性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、适合：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为hash索引只使用等值查询：查询条件：=、in（）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、不适合&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不适合模糊查询；&lt;/li&gt;
&lt;li&gt;不适合范围查询&lt;/li&gt;
&lt;li&gt;不适合顺序查询；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空间索引r-tree&#34;&gt;空间索引R-tree&lt;/h3&gt;
&lt;p&gt;​	myisam支持地理空间索引，用于地理数据存储；innodb在mysql5.7之后支持&lt;/p&gt;
&lt;h3 id=&#34;全文索引fulltext&#34;&gt;全文索引fulltext&lt;/h3&gt;
&lt;p&gt;​	在文本中检索关键词，类似搜索引擎、elasticserach等，innodb在mysql5.6之后支持&lt;/p&gt;
&lt;h3 id=&#34;聚集索引&#34;&gt;聚集索引&lt;/h3&gt;
&lt;p&gt;​	以b+树为例，根据查询条件在某索引上进行查询时，在末端叶子节点找到了满足查询条件的数据，如id=666，那么此时如果一整行数据和id=666存储在同一块磁盘空间，（确切的说是相邻），那么这个索引就是聚集索引&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;即索引和数据存储在一起&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;非聚集索引&#34;&gt;非聚集索引&lt;/h3&gt;
&lt;p&gt;​	仍以b+树为例，在根据查询条件查到目标叶子节点时，没有立刻找到对应的数据，而是找到一个指针，该指针指向了完整数据所在的物理磁盘地址，那么这个索引就是非聚集索引；&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;即索引和数据分开存放，不在相邻的磁盘地址空间&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;主键索引&#34;&gt;主键索引&lt;/h3&gt;
&lt;p&gt;​	是在主键上建立的索引，一般是聚集索引，索引和数据相邻存储&lt;/p&gt;
&lt;h3 id=&#34;二级索引&#34;&gt;二级索引&lt;/h3&gt;
&lt;p&gt;​	在非主键字段上建立的索引，一般是非聚集索引，索引的值是对应主机索引的地址指针，再通过主键索引间接找到数据项；属于间接索引，也就二级索引；&lt;/p&gt;
&lt;h2 id=&#34;索引优化策略&#34;&gt;索引优化策略&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;冗余索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	根据不同查询需求，可能对某字段建立多个索引，如a字段建立索引，a和b又建立了联合索引；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优化策略&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sql语句中单独使用索引列：&lt;strong&gt;即索引列尽量不参与运算，不做函数参数，即where子句中，索引列尽量单独出现&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;左前缀索引：利用指定字段的前多少个字符构建左前缀索引，&lt;/li&gt;
&lt;li&gt;多列索引：and操作时，适合多列索引；&lt;/li&gt;
&lt;li&gt;列中中null值的，最好不设置索引&lt;/li&gt;
&lt;li&gt;尽量使用短索引，最好指定前缀长度&lt;/li&gt;
&lt;li&gt;like语句，%结尾的适用前缀索引&lt;/li&gt;
&lt;li&gt;索引列尽量不参于运算和函数&lt;/li&gt;
&lt;li&gt;尽量不用不确定的not in和&amp;lt;&amp;gt;，而用相对确定的in 和=&lt;/li&gt;
&lt;li&gt;多表连接时，尽量小表join大表&lt;/li&gt;
&lt;li&gt;大量数据表，使用limit&lt;/li&gt;
&lt;li&gt;explain和profile分析查询语句&lt;/li&gt;
&lt;li&gt;查询慢查询日志，找出慢sql分析优化&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;索引管理&#34;&gt;索引管理&lt;/h2&gt;
&lt;h3 id=&#34;创建&#34;&gt;创建&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; create index idx1 on tb1(id);
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0


MariaDB [db1]&amp;gt; alter table tb1 add index idx2(id);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看帮助&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;创建索引，设置索引名，索引类型有b树，和hash，选择在哪个表的哪些字段创建索引，
字段可以选择一定长度前缀进行索引创建，选择倒序，或正序
而额外的选项
MariaDB [db1]&amp;gt; help create index;
Name: &#39;CREATE INDEX&#39;
Description:
Syntax:
CREATE [ONLINE|OFFLINE] [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name
    [index_type]
    ON tbl_name (index_col_name,...)
    [index_option] ...

index_col_name:
    col_name [(length)] [ASC | DESC]

index_type:
    USING {BTREE | HASH}

index_option:
    KEY_BLOCK_SIZE [=] value
  | index_type
  | WITH PARSER parser_name
  | COMMENT &#39;string&#39;

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;删除&#34;&gt;删除&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; drop index idx2 on tb1;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

# drop或alter语句均可
MariaDB [db1]&amp;gt; alter table tb1 drop index idx1;
Query OK, 0 rows affected (0.00 sec)
Records: 0  Duplicates: 0  Warnings: 0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看&#34;&gt;查看&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; show indexes from tb1\G;
自动为主键字段添加的主键索引；
*************************** 1. row ***************************
        Table: tb1
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: id
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null: 
   Index_type: BTREE
      Comment: 
Index_comment: 
*************************** 2. row ***************************
        Table: tb1
   Non_unique: 1
     Key_name: idx1
 Seq_in_index: 1
  Column_name: id
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null: 
   Index_type: BTREE
      Comment: 
Index_comment: 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;优化表空间&#34;&gt;优化表空间&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; optimize table tb1;
+---------+----------+----------+-------------------------------------------------------------------+
| Table   | Op       | Msg_type | Msg_text                                                          |
+---------+----------+----------+-------------------------------------------------------------------+
| db1.tb1 | optimize | note     | Table does not support optimize, doing recreate + analyze instead |
| db1.tb1 | optimize | status   | OK                                                                |
+---------+----------+----------+-------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看索引使用情况&#34;&gt;查看索引使用情况&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [db1]&amp;gt; set global userstat=1;
Query OK, 0 rows affected (0.00 sec)

MariaDB [db1]&amp;gt; show index_statistics;
Empty set (0.00 sec)

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;explain分析索引&#34;&gt;explain分析索引&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;explain select ...
可以获取查询语句的执行计划，用于查看查询优化器如何执行查询；

MariaDB [db1]&amp;gt; explain select * from mysql.user;
+------+-------------+-------+------+---------------+------+---------+------+------+-------+
| id   | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra |
+------+-------------+-------+------+---------------+------+---------+------+------+-------+
|    1 | SIMPLE      | user  | ALL  | NULL          | NULL | NULL    | NULL |    7 |       |
+------+-------------+-------+------+---------------+------+---------+------+------+-------+

id：select语句编号

select_type：
	simple 简单查询
	subquery 简单子查询
	primary 最外面的select
	derived
	..

table：select用到的表

详见官方手册：
https://dev.mysql.com/doc/refman/5.7/en/explain.html
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;transaction事务&#34;&gt;transaction事务&lt;/h1&gt;
&lt;h2 id=&#34;锁与并发&#34;&gt;锁与并发&lt;/h2&gt;
&lt;p&gt;锁粒度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表级锁&lt;/li&gt;
&lt;li&gt;行级锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;锁种类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读锁，共享锁，多个读可同时进行，互不影响；互不阻塞&lt;/li&gt;
&lt;li&gt;写锁，独占锁，一个时刻只能有一个写锁，会阻塞其他写和读；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储引擎实现；不同的锁策略、粒度；&lt;/li&gt;
&lt;li&gt;服务器实现，mysql-server进程实现，表级别锁，用户会话可显式请求加锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐式，存储引擎自动添加&lt;/li&gt;
&lt;li&gt;显式，用户手动显式请求加锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;显式锁&#34;&gt;显式锁&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;语法：
锁类型有read和write
LOCK TABLES
    tbl_name [[AS] alias] lock_type
    [, tbl_name [[AS] alias] lock_type] ...

lock_type: {
    READ [LOCAL]
  | [LOW_PRIORITY] WRITE
}

UNLOCK TABLES
解锁


# 通常备份前加全局读锁
flush tables tb-name with read lock

# 查询时加锁
select clause for update 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;死锁&#34;&gt;死锁&lt;/h3&gt;
&lt;p&gt;2个或多个事务，占用了其他人将要请求的资源，并请求别人先释放的状态，&lt;/p&gt;
&lt;h2 id=&#34;事务&#34;&gt;事务&lt;/h2&gt;
&lt;h3 id=&#34;定义-1&#34;&gt;定义：&lt;/h3&gt;
&lt;p&gt;transacitions，一组原子性的sql语句，要么全部成功提交，要么全部失败回滚，典型例子，银行转账操作，a向b转张1w，1、从a账户扣钱；2、向b账户加钱，这2步的sql必须一起成功或执行失败，这样才能保证了钱不会凭空增加或消失；&lt;/p&gt;
&lt;h3 id=&#34;事务日志&#34;&gt;事务日志：&lt;/h3&gt;
&lt;p&gt;记录了一个个事务操作的日志，实现redo重做，undo等故障恢复功能；为追加写入，顺序io，效率较高，也叫write ahead logging WAL 预写入日志，顺序写的事务日志比随机写的数据修改优先写，也更快，&lt;/p&gt;
&lt;p&gt;事务日志文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# ll /data/mysql/ib_log*
-rw-rw---- 1 mysql mysql 50331648 Sep 23 17:16 /data/mysql/ib_logfile0
-rw-rw---- 1 mysql mysql 50331648 Sep 18 14:42 /data/mysql/ib_logfile1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;acid特性&#34;&gt;acid特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;a：atomicity原子性，一组原子性的sql语句，要么全部成功提交，要么全部失败回滚&lt;/li&gt;
&lt;li&gt;c：consistency一致性，数据库总是从一个一致性状态，转换为另一个一致性状态&lt;/li&gt;
&lt;li&gt;i：isolation隔离性，一个事务做出的修改，在提交前不能被其他事务所见，隔离共有4种级别&lt;/li&gt;
&lt;li&gt;d：durability，提交事务所做修改永久保存；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事务生命周期&#34;&gt;事务生命周期&lt;/h3&gt;
&lt;p&gt;某些sql会自动隐式的开启事务，用户也可以显示的用begin开启事务，commit提交事务，rollback结束事务；&lt;/p&gt;
&lt;h3 id=&#34;事务操作&#34;&gt;事务操作&lt;/h3&gt;
&lt;p&gt;启动：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;begin
begin work
start transaction


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;commit 提交事务
rollback 回滚事务

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自动事务提交&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set autocommit={1|0}
MariaDB [(none)]&amp;gt; select @@autocommit;
+--------------+
| @@autocommit |
+--------------+
|            1 |
+--------------+
默认是1，自动提交
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事务保存点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;savepoint id_string
设置保存点，id_string是自定义标识字符串
rollback to id_string
返回到某个保存点
release savepoint id_string
删除某保存点
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;事务隔离等级&#34;&gt;事务隔离等级&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200923154929062.png&#34; alt=&#34;image-20200923154929062&#34;&gt;&lt;/p&gt;
&lt;p&gt;1、读未提交&lt;/p&gt;
&lt;p&gt;​	开启某事务1，在此事务期间，别的事务修改了数据，即使还没提交，事务1里可以查看到其修改后的数据，&lt;strong&gt;出现了脏读，当然，也出现了不可重复读，其他事务每修改一次，在事务1里看到的数据就变了一次，即在一次事务内，看到的数据会有多次变化！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、读提交&lt;/p&gt;
&lt;p&gt;​	开启某事务1，在此事务期间，别的事务对数据做了修改，且提交之后，在事务1里通过查询语句可以查到到修改后的数据，没提交时无法查看到修改后的数据，&lt;strong&gt;其他事务每修改一次，在事务1里看到的数据就变了一次，产生了不可重复读&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、可重复读&lt;/p&gt;
&lt;p&gt;​	开启某事务1，在此事务期间，别的事务对数据做了修改，不管提交还是没提交，事务1里都看不到数据的修改，&lt;strong&gt;即事务1期间看到的数据都是事务1开启前一刻的“快照”，数据一致且多次查询都是一样的，即：可重复读；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、串行化&lt;/p&gt;
&lt;p&gt;​	一个事务1期间，不可以开启其他事务，完全串行，没有并发可言！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般采用可重复读级别，事务隔离的实现依靠MVCC多版本并发控制，同一条数据可能存在不同的版本，被同时进行的事务并发操作，数据的多版本共存实现了多个事务的并发进行&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;事务隔离等级设置&#34;&gt;事务隔离等级设置&lt;/h3&gt;
&lt;p&gt;设置方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置文件的 mysqld配置段加入 transaction-isolation=四种级别之一&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
...
transaction-isolation=serializable
然后重启；
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;会话中，设置global或session级别的变量tx_isolation为四种级别之一&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; set [global|session] tx_isolation=&amp;quot;read-uncommitted&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; select @@tx_isolation;
+------------------+
| @@tx_isolation   |
+------------------+
| READ-UNCOMMITTED |
+------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;MariaDB [(none)]&amp;gt; select @@tx_isolation;
+-----------------+
| @@tx_isolation  |
+-----------------+
| REPEATABLE-READ |
+-----------------+
1 row in set (0.00 sec)
# 默认是可重复读级别；

MariaDB [(none)]&amp;gt; set global tx_isolation=&amp;quot;read-uncommitted&amp;quot;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]&amp;gt; select @@tx_isolation;
+------------------+
| @@tx_isolation   |
+------------------+
| READ-UNCOMMITTED |
+------------------+
1 row in set (0.00 sec)
# 会话中修改全局范围内事务隔离等级为读未提交，其他事务查看时也是读未提交；
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;事务验证的实验&#34;&gt;事务验证的实验：&lt;/h3&gt;
&lt;p&gt;开2个xshell创建，都连接到同一个mysql实例，&lt;/p&gt;
&lt;p&gt;实验的两个会话，都要关闭自动提交事务，默认mysql会开启，但是影响性能，一般关闭；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [hellodb]&amp;gt; set @@session.autocommit=0;
Query OK, 0 rows affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select @@session.autocommit;
+----------------------+
| @@session.autocommit |
+----------------------+
|                    0 |
+----------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读未提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [hellodb]&amp;gt; select @@global.tx_isolation;
+-----------------------+
| @@global.tx_isolation |
+-----------------------+
| REPEATABLE-READ       |
+-----------------------+

MariaDB [hellodb]&amp;gt; select @@session.tx_isolation;
+------------------------+
| @@session.tx_isolation |
+------------------------+
| REPEATABLE-READ        |
+------------------------+
##查看默认的事务隔离等级；

MariaDB [hellodb]&amp;gt; set @@session.tx_isolation=&#39;read-uncommitted&#39;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select @@session.tx_isolation;
+------------------------+
| @@session.tx_isolation |
+------------------------+
| READ-UNCOMMITTED       |
+------------------------+
##设置当前会话事务隔离等级为读未提交；开启两个会话-都如此设置；

MariaDB [hellodb]&amp;gt; insert into teachers values(5,&#39;wang&#39;,23,
    -&amp;gt; &#39;M&#39;);
Query OK, 1 row affected (0.00 sec)
——会话1
MariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
+-----+---------------+-----+--------+
——会话2
MariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
+-----+---------------+-----+--------+
5 rows in set (0.00 sec)
## 会话1中向表插入一条数据、自己本事务能看到变化，会话2也能看到该数据；两者看到的是一样的；产生了读未提交效果；


&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;读提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [hellodb]&amp;gt; set @@session.tx_isolation=
    -&amp;gt; &#39;read-committed&#39;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select @@session.tx_isolation;
+------------------------+
| @@session.tx_isolation |
+------------------------+
| READ-COMMITTED         |
+------------------------+
1 row in set (0.00 sec)
## 会话1设置隔离等级为 读提交、会话2也如此设置；

MariaDB [hellodb]&amp;gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

MariaDB [hellodb]&amp;gt; insert into teachers values(5,&#39;wang&#39;,23,&#39;M&#39;);
Query OK, 1 row affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
+-----+---------------+-----+--------+

——会话2
MariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |

## 会话1插入一条数据，自己能看到，会话2看不到，因为1没有提交，提交之后，2再查表才能看到新增的数据；

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可重复读：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB [hellodb]&amp;gt; set @@session.tx_isolation= &#39;repeatable-read&#39;;
Query OK, 0 rows affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select @@session.tx_isolation;
+------------------------+
| @@session.tx_isolation |
+------------------------+
| REPEATABLE-READ        |
+------------------------+
##会话1 2都设置为可重复读、关闭自动提交、手动开启事务；


MariaDB [hellodb]&amp;gt; insert into teachers values(6,&#39;wang&#39;,23,&#39;M&#39;);
Query OK, 1 row affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
|   6 | wang          |  23 | M      |
+-----+---------------+-----+--------+

MariaDB [hellodb]&amp;gt; commit;
##会话1，改了数据，没提交、提交，会话2我都看不到；


ariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
+-----+---------------+-----+--------+
5 rows in set (0.00 sec)

MariaDB [hellodb]&amp;gt; 
MariaDB [hellodb]&amp;gt; 
MariaDB [hellodb]&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
|   6 | wang          |  23 | M      |
+-----+---------------+-----+-------
## 只有会话2我提交或回滚了，结束了我本身的事务，不然，不管你其他事务提交还是没提交，我统统看不到，保证了我看到的所有数据，都是开启事务那一刻的数据，所有数据的时间戳是一致的！ 保证数据的一致性！备份数据库时，就是这种隔离等级，才能保证备份下来的数据一致性状态；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;串行等级；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;——会话1
MariaDB [hellodb]&amp;gt; insert into teachers values(7,&#39;wang&#39;,23,&#39;M&#39;);
Query OK, 1 row affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
|   6 | wang          |  23 | M      |
|   7 | wang          |  23 | M      |
+-----+---------------+-----+--------+
##会话1插入一条数据，

MariaDB [hellodb]&amp;gt; select sql_no_cache * from teachers;
+-----+---------------+-----+--------+
| TID | Name          | Age | Gender |
+-----+---------------+-----+--------+
|   1 | Song Jiang    |  45 | M      |
|   2 | Zhang Sanfeng |  94 | M      |
|   3 | Miejue Shitai |  77 | F      |
|   4 | Lin Chaoying  |  93 | F      |
|   5 | wang          |  23 | M      |
|   6 | wang          |  23 | M      |
+-----+---------------+-----+--------+
6 rows in set (0.00 sec)

MariaDB [hellodb]&amp;gt; commit;
Query OK, 0 rows affected (0.00 sec)

MariaDB [hellodb]&amp;gt; select sql_no_cache * from teachers;
ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction 超时了
## 会话2结束本身事务后，再查询被阻塞了！因为串行化，要查的表正在被会话1的事务占用，所有会话2的查询此表，就得被阻塞，会话1结束事务之后，会话2才可以正常查询！
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql读写分离与反代</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E4%B8%8E%E5%8F%8D%E4%BB%A3/" />
            <id>https://latteStudio.github.io/posts/mysql%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E4%B8%8E%E5%8F%8D%E4%BB%A3/</id>
            <updated>2021-03-09T12:30:52&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql读写分离与反代</summary>
            
                <content type="html">&lt;h1 id=&#34;读写分离&#34;&gt;读写分离&lt;/h1&gt;
&lt;h2 id=&#34;常用读写分离路由&#34;&gt;常用读写分离路由&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mysql-proxy，oracle，已经不推荐使用，官方推荐mysql router&lt;/li&gt;
&lt;li&gt;atlas，奇虎360，https://github.com/Qihoo360/Atlas&lt;/li&gt;
&lt;li&gt;dbproxy，美团&lt;/li&gt;
&lt;li&gt;cetus，网易&lt;/li&gt;
&lt;li&gt;amoeba，http://amoeba.sourceforge.net/doc/amoeba_for_mysql.htm&lt;/li&gt;
&lt;li&gt;cobar，阿里巴巴，基于amoeba&lt;/li&gt;
&lt;li&gt;mycat，基于cobar&lt;/li&gt;
&lt;li&gt;proxysql，常用！https://proxysql.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;proxysql&#34;&gt;proxysql&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;proxysql是mysql的中间件，可以实现：分离sql的读写请求，分流集群负载，sql的安全检查和过滤，sql路由，对应用层隔离透明，高级的sql路由规则等功能&lt;/p&gt;
&lt;p&gt;有2个版本，官方版，和percona版，percona是基于官方版开发，c++，轻量且性能优异&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具有功能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多种方式的读写分离；&lt;/li&gt;
&lt;li&gt;定制基于用户，schema，语句规则，对sql进行路由&lt;/li&gt;
&lt;li&gt;缓存查询结果&lt;/li&gt;
&lt;li&gt;后端节点监控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;官方站点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sysown/proxysql/wiki&#34;&gt;https://github.com/sysown/proxysql/wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://proxysql.com/&#34;&gt;https://proxysql.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/doc/proxysql/index.html&#34;&gt;https://www.percona.com/doc/proxysql/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;p&gt;1、准备，先实现主从复制&lt;/p&gt;
&lt;p&gt;slave节点要设置read-only=1&lt;/p&gt;
&lt;p&gt;略...&lt;/p&gt;
&lt;p&gt;2、基于yum仓库安装，或基于rpm安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#配置yum源
[root@host4 ~]# cat &amp;lt;&amp;lt;EOF | tee /etc/yum.repos.d/proxysql.repo
&amp;gt; [proxysql_repo]
&amp;gt; name= ProxySQL YUM repository
&amp;gt; baseurl=https://repo.proxysql.com/ProxySQL/proxysql-2.0.x/centos/\$releasever
&amp;gt; gpgcheck=1
&amp;gt; gpgkey=https://repo.proxysql.com/ProxySQL/repo_pub_key
&amp;gt; EOF


#安装
[root@host4 yum.repos.d]# yum install -y proxysql
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxysql软件组成&#34;&gt;proxysql软件组成&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host4 yum.repos.d]# rpm -ql proxysql
/etc/logrotate.d/proxysql
/etc/proxysql.cnf
#配置文件
/etc/systemd/system/proxysql-initial.service
/etc/systemd/system/proxysql.service
#服务脚本
/usr/bin/proxysql
#主程序
/usr/share/proxysql/tools/proxysql_galera_checker.sh
/usr/share/proxysql/tools/proxysql_galera_writer.pl

[root@host4 yum.repos.d]# ll /var/lib/proxysql/
total 0
#数据库文件目录，采用的是sqlite数据库
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;启停、基本管理&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host4 yum.repos.d]# systemctl start proxysql
[root@host4 yum.repos.d]# ss -nlt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:6032                           *:*                  
LISTEN     0      128                *:6033                           *:*               
#6032管理端口
#6033对外提供服务端口

#连入管理端口后，默认有5个库，其中disk和stats_history是由对应磁盘文件的，可持久化的库
[root@host4 yum.repos.d]# mysql -uadmin -padmin -P6032 -h127.0.0.1
MySQL [(none)]&amp;gt; show databases;
+-----+---------------+-------------------------------------+
| seq | name          | file                                |
+-----+---------------+-------------------------------------+
| 0   | main          |                                     |
| 2   | disk          | /var/lib/proxysql/proxysql.db       |
| 3   | stats         |                                     |
| 4   | monitor       |                                     |
| 5   | stats_history | /var/lib/proxysql/proxysql_stats.db |
+-----+---------------+-------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;proxysql数据库组成&#34;&gt;proxysql数据库组成&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;【main】是proxysql默认的数据库，表中存储了后端mysql实例的信息，ip，用户密码，路由规则等；
采用的是sqlite数据库存储

runtime_开头的表，为proxysql当前运行的配置内容，不可修改
修改时需修改对应的表，但不以runtime开头，然后load使其生效，save到磁盘使其永久生效
#main库中，runtime开头的表基本都有一个对应的表，如下：
MySQL [(none)]&amp;gt; use main
MySQL [main]&amp;gt; show tables;
+----------------------------------------------------+
| tables                                             |
+----------------------------------------------------+
| mysql_servers                                      |
| mysql_users                                        |
...
| runtime_mysql_servers                              |
| runtime_mysql_users 

【disk】 持久化到磁盘上的配置，sqlite数据文件
【stats】 proxysql运行时抓取的统计信息，
【monitor】 库存储monitor模块收集的信息，主要是对后端db的健康/延迟检查信息
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;main库和monitor库中，runtime_开头的表是运行时配置，无法修改，只能修改同名的但不以runtime开头的表&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;修改后，执行load 。。to runtime立即生效&lt;/li&gt;
&lt;li&gt;执行save 。。 to disk持久生效，保存到proxysql.db文件中&lt;/li&gt;
&lt;li&gt;global_variadbles变量可以设置监听端口，管理账户等，参考官方文档：https://github.com/sysown/proxysql/wiki/Global-variables&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置实现读写分离&#34;&gt;配置实现读写分离&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：添加后端mysql实例节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端mysql节点上：添加用于proxysql监控的用户，并在proxysql上添加此用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：检查监控是否正常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：设置分组信息，设置为读组，和写组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mysql主节点上：配置proxysql用来发送sql的用户，并在proxysql上添加&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：配置读写分离的路由规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试读写操作，是否正常路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：查看状态库中，路由相关状态表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：添加后端mysql实例节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#查看mysql_server表的结构，
   
MySQL [main]&amp;gt; select * from sqlite_master where name=&#39;mysql_servers&#39;\G;
*************************** 1. row ***************************
    type: table
    name: mysql_servers
tbl_name: mysql_servers
rootpage: 2
     sql: CREATE TABLE mysql_servers (hostgroup_id INT CHECK (hostgroup_id&amp;gt;=0) NOT NULL DEFAULT 0 , hostname VARCHAR NOT NULL , port INT CHECK (port &amp;gt;= 0 AND port &amp;lt;= 65535) NOT NULL DEFAULT 3306 , gtid_port INT CHECK ((gtid_port &amp;lt;&amp;gt; port OR gtid_port=0) AND gtid_port &amp;gt;= 0 AND gtid_port &amp;lt;= 65535) NOT NULL DEFAULT 0 , status VARCHAR CHECK (UPPER(status) IN (&#39;ONLINE&#39;,&#39;SHUNNED&#39;,&#39;OFFLINE_SOFT&#39;, &#39;OFFLINE_HARD&#39;)) NOT NULL DEFAULT &#39;ONLINE&#39; , weight INT CHECK (weight &amp;gt;= 0 AND weight &amp;lt;=10000000) NOT NULL DEFAULT 1 , compression INT CHECK (compression IN(0,1)) NOT NULL DEFAULT 0 , max_connections INT CHECK (max_connections &amp;gt;=0) NOT NULL DEFAULT 1000 , max_replication_lag INT CHECK (max_replication_lag &amp;gt;= 0 AND max_replication_lag &amp;lt;= 126144000) NOT NULL DEFAULT 0 , use_ssl INT CHECK (use_ssl IN(0,1)) NOT NULL DEFAULT 0 , max_latency_ms INT UNSIGNED CHECK (max_latency_ms&amp;gt;=0) NOT NULL DEFAULT 0 , comment VARCHAR NOT NULL DEFAULT &#39;&#39; , PRIMARY KEY (hostgroup_id, hostname, port) )
1 row in set (0.01 sec)
   
   
#默认是空，向其插入2个节点，为2个mysql实例的节点信息，默认都在10分组；
MySQL [main]&amp;gt; select * from mysql_servers;
Empty set (0.00 sec)
   
MySQL [main]&amp;gt; insert into mysql_servers(hostgroup_id,hostname,port) values(10,&#39;192.168.80.101&#39;,3306);
Query OK, 1 row affected (0.00 sec)
   
MySQL [main]&amp;gt; insert into mysql_servers(hostgroup_id,hostname,port) values(10,&#39;192.168.80.102&#39;,3306);
Query OK, 1 row affected (0.00 sec)
   
#立即生效、永久生效
MySQL [main]&amp;gt; load mysql servers to runtime;
Query OK, 0 rows affected (0.00 sec)
   
MySQL [main]&amp;gt; save mysql servers to disk;
Query OK, 0 rows affected (0.02 sec)
   
   
#查看是否生效
MySQL [main]&amp;gt; select * from mysql_servers\G;
*************************** 1. row ***************************
       hostgroup_id: 10
           hostname: 192.168.80.101
               port: 3306
          gtid_port: 0
             status: ONLINE
             weight: 1
        compression: 0
    max_connections: 1000
max_replication_lag: 0
            use_ssl: 0
     max_latency_ms: 0
            comment: 
*************************** 2. row ***************************
       hostgroup_id: 10
           hostname: 192.168.80.102
               port: 3306
          gtid_port: 0
             status: ONLINE
             weight: 1
        compression: 0
    max_connections: 1000
max_replication_lag: 0
            use_ssl: 0
     max_latency_ms: 0
            comment: 
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端mysql节点上：添加用于proxysql监控的用户，并在proxysql上添加此用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#主节点创建监控用的 用户，从节点自动同步
MariaDB [(none)]&amp;gt; grant replication client on *.* to monitor@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;
   
#proxysql添加该用户
#利用该用户连接各个mysql实例，通过read-only值来判断各个节点属于读还是写组
   
MySQL [main]&amp;gt; set mysql-monitor_username=&#39;monitor&#39;;
Query OK, 1 row affected (0.00 sec)
MySQL [main]&amp;gt; set mysql-monitor_password=&#39;wang&#39;;
Query OK, 1 row affected (0.00 sec)
   
MySQL [main]&amp;gt; load mysql variables to runtime;
Query OK, 0 rows affected (0.00 sec)
MySQL [main]&amp;gt; save mysql variables to disk;
Query OK, 136 rows affected (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：检查监控是否正常&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MySQL [monitor]&amp;gt; select * from mysql_server_connect_log;
   
MySQL [monitor]&amp;gt; select * from mysql_server_ping_log;
#检查是否有，连接错误，和后端节点ping日志，无错说明连接正常
#实验中，发现连接报错，原因为monitor密码写错
   
MySQL [monitor]&amp;gt; select * from mysql_server_read_only_log;
   
MySQL [monitor]&amp;gt; select * from mysql_server_replication_lag_log;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：设置分组信息，设置为读组，和写组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看该表的字段信息
   
MySQL [main]&amp;gt; select * from sqlite_master where name=&#39;mysql_replication_hostgroups&#39;\G;
*************************** 1. row ***************************
    type: table
    name: mysql_replication_hostgroups
tbl_name: mysql_replication_hostgroups
rootpage: 19
     sql: CREATE TABLE mysql_replication_hostgroups (writer_hostgroup INT CHECK (writer_hostgroup&amp;gt;=0) NOT NULL PRIMARY KEY , reader_hostgroup INT NOT NULL CHECK (reader_hostgroup&amp;lt;&amp;gt;writer_hostgroup AND reader_hostgroup&amp;gt;=0) , check_type VARCHAR CHECK (LOWER(check_type) IN (&#39;read_only&#39;,&#39;innodb_read_only&#39;,&#39;super_read_only&#39;,&#39;read_only|innodb_read_only&#39;,&#39;read_only&amp;amp;innodb_read_only&#39;)) NOT NULL DEFAULT &#39;read_only&#39; , comment VARCHAR NOT NULL DEFAULT &#39;&#39;, UNIQUE (reader_hostgroup))
        
#该表4个字段，分别为写组id，读组id，检查类型，注释
#向其插入2个分组id，id分别为10，和20，分别对应写组，读组，通过read-only的值区分，
   
MySQL [main]&amp;gt; insert into mysql_replication_hostgroups values(10,20,&amp;quot;read_only&amp;quot;,&amp;quot;test&amp;quot;);
Query OK, 1 row affected (0.00 sec)
   
MySQL [main]&amp;gt; load mysql servers to runtime;
Query OK, 0 rows affected (0.00 sec)
   
MySQL [main]&amp;gt; save mysql servers to disk;
Query OK, 0 rows affected (0.02 sec)
   
#可以看到，自动对mysql节点进行归组，利用读取的read-only值是否为1
MySQL [main]&amp;gt; select hostgroup_id,hostname,port,status,weight from mysql_servers;
+--------------+----------------+------+--------+--------+
| hostgroup_id | hostname       | port | status | weight |
+--------------+----------------+------+--------+--------+
| 10           | 192.168.80.101 | 3306 | ONLINE | 1      |
| 20           | 192.168.80.102 | 3306 | ONLINE | 1      |
+--------------+----------------+------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mysql主节点上：配置proxysql用来发送sql的用户，并在proxysql上添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#配置发送sql的用户
MariaDB [(none)]&amp;gt; grant all on *.* to sqluser@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;
Query OK, 0 rows affected (0.000 sec)
   
#proxysql节点上，将该用户信息配置好，该用户默认归属10组，即写组；
MySQL [main]&amp;gt; insert into mysql_users(username,password,default_hostgroup) values(&#39;sqluser&#39;,&#39;wang&#39;,10);
Query OK, 1 row affected (0.00 sec)
   
MySQL [main]&amp;gt; load mysql users to runtime;
Query OK, 0 rows affected (0.00 sec)
   
MySQL [main]&amp;gt; save mysql users to disk;
Query OK, 0 rows affected (0.00 sec)
   
#测试默认组的路由是否成功；
#因为配置了10是默认组，此时的读、写，都是默认组10，即发送到192.168.80.101上，server_id是2，
#以下测试，读写均可以，写主库，从库也可以同步
[root@host4 yum.repos.d]# mysql -usqluser -pwang -P6033 -h127.0.0.1 -e &amp;quot;select @@server_id&amp;quot;;+-------------+
| @@server_id |
+-------------+
|           2 |
+-------------+
   
[root@host4 yum.repos.d]# mysql -usqluser -pwang -P6033 -h127.0.0.1 -e &amp;quot;create database testdb1&amp;quot;;
[root@host4 yum.repos.d]# mysql -usqluser -pwang testdb1 -P6033 -h127.0.0.1 -e &amp;quot;create table t1(id int)&amp;quot;;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：配置读写分离的路由规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#规则相关的表，mysql_query_rules，myql_query_rules_fast_routing，
   
#插入路由规则，将select语句分到20的读组，其中select..for update会写操作，应路由到10的写组，
#利用正则表达式来匹配sql语句，并将其路由到需要的组；
   
#插入2条规则，
MySQL [(none)]&amp;gt; insert into mysql_query_rules(rule_id,active,match_digest,destination_hostgroup,apply) values(1,1,&#39;^select.*for update$&#39;,10,1),(2,1,&#39;^select&#39;,20,1);
Query OK, 2 rows affected (0.00 sec)
   
MySQL [(none)]&amp;gt; load mysql query rules to runtime;
Query OK, 0 rows affected (0.00 sec)
   
MySQL [(none)]&amp;gt; save mysql query rules to disk;
Query OK, 0 rows affected (0.00 sec)
   
#匹配规则时，根据rule_id顺序进行匹配，因此select..for update的范围小，要放到select...的前面
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试读写操作，是否正常路由&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#测试读写分离，读请求已经发到了3上，为从库
[root@host4 yum.repos.d]# mysql -usqluser -pwang -P6033 -h127.0.0.1 -e &amp;quot;select @@server_id&amp;quot;;
+-------------+
| @@server_id |
+-------------+
|           3 |
+-------------+
   
#一个事务内发起的读请求，仍然会发到写组上，serverid为主库的2；
[root@host4 yum.repos.d]# mysql -usqluser -pwang -P6033 -h127.0.0.1 \
&amp;gt; -e &#39;start transaction;select @@server_id;commit;select @@server_id&#39;
+-------------+
| @@server_id |
+-------------+
|           2 |
+-------------+
+-------------+
| @@server_id |
+-------------+
|           3 |
+-------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;proxysql上：查看状态库中，路由相关状态表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 查看sql路由分发情况的状态统计信息，
# 读操作都发到了10分组上，读写分离成功；
MySQL [(none)]&amp;gt; select hostgroup,sum_time,count_star,digest_text from 
stats_mysql_query_digest order by sum_time desc;
+-----------+----------+------------+----------------------------------+
| hostgroup | sum_time | count_star | digest_text                      |
+-----------+----------+------------+----------------------------------+
| 10        | 9727     | 1          | create table t1(id int)          |
| 10        | 6323     | 4          | select @@server_id               |
| 20        | 3645     | 2          | select @@server_id               |
| 10        | 3037     | 1          | insert testdb1.t1 values(?)      |
| 10        | 2020     | 1          | create database testdb1          |
| 20        | 1280     | 1          | select * from testdb1            |
| 10        | 1268     | 1          | create databse testdb1           |
| 20        | 1244     | 1          | select * from testdb1.t1         |
| 10        | 1081     | 1          | start transaction                |
| 10        | 592      | 1          | commit                           |
| 10        | 0        | 10         | select @@version_comment limit ? |
| 10        | 0        | 1          | select @@version_comment limit ? |
+-----------+----------+------------+----------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql-proxy/" term="mysql-proxy" label="mysql-proxy" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">mysql高可用集群</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/" />
            <id>https://latteStudio.github.io/posts/mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</id>
            <updated>2021-03-09T12:31:09&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">mysql常用的高可用集群解决方案介绍，以及其中mha集群、galera cluster的配置实现</summary>
            
                <content type="html">&lt;h1 id=&#34;mysql的常用高可用解决方案&#34;&gt;mysql的常用高可用解决方案&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;mmm :mutil master replication manager&lt;/li&gt;
&lt;li&gt;mha: master high avaliablity&lt;/li&gt;
&lt;li&gt;gelera cluster&lt;/li&gt;
&lt;li&gt;GR:group replcation&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mmm主主复制管理器&#34;&gt;mmm主主复制管理器&lt;/h1&gt;
&lt;p&gt;multi-master- replication manager for mysql，mysql主主复制管理器，是一套脚本，&lt;strong&gt;实现了对mysql replication的监控和故障转移，并能管理mysql 主主复制的配置，同一个时刻只有一个节点可写；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mysql-mmm.org/&#34;&gt;https://mysql-mmm.org/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;mha-master-high-avaliablity&#34;&gt;mha master high avaliablity&lt;/h1&gt;
&lt;p&gt;master high avaiablity，对主节点进行监控，可实现故障转移，从节点提升为主节点，&lt;strong&gt;基于主从复制实现，客户端需要配合实现，mha集群要求至少3台，1主、2从，其中1个从做备份的主&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;淘宝tmha支持一主一从；&lt;/p&gt;
&lt;p&gt;官方网站和详细wiki文档如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yoshinorim/mha4mysql-manager&#34;&gt;https://github.com/yoshinorim/mha4mysql-manager&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yoshinorim/mha4mysql-manager/wiki&#34;&gt;https://github.com/yoshinorim/mha4mysql-manager/wiki&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mha集群架构&#34;&gt;mha集群架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201003163522394.png&#34; alt=&#34;image-20201003163522394&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个mha的管理节点，可以同时管理多套mysql的主从集群；其中每一套主从集群有1主，若干个从，一般至少2个；&lt;/p&gt;
&lt;h2 id=&#34;mha工作原理&#34;&gt;mha工作原理&lt;/h2&gt;
&lt;p&gt;mha管理节点，配置了整套集群的各个节点的信息，它了解各个节点的信息，通过脚本不管监测其状态；&lt;strong&gt;当发生了主节点故障时&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保存主节点的binlog；（前提是binlog和数据文件单独存放，不随着数据文件一起损坏）&lt;/li&gt;
&lt;li&gt;找出包含最新中继日志文件的从节点；（因每个节点的接收速度会有差异）&lt;/li&gt;
&lt;li&gt;应用有最新位置的的节点的中继日志到其他节点（使得各个从节点的中继日志保持一致）&lt;/li&gt;
&lt;li&gt;应用主节点的binlog，崩溃前一刻和从节点中继日志位置，之间的差异部分&lt;/li&gt;
&lt;li&gt;从所有从节点中选举出来一个新的主节点；&lt;/li&gt;
&lt;li&gt;使得其他从节点指向新的主节点；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201003164725326.png&#34; alt=&#34;image-20201003164725326&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;mha安装&#34;&gt;mha安装&lt;/h2&gt;
&lt;p&gt;官方安装文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yoshinorim/mha4mysql-manager/wiki/Installation#downloading-mha-node-and-mha-manager&#34;&gt;https://github.com/yoshinorim/mha4mysql-manager/wiki/Installation#downloading-mha-node-and-mha-manager&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mha软件组成&#34;&gt;mha软件组成&lt;/h3&gt;
&lt;p&gt;主要有2个软件包组成：管理节点需要安装manager包和node包；被管理节点（即数据库，从库和主库所在的节点）只需要安装node包；&lt;strong&gt;管理节点也可以复用数据库实例所在的节点&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 ~]# rpm -ql mha4mysql-manager 
/usr/bin/masterha_check_repl
#检查复制状态
/usr/bin/masterha_check_ssh
#检查ssh状态
/usr/bin/masterha_check_status
#检查集群状态
/usr/bin/masterha_conf_host
#配置节点信息
/usr/bin/masterha_manager
#启动mha的主脚本
/usr/bin/masterha_master_monitor
#主节点监测
/usr/bin/masterha_master_switch
#主节点故障转移
/usr/bin/masterha_secondary_check
/usr/bin/masterha_stop

[root@host1 ~]# rpm -ql mha4mysql-node 
/usr/bin/apply_diff_relay_logs
#应用不同的relay log，使得从节点的relaylog先保持一致
/usr/bin/filter_mysqlbinlog
/usr/bin/purge_relay_logs
/usr/bin/save_binary_logs
#保存主节点binlog

#配置文件
global 为每个appliance提供默认配置，一个application就是一个mysql集群
application 配置的是一个mysql集群的信息
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装node包&#34;&gt;安装node包&lt;/h3&gt;
&lt;p&gt;​	所有mysql 实例所在节点需要安装node包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# yum install perl-DBD-MySQL
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: mirrors.aliyun.com
 * extras: mirrors.aliyun.com
 * updates: mirrors.aliyun.com
Package perl-DBD-MySQL-4.023-6.el7.x86_64 already installed and latest version
Nothing to do
[root@host3 ~]# rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm 
Preparing...                          ################################# [100%]
	package mha4mysql-node-0.56-0.el6.noarch is already installed

# 安装依赖的per-dbd-mysql包，然后安装node包
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装manager包&#34;&gt;安装manager包&lt;/h3&gt;
&lt;p&gt;​	manager节点需要安装依赖包，node包，然后是manager包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 安装4个依赖包
  198  yum install perl-DBD-MySQL
  201  yum install perl-Config-Tiny
  202   yum install perl-Log-Dispatch
  203  yum install perl-Parallel-ForkManager
# 安装node，manager包
rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm
rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mha集群配置&#34;&gt;mha集群配置&lt;/h2&gt;
&lt;p&gt;实验环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;192.168.80.100：管理节点&lt;/li&gt;
&lt;li&gt;80.101：mysql主节点&lt;/li&gt;
&lt;li&gt;80.102：mysql从&lt;/li&gt;
&lt;li&gt;80.103：mysql从&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;mha管理节点安装2个mha包，manager和node包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mha被管理节点，即mysql实例所在节点，部署1一个node包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理节点创建集群配置文件：&lt;strong&gt;包含了mysql主从集群的信息，&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置一个主节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置2个从节点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有节点实现ssh-key验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mha管理节点用脚本测试集群状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;down掉主节点检查，主节点是否成功迁移&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mha管理节点安装2个mha包，manager和node包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 80.100上，安装manager和node以及其依赖包
   
# 安装4个依赖包
  198  yum install perl-DBD-MySQL
  201  yum install perl-Config-Tiny
  202   yum install perl-Log-Dispatch
  203  yum install perl-Parallel-ForkManager
# 安装node，manager包
rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm
rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mha被管理节点，即mysql实例所在节点，部署1一个node包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 101、102、103上都安装node包
   
[root@host3 ~]# yum install perl-DBD-MySQL
[root@host3 ~]# rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理节点创建集群配置文件：&lt;strong&gt;包含了mysql主从集群的信息，&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 100上，配置集群信息配置文件，
[root@host1 mastermha]# cat !$
cat /etc/mastermha/app1.conf
[server_default]
user=mhauser
password=wang
#可以是mysql的root用户，为了安全，可以单独创建已经所有权限的用户
   
manager_workdir=/data/mha/app1/
manager_log=/data/mha/app1/manager.log
remote_workdir=/data/mha/app1/
#管理节点和mysql节点的工作目录和日志文件
   
ssh_user=root
#ssh管理，远程登陆mysql节点启动node包的脚本时的用户，一般是root，（linux的root用户）
   
repl_user=repl
repl_password=wang
#复制用户
ping_interval=1
   
#3个mysql实例节点的信息，只需ip或能解析的主机名即可，因为会自动判断是否主从；
[server1]
hostname=192.1689.80.101
candidate_master=1 #该参数可选，加了表示从节点在重新选出主时，该节点的优先级要高些；
[server2]
hostname=192.168.80.102
candidate_master=2
[server3]
hostname=192.168.80.103
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置一个主节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 ~]# vim /etc/my.cnf
   
[mysqld]
server_id=2
log-bin
skip-name-resolve=on
#修改配置文件
   
MariaDB [(none)]&amp;gt; show master status;
+--------------------+----------+--------------+------------------+
| File               | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+--------------------+----------+--------------+------------------+
| mariadb-bin.000005 |      245 |              |                  |
+--------------------+----------+--------------+------------------+
1 row in set (0.00 sec)
   
MariaDB [(none)]&amp;gt; grant replication slave on *.* to repl@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;
Query OK, 0 rows affected (0.01 sec)
   
MariaDB [(none)]&amp;gt; grant all on *.* to mhauser@&#39;192.168.80.%&#39; identified by &#39;wang&#39;;
Query OK, 0 rows affected (0.00 sec)
#创建复制用户，和拥有几乎所有权限的mhauser用户，（在app1.conf中配置引用）
#此处采用的是干净的新节点做主，如是已经具有数据的主，需要先做数据快照，将其恢复到每个从节点，再从快照出的binlog位置开始复制；
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置2个从节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host3 ~]# vim /etc/my.cnf
[mysqld]
server_id=3
log-bin
skip-name-resolve=on
read_only=on
relay-log=on
   
[root@host4 ~]# cat /etc/my.cnf
[mysqld]
server_id=4
log-bin
read-only
skip_name_resolve=on
relay-log=on
   
#修改配置文件，配置为从节点，
   
#配置change master语句，指明从节点的信息，开始复制的binlog位置，
MariaDB [(none)]&amp;gt; CHANGE MASTER TO
    -&amp;gt;   MASTER_HOST=&#39;192.168.80.101&#39;,
    -&amp;gt;   MASTER_USER=&#39;repl&#39;,
    -&amp;gt;   MASTER_PASSWORD=&#39;wang&#39;,
    -&amp;gt;   MASTER_PORT=3306,
    -&amp;gt;   MASTER_LOG_FILE=&#39;mariadb-bin.000005&#39;,
    -&amp;gt;   MASTER_LOG_POS=245,
    -&amp;gt;   MASTER_CONNECT_RETRY=10;
#开启从节点的2个线程，查看线程状态，都为yes为正常；
MariaDB [(none)]&amp;gt; start slave;
MariaDB [(none)]&amp;gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.80.101
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mariadb-bin.000005
          Read_Master_Log_Pos: 532
               Relay_Log_File: on.000002
                Relay_Log_Pos: 818
        Relay_Master_Log_File: mariadb-bin.000005
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
#主节点做数据修改操作，查看从节点是否相应的同步；
MariaDB [(none)]&amp;gt; create database db2;
Query OK, 1 row affected (0.00 sec)
# 主节点创建2个库，
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| db2                |
| mysql              |
| performance_schema |
| test               |
+--------------------+
#2个从节点都可以看到，同步创建了db1和db2库；
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| db2                |
| mysql              |
| performance_schema |
| test               |
#主从配置完成
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有节点实现ssh-key验证&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 mastermha]# ssh-keygen -t rsa
[root@host1 mastermha]# ssh-copy-id 192.168.80.100
# 生成密钥对，自己对自己做key认证
   
# 将.ssh目录下所有文件，复制到其他3个mysql节点，利用同一套key文件，实现了相互的免密登陆
# 也可以一个个节点的来，但是较为麻烦
[root@host1 mastermha]# scp -r /root/.ssh/* 192.168.80.101:/root/.ssh/
   
[root@host1 mastermha]# scp -r /root/.ssh/* 192.168.80.102:/root/.ssh/
   
[root@host1 mastermha]# scp -r /root/.ssh/* 192.168.80.103:/root/.ssh/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mha管理节点用脚本测试集群状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host1 mastermha]# masterha_check_ssh --conf=/etc/mastermha/app1.conf
Sun Oct  4 16:19:30 2020 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Sun Oct  4 16:19:30 2020 - [info] Reading application default configuration from /etc/mastermha/app1.conf..
Sun Oct  4 16:19:30 2020 - [info] Reading server configuration from /etc/mastermha/app1.conf..
Sun Oct  4 16:19:30 2020 - [info] Starting SSH connection tests..
Sun Oct  4 16:19:31 2020 - [debug] 
Sun Oct  4 16:19:30 2020 - [debug]  Connecting via SSH from root@192.168.80.101(192.168.80.101:22) to 
Sun Oct  4 16:19:33 2020 - [info] All SSH connection tests passed successfully.
   
#注意：没有下划线
[server default]
   
#检查，主从集群复制是否健康
[root@host1 mastermha]# masterha_check_repl --conf=/etc/mastermha/app1.conf
Sun Oct  4 16:21:40 2020 - [info] Slaves settings check done.
Sun Oct  4 16:21:40 2020 - [info] 
192.168.80.101(192.168.80.101:3306) (current master)
 +--192.168.80.102(192.168.80.102:3306)
 +--192.168.80.103(192.168.80.103:3306)
   
Sun Oct  4 16:21:40 2020 - [info] Checking replication health on 192.168.80.102..
Sun Oct  4 16:21:40 2020 - [info]  ok.
Sun Oct  4 16:21:40 2020 - [info] Checking replication health on 192.168.80.103..
Sun Oct  4 16:21:40 2020 - [info]  ok.
Sun Oct  4 16:21:40 2020 - [warning] master_ip_failover_script is not defined.
Sun Oct  4 16:21:40 2020 - [warning] shutdown_script is not defined.
Sun Oct  4 16:21:40 2020 - [info] Got exit code 0 (Not master dead).
   
MySQL Replication Health is OK
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;down掉主节点检查，主节点是否成功迁移&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;#启动脚本，默认前台启动，只能做一次迁移，做完后退出，
#设置合理选项可以一直后台监测
#停止host2的主节点mysql，脚本做完主节点迁移后，退出
root@host2 ~]# systemctl stop mariadb

[root@host1 mastermha]# masterha_manager --conf=/etc/mastermha/app1.conf
Sun Oct  4 16:23:33 2020 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Sun Oct  4 16:23:33 2020 - [info] Reading application default configuration from /etc/mastermha/app1.conf..
Sun Oct  4 16:23:33 2020 - [info] Reading server configuration from /etc/mastermha/app1.conf..

  Creating /data/mha/app1 if not exists..    ok.
  Checking output directory is accessible or not..
   ok.
  Binlog found at /var/lib/mysql, up to mariadb-bin.000005
Sun Oct  4 16:24:19 2020 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.
Sun Oct  4 16:24:19 2020 - [info] Reading application default configuration from /etc/mastermha/app1.conf..
Sun Oct  4 16:24:19 2020 - [info] Reading server configuration from /etc/mastermha/app1.conf..

#host3原来的从节点提升为了主，没有从节点的复制线程了，创建库，也可以同步了host4上；
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| db2                |
| db3                |
| mysql              |
| performance_schema |
| test               |
+--------------------+
7 rows in set (0.00 sec)

MariaDB [(none)]&amp;gt; show slave status\G;
Empty set (0.00 sec)

MariaDB [(none)]&amp;gt; create database db4;
Query OK, 1 row affected (0.00 sec)

# host4指向了新的主节点，host3
MariaDB [(none)]&amp;gt; show slave status\G
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.80.102
                  Master_User: repl
                  Master_Port: 3306
                Connect_Retry: 10
              Master_Log_File: mariadb-bin.000004
          Read_Master_Log_Pos: 245
               Relay_Log_File: on.000002
                Relay_Log_Pos: 531
        Relay_Master_Log_File: mariadb-bin.000004
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| db1                |
| db2                |
| db3                |
| db4                |
| mysql              |
| performance_schema |
| test               |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看过程中日志&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#工作目录下生成的日志，主节点收集的binlog
[root@host1 mastermha]# ll /data/mha/app1/
total 28
-rw-r--r-- 1 root root     0 Oct  4 16:24 app1.failover.complete
-rw-r--r-- 1 root root 23992 Oct  4 16:24 manager.log
-rw-r--r-- 1 root root   264 Oct  4 16:24 saved_master_binlog_from_192.168.80.101_3306_20201004162419.binlog

#日志中记录了主节点失败迁移的过程
[root@host1 mastermha]# cat /data/mha/app1/manager.log 
----- Failover Report -----

app1: MySQL Master failover 192.168.80.101(192.168.80.101:3306) to 192.168.80.102(192.168.80.102:3306) succeeded

Master 192.168.80.101(192.168.80.101:3306) is down!

Check MHA Manager logs at host1.b.com:/data/mha/app1/manager.log for details.

Started automated(non-interactive) failover.
The latest slave 192.168.80.102(192.168.80.102:3306) has all relay logs for recovery.
Selected 192.168.80.102(192.168.80.102:3306) as a new master.
192.168.80.102(192.168.80.102:3306): OK: Applying all logs succeeded.
192.168.80.103(192.168.80.103:3306): This host has the latest relay log events.
Generating relay diff files from the latest slave succeeded.
192.168.80.103(192.168.80.103:3306): OK: Applying all logs succeeded. Slave started, replicating from 192.168.80.102(192.168.80.102:3306)
192.168.80.102(192.168.80.102:3306): Resetting slave info succeeded.
Master failover to 192.168.80.102(192.168.80.102:3306) completed successfully.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;galera-cluster&#34;&gt;galera cluster&lt;/h1&gt;
&lt;p&gt;​	galera cluster：mysql extend with the write set replication,mysql基于写集的复制；&lt;strong&gt;通过wsrep协议实现全局的复制，所有节点均可读写，多主读写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	galera cluster是集成了galera插件的mysql集群，属于mysql集群的高可用解决方案，galeracluster有2个版本，分别是percona xtradb cluster和mariadb cluster，galera集群具有多主特性，&lt;strong&gt;稳健、数据一致性、完整性、高性能方面都较为出色&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://galeracluster.com/products/&#34;&gt;https://galeracluster.com/products/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/what-is-mariadb-galera-cluster/&#34;&gt;https://mariadb.com/kb/en/what-is-mariadb-galera-cluster/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.percona.com/doc/percona-xtradb-cluster/LATEST/intro.html&#34;&gt;https://www.percona.com/doc/percona-xtradb-cluster/LATEST/intro.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;galera-cluster架构&#34;&gt;galera cluster架构&lt;/h2&gt;
&lt;p&gt;​	如下图所示：三个节点组成的msyql集群，3个都是主，都可读可写，3个节点对等，写入某节点的数据会自动同步到其他节点，&lt;strong&gt;不共享任何数据、高度冗余架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201004172056518.png&#34; alt=&#34;image-20201004172056518&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;galera-cluster特性&#34;&gt;galera cluster特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多主：多点读写，&lt;/li&gt;
&lt;li&gt;同步复制：集群之间节点数据同步，没有延迟，&lt;/li&gt;
&lt;li&gt;并发复制：节点apply数据时，并行执行，更好的性能；&lt;/li&gt;
&lt;li&gt;故障切换：出现数据库故障时，其他节点可以继续提供服务&lt;/li&gt;
&lt;li&gt;热插拔：某节点挂掉，监控程序发现的快的话，可以很快切换，不可服务时间很小&lt;/li&gt;
&lt;li&gt;自动节点克隆：新增节点，后下线某节点维护时，不需要手动移动数据，galera cluster会自动拉取在线节点数据，&lt;strong&gt;最终集群数据一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对应用透明：对应用程序透明&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;galera-cluster工作过程&#34;&gt;galera cluster工作过程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20201004172716549.png&#34; alt=&#34;image-20201004172716549&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	数据写入某节点时，由该节点单独处理，一系列操作之后需要提交事务时，事务id和写的数据集会再集群内各个节点进行同步，&lt;strong&gt;每个节点都接受该事务的情况下事务才能提交成功，同时数据集写入每一个节点，也保证了数据的一致性&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;galera-cluster软件组成&#34;&gt;galera cluster软件组成&lt;/h2&gt;
&lt;p&gt;​	galera cluster包含2个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;galera replication library（galera 3）&lt;/li&gt;
&lt;li&gt;wsrep：mysql extend with the write set replication（mysql带有写集复制的扩展）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	wsrep协议的软件实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pxc：percona xtradb cluter&lt;/li&gt;
&lt;li&gt;mariadb galera cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;galera-cluster安装配置&#34;&gt;galera cluster安装配置&lt;/h2&gt;
&lt;p&gt;​	实验采用，mariadb的galera cluster实现，根据官方介绍如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MariaDB Galera Cluster is powered by:

MariaDB Server.

The MySQL-wsrep patch for MySQL Server and MariaDB Server developed by Codership. The patch currently supports only Unix-like operating systems.

The Galera wsrep provider library.
#主要包含mariadb-server wsrep补丁包，wsrep 库包，其中mariadb10.1后，wsrep补丁包被包含进mariadb-server包

In MariaDB 10.1 and later, the MySQL-wsrep patch has been merged into MariaDB Server. This means that the functionality of MariaDB Galera Cluster can be obtained by installing the standard MariaDB Server packages and the Galera wsrep provider library package. The following Galera version corresponds to each MariaDB Server version:

In MariaDB 10.4 and later, MariaDB Galera Cluster uses Galera 4. This means that the MySQL-wsrep patch is version 26 and the Galera wsrep provider library is version 4.
In MariaDB 10.3 and before, MariaDB Galera Cluster uses Galera 3. This means that the MySQL-wsrep patch is version 25 and the Galera wsrep provider library is version 3.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、配置yum源&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#3个节点都配置清华大学的镜像源，采用的是10.3.23版本mariadb
cat &amp;gt; /etc/yum.repos.d/mariadb.repo &amp;lt;&amp;lt;&#39;EOF&#39;
[mariadb]  
name = MariaDB  
baseurl =https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadb-10.3.23/yum/centos7-amd64/
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB  
gpgcheck=1  
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/yum/#installing-mariadb-galera-cluster-with-yum&#34;&gt;https://mariadb.com/kb/en/yum/#installing-mariadb-galera-cluster-with-yum&lt;/a&gt;参考文档，不同版本，需要安装的包会有差异&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#3个节点都下载相同的包
[root@host2 yum.repos.d]# yum install mariadb-server galera mariadb-client mariadb-shared mariadb-backup mariadb-common

Installed:
  MariaDB-compat.x86_64 0:10.3.23-1.el7.centos                                                 MariaDB-server.x86_64 0:10.3.23-1.el7.centos                                                

Dependency Installed:
  MariaDB-client.x86_64 0:10.3.23-1.el7.centos    MariaDB-common.x86_64 0:10.3.23-1.el7.centos    libaio.x86_64 0:0.3.109-13.el7           perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7   
  perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7     perl-DBI.x86_64 0:1.627-4.el7                   perl-Data-Dumper.x86_64 0:2.145-3.el7    perl-IO-Compress.noarch 0:2.061-2.el7          
  perl-Net-Daemon.noarch 0:0.48-5.el7             perl-PlRPC.noarch 0:0.2020-14.el7               rsync.x86_64 0:3.1.2-10.el7             

Replaced:
  mariadb-libs.x86_64 1:5.5.56-2.el7                                                                                                                                        
Complete!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3、配置集群信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 yum.repos.d]# vim /etc/my.cnf.d/server.cnf
#配置该配置文件，必选参数如下，其中smm.so库文件路径，和gcomm的地址需要配置，其他均可保持默认
#参考：https://mariadb.com/kb/en/configuring-mariadb-galera-cluster/

[galera]
# Mandatory settings
wsrep_on=ON
wsrep_provider=/usr/lib64/galera/libgalera_smm.so
wsrep_cluster_address=&amp;quot;gcomm://192.168.80.101,192.168.80.102,192.168.80.103&amp;quot;
binlog_format=row
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2
#
# Allow server to accept connections on all interfaces.
#
bind-address=0.0.0.0

#再复制到其余2个节点
[root@host2 yum.repos.d]# scp /etc/my.cnf.d/server.cnf 192.168.80.102:/etc/my.cnf.d/
[root@host2 yum.repos.d]# scp /etc/my.cnf.d/server.cnf 192.168.80.103:/etc/my.cnf.d/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4、引导第一个节点，然后正常启动其他节点&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#引导第一个节点时，采用如下命令，报错
[root@host2 yum.repos.d]# /etc/init.d/mysql start --wsrep-new-cluster

#根据错误日志排查，根google搜索相关问题，
[root@host2 yum.repos.d]# cat /var/lib/mysql/host2.b.com.err
2020-10-04 19:48:35 0 [Warning] WSREP: last inactive check more than PT1.5S ago (PT3.51172S), skipping check
2020-10-04 19:49:05 0 [Note] WSREP: view((empty))
2020-10-04 19:49:05 0 [ERROR] WSREP: failed to open gcomm backend connection: 110: failed to reach primary view: 110 (Connection timed out)
	 at gcomm/src/pc.cpp:connect():160
2020-10-04 19:49:05 0 [ERROR] WSREP: gcs/src/gcs_core.cpp:gcs_core_open():209: Failed to open backend connection: -110 (Connection timed out)
2020-10-04 19:49:05 0 [ERROR] WSREP: gcs/src/gcs.cpp:gcs_open():1458: Failed to open channel &#39;my_wsrep_cluster&#39; at &#39;gcomm://192.168.80.101,192.168.80.102,192.168.80.103&#39;: -110 (Connection timed out)
2020-10-04 19:49:05 0 [ERROR] WSREP: gcs connect failed: Connection timed out
2020-10-04 19:49:05 0 [ERROR] WSREP: wsrep::connect(gcomm://192.168.80.101,192.168.80.102,192.168.80.103) failed: 7
2020-10-04 19:49:05 0 [ERROR] Aborting

# 参考链接
https://stackoverflow.com/questions/37212127/mariadb-gcomm-backend-connection-failed-110
# 回答如下：
Since MariaDB 10.1.8, systemd is the new init and it affects the way Galera is bootstrapped on RPM and Debian based Linux distributions (in my case Ubuntu 16.04). On previous versions, you would use something like service mysql start --wsrep-new-cluster or service mysqld bootstrap but that doesn&#39;t work any more as it fails with:

[ERROR] WSREP: gcs/src/gcs_core.cpp:gcs_core_open():208: Failed to open backend connection: -110 (Connection timed out)
To fix this issue run:
# 原因为新版本后应该改为新的引导命令，
galera_new_cluster

#采用新的引导命令，后正常；
[root@host2 yum.repos.d]# galera_new_cluster 
[root@host2 yum.repos.d]# ss -nlt
State      Recv-Q Send-Q                                                 Local Address:Port                                                                Peer Address:Port              
LISTEN     0      80                                                                 *:3306                                                                           *:*                                                                    :::*                  

#连入第一个引导节点，查看galera集群的节点数是1，随后用systemctl start mariadb启动其他2个节点后，
集群节点逐步添加到3，集群配置正常
#任何一个节点写测试，其他节点都可以迅速同步，测试也正常，此处省去截图

[root@host2 yum.repos.d]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 10
Server version: 10.3.23-MariaDB MariaDB Server

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

MariaDB [(none)]&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.001 sec)

MariaDB [(none)]&amp;gt; SHOW STATUS LIKE &#39;wsrep_cluster_size&#39;; 
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| wsrep_cluster_size | 1     |
+--------------------+-------+
1 row in set (0.001 sec)

MariaDB [(none)]&amp;gt; SHOW STATUS LIKE &#39;wsrep_cluster_size&#39;; 
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| wsrep_cluster_size | 2     |
+--------------------+-------+
1 row in set (0.001 sec)

MariaDB [(none)]&amp;gt; SHOW STATUS LIKE &#39;wsrep_cluster_size&#39;; 
+--------------------+-------+
| Variable_name      | Value |
+--------------------+-------+
| wsrep_cluster_size | 3     |
+--------------------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;gr组复制&#34;&gt;GR组复制&lt;/h1&gt;
&lt;p&gt;group replication：mysql官方提供的组复制技术，mysql5.7.17后引入，基于paxos算法&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/group-replication.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/group-replication.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;分布式数据库简介&#34;&gt;分布式数据库简介&lt;/h1&gt;
&lt;h2 id=&#34;tidb&#34;&gt;tidb&lt;/h2&gt;
&lt;p&gt;TiDB 是 PingCAP 公司自主设计、研发的开源分布式关系型数据库，是一款同时支持在线事务处理与在线分析处理 (Hybrid Transactional and Analytical Processing, HTAP）的融合型分布式数据库产品，具备水平扩容或者缩容、金融级高可用、实时 HTAP、云原生的分布式数据库、兼容 MySQL 5.7 协议和 MySQL 生态等重要特性。目标是为用户提供一站式 OLTP (Online Transactional Processing)、OLAP (Online Analytical Processing)、HTAP 解决方案。TiDB 适合高可用、强一致要求较高、数据规模较大等各种应用场景。&lt;/p&gt;
&lt;p&gt;类比的有google spaner，依赖的基础协议算法paxos&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/" term="数据库" label="数据库" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/mysql/" term="mysql" label="mysql" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">nginx之安装与程序目录结构介绍</title>
            <link rel="alternate" type="text/html" href="https://latteStudio.github.io/posts/nginx%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/" />
            <id>https://latteStudio.github.io/posts/nginx%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</id>
            <updated>2020-10-19T15:23:23&#43;08:00</updated>
            <published>2020-08-28T12:27:40&#43;00:00</published>
            <author>
                    <name>latteStudio</name>
                    <uri>latteStudio.github.io</uri>
                    <email>boogies@163.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">nginx安装与程序目录结构介绍</summary>
            
                <content type="html">&lt;h1 id=&#34;nginx简介&#34;&gt;nginx简介&lt;/h1&gt;
&lt;p&gt;nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP/UDP proxy server, originally written by &lt;a href=&#34;http://sysoev.ru/en/&#34;&gt;Igor Sysoev&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;官方网址：http://nginx.org/en/&lt;/p&gt;
&lt;p&gt;ps：二次开发版本有tengine和openrestry&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可充当的角色：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高并发web服务器&lt;/li&gt;
&lt;li&gt;邮件服务器&lt;/li&gt;
&lt;li&gt;通用四层代理；七层http、fastcgi、uwscgi等的代理&lt;/li&gt;
&lt;li&gt;内容缓存：https://docs.nginx.com/nginx/admin-guide/content-cache/content-caching/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;特性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化，扩展性好&lt;/li&gt;
&lt;li&gt;高可靠&lt;/li&gt;
&lt;li&gt;支持热部署：在线，重载配置文件、升级回滚主程序、日志文件更换&lt;/li&gt;
&lt;li&gt;低内存消耗：1w个非活动长连接，只需2.5M，（官方doc）&lt;/li&gt;
&lt;li&gt;event-driven，aio，mmap，sendfile，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.9.11开始支持动态 装卸载模块；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心模块：core module&lt;/li&gt;
&lt;li&gt;标准模块：ngx_http_*
&lt;ul&gt;
&lt;li&gt;http core modules 默认带&lt;/li&gt;
&lt;li&gt;http optional modules 需编译时指定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mail模块：ngx_mail_*&lt;/li&gt;
&lt;li&gt;stream模块：ngx_stream_*&lt;/li&gt;
&lt;li&gt;第3方&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工作模型&#34;&gt;工作模型&lt;/h2&gt;
&lt;p&gt;​	nginx采用的是进程工作模型，一个主进程负责管理子进程的启停、配置；&lt;strong&gt;子进程负责监听、接收请求、处理请求、响应请求、断开连接等；进程处理为异步非阻塞，用内存存放阻塞了、不活跃的连接，从而可以处理其他的请求；理论上、内存越大，并发就越高；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;worker进程采用争抢互斥锁获取监听套接字，监听资格；不考虑端口重用技术，同一时刻，只有一个在监听；&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;worker用accept消费了一个已经建立完成的连接，之后；分析请求、读取本地数据、封装响应、发送到send buffer，全过程几乎都是异步非阻塞！连接都放在连接池中，所以并发高！无论是等待准备数据、等待send buffer可写、空闲长连接，nginx的worker进程都不会干等，可以去做其他的请求；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	当某资源准备好，或send buffer可以写了，都会用epoll进行事件通知；从而继续处理请求；&lt;/p&gt;
&lt;h2 id=&#34;程序结构&#34;&gt;程序结构&lt;/h2&gt;
&lt;p&gt;​	由一个master和N个worker进程组成，启用缓存的话，还有2个cache相关的进程；cache loader and cache manager，异步非阻塞，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/boogie96/img/raw/master/img/image-20200824124135953.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;安装&lt;/h1&gt;
&lt;h2 id=&#34;yum安装&#34;&gt;yum安装&lt;/h2&gt;
&lt;p&gt;采用nginx.org提供的repo文件，配置好nginx.repo，直接yum install即可，默认安装的是最新的稳定版；&lt;/p&gt;
&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;
&lt;p&gt;1，下载依赖包、编译工具&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;正则的pcre
压缩的zlib
ssl加密的openssl
全部下devel包；以及编译工具 gcc gcc++

[root@host2 ~]# yum install -y gcc gcc++ zlib-devel openssl-devel pcre-devel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2，下载源码包，解压，进入解压后目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;此处采用1.14版本的nginx

[root@host2 src]# pwd
/usr/local/src
[root@host2 src]# ll
total 992
-rw-r--r-- 1 root root 1015384 Aug 24 09:23 nginx-1.14.2.tar.gz
[root@host2 src]# tar -xf nginx-1.14.2.tar.gz 

[root@host2 nginx-1.14.2]# ll
total 728
drwxr-xr-x 6 1001 1001    326 Aug 27 15:46 auto
-rw-r--r-- 1 1001 1001 288742 Dec  4  2018 CHANGES
-rw-r--r-- 1 1001 1001 440121 Dec  4  2018 CHANGES.ru
drwxr-xr-x 2 1001 1001    168 Aug 27 15:46 conf
-rwxr-xr-x 1 1001 1001   2502 Dec  4  2018 configure
drwxr-xr-x 4 1001 1001     72 Aug 27 15:46 contrib
drwxr-xr-x 2 1001 1001     40 Aug 27 15:46 html
-rw-r--r-- 1 1001 1001   1397 Dec  4  2018 LICENSE
drwxr-xr-x 2 1001 1001     21 Aug 27 15:46 man
-rw-r--r-- 1 1001 1001     49 Dec  4  2018 README
drwxr-xr-x 9 1001 1001     91 Aug 27 15:46 src
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，创建nginx账户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# useradd -u 2000 -r -s /sbin/nologin nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，三步走&lt;/p&gt;
&lt;p&gt;利用自带的configure脚本，根据需要定制makefile文件即可，此处编译进了第三方模块：echo模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 src]# git clone https://github.com/openresty/echo-nginx-module.git
Cloning into &#39;echo-nginx-module&#39;...
从github克隆echo模块的目录到本地

[root@host2 src]# ll
total 992
drwxr-xr-x 6 root root     186 Aug 27 15:51 echo-nginx-module
drwxr-xr-x 8 1001 1001     158 Dec  4  2018 nginx-1.14.2
-rw-r--r-- 1 root root 1015384 Aug 24 09:23 nginx-1.14.2.tar.gz


开始configure，选项如下：
./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_dav_module --with-http_stub_status_module --with-threads --with-file-aio --with-stream_realip_module --with-stream_ssl_module --with-stream --with-pcre --with-http_gzip_static_module --with-http_realip_module --add-module=/usr/local/src/echo-nginx-module

make 
make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4，配置环境变量&lt;/p&gt;
&lt;p&gt;若configure指定的目录带有版本号，可给带有版本号的目录，做软链接，方便以后升级；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln -s /usr/local/nginx-1.14.2/ /usr/local/nginx

[root@host2 nginx]# cat /etc/profile.d/nginx.sh 
export PATH=/usr/local/nginx/sbin:$PATH

[root@host2 nginx-1.14.2]# source /etc/profile.d/nginx.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，启动，访问&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx-1.14.2]# nginx -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@host2 nginx-1.14.2]# nginx 
[root@host2 nginx-1.14.2]# ss -nlt
State      Recv-Q Send-Q Local Address:Port                Peer Address:Port              
LISTEN     0      128                *:80                             *:*                  

[root@host2 nginx-1.14.2]# curl 192.168.80.101
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
...

[root@host2 conf]# ps aux |grep nginx
root       5903  0.0  0.2  46352  2088 ?        Ss   16:06   0:00 nginx: master process nginx
nginx     11956  0.0  0.2  46732  2064 ?        S    16:32   0:00 nginx: worker process
默认一主一worker
主进程身份为root，worker进程身份为nginx，configure时指定的，默认是nobody；
尤其注意：单独配置网页文件目录时，nginx用户对网页目录的权限问题；
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;安装后目录结构&#34;&gt;安装后目录结构&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 nginx-1.14.2]# ll /usr/local/nginx/
total 0
drwxr-xr-x 2 root root 333 Aug 27 15:59 conf
drwxr-xr-x 2 root root  40 Aug 27 15:59 html
drwxr-xr-x 2 root root   6 Aug 27 15:59 logs
drwxr-xr-x 2 root root  19 Aug 27 15:59 sbin

分别为：
配置文件目录
网页文件目录
日志目录：configure时没指定到别的路径，access.log error.log nginx.pid都在里面
主程序目录，就一个nginx可执行程序文件，如果是tengine，还有个dso_install

drwx------ 2 nginx root   6 Aug 27 16:05 client_body_temp
drwxr-xr-x 2 root  root 333 Aug 27 15:59 conf
drwx------ 2 nginx root   6 Aug 27 16:05 fastcgi_temp
drwxr-xr-x 2 root  root  40 Aug 27 15:59 html
drwxr-xr-x 2 root  root  58 Aug 27 16:05 logs
drwx------ 2 nginx root   6 Aug 27 16:05 proxy_temp
drwxr-xr-x 2 root  root  19 Aug 27 15:59 sbin
drwx------ 2 nginx root   6 Aug 27 16:05 scgi_temp
drwx------ 2 nginx root   6 Aug 27 16:05 uwsgi_temp

启动后生成的目录，有：
客户端请求数据、后端fastcgi，scgi，uwsgi传来数据的临时文件存放目录；启用cache时的文件目录；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nginx主程序&#34;&gt;nginx主程序&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;nginx -h

nginx version: nginx/1.14.2
Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]

Options:
  -?,-h         : this help
  -v            : show version and exit
  -V            : show version and configure options then exit
  -t            : test configuration and exit
  -T            : test configuration, dump it and exit
  -q            : suppress non-error messages during configuration testing
  -s signal     : send signal to a master process: stop, quit, reopen, reload
  -p prefix     : set prefix path (default: /usr/local/nginx/)
  -c filename   : set configuration file (default: conf/nginx.conf)
  -g directives : set global directives out of configuration file

-t测试配置文件语法
-v查看版本号
-V查看编译时选项，生产中需要升级时先查看此项，确保兼容之前的编译选项；
-s 发送信号给nginx主程序
	stop 立刻停止
	quit 优雅停止，即先处理完当前的请求
	reopen reopening the log files
	reload 重新读取配置文件，修改配置后，一定！先-t测试语法，然后-s reload重载配置文件
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;配置文件目录&#34;&gt;配置文件目录&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# pwd
/usr/local/nginx/conf

名字自定义，建立不同的目录，用于存放不同类别的配置，在nginx.conf主配置中【合适位置】用include引入；
[root@host2 conf]# mkdir {vhosts,stream,mail,proxy}
[root@host2 conf]# ll -rt
total 68
-rw-r--r-- 1 root root 2223 Aug 27 15:59 koi-win
-rw-r--r-- 1 root root 2837 Aug 27 15:59 koi-utf
-rw-r--r-- 1 root root 3610 Aug 27 15:59 win-utf
-rw-r--r-- 1 root root 5170 Aug 27 15:59 mime.types mime指定多媒体文件扩展的文件，nginx.conf中引入
-rw-r--r-- 1 root root 5170 Aug 27 15:59 mime.types.default
-rw-r--r-- 1 root root 1007 Aug 27 15:59 fastcgi_params
-rw-r--r-- 1 root root 1007 Aug 27 15:59 fastcgi_params.default
-rw-r--r-- 1 root root 1077 Aug 27 15:59 fastcgi.conf
-rw-r--r-- 1 root root 1077 Aug 27 15:59 fastcgi.conf.default
-rw-r--r-- 1 root root  664 Aug 27 15:59 uwsgi_params
-rw-r--r-- 1 root root  664 Aug 27 15:59 uwsgi_params.default
-rw-r--r-- 1 root root  636 Aug 27 15:59 scgi_params
-rw-r--r-- 1 root root  636 Aug 27 15:59 scgi_params.default
-rw-r--r-- 1 root root 2656 Aug 27 15:59 nginx.conf
-rw-r--r-- 1 root root 2656 Aug 27 15:59 nginx.conf.default
drwxr-xr-x 2 root root    6 Aug 27 16:16 vhosts 虚拟主机
drwxr-xr-x 2 root root    6 Aug 27 16:16 stream 四层代理
drwxr-xr-x 2 root root    6 Aug 27 16:16 mail 邮件服务
drwxr-xr-x 2 root root    6 Aug 27 16:18 proxy 七层代理：http，fastcgi等

自带配置举例说明：
-rw-r--r-- 1 root root 1007 Aug 27 15:59 fastcgi_params fastcgi的参数文件
-rw-r--r-- 1 root root 1007 Aug 27 15:59 fastcgi_params.default  fastcgi的参数文件备份
-rw-r--r-- 1 root root 1077 Aug 27 15:59 fastcgi.conf  fastcgi的默认配置文件
fastcgi_params在配置php-fpm转发时，会引用，注意相对路径，用绝对路径更保险；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nginxconf&#34;&gt;nginx.conf&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;花括号&lt;/li&gt;
&lt;li&gt;分号：单行指令配置必须以分号结尾&lt;/li&gt;
&lt;li&gt;变量：可以引用nginx内建变量$varname，参见官网&lt;/li&gt;
&lt;li&gt;set varname value; 自定义变量，其值可引用内建变量、文本，or两者结合&lt;/li&gt;
&lt;li&gt;5大配置段
&lt;ul&gt;
&lt;li&gt;main段：最上面，最外层，无大括号&lt;/li&gt;
&lt;li&gt;event段：控制进程数量，并发数等&lt;/li&gt;
&lt;li&gt;http段：web服务、http反代、fastcgi反代等&lt;/li&gt;
&lt;li&gt;mail：邮件相关&lt;/li&gt;
&lt;li&gt;stream：四层通用代理相关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;默认配置：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@host2 conf]# cat nginx.conf |grep -Ev &amp;quot;^$&amp;quot; |grep -Ev &amp;quot;^[[:space:]]+#&amp;quot;
user  nginx; 
# worker进程启动用户身份

worker_processes  1;
# worker数量

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;

#日志路径和级别，
#pid路径
#相对路径，相对于&amp;lt;prefix&amp;gt;，此处是/usr/local/nginx

# main段

events {
    worker_connections  1024;
    # 每个worker可以接收的最大并发连接数；
    # worker_processes * worker_connections 为理论上nginx并发数
}
# event段

http {
    include       mime.types; mime文件相对路径，
    default_type  application/octet-stream; 默认文件类型，不识别的默认行为是下载；
    sendfile        on; 启用sendfile零复制技术
    keepalive_timeout  65; 长连接时长为65s
    
    # 默认虚拟主机，监听端口80，主机名localhost
    server {
        listen       80;
        server_name  localhost;
        location / {
            root   html; #该location的网页文件所在目录，采用相对路径，此处为/usr/local/nginx/html
            index  index.html index.htm; #当访问的uri为目录时，寻找该目录下index.html或index.htm文件返回，只有前一个不存在时，才寻找后一个；
        }
        error_page   500 502 503 504  /50x.html; 发生500等这4个错误时，返回/50x.html这个uri给客户端；
        location = /50x.html { 
            root   html;
        }
        # 定义/50x.html这个uri在文件系统的路径；此处为/usr/local/nginx/html/50x.html;
    }
}
http段

stream {

}
mail {

}
# stream和mail段，默认无；
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;定义404html&#34;&gt;定义404.html&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 自定义404，覆盖默认的
...
   error_page  404              /404.html;

        location = /404.html {
            root   html;
        }

#
[root@host2 nginx]# echo my-def-404 &amp;gt; html/404.html
[root@host2 nginx]# nginx -s reload


#
[root@host1 ~]# curl 192.168.80.101/saasdfasdfas
my-def-404


# 原来自带的404页面，没找到在哪里，程序里写死了？
[root@host1 ~]# curl 192.168.80.101/saasdfasdfas
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor=&amp;quot;white&amp;quot;&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.14.2&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/%E8%BF%90%E7%BB%B4/" term="运维" label="运维" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/categories/web%E6%9C%8D%E5%8A%A1/" term="web服务" label="web服务" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx/" term="nginx" label="nginx" />
                            
                        
                            
                            
                            
                                <category scheme="https://latteStudio.github.io/tags/nginx%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B/" term="nginx工作模型" label="nginx工作模型" />
                            
                        
                    
                
            
        </entry>
    
</feed>
